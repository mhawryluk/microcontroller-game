
F7_LCD_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d5e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d04  0801d7b4  0801d7b4  0002d7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080204b8  080204b8  000400c8  2**0
                  CONTENTS
  4 .ARM          00000008  080204b8  080204b8  000304b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080204c0  080204c0  000400c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080204c0  080204c0  000304c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080204c4  080204c4  000304c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080204c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cd98  200000c8  08020590  000400c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ce60  08020590  0004ce60  2**0
                  ALLOC
 11 .sdram        000ff000  c0000000  c0000000  00050000  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000623ea  00000000  00000000  000400f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000bcb9  00000000  00000000  000a24e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e98  00000000  00000000  000ae1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003a28  00000000  00000000  000b2038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00042353  00000000  00000000  000b5a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005907d  00000000  00000000  000f7db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001438e5  00000000  00000000  00150e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00294715  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000110b4  00000000  00000000  00294768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801d79c 	.word	0x0801d79c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	0801d79c 	.word	0x0801d79c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <debug_init>:
	{
	}
}

void debug_init(UART_HandleTypeDef* handler)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	pUart = handler;
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <debug_init+0x1c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200000e4 	.word	0x200000e4

080005d8 <debug_chr>:

//send chr via UART (platform dependent)
void debug_chr(char chr)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	#if USE_HAL
	HAL_UART_Transmit(pUart,
	(uint8_t*)&chr, 1, 1000);
	#else
	while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 80005e2:	bf00      	nop
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <debug_chr+0x34>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f0:	2b80      	cmp	r3, #128	; 0x80
 80005f2:	d1f7      	bne.n	80005e4 <debug_chr+0xc>
	pUart->Instance->TDR = (uint16_t)chr;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <debug_chr+0x34>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
	#endif
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200000e4 	.word	0x200000e4

08000610 <__io_putchar>:


int __io_putchar(int ch){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	debug_chr(ch);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffdb 	bl	80005d8 <debug_chr>
	return 0;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <debug_inkey>:

//returns ascii value of last char received
//returns 0 if no char was received since last debug_inkey call
//(platform dependent)
char debug_inkey(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
	uint32_t flags = pUart->Instance->ISR;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <debug_inkey+0x48>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	607b      	str	r3, [r7, #4]
	
	if((flags & UART_FLAG_RXNE) || (flags & UART_FLAG_ORE))
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	2b00      	cmp	r3, #0
 8000644:	d104      	bne.n	8000650 <debug_inkey+0x24>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f003 0308 	and.w	r3, r3, #8
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00a      	beq.n	8000666 <debug_inkey+0x3a>
	{
		__HAL_UART_CLEAR_OREFLAG(pUart);
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <debug_inkey+0x48>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2208      	movs	r2, #8
 8000658:	621a      	str	r2, [r3, #32]
		return (pUart->Instance->RDR);
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <debug_inkey+0x48>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000662:	b2db      	uxtb	r3, r3
 8000664:	e000      	b.n	8000668 <debug_inkey+0x3c>
	}
	else
		return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	200000e4 	.word	0x200000e4

08000678 <debug_txt_limit>:
}

//prints text starting at str
//prints exactly len chars
void debug_txt_limit(const char *str, uint8_t len)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	while(len)
 8000684:	e00a      	b.n	800069c <debug_txt_limit+0x24>
	{
		debug_ascii(*str);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f80e 	bl	80006ac <debug_ascii>
		str++;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
		len--;
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	3b01      	subs	r3, #1
 800069a:	70fb      	strb	r3, [r7, #3]
	while(len)
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f1      	bne.n	8000686 <debug_txt_limit+0xe>
	}
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <debug_ascii>:


//sends char b over pDbgu UART. Replaces values that can change cursor pos. on terminal
void debug_ascii(uint8_t b)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	switch(b)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b0d      	cmp	r3, #13
 80006ba:	d00d      	beq.n	80006d8 <debug_ascii+0x2c>
 80006bc:	2b0d      	cmp	r3, #13
 80006be:	dc0f      	bgt.n	80006e0 <debug_ascii+0x34>
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d005      	beq.n	80006d0 <debug_ascii+0x24>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db0b      	blt.n	80006e0 <debug_ascii+0x34>
 80006c8:	3b08      	subs	r3, #8
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d808      	bhi.n	80006e0 <debug_ascii+0x34>
 80006ce:	e003      	b.n	80006d8 <debug_ascii+0x2c>
	{
		case 0:
		{
			debug_chr('.');	//replace 0 with dot
 80006d0:	202e      	movs	r0, #46	; 0x2e
 80006d2:	f7ff ff81 	bl	80005d8 <debug_chr>
			break;
 80006d6:	e008      	b.n	80006ea <debug_ascii+0x3e>
		case 10:
		case 13:
		{
			//avoid other chars that modify terminal cursor
			//replace them with space
			debug_chr(' ');
 80006d8:	2020      	movs	r0, #32
 80006da:	f7ff ff7d 	bl	80005d8 <debug_chr>
			break;
 80006de:	e004      	b.n	80006ea <debug_ascii+0x3e>
		}
		default:
		{
			debug_chr(b);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff78 	bl	80005d8 <debug_chr>
		}
	}//switch(chr)
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <debug_dump>:




void debug_dump(void *address, uint16_t len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	807b      	strh	r3, [r7, #2]
	uint8_t *buf = address;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	617b      	str	r3, [r7, #20]
	const uint16_t bytesInLine = 16;
 8000704:	2310      	movs	r3, #16
 8000706:	81fb      	strh	r3, [r7, #14]
	const uint16_t spaceBetweenDumpAndASCII = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	81bb      	strh	r3, [r7, #12]
	uint16_t i, counter=len;
 800070c:	887b      	ldrh	r3, [r7, #2]
 800070e:	823b      	strh	r3, [r7, #16]
	
	xprintf("Debug dump @ %08X\n",(unsigned int)address);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4619      	mov	r1, r3
 8000714:	485b      	ldr	r0, [pc, #364]	; (8000884 <debug_dump+0x190>)
 8000716:	f003 fb19 	bl	8003d4c <xprintf>
	
	while(1)
	{
		//insert last line (may be shorter than full line)
		if(counter < bytesInLine)
 800071a:	8a3a      	ldrh	r2, [r7, #16]
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	429a      	cmp	r2, r3
 8000720:	d254      	bcs.n	80007cc <debug_dump+0xd8>
		{
			xprintf("%08X %04X: ",(unsigned int)buf,(unsigned int)(len-counter));
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	887a      	ldrh	r2, [r7, #2]
 8000726:	8a3b      	ldrh	r3, [r7, #16]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	461a      	mov	r2, r3
 800072c:	4856      	ldr	r0, [pc, #344]	; (8000888 <debug_dump+0x194>)
 800072e:	f003 fb0d 	bl	8003d4c <xprintf>
			
			//contents in hex
			for(i=0;i<bytesInLine;i++)
 8000732:	2300      	movs	r3, #0
 8000734:	827b      	strh	r3, [r7, #18]
 8000736:	e01b      	b.n	8000770 <debug_dump+0x7c>
			{
				if(i<counter)
 8000738:	8a7a      	ldrh	r2, [r7, #18]
 800073a:	8a3b      	ldrh	r3, [r7, #16]
 800073c:	429a      	cmp	r2, r3
 800073e:	d208      	bcs.n	8000752 <debug_dump+0x5e>
				{
					xprintf("%02X ",(unsigned int)(buf[i]));
 8000740:	8a7b      	ldrh	r3, [r7, #18]
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	4850      	ldr	r0, [pc, #320]	; (800088c <debug_dump+0x198>)
 800074c:	f003 fafe 	bl	8003d4c <xprintf>
 8000750:	e002      	b.n	8000758 <debug_dump+0x64>
				}
				else
				{
					xprintf("   ");
 8000752:	484f      	ldr	r0, [pc, #316]	; (8000890 <debug_dump+0x19c>)
 8000754:	f003 fafa 	bl	8003d4c <xprintf>
				}
				if(i%8==7) xprintf(" ");
 8000758:	8a7b      	ldrh	r3, [r7, #18]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	b29b      	uxth	r3, r3
 8000760:	2b07      	cmp	r3, #7
 8000762:	d102      	bne.n	800076a <debug_dump+0x76>
 8000764:	484b      	ldr	r0, [pc, #300]	; (8000894 <debug_dump+0x1a0>)
 8000766:	f003 faf1 	bl	8003d4c <xprintf>
			for(i=0;i<bytesInLine;i++)
 800076a:	8a7b      	ldrh	r3, [r7, #18]
 800076c:	3301      	adds	r3, #1
 800076e:	827b      	strh	r3, [r7, #18]
 8000770:	8a7a      	ldrh	r2, [r7, #18]
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	429a      	cmp	r2, r3
 8000776:	d3df      	bcc.n	8000738 <debug_dump+0x44>
			}
			
			//space
			for(i=0;i<spaceBetweenDumpAndASCII;i++)
 8000778:	2300      	movs	r3, #0
 800077a:	827b      	strh	r3, [r7, #18]
 800077c:	e005      	b.n	800078a <debug_dump+0x96>
			{
				xprintf(" ");
 800077e:	4845      	ldr	r0, [pc, #276]	; (8000894 <debug_dump+0x1a0>)
 8000780:	f003 fae4 	bl	8003d4c <xprintf>
			for(i=0;i<spaceBetweenDumpAndASCII;i++)
 8000784:	8a7b      	ldrh	r3, [r7, #18]
 8000786:	3301      	adds	r3, #1
 8000788:	827b      	strh	r3, [r7, #18]
 800078a:	8a7a      	ldrh	r2, [r7, #18]
 800078c:	89bb      	ldrh	r3, [r7, #12]
 800078e:	429a      	cmp	r2, r3
 8000790:	d3f5      	bcc.n	800077e <debug_dump+0x8a>
			}
			
			//contents in ASCII
			for(i=0;i<bytesInLine;i++)
 8000792:	2300      	movs	r3, #0
 8000794:	827b      	strh	r3, [r7, #18]
 8000796:	e011      	b.n	80007bc <debug_dump+0xc8>
			{
				if(i<counter)
 8000798:	8a7a      	ldrh	r2, [r7, #18]
 800079a:	8a3b      	ldrh	r3, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	d207      	bcs.n	80007b0 <debug_dump+0xbc>
				{
					debug_ascii(buf[i]);
 80007a0:	8a7b      	ldrh	r3, [r7, #18]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff7f 	bl	80006ac <debug_ascii>
 80007ae:	e002      	b.n	80007b6 <debug_dump+0xc2>
				}
				else
				{
					debug_chr(' ');
 80007b0:	2020      	movs	r0, #32
 80007b2:	f7ff ff11 	bl	80005d8 <debug_chr>
			for(i=0;i<bytesInLine;i++)
 80007b6:	8a7b      	ldrh	r3, [r7, #18]
 80007b8:	3301      	adds	r3, #1
 80007ba:	827b      	strh	r3, [r7, #18]
 80007bc:	8a7a      	ldrh	r2, [r7, #18]
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d3e9      	bcc.n	8000798 <debug_dump+0xa4>
				}
			}
			
			debug_chr('\n');
 80007c4:	200a      	movs	r0, #10
 80007c6:	f7ff ff07 	bl	80005d8 <debug_chr>
			
			break;
 80007ca:	e054      	b.n	8000876 <debug_dump+0x182>
		}
		
		xprintf("%08X %04X:   ",(unsigned int)buf,(unsigned int)(len-counter));
 80007cc:	6979      	ldr	r1, [r7, #20]
 80007ce:	887a      	ldrh	r2, [r7, #2]
 80007d0:	8a3b      	ldrh	r3, [r7, #16]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	4830      	ldr	r0, [pc, #192]	; (8000898 <debug_dump+0x1a4>)
 80007d8:	f003 fab8 	bl	8003d4c <xprintf>
		
		
		for(i=0;i<bytesInLine;i++)
 80007dc:	2300      	movs	r3, #0
 80007de:	827b      	strh	r3, [r7, #18]
 80007e0:	e013      	b.n	800080a <debug_dump+0x116>
		{
			xprintf("%02X ",(unsigned int)(buf[i]));
 80007e2:	8a7b      	ldrh	r3, [r7, #18]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	4827      	ldr	r0, [pc, #156]	; (800088c <debug_dump+0x198>)
 80007ee:	f003 faad 	bl	8003d4c <xprintf>
			if(i%8==7) debug_chr(' ');
 80007f2:	8a7b      	ldrh	r3, [r7, #18]
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	2b07      	cmp	r3, #7
 80007fc:	d102      	bne.n	8000804 <debug_dump+0x110>
 80007fe:	2020      	movs	r0, #32
 8000800:	f7ff feea 	bl	80005d8 <debug_chr>
		for(i=0;i<bytesInLine;i++)
 8000804:	8a7b      	ldrh	r3, [r7, #18]
 8000806:	3301      	adds	r3, #1
 8000808:	827b      	strh	r3, [r7, #18]
 800080a:	8a7a      	ldrh	r2, [r7, #18]
 800080c:	89fb      	ldrh	r3, [r7, #14]
 800080e:	429a      	cmp	r2, r3
 8000810:	d3e7      	bcc.n	80007e2 <debug_dump+0xee>
		}
		
		//space
		for(i=0;i<spaceBetweenDumpAndASCII;i++)
 8000812:	2300      	movs	r3, #0
 8000814:	827b      	strh	r3, [r7, #18]
 8000816:	e005      	b.n	8000824 <debug_dump+0x130>
		{
			debug_chr(' ');
 8000818:	2020      	movs	r0, #32
 800081a:	f7ff fedd 	bl	80005d8 <debug_chr>
		for(i=0;i<spaceBetweenDumpAndASCII;i++)
 800081e:	8a7b      	ldrh	r3, [r7, #18]
 8000820:	3301      	adds	r3, #1
 8000822:	827b      	strh	r3, [r7, #18]
 8000824:	8a7a      	ldrh	r2, [r7, #18]
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	429a      	cmp	r2, r3
 800082a:	d3f5      	bcc.n	8000818 <debug_dump+0x124>
		}
		
		//contents in ASCII
		for(i=0;i<bytesInLine;i++)
 800082c:	2300      	movs	r3, #0
 800082e:	827b      	strh	r3, [r7, #18]
 8000830:	e009      	b.n	8000846 <debug_dump+0x152>
		{
			debug_ascii(buf[i]);
 8000832:	8a7b      	ldrh	r3, [r7, #18]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	4413      	add	r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff36 	bl	80006ac <debug_ascii>
		for(i=0;i<bytesInLine;i++)
 8000840:	8a7b      	ldrh	r3, [r7, #18]
 8000842:	3301      	adds	r3, #1
 8000844:	827b      	strh	r3, [r7, #18]
 8000846:	8a7a      	ldrh	r2, [r7, #18]
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	429a      	cmp	r2, r3
 800084c:	d3f1      	bcc.n	8000832 <debug_dump+0x13e>
		}
		
		buf += bytesInLine;
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	4413      	add	r3, r2
 8000854:	617b      	str	r3, [r7, #20]
		if(counter >= bytesInLine)
 8000856:	8a3a      	ldrh	r2, [r7, #16]
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	429a      	cmp	r2, r3
 800085c:	d303      	bcc.n	8000866 <debug_dump+0x172>
		{
			counter -= bytesInLine;
 800085e:	8a3a      	ldrh	r2, [r7, #16]
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	823b      	strh	r3, [r7, #16]
		}
		
		debug_chr('\n');
 8000866:	200a      	movs	r0, #10
 8000868:	f7ff feb6 	bl	80005d8 <debug_chr>
			
		if(counter == 0) break;
 800086c:	8a3b      	ldrh	r3, [r7, #16]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d000      	beq.n	8000874 <debug_dump+0x180>
		if(counter < bytesInLine)
 8000872:	e752      	b.n	800071a <debug_dump+0x26>
		if(counter == 0) break;
 8000874:	bf00      	nop
		
	}	//while(counter)
	//footer
	xprintf("End of dump");
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <debug_dump+0x1a8>)
 8000878:	f003 fa68 	bl	8003d4c <xprintf>
	
}
 800087c:	bf00      	nop
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	0801d7b4 	.word	0x0801d7b4
 8000888:	0801d7c8 	.word	0x0801d7c8
 800088c:	0801d7d4 	.word	0x0801d7d4
 8000890:	0801d7dc 	.word	0x0801d7dc
 8000894:	0801d7e0 	.word	0x0801d7e0
 8000898:	0801d7e4 	.word	0x0801d7e4
 800089c:	0801d7f4 	.word	0x0801d7f4

080008a0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4a07      	ldr	r2, [pc, #28]	; (8000900 <vApplicationGetIdleTaskMemory+0x2c>)
 80008e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <vApplicationGetIdleTaskMemory+0x30>)
 80008ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	200000e8 	.word	0x200000e8
 8000904:	200001a0 	.word	0x200001a0

08000908 <USBH_HID_EventCallback>:
extern FATFS SDFatFS;    /* File system object for SD logical drive */
extern FIL SDFile;       /* File object for SD */


void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  xprintf("hid callback: ");
 8000910:	4849      	ldr	r0, [pc, #292]	; (8000a38 <USBH_HID_EventCallback+0x130>)
 8000912:	f003 fa1b 	bl	8003d4c <xprintf>
  HID_TypeTypeDef hiddev = USBH_HID_GetDeviceType(&hUsbHostFS);
 8000916:	4849      	ldr	r0, [pc, #292]	; (8000a3c <USBH_HID_EventCallback+0x134>)
 8000918:	f012 fe62 	bl	80135e0 <USBH_HID_GetDeviceType>
 800091c:	4603      	mov	r3, r0
 800091e:	75fb      	strb	r3, [r7, #23]
  switch(hiddev)
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	2bff      	cmp	r3, #255	; 0xff
 8000924:	d07c      	beq.n	8000a20 <USBH_HID_EventCallback+0x118>
 8000926:	2bff      	cmp	r3, #255	; 0xff
 8000928:	f300 8081 	bgt.w	8000a2e <USBH_HID_EventCallback+0x126>
 800092c:	2b01      	cmp	r3, #1
 800092e:	d002      	beq.n	8000936 <USBH_HID_EventCallback+0x2e>
 8000930:	2b02      	cmp	r3, #2
 8000932:	d024      	beq.n	800097e <USBH_HID_EventCallback+0x76>
      xprintf("unknown\n");
      break;
    }
  }

}
 8000934:	e07b      	b.n	8000a2e <USBH_HID_EventCallback+0x126>
      xprintf("mouse\n");
 8000936:	4842      	ldr	r0, [pc, #264]	; (8000a40 <USBH_HID_EventCallback+0x138>)
 8000938:	f003 fa08 	bl	8003d4c <xprintf>
      HID_MOUSE_Info_TypeDef* pMouseInfo = USBH_HID_GetMouseInfo(phost);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f013 f8a5 	bl	8013a8c <USBH_HID_GetMouseInfo>
 8000942:	60b8      	str	r0, [r7, #8]
      if( pMouseInfo != NULL )
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d06e      	beq.n	8000a28 <USBH_HID_EventCallback+0x120>
        if( pMouseInfo->x )
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d006      	beq.n	8000960 <USBH_HID_EventCallback+0x58>
          moveCursor((int8_t)pMouseInfo->x,0);
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b25b      	sxtb	r3, r3
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f001 fbe8 	bl	8002130 <moveCursor>
        if( pMouseInfo->y )
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	785b      	ldrb	r3, [r3, #1]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d05f      	beq.n	8000a28 <USBH_HID_EventCallback+0x120>
          moveCursor(0,(int8_t)pMouseInfo->y);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	785b      	ldrb	r3, [r3, #1]
 800096c:	b25b      	sxtb	r3, r3
 800096e:	4619      	mov	r1, r3
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fbdd 	bl	8002130 <moveCursor>
          cursorUpd=1;
 8000976:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <USBH_HID_EventCallback+0x13c>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
      break;
 800097c:	e054      	b.n	8000a28 <USBH_HID_EventCallback+0x120>
      xprintf("keyboard\n");
 800097e:	4832      	ldr	r0, [pc, #200]	; (8000a48 <USBH_HID_EventCallback+0x140>)
 8000980:	f003 f9e4 	bl	8003d4c <xprintf>
      HID_KEYBD_Info_TypeDef* pKeyboardInfo = USBH_HID_GetKeybdInfo(phost);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f012 ff67 	bl	8013858 <USBH_HID_GetKeybdInfo>
 800098a:	6138      	str	r0, [r7, #16]
      if( pKeyboardInfo != NULL )
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d04c      	beq.n	8000a2c <USBH_HID_EventCallback+0x124>
        uint8_t ascii_code = USBH_HID_GetASCIICode(pKeyboardInfo);
 8000992:	6938      	ldr	r0, [r7, #16]
 8000994:	f013 f804 	bl	80139a0 <USBH_HID_GetASCIICode>
 8000998:	4603      	mov	r3, r0
 800099a:	73fb      	strb	r3, [r7, #15]
        xprintf(" key[0] is: %02X ",pKeyboardInfo->keys[0]);
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	7a5b      	ldrb	r3, [r3, #9]
 80009a0:	4619      	mov	r1, r3
 80009a2:	482a      	ldr	r0, [pc, #168]	; (8000a4c <USBH_HID_EventCallback+0x144>)
 80009a4:	f003 f9d2 	bl	8003d4c <xprintf>
        xprintf(" ASCII code is %02X, char=%c",ascii_code,ascii_code);
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	7bfa      	ldrb	r2, [r7, #15]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4828      	ldr	r0, [pc, #160]	; (8000a50 <USBH_HID_EventCallback+0x148>)
 80009b0:	f003 f9cc 	bl	8003d4c <xprintf>
        switch( pKeyboardInfo->keys[0] ) {
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	7a5b      	ldrb	r3, [r3, #9]
 80009b8:	3b4f      	subs	r3, #79	; 0x4f
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d82c      	bhi.n	8000a18 <USBH_HID_EventCallback+0x110>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <USBH_HID_EventCallback+0xbc>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009e7 	.word	0x080009e7
 80009c8:	080009d5 	.word	0x080009d5
 80009cc:	08000a09 	.word	0x08000a09
 80009d0:	080009f7 	.word	0x080009f7
            xprintf("(left)");
 80009d4:	481f      	ldr	r0, [pc, #124]	; (8000a54 <USBH_HID_EventCallback+0x14c>)
 80009d6:	f003 f9b9 	bl	8003d4c <xprintf>
            moveCursor(-10,0);
 80009da:	2100      	movs	r1, #0
 80009dc:	f06f 0009 	mvn.w	r0, #9
 80009e0:	f001 fba6 	bl	8002130 <moveCursor>
            break;
 80009e4:	e018      	b.n	8000a18 <USBH_HID_EventCallback+0x110>
            xprintf("(right)");
 80009e6:	481c      	ldr	r0, [pc, #112]	; (8000a58 <USBH_HID_EventCallback+0x150>)
 80009e8:	f003 f9b0 	bl	8003d4c <xprintf>
            moveCursor(10,0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	200a      	movs	r0, #10
 80009f0:	f001 fb9e 	bl	8002130 <moveCursor>
            break;
 80009f4:	e010      	b.n	8000a18 <USBH_HID_EventCallback+0x110>
            xprintf("(up)");
 80009f6:	4819      	ldr	r0, [pc, #100]	; (8000a5c <USBH_HID_EventCallback+0x154>)
 80009f8:	f003 f9a8 	bl	8003d4c <xprintf>
		        moveCursor(0,-10);
 80009fc:	f06f 0109 	mvn.w	r1, #9
 8000a00:	2000      	movs	r0, #0
 8000a02:	f001 fb95 	bl	8002130 <moveCursor>
            break;
 8000a06:	e007      	b.n	8000a18 <USBH_HID_EventCallback+0x110>
            xprintf("(down)");
 8000a08:	4815      	ldr	r0, [pc, #84]	; (8000a60 <USBH_HID_EventCallback+0x158>)
 8000a0a:	f003 f99f 	bl	8003d4c <xprintf>
            moveCursor(0,10);
 8000a0e:	210a      	movs	r1, #10
 8000a10:	2000      	movs	r0, #0
 8000a12:	f001 fb8d 	bl	8002130 <moveCursor>
            break;
 8000a16:	bf00      	nop
        xprintf("\n");
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <USBH_HID_EventCallback+0x15c>)
 8000a1a:	f003 f997 	bl	8003d4c <xprintf>
      break;
 8000a1e:	e005      	b.n	8000a2c <USBH_HID_EventCallback+0x124>
      xprintf("unknown\n");
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <USBH_HID_EventCallback+0x160>)
 8000a22:	f003 f993 	bl	8003d4c <xprintf>
      break;
 8000a26:	e002      	b.n	8000a2e <USBH_HID_EventCallback+0x126>
      break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <USBH_HID_EventCallback+0x126>
      break;
 8000a2c:	bf00      	nop
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	0801d80c 	.word	0x0801d80c
 8000a3c:	2000c76c 	.word	0x2000c76c
 8000a40:	0801d81c 	.word	0x0801d81c
 8000a44:	200003a4 	.word	0x200003a4
 8000a48:	0801d824 	.word	0x0801d824
 8000a4c:	0801d830 	.word	0x0801d830
 8000a50:	0801d844 	.word	0x0801d844
 8000a54:	0801d864 	.word	0x0801d864
 8000a58:	0801d86c 	.word	0x0801d86c
 8000a5c:	0801d874 	.word	0x0801d874
 8000a60:	0801d87c 	.word	0x0801d87c
 8000a64:	0801d884 	.word	0x0801d884
 8000a68:	0801d888 	.word	0x0801d888

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f005 fba1 	bl	80061b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 f865 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f001 f90f 	bl	8001c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a7e:	f001 f897 	bl	8001bb0 <MX_DMA_Init>
  MX_ADC3_Init();
 8000a82:	f000 f91f 	bl	8000cc4 <MX_ADC3_Init>
  MX_CRC_Init();
 8000a86:	f000 f96f 	bl	8000d68 <MX_CRC_Init>
  MX_DCMI_Init();
 8000a8a:	f000 f98f 	bl	8000dac <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000a8e:	f000 f9c1 	bl	8000e14 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000a92:	f001 f8b3 	bl	8001bfc <MX_FMC_Init>
  MX_I2C1_Init();
 8000a96:	f000 f9ef 	bl	8000e78 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000a9a:	f000 fa2d 	bl	8000ef8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000a9e:	f000 fa89 	bl	8000fb4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000aa2:	f000 fb09 	bl	80010b8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000aa6:	f000 fb47 	bl	8001138 <MX_RTC_Init>
  MX_SAI2_Init();
 8000aaa:	f000 fbeb 	bl	8001284 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000aae:	f000 fc91 	bl	80013d4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000ab2:	f000 fcaf 	bl	8001414 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000ab6:	f000 fcdd 	bl	8001474 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000aba:	f000 fd19 	bl	80014f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000abe:	f000 fdc3 	bl	8001648 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ac2:	f000 fe37 	bl	8001734 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ac6:	f000 fead 	bl	8001824 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000aca:	f000 ff2f 	bl	800192c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ace:	f000 ffc9 	bl	8001a64 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000ad2:	f001 f80d 	bl	8001af0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ad6:	f001 f83b 	bl	8001b50 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000ada:	f011 fe8b 	bl	80127f4 <MX_FATFS_Init>
  MX_RNG_Init();
 8000ade:	f000 fb17 	bl	8001110 <MX_RNG_Init>
  MX_IWDG_Init();
 8000ae2:	f000 fa49 	bl	8000f78 <MX_IWDG_Init>
  MX_TIM7_Init();
 8000ae6:	f000 feeb 	bl	80018c0 <MX_TIM7_Init>
  MX_TIM10_Init();
 8000aea:	f000 ff73 	bl	80019d4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000aee:	f000 ff95 	bl	8001a1c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  debug_init(&huart1);
 8000af2:	480f      	ldr	r0, [pc, #60]	; (8000b30 <main+0xc4>)
 8000af4:	f7ff fd60 	bl	80005b8 <debug_init>
  xprintf(ANSI_FG_DEFAULT ANSI_BG_DEFAULT "\n\n" ANSI_BG_BLUE "STM32F746G-Disco says hello!" ANSI_BG_DEFAULT "\n");
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <main+0xc8>)
 8000afa:	f003 f927 	bl	8003d4c <xprintf>
  printf("zwykly printf tez dziala :)\n");
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <main+0xcc>)
 8000b00:	f01b fe4c 	bl	801c79c <puts>
  lcd_start();
 8000b04:	f001 fa98 	bl	8002038 <lcd_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <main+0xd0>)
 8000b0a:	1d3c      	adds	r4, r7, #4
 8000b0c:	461d      	mov	r5, r3
 8000b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f018 f930 	bl	8018d84 <osThreadCreate>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <main+0xd4>)
 8000b28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b2a:	f018 f908 	bl	8018d3e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <main+0xc2>
 8000b30:	20008c34 	.word	0x20008c34
 8000b34:	0801d8d4 	.word	0x0801d8d4
 8000b38:	0801d910 	.word	0x0801d910
 8000b3c:	0801d92c 	.word	0x0801d92c
 8000b40:	2000873c 	.word	0x2000873c

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b0b4      	sub	sp, #208	; 0xd0
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b4e:	2230      	movs	r2, #48	; 0x30
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f01b fcd4 	bl	801c500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2284      	movs	r2, #132	; 0x84
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f01b fcc5 	bl	801c500 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b76:	f00a fb6d 	bl	800b254 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b4f      	ldr	r3, [pc, #316]	; (8000cb8 <SystemClock_Config+0x174>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a4e      	ldr	r2, [pc, #312]	; (8000cb8 <SystemClock_Config+0x174>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b4c      	ldr	r3, [pc, #304]	; (8000cb8 <SystemClock_Config+0x174>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b92:	4b4a      	ldr	r3, [pc, #296]	; (8000cbc <SystemClock_Config+0x178>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a49      	ldr	r2, [pc, #292]	; (8000cbc <SystemClock_Config+0x178>)
 8000b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	4b47      	ldr	r3, [pc, #284]	; (8000cbc <SystemClock_Config+0x178>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000baa:	2309      	movs	r3, #9
 8000bac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bcc:	2319      	movs	r3, #25
 8000bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000bd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000be0:	2309      	movs	r3, #9
 8000be2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00a fc54 	bl	800b498 <HAL_RCC_OscConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bf6:	f001 fdff 	bl	80027f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bfa:	f00a fb3b 	bl	800b274 <HAL_PWREx_EnableOverDrive>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c04:	f001 fdf8 	bl	80027f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c08:	230f      	movs	r3, #15
 8000c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c2e:	2106      	movs	r1, #6
 8000c30:	4618      	mov	r0, r3
 8000c32:	f00a fed5 	bl	800b9e0 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000c3c:	f001 fddc 	bl	80027f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <SystemClock_Config+0x17c>)
 8000c42:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000c44:	2364      	movs	r3, #100	; 0x64
 8000c46:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c62:	2303      	movs	r3, #3
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c82:	2300      	movs	r3, #0
 8000c84:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000c8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f00b f8a5 	bl	800bdf0 <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000cac:	f001 fda4 	bl	80027f8 <Error_Handler>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	37d0      	adds	r7, #208	; 0xd0
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40007000 	.word	0x40007000
 8000cc0:	01b14868 	.word	0x01b14868

08000cc4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000cd8:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <MX_ADC3_Init+0x9c>)
 8000cda:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000cde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ce2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <MX_ADC3_Init+0xa0>)
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000d26:	f005 fa99 	bl	800625c <HAL_ADC_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d30:	f001 fd62 	bl	80027f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d34:	2304      	movs	r3, #4
 8000d36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_ADC3_Init+0x98>)
 8000d46:	f005 facd 	bl	80062e4 <HAL_ADC_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d50:	f001 fd52 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20008b9c 	.word	0x20008b9c
 8000d60:	40012200 	.word	0x40012200
 8000d64:	0f000001 	.word	0x0f000001

08000d68 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <MX_CRC_Init+0x3c>)
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <MX_CRC_Init+0x40>)
 8000d70:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_CRC_Init+0x3c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_CRC_Init+0x3c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_CRC_Init+0x3c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_CRC_Init+0x3c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_CRC_Init+0x3c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_CRC_Init+0x3c>)
 8000d92:	f005 fdcd 	bl	8006930 <HAL_CRC_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d9c:	f001 fd2c 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200089b4 	.word	0x200089b4
 8000da8:	40023000 	.word	0x40023000

08000dac <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <MX_DCMI_Init+0x64>)
 8000db4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_DCMI_Init+0x60>)
 8000dfa:	f005 fe83 	bl	8006b04 <HAL_DCMI_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000e04:	f001 fcf8 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20008be4 	.word	0x20008be4
 8000e10:	50050000 	.word	0x50050000

08000e14 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <MX_DMA2D_Init+0x60>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e4a:	f006 fb49 	bl	80074e0 <HAL_DMA2D_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e54:	f001 fcd0 	bl	80027f8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_DMA2D_Init+0x5c>)
 8000e5c:	f006 fdae 	bl	80079bc <HAL_DMA2D_ConfigLayer>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e66:	f001 fcc7 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20008e64 	.word	0x20008e64
 8000e74:	4002b000 	.word	0x4002b000

08000e78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_I2C1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <MX_I2C1_Init+0x7c>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eb4:	f008 ff94 	bl	8009de0 <HAL_I2C_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ebe:	f001 fc9b 	bl	80027f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ec6:	f009 fca3 	bl	800a810 <HAL_I2CEx_ConfigAnalogFilter>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f001 fc92 	bl	80027f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ed8:	f009 fce5 	bl	800a8a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f001 fc89 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000890c 	.word	0x2000890c
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	00c0eaff 	.word	0x00c0eaff

08000ef8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000efe:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <MX_I2C3_Init+0x78>)
 8000f00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <MX_I2C3_Init+0x7c>)
 8000f06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f34:	f008 ff54 	bl	8009de0 <HAL_I2C_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f3e:	f001 fc5b 	bl	80027f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f46:	f009 fc63 	bl	800a810 <HAL_I2CEx_ConfigAnalogFilter>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f50:	f001 fc52 	bl	80027f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f54:	2100      	movs	r1, #0
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_I2C3_Init+0x74>)
 8000f58:	f009 fca5 	bl	800a8a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f62:	f001 fc49 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20008740 	.word	0x20008740
 8000f70:	40005c00 	.word	0x40005c00
 8000f74:	00c0eaff 	.word	0x00c0eaff

08000f78 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_IWDG_Init+0x34>)
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <MX_IWDG_Init+0x38>)
 8000f80:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_IWDG_Init+0x34>)
 8000f84:	2206      	movs	r2, #6
 8000f86:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_IWDG_Init+0x34>)
 8000f8a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f8e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_IWDG_Init+0x34>)
 8000f92:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f96:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_IWDG_Init+0x34>)
 8000f9a:	f009 fcd0 	bl	800a93e <HAL_IWDG_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000fa4:	f001 fc28 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200089a4 	.word	0x200089a4
 8000fb0:	40003000 	.word	0x40003000

08000fb4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	; 0x38
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2234      	movs	r2, #52	; 0x34
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f01b fa9d 	bl	801c500 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000fc8:	4a3a      	ldr	r2, [pc, #232]	; (80010b4 <MX_LTDC_Init+0x100>)
 8000fca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fcc:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fd2:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000fe4:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000fe6:	2228      	movs	r2, #40	; 0x28
 8000fe8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000fec:	2209      	movs	r2, #9
 8000fee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000ff2:	2235      	movs	r2, #53	; 0x35
 8000ff4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000ff8:	220b      	movs	r2, #11
 8000ffa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8000ffe:	f240 2215 	movw	r2, #533	; 0x215
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8001006:	f240 121b 	movw	r2, #283	; 0x11b
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800100c:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <MX_LTDC_Init+0xfc>)
 800100e:	f240 2235 	movw	r2, #565	; 0x235
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001014:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8001016:	f240 121d 	movw	r2, #285	; 0x11d
 800101a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <MX_LTDC_Init+0xfc>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_LTDC_Init+0xfc>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <MX_LTDC_Init+0xfc>)
 8001036:	f009 fce1 	bl	800a9fc <HAL_LTDC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001040:	f001 fbda 	bl	80027f8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001048:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800104c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001052:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001056:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001058:	2302      	movs	r3, #2
 800105a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800105c:	23ff      	movs	r3, #255	; 0xff
 800105e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001064:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001068:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800106a:	2307      	movs	r3, #7
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800106e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001074:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800107a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_LTDC_Init+0xfc>)
 800109a:	f009 fe41 	bl	800ad20 <HAL_LTDC_ConfigLayer>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80010a4:	f001 fba8 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20008af4 	.word	0x20008af4
 80010b4:	40016800 	.word	0x40016800

080010b8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <MX_QUADSPI_Init+0x54>)
 80010c0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010ca:	2204      	movs	r2, #4
 80010cc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010d0:	2210      	movs	r2, #16
 80010d2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010d6:	2218      	movs	r2, #24
 80010d8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010dc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80010e0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_QUADSPI_Init+0x50>)
 80010f6:	f00a f90d 	bl	800b314 <HAL_QSPI_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001100:	f001 fb7a 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000901c 	.word	0x2000901c
 800110c:	a0001000 	.word	0xa0001000

08001110 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_RNG_Init+0x20>)
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <MX_RNG_Init+0x24>)
 8001118:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_RNG_Init+0x20>)
 800111c:	f00b fb9c 	bl	800c858 <HAL_RNG_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001126:	f001 fb67 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20008d70 	.word	0x20008d70
 8001134:	50060800 	.word	0x50060800

08001138 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b092      	sub	sp, #72	; 0x48
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800113e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	222c      	movs	r2, #44	; 0x2c
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f01b f9d0 	bl	801c500 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001160:	4b46      	ldr	r3, [pc, #280]	; (800127c <MX_RTC_Init+0x144>)
 8001162:	4a47      	ldr	r2, [pc, #284]	; (8001280 <MX_RTC_Init+0x148>)
 8001164:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001166:	4b45      	ldr	r3, [pc, #276]	; (800127c <MX_RTC_Init+0x144>)
 8001168:	2200      	movs	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800116c:	4b43      	ldr	r3, [pc, #268]	; (800127c <MX_RTC_Init+0x144>)
 800116e:	227f      	movs	r2, #127	; 0x7f
 8001170:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001172:	4b42      	ldr	r3, [pc, #264]	; (800127c <MX_RTC_Init+0x144>)
 8001174:	22ff      	movs	r2, #255	; 0xff
 8001176:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001178:	4b40      	ldr	r3, [pc, #256]	; (800127c <MX_RTC_Init+0x144>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800117e:	4b3f      	ldr	r3, [pc, #252]	; (800127c <MX_RTC_Init+0x144>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001184:	4b3d      	ldr	r3, [pc, #244]	; (800127c <MX_RTC_Init+0x144>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800118a:	483c      	ldr	r0, [pc, #240]	; (800127c <MX_RTC_Init+0x144>)
 800118c:	f00b fb8e 	bl	800c8ac <HAL_RTC_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001196:	f001 fb2f 	bl	80027f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800119a:	2300      	movs	r3, #0
 800119c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	482f      	ldr	r0, [pc, #188]	; (800127c <MX_RTC_Init+0x144>)
 80011be:	f00b fc07 	bl	800c9d0 <HAL_RTC_SetTime>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80011c8:	f001 fb16 	bl	80027f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80011d8:	2301      	movs	r3, #1
 80011da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e8:	2201      	movs	r2, #1
 80011ea:	4619      	mov	r1, r3
 80011ec:	4823      	ldr	r0, [pc, #140]	; (800127c <MX_RTC_Init+0x144>)
 80011ee:	f00b fcad 	bl	800cb4c <HAL_RTC_SetDate>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80011f8:	f001 fafe 	bl	80027f8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001200:	2300      	movs	r3, #0
 8001202:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001204:	2300      	movs	r3, #0
 8001206:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001220:	2301      	movs	r3, #1
 8001222:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	2201      	movs	r2, #1
 8001230:	4619      	mov	r1, r3
 8001232:	4812      	ldr	r0, [pc, #72]	; (800127c <MX_RTC_Init+0x144>)
 8001234:	f00b fd32 	bl	800cc9c <HAL_RTC_SetAlarm>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800123e:	f001 fadb 	bl	80027f8 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	2201      	movs	r2, #1
 800124c:	4619      	mov	r1, r3
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <MX_RTC_Init+0x144>)
 8001250:	f00b fd24 	bl	800cc9c <HAL_RTC_SetAlarm>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800125a:	f001 facd 	bl	80027f8 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800125e:	2202      	movs	r2, #2
 8001260:	2100      	movs	r1, #0
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_RTC_Init+0x144>)
 8001264:	f00b fea4 	bl	800cfb0 <HAL_RTCEx_SetTimeStamp>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800126e:	f001 fac3 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3748      	adds	r7, #72	; 0x48
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20008d04 	.word	0x20008d04
 8001280:	40002800 	.word	0x40002800

08001284 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001288:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <MX_SAI2_Init+0x13c>)
 800128a:	4a4e      	ldr	r2, [pc, #312]	; (80013c4 <MX_SAI2_Init+0x140>)
 800128c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800128e:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <MX_SAI2_Init+0x13c>)
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <MX_SAI2_Init+0x13c>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800129a:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <MX_SAI2_Init+0x13c>)
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80012a6:	4b46      	ldr	r3, [pc, #280]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80012ac:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012b2:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80012b8:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80012be:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80012c4:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012c6:	4a40      	ldr	r2, [pc, #256]	; (80013c8 <MX_SAI2_Init+0x144>)
 80012c8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80012d6:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012e4:	2208      	movs	r2, #8
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <MX_SAI2_Init+0x13c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <MX_SAI2_Init+0x13c>)
 8001302:	2200      	movs	r2, #0
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <MX_SAI2_Init+0x13c>)
 8001308:	2200      	movs	r2, #0
 800130a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800130c:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <MX_SAI2_Init+0x13c>)
 800130e:	2201      	movs	r2, #1
 8001310:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <MX_SAI2_Init+0x13c>)
 8001314:	2200      	movs	r2, #0
 8001316:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001318:	4829      	ldr	r0, [pc, #164]	; (80013c0 <MX_SAI2_Init+0x13c>)
 800131a:	f00b fe9f 	bl	800d05c <HAL_SAI_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001324:	f001 fa68 	bl	80027f8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <MX_SAI2_Init+0x148>)
 800132a:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <MX_SAI2_Init+0x14c>)
 800132c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <MX_SAI2_Init+0x148>)
 8001330:	2200      	movs	r2, #0
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <MX_SAI2_Init+0x148>)
 8001336:	2203      	movs	r2, #3
 8001338:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <MX_SAI2_Init+0x148>)
 800133c:	2240      	movs	r2, #64	; 0x40
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_SAI2_Init+0x148>)
 8001342:	2200      	movs	r2, #0
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_SAI2_Init+0x148>)
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_SAI2_Init+0x148>)
 800134e:	2201      	movs	r2, #1
 8001350:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_SAI2_Init+0x148>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_SAI2_Init+0x148>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_SAI2_Init+0x148>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_SAI2_Init+0x148>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_SAI2_Init+0x148>)
 800136c:	2200      	movs	r2, #0
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_SAI2_Init+0x148>)
 8001372:	2200      	movs	r2, #0
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_SAI2_Init+0x148>)
 8001378:	2208      	movs	r2, #8
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_SAI2_Init+0x148>)
 800137e:	2201      	movs	r2, #1
 8001380:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_SAI2_Init+0x148>)
 8001384:	2200      	movs	r2, #0
 8001386:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_SAI2_Init+0x148>)
 800138a:	2200      	movs	r2, #0
 800138c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_SAI2_Init+0x148>)
 8001390:	2200      	movs	r2, #0
 8001392:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <MX_SAI2_Init+0x148>)
 8001396:	2200      	movs	r2, #0
 8001398:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_SAI2_Init+0x148>)
 800139c:	2200      	movs	r2, #0
 800139e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_SAI2_Init+0x148>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_SAI2_Init+0x148>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <MX_SAI2_Init+0x148>)
 80013ae:	f00b fe55 	bl	800d05c <HAL_SAI_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80013b8:	f001 fa1e 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20008888 	.word	0x20008888
 80013c4:	40015c04 	.word	0x40015c04
 80013c8:	0002ee00 	.word	0x0002ee00
 80013cc:	200086b8 	.word	0x200086b8
 80013d0:	40015c24 	.word	0x40015c24

080013d4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_SDMMC1_SD_Init+0x38>)
 80013da:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <MX_SDMMC1_SD_Init+0x3c>)
 80013dc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_SDMMC1_SD_Init+0x38>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_SDMMC1_SD_Init+0x38>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_SDMMC1_SD_Init+0x38>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_SDMMC1_SD_Init+0x38>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <MX_SDMMC1_SD_Init+0x38>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <MX_SDMMC1_SD_Init+0x38>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	200089d8 	.word	0x200089d8
 8001410:	40012c00 	.word	0x40012c00

08001414 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 800141a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800141e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_SPDIFRX_Init+0x5c>)
 800145e:	f00d fb59 	bl	800eb14 <HAL_SPDIFRX_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001468:	f001 f9c6 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000883c 	.word	0x2000883c

08001474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_SPI2_Init+0x74>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <MX_SPI2_Init+0x78>)
 800147c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_SPI2_Init+0x74>)
 8001480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_SPI2_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_SPI2_Init+0x74>)
 800148e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001492:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_SPI2_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_SPI2_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_SPI2_Init+0x74>)
 80014a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_SPI2_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_SPI2_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_SPI2_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_SPI2_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_SPI2_Init+0x74>)
 80014c2:	2207      	movs	r2, #7
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_SPI2_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_SPI2_Init+0x74>)
 80014ce:	2208      	movs	r2, #8
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_SPI2_Init+0x74>)
 80014d4:	f00d fb7a 	bl	800ebcc <HAL_SPI_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014de:	f001 f98b 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000878c 	.word	0x2000878c
 80014ec:	40003800 	.word	0x40003800

080014f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b09a      	sub	sp, #104	; 0x68
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	222c      	movs	r2, #44	; 0x2c
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f01a ffe8 	bl	801c500 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001530:	4b43      	ldr	r3, [pc, #268]	; (8001640 <MX_TIM1_Init+0x150>)
 8001532:	4a44      	ldr	r2, [pc, #272]	; (8001644 <MX_TIM1_Init+0x154>)
 8001534:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <MX_TIM1_Init+0x150>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b40      	ldr	r3, [pc, #256]	; (8001640 <MX_TIM1_Init+0x150>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <MX_TIM1_Init+0x150>)
 8001544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001548:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <MX_TIM1_Init+0x150>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001550:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <MX_TIM1_Init+0x150>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <MX_TIM1_Init+0x150>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800155c:	4838      	ldr	r0, [pc, #224]	; (8001640 <MX_TIM1_Init+0x150>)
 800155e:	f00d fbe0 	bl	800ed22 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001568:	f001 f946 	bl	80027f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001572:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001576:	4619      	mov	r1, r3
 8001578:	4831      	ldr	r0, [pc, #196]	; (8001640 <MX_TIM1_Init+0x150>)
 800157a:	f00d ff27 	bl	800f3cc <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001584:	f001 f938 	bl	80027f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001588:	482d      	ldr	r0, [pc, #180]	; (8001640 <MX_TIM1_Init+0x150>)
 800158a:	f00d fc99 	bl	800eec0 <HAL_TIM_PWM_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001594:	f001 f930 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015a8:	4619      	mov	r1, r3
 80015aa:	4825      	ldr	r0, [pc, #148]	; (8001640 <MX_TIM1_Init+0x150>)
 80015ac:	f00e fb94 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015b6:	f001 f91f 	bl	80027f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ba:	2360      	movs	r3, #96	; 0x60
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c2:	2300      	movs	r3, #0
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	4818      	ldr	r0, [pc, #96]	; (8001640 <MX_TIM1_Init+0x150>)
 80015e0:	f00d fde4 	bl	800f1ac <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015ea:	f001 f905 	bl	80027f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001606:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <MX_TIM1_Init+0x150>)
 8001624:	f00e fbe6 	bl	800fdf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800162e:	f001 f8e3 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM1_Init+0x150>)
 8001634:	f001 ff0a 	bl	800344c <HAL_TIM_MspPostInit>

}
 8001638:	bf00      	nop
 800163a:	3768      	adds	r7, #104	; 0x68
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20008d24 	.word	0x20008d24
 8001644:	40010000 	.word	0x40010000

08001648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	; 0x38
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <MX_TIM2_Init+0xe8>)
 800167c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <MX_TIM2_Init+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <MX_TIM2_Init+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <MX_TIM2_Init+0xe8>)
 8001690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <MX_TIM2_Init+0xe8>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <MX_TIM2_Init+0xe8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a2:	4823      	ldr	r0, [pc, #140]	; (8001730 <MX_TIM2_Init+0xe8>)
 80016a4:	f00d fb3d 	bl	800ed22 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80016ae:	f001 f8a3 	bl	80027f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016bc:	4619      	mov	r1, r3
 80016be:	481c      	ldr	r0, [pc, #112]	; (8001730 <MX_TIM2_Init+0xe8>)
 80016c0:	f00d fe84 	bl	800f3cc <HAL_TIM_ConfigClockSource>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80016ca:	f001 f895 	bl	80027f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM2_Init+0xe8>)
 80016d0:	f00d fbf6 	bl	800eec0 <HAL_TIM_PWM_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016da:	f001 f88d 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4810      	ldr	r0, [pc, #64]	; (8001730 <MX_TIM2_Init+0xe8>)
 80016ee:	f00e faf3 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016f8:	f001 f87e 	bl	80027f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fc:	2360      	movs	r3, #96	; 0x60
 80016fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM2_Init+0xe8>)
 8001714:	f00d fd4a 	bl	800f1ac <HAL_TIM_PWM_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800171e:	f001 f86b 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM2_Init+0xe8>)
 8001724:	f001 fe92 	bl	800344c <HAL_TIM_MspPostInit>

}
 8001728:	bf00      	nop
 800172a:	3738      	adds	r7, #56	; 0x38
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20008ea4 	.word	0x20008ea4

08001734 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08e      	sub	sp, #56	; 0x38
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <MX_TIM3_Init+0xe8>)
 8001768:	4a2d      	ldr	r2, [pc, #180]	; (8001820 <MX_TIM3_Init+0xec>)
 800176a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <MX_TIM3_Init+0xe8>)
 800176e:	2200      	movs	r2, #0
 8001770:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <MX_TIM3_Init+0xe8>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <MX_TIM3_Init+0xe8>)
 800177a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <MX_TIM3_Init+0xe8>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <MX_TIM3_Init+0xe8>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800178c:	4823      	ldr	r0, [pc, #140]	; (800181c <MX_TIM3_Init+0xe8>)
 800178e:	f00d fac8 	bl	800ed22 <HAL_TIM_Base_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001798:	f001 f82e 	bl	80027f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a6:	4619      	mov	r1, r3
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <MX_TIM3_Init+0xe8>)
 80017aa:	f00d fe0f 	bl	800f3cc <HAL_TIM_ConfigClockSource>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017b4:	f001 f820 	bl	80027f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017b8:	4818      	ldr	r0, [pc, #96]	; (800181c <MX_TIM3_Init+0xe8>)
 80017ba:	f00d fb81 	bl	800eec0 <HAL_TIM_PWM_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017c4:	f001 f818 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4811      	ldr	r0, [pc, #68]	; (800181c <MX_TIM3_Init+0xe8>)
 80017d8:	f00e fa7e 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017e2:	f001 f809 	bl	80027f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e6:	2360      	movs	r3, #96	; 0x60
 80017e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <MX_TIM3_Init+0xe8>)
 80017fe:	f00d fcd5 	bl	800f1ac <HAL_TIM_PWM_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001808:	f000 fff6 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <MX_TIM3_Init+0xe8>)
 800180e:	f001 fe1d 	bl	800344c <HAL_TIM_MspPostInit>

}
 8001812:	bf00      	nop
 8001814:	3738      	adds	r7, #56	; 0x38
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20008aa8 	.word	0x20008aa8
 8001820:	40000400 	.word	0x40000400

08001824 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_TIM5_Init+0x94>)
 8001844:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <MX_TIM5_Init+0x98>)
 8001846:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <MX_TIM5_Init+0x94>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM5_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM5_Init+0x94>)
 8001856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800185a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_TIM5_Init+0x94>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_TIM5_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001868:	4813      	ldr	r0, [pc, #76]	; (80018b8 <MX_TIM5_Init+0x94>)
 800186a:	f00d fa5a 	bl	800ed22 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001874:	f000 ffc0 	bl	80027f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_TIM5_Init+0x94>)
 8001886:	f00d fda1 	bl	800f3cc <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001890:	f000 ffb2 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_TIM5_Init+0x94>)
 80018a2:	f00e fa19 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80018ac:	f000 ffa4 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20008a5c 	.word	0x20008a5c
 80018bc:	40000c00 	.word	0x40000c00

080018c0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_TIM7_Init+0x64>)
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <MX_TIM7_Init+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <MX_TIM7_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_TIM7_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_TIM7_Init+0x64>)
 80018e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_TIM7_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <MX_TIM7_Init+0x64>)
 80018f2:	f00d fa16 	bl	800ed22 <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80018fc:	f000 ff7c 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_TIM7_Init+0x64>)
 800190e:	f00e f9e3 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001918:	f000 ff6e 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20008fd0 	.word	0x20008fd0
 8001928:	40001400 	.word	0x40001400

0800192c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <MX_TIM8_Init+0xa0>)
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <MX_TIM8_Init+0xa4>)
 800194e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <MX_TIM8_Init+0xa0>)
 8001952:	2200      	movs	r2, #0
 8001954:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <MX_TIM8_Init+0xa0>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_TIM8_Init+0xa0>)
 800195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001962:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <MX_TIM8_Init+0xa0>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_TIM8_Init+0xa0>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_TIM8_Init+0xa0>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <MX_TIM8_Init+0xa0>)
 8001978:	f00d f9d3 	bl	800ed22 <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001982:	f000 ff39 	bl	80027f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	480e      	ldr	r0, [pc, #56]	; (80019cc <MX_TIM8_Init+0xa0>)
 8001994:	f00d fd1a 	bl	800f3cc <HAL_TIM_ConfigClockSource>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800199e:	f000 ff2b 	bl	80027f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_TIM8_Init+0xa0>)
 80019b4:	f00e f990 	bl	800fcd8 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80019be:	f000 ff1b 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200087f0 	.word	0x200087f0
 80019d0:	40010400 	.word	0x40010400

080019d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_TIM10_Init+0x40>)
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <MX_TIM10_Init+0x44>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <MX_TIM10_Init+0x40>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_TIM10_Init+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <MX_TIM10_Init+0x40>)
 80019ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_TIM10_Init+0x40>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_TIM10_Init+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_TIM10_Init+0x40>)
 8001a00:	f00d f98f 	bl	800ed22 <HAL_TIM_Base_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001a0a:	f000 fef5 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20008958 	.word	0x20008958
 8001a18:	40014400 	.word	0x40014400

08001a1c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_TIM11_Init+0x40>)
 8001a22:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <MX_TIM11_Init+0x44>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <MX_TIM11_Init+0x40>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_TIM11_Init+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <MX_TIM11_Init+0x40>)
 8001a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a38:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_TIM11_Init+0x40>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_TIM11_Init+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_TIM11_Init+0x40>)
 8001a48:	f00d f96b 	bl	800ed22 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001a52:	f000 fed1 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20008cb8 	.word	0x20008cb8
 8001a60:	40014800 	.word	0x40014800

08001a64 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_TIM12_Init+0x84>)
 8001a7e:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <MX_TIM12_Init+0x88>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <MX_TIM12_Init+0x84>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_TIM12_Init+0x84>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_TIM12_Init+0x84>)
 8001a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a94:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_TIM12_Init+0x84>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MX_TIM12_Init+0x84>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001aa2:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <MX_TIM12_Init+0x84>)
 8001aa4:	f00d fa0c 	bl	800eec0 <HAL_TIM_PWM_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001aae:	f000 fea3 	bl	80027f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab2:	2360      	movs	r3, #96	; 0x60
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <MX_TIM12_Init+0x84>)
 8001aca:	f00d fb6f 	bl	800f1ac <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001ad4:	f000 fe90 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <MX_TIM12_Init+0x84>)
 8001ada:	f001 fcb7 	bl	800344c <HAL_TIM_MspPostInit>

}
 8001ade:	bf00      	nop
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20008ef0 	.word	0x20008ef0
 8001aec:	40001800 	.word	0x40001800

08001af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <MX_USART1_UART_Init+0x5c>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART1_UART_Init+0x58>)
 8001b34:	f00e f9fa 	bl	800ff2c <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b3e:	f000 fe5b 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20008c34 	.word	0x20008c34
 8001b4c:	40011000 	.word	0x40011000

08001b50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b56:	4a15      	ldr	r2, [pc, #84]	; (8001bac <MX_USART6_UART_Init+0x5c>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b5c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001b60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART6_UART_Init+0x58>)
 8001b94:	f00e f9ca 	bl	800ff2c <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b9e:	f000 fe2b 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20008de0 	.word	0x20008de0
 8001bac:	40011400 	.word	0x40011400

08001bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_DMA_Init+0x48>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a0f      	ldr	r2, [pc, #60]	; (8001bf8 <MX_DMA_Init+0x48>)
 8001bbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <MX_DMA_Init+0x48>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	203b      	movs	r0, #59	; 0x3b
 8001bd4:	f004 fe82 	bl	80068dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001bd8:	203b      	movs	r0, #59	; 0x3b
 8001bda:	f004 fe9b 	bl	8006914 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2105      	movs	r1, #5
 8001be2:	2045      	movs	r0, #69	; 0x45
 8001be4:	f004 fe7a 	bl	80068dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001be8:	2045      	movs	r0, #69	; 0x45
 8001bea:	f004 fe93 	bl	8006914 <HAL_NVIC_EnableIRQ>

}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]
 8001c12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c16:	4a20      	ldr	r2, [pc, #128]	; (8001c98 <MX_FMC_Init+0x9c>)
 8001c18:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c28:	2204      	movs	r2, #4
 8001c2a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c2e:	2210      	movs	r2, #16
 8001c30:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c3a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001c3e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c4c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001c60:	2307      	movs	r3, #7
 8001c62:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001c68:	2307      	movs	r3, #7
 8001c6a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_FMC_Init+0x98>)
 8001c7e:	f00c feca 	bl	800ea16 <HAL_SDRAM_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001c88:	f000 fdb6 	bl	80027f8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20008f3c 	.word	0x20008f3c
 8001c98:	a0000140 	.word	0xa0000140

08001c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b090      	sub	sp, #64	; 0x40
 8001ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cb2:	4baf      	ldr	r3, [pc, #700]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4aae      	ldr	r2, [pc, #696]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4bac      	ldr	r3, [pc, #688]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cca:	4ba9      	ldr	r3, [pc, #676]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4aa8      	ldr	r2, [pc, #672]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4ba6      	ldr	r3, [pc, #664]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	4ba3      	ldr	r3, [pc, #652]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4aa2      	ldr	r2, [pc, #648]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4ba0      	ldr	r3, [pc, #640]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfa:	4b9d      	ldr	r3, [pc, #628]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a9c      	ldr	r2, [pc, #624]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b9a      	ldr	r3, [pc, #616]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	4b97      	ldr	r3, [pc, #604]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a96      	ldr	r2, [pc, #600]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b94      	ldr	r3, [pc, #592]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	4b91      	ldr	r3, [pc, #580]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b8e      	ldr	r3, [pc, #568]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d42:	4b8b      	ldr	r3, [pc, #556]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a8a      	ldr	r2, [pc, #552]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d5a:	4b85      	ldr	r3, [pc, #532]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a84      	ldr	r2, [pc, #528]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b82      	ldr	r3, [pc, #520]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d72:	4b7f      	ldr	r3, [pc, #508]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a7e      	ldr	r2, [pc, #504]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b7c      	ldr	r3, [pc, #496]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d8a:	4b79      	ldr	r3, [pc, #484]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a78      	ldr	r2, [pc, #480]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d90:	f043 0320 	orr.w	r3, r3, #32
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da2:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a72      	ldr	r2, [pc, #456]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b70      	ldr	r3, [pc, #448]	; (8001f70 <MX_GPIO_Init+0x2d4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2120      	movs	r1, #32
 8001dbe:	486d      	ldr	r0, [pc, #436]	; (8001f74 <MX_GPIO_Init+0x2d8>)
 8001dc0:	f006 fa76 	bl	80082b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OW2_Pin|LCD_DISP_Pin|OW1_Pin, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f241 0109 	movw	r1, #4105	; 0x1009
 8001dca:	486b      	ldr	r0, [pc, #428]	; (8001f78 <MX_GPIO_Init+0x2dc>)
 8001dcc:	f006 fa70 	bl	80082b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARDUINO_D8_GPIO_Port, ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	4868      	ldr	r0, [pc, #416]	; (8001f78 <MX_GPIO_Init+0x2dc>)
 8001dd6:	f006 fa6b 	bl	80082b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2108      	movs	r1, #8
 8001dde:	4867      	ldr	r0, [pc, #412]	; (8001f7c <MX_GPIO_Init+0x2e0>)
 8001de0:	f006 fa66 	bl	80082b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dea:	4865      	ldr	r0, [pc, #404]	; (8001f80 <MX_GPIO_Init+0x2e4>)
 8001dec:	f006 fa60 	bl	80082b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZ_Pin|RS485_DIR_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	21c8      	movs	r1, #200	; 0xc8
 8001df4:	4863      	ldr	r0, [pc, #396]	; (8001f84 <MX_GPIO_Init+0x2e8>)
 8001df6:	f006 fa5b 	bl	80082b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	485e      	ldr	r0, [pc, #376]	; (8001f88 <MX_GPIO_Init+0x2ec>)
 8001e0e:	f005 ff7f 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001e12:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e24:	230a      	movs	r3, #10
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4857      	ldr	r0, [pc, #348]	; (8001f8c <MX_GPIO_Init+0x2f0>)
 8001e30:	f005 ff6e 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	4619      	mov	r1, r3
 8001e48:	4851      	ldr	r0, [pc, #324]	; (8001f90 <MX_GPIO_Init+0x2f4>)
 8001e4a:	f005 ff61 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001e4e:	2340      	movs	r3, #64	; 0x40
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e52:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <MX_GPIO_Init+0x2f8>)
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4844      	ldr	r0, [pc, #272]	; (8001f74 <MX_GPIO_Init+0x2d8>)
 8001e62:	f005 ff55 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e66:	2320      	movs	r3, #32
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	483d      	ldr	r0, [pc, #244]	; (8001f74 <MX_GPIO_Init+0x2d8>)
 8001e7e:	f005 ff47 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OW2_Pin OW1_Pin */
  GPIO_InitStruct.Pin = OW2_Pin|OW1_Pin;
 8001e82:	2309      	movs	r3, #9
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e86:	2311      	movs	r3, #17
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e96:	4619      	mov	r1, r3
 8001e98:	4837      	ldr	r0, [pc, #220]	; (8001f78 <MX_GPIO_Init+0x2dc>)
 8001e9a:	f005 ff39 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001e9e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4830      	ldr	r0, [pc, #192]	; (8001f78 <MX_GPIO_Init+0x2dc>)
 8001eb8:	f005 ff2a 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4831      	ldr	r0, [pc, #196]	; (8001f98 <MX_GPIO_Init+0x2fc>)
 8001ed2:	f005 ff1d 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eea:	4619      	mov	r1, r3
 8001eec:	4823      	ldr	r0, [pc, #140]	; (8001f7c <MX_GPIO_Init+0x2e0>)
 8001eee:	f005 ff0f 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ef2:	2310      	movs	r3, #16
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f02:	4619      	mov	r1, r3
 8001f04:	481b      	ldr	r0, [pc, #108]	; (8001f74 <MX_GPIO_Init+0x2d8>)
 8001f06:	f005 ff03 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001f0a:	f248 0304 	movw	r3, #32772	; 0x8004
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f10:	2300      	movs	r3, #0
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4818      	ldr	r0, [pc, #96]	; (8001f80 <MX_GPIO_Init+0x2e4>)
 8001f20:	f005 fef6 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4810      	ldr	r0, [pc, #64]	; (8001f80 <MX_GPIO_Init+0x2e4>)
 8001f3e:	f005 fee7 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <MX_GPIO_Init+0x2f8>)
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f54:	4619      	mov	r1, r3
 8001f56:	4808      	ldr	r0, [pc, #32]	; (8001f78 <MX_GPIO_Init+0x2dc>)
 8001f58:	f005 feda 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f6c:	e016      	b.n	8001f9c <MX_GPIO_Init+0x300>
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40022800 	.word	0x40022800
 8001f80:	40021c00 	.word	0x40021c00
 8001f84:	40021800 	.word	0x40021800
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40022400 	.word	0x40022400
 8001f94:	10120000 	.word	0x10120000
 8001f98:	40020800 	.word	0x40020800
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f9c:	230a      	movs	r3, #10
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4820      	ldr	r0, [pc, #128]	; (8002028 <MX_GPIO_Init+0x38c>)
 8001fa8:	f005 feb2 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin RS485_DIR_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|RS485_DIR_Pin|EXT_RST_Pin;
 8001fac:	23c8      	movs	r3, #200	; 0xc8
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	481a      	ldr	r0, [pc, #104]	; (800202c <MX_GPIO_Init+0x390>)
 8001fc4:	f005 fea4 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001fc8:	2305      	movs	r3, #5
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001fd8:	230a      	movs	r3, #10
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4813      	ldr	r0, [pc, #76]	; (8002030 <MX_GPIO_Init+0x394>)
 8001fe4:	f005 fe94 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480c      	ldr	r0, [pc, #48]	; (800202c <MX_GPIO_Init+0x390>)
 8001ffc:	f005 fe88 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002000:	2328      	movs	r3, #40	; 0x28
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002010:	230a      	movs	r3, #10
 8002012:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002018:	4619      	mov	r1, r3
 800201a:	4806      	ldr	r0, [pc, #24]	; (8002034 <MX_GPIO_Init+0x398>)
 800201c:	f005 fe78 	bl	8007d10 <HAL_GPIO_Init>

}
 8002020:	bf00      	nop
 8002022:	3740      	adds	r7, #64	; 0x40
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021c00 	.word	0x40021c00
 800202c:	40021800 	.word	0x40021800
 8002030:	40020800 	.word	0x40020800
 8002034:	40020000 	.word	0x40020000

08002038 <lcd_start>:
}
#endif


static void lcd_start(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 800203c:	f002 fbb2 	bl	80047a4 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(LCD_LAYER_FG, (uint32_t)lcd_image_fg);
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <lcd_start+0x6c>)
 8002042:	4619      	mov	r1, r3
 8002044:	2001      	movs	r0, #1
 8002046:	f002 fc41 	bl	80048cc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_LAYER_BG, (uint32_t)lcd_image_bg);
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <lcd_start+0x70>)
 800204c:	4619      	mov	r1, r3
 800204e:	2000      	movs	r0, #0
 8002050:	f002 fc3c 	bl	80048cc <BSP_LCD_LayerDefaultInit>

  BSP_LCD_DisplayOn();
 8002054:	f003 fa5e 	bl	8005514 <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(LCD_LAYER_BG);
 8002058:	2000      	movs	r0, #0
 800205a:	f002 fc97 	bl	800498c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800205e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002062:	f002 fdbb 	bl	8004bdc <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800206a:	f002 fcdd 	bl	8004a28 <BSP_LCD_SetBackColor>

  BSP_LCD_SelectLayer(LCD_LAYER_FG);
 800206e:	2001      	movs	r0, #1
 8002070:	f002 fc8c 	bl	800498c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002078:	f002 fdb0 	bl	8004bdc <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800207c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002080:	f002 fcd2 	bl	8004a28 <BSP_LCD_SetBackColor>

  BSP_LCD_SetColorKeying(LCD_LAYER_FG,LCD_COLOR_WHITE);
 8002084:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002088:	2001      	movs	r0, #1
 800208a:	f002 fca1 	bl	80049d0 <BSP_LCD_SetColorKeying>

  BSP_LCD_SetTransparency(LCD_LAYER_BG,255);
 800208e:	21ff      	movs	r1, #255	; 0xff
 8002090:	2000      	movs	r0, #0
 8002092:	f002 fc8b 	bl	80049ac <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(LCD_LAYER_FG,255);
 8002096:	21ff      	movs	r1, #255	; 0xff
 8002098:	2001      	movs	r0, #1
 800209a:	f002 fc87 	bl	80049ac <BSP_LCD_SetTransparency>
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	c0000000 	.word	0xc0000000
 80020a8:	c007f800 	.word	0xc007f800

080020ac <draw_background>:

void draw_background(void)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
	  //enter your code to draw a beautiful background picture :)

    BSP_LCD_SelectLayer(LCD_LAYER_BG);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f002 fc6a 	bl	800498c <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020bc:	f002 fd8e 	bl	8004bdc <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c4:	f002 fcb0 	bl	8004a28 <BSP_LCD_SetBackColor>

    BSP_LCD_SetTextColor(((uint32_t)0xFFFFFF00));
 80020c8:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80020cc:	f002 fc94 	bl	80049f8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(50, 50 , 40);
 80020d0:	2228      	movs	r2, #40	; 0x28
 80020d2:	2132      	movs	r1, #50	; 0x32
 80020d4:	2032      	movs	r0, #50	; 0x32
 80020d6:	f003 f899 	bl	800520c <BSP_LCD_FillCircle>


    xprintf("%lx\n", BSP_LCD_ReadPixel(50, 60));
 80020da:	213c      	movs	r1, #60	; 0x3c
 80020dc:	2032      	movs	r0, #50	; 0x32
 80020de:	f002 fcd7 	bl	8004a90 <BSP_LCD_ReadPixel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4619      	mov	r1, r3
 80020e6:	480f      	ldr	r0, [pc, #60]	; (8002124 <draw_background+0x78>)
 80020e8:	f001 fe30 	bl	8003d4c <xprintf>

    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80020ec:	480e      	ldr	r0, [pc, #56]	; (8002128 <draw_background+0x7c>)
 80020ee:	f002 fc83 	bl	80049f8 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(150, 150 , 30, 80);
 80020f2:	2350      	movs	r3, #80	; 0x50
 80020f4:	221e      	movs	r2, #30
 80020f6:	2196      	movs	r1, #150	; 0x96
 80020f8:	2096      	movs	r0, #150	; 0x96
 80020fa:	f002 ff23 	bl	8004f44 <BSP_LCD_DrawRect>

    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80020fe:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8002102:	f002 fc79 	bl	80049f8 <BSP_LCD_SetTextColor>

    Point points [4] = {{260, 60}, {380, 60},  {380, 200}, {260, 250}};
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <draw_background+0x80>)
 8002108:	463c      	mov	r4, r7
 800210a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800210c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    BSP_LCD_FillPolygon(points, 4);
 8002110:	463b      	mov	r3, r7
 8002112:	2104      	movs	r1, #4
 8002114:	4618      	mov	r0, r3
 8002116:	f003 f919 	bl	800534c <BSP_LCD_FillPolygon>

}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	bf00      	nop
 8002124:	0801d948 	.word	0x0801d948
 8002128:	ffff0000 	.word	0xffff0000
 800212c:	0801d950 	.word	0x0801d950

08002130 <moveCursor>:

int moveCursor(int xShift, int yShift)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  int newPos_X = cursorX + xShift;
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <moveCursor+0x78>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

  //trim X position to safe area if necessary
  if( newPos_X >= (LCD_X_SIZE-CURSOR_MARGIN-2) ) newPos_X = LCD_X_SIZE-CURSOR_MARGIN-1;
 8002148:	2328      	movs	r3, #40	; 0x28
 800214a:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	db04      	blt.n	800215e <moveCursor+0x2e>
 8002154:	2228      	movs	r2, #40	; 0x28
 8002156:	f240 13df 	movw	r3, #479	; 0x1df
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  cursorX = newPos_X;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <moveCursor+0x78>)
 8002164:	801a      	strh	r2, [r3, #0]

  int newPos_Y = cursorY + yShift;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <moveCursor+0x7c>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]

  //trim Y position to safe area if necessary
  if( newPos_Y >= (LCD_Y_SIZE-CURSOR_MARGIN-2) ) newPos_Y = LCD_Y_SIZE-CURSOR_MARGIN-1;
 8002174:	2328      	movs	r3, #40	; 0x28
 8002176:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	429a      	cmp	r2, r3
 800217e:	db04      	blt.n	800218a <moveCursor+0x5a>
 8002180:	2228      	movs	r2, #40	; 0x28
 8002182:	f240 130f 	movw	r3, #271	; 0x10f
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	60bb      	str	r3, [r7, #8]
  cursorY = newPos_Y;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	b29a      	uxth	r2, r3
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <moveCursor+0x7c>)
 8002190:	801a      	strh	r2, [r3, #0]

  cursorUpd=1;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <moveCursor+0x80>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]

  return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200003a0 	.word	0x200003a0
 80021ac:	200003a2 	.word	0x200003a2
 80021b0:	200003a4 	.word	0x200003a4

080021b4 <putcursor>:


void putcursor(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
  if( cursorUpd )
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <putcursor+0xc8>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d057      	beq.n	8002274 <putcursor+0xc0>
  {
    const int SIZE = 40;
 80021c4:	2328      	movs	r3, #40	; 0x28
 80021c6:	607b      	str	r3, [r7, #4]

    if( cursorX <= SIZE ) cursorX = SIZE+1;
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <putcursor+0xcc>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4293      	cmp	r3, r2
 80021d4:	db05      	blt.n	80021e2 <putcursor+0x2e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b28      	ldr	r3, [pc, #160]	; (8002280 <putcursor+0xcc>)
 80021e0:	801a      	strh	r2, [r3, #0]
    if( cursorX >= (LCD_X_SIZE - SIZE - 1) ) cursorX=LCD_X_SIZE-SIZE-1;
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <putcursor+0xcc>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	f240 13df 	movw	r3, #479	; 0x1df
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	4299      	cmp	r1, r3
 80021f4:	db07      	blt.n	8002206 <putcursor+0x52>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	f240 13df 	movw	r3, #479	; 0x1df
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <putcursor+0xcc>)
 8002204:	801a      	strh	r2, [r3, #0]
    if( cursorY <= SIZE ) cursorY = SIZE+1;
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <putcursor+0xd0>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4293      	cmp	r3, r2
 8002212:	db05      	blt.n	8002220 <putcursor+0x6c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	b29b      	uxth	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <putcursor+0xd0>)
 800221e:	801a      	strh	r2, [r3, #0]
    if( cursorY >= (LCD_Y_SIZE - SIZE - 1) ) cursorY=LCD_Y_SIZE-SIZE-1;
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <putcursor+0xd0>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	f240 130f 	movw	r3, #271	; 0x10f
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	4299      	cmp	r1, r3
 8002232:	db07      	blt.n	8002244 <putcursor+0x90>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	b29a      	uxth	r2, r3
 8002238:	f240 130f 	movw	r3, #271	; 0x10f
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <putcursor+0xd0>)
 8002242:	801a      	strh	r2, [r3, #0]

    BSP_LCD_SelectLayer(LCD_LAYER_FG);
 8002244:	2001      	movs	r0, #1
 8002246:	f002 fba1 	bl	800498c <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800224a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800224e:	f002 fcc5 	bl	8004bdc <BSP_LCD_Clear>
    BSP_LCD_SetTextColor((uint32_t)0x34FF00FF);
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <putcursor+0xd4>)
 8002254:	f002 fbd0 	bl	80049f8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle( cursorX, cursorY , SIZE );
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <putcursor+0xcc>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <putcursor+0xd0>)
 8002260:	8812      	ldrh	r2, [r2, #0]
 8002262:	b291      	uxth	r1, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	b292      	uxth	r2, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f002 ffcf 	bl	800520c <BSP_LCD_FillCircle>

    cursorUpd = 0;
 800226e:	4b03      	ldr	r3, [pc, #12]	; (800227c <putcursor+0xc8>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
  }
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200003a4 	.word	0x200003a4
 8002280:	200003a0 	.word	0x200003a0
 8002284:	200003a2 	.word	0x200003a2
 8002288:	34ff00ff 	.word	0x34ff00ff

0800228c <cursorPressAction>:

void cursorPressAction(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  if(cursorPress)
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <cursorPressAction+0x30>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <cursorPressAction+0x2a>
  {
    xprintf("cursor pressed at X=%03d, Y=%03d\n",cursorX,cursorY);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <cursorPressAction+0x34>)
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <cursorPressAction+0x38>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	4807      	ldr	r0, [pc, #28]	; (80022c8 <cursorPressAction+0x3c>)
 80022ac:	f001 fd4e 	bl	8003d4c <xprintf>


      //...your code here :)
    //end of the sample action

    cursorPress = 0;
 80022b0:	4b02      	ldr	r3, [pc, #8]	; (80022bc <cursorPressAction+0x30>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
  }
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200003a5 	.word	0x200003a5
 80022c0:	200003a0 	.word	0x200003a0
 80022c4:	200003a2 	.word	0x200003a2
 80022c8:	0801d960 	.word	0x0801d960

080022cc <serialTestComm>:


int serialTestComm(char key)
{
 80022cc:	b5b0      	push	{r4, r5, r7, lr}
 80022ce:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4602      	mov	r2, r0
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	701a      	strb	r2, [r3, #0]
  const int CURSOR_MOVE_STEP = 10;
 80022da:	230a      	movs	r3, #10
 80022dc:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  switch(key)
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b77      	cmp	r3, #119	; 0x77
 80022e6:	f300 81b0 	bgt.w	800264a <serialTestComm+0x37e>
 80022ea:	2b48      	cmp	r3, #72	; 0x48
 80022ec:	da06      	bge.n	80022fc <serialTestComm+0x30>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 81b2 	beq.w	8002658 <serialTestComm+0x38c>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	f000 808d 	beq.w	8002414 <serialTestComm+0x148>
 80022fa:	e1a6      	b.n	800264a <serialTestComm+0x37e>
 80022fc:	3b48      	subs	r3, #72	; 0x48
 80022fe:	2b2f      	cmp	r3, #47	; 0x2f
 8002300:	f200 81a3 	bhi.w	800264a <serialTestComm+0x37e>
 8002304:	a201      	add	r2, pc, #4	; (adr r2, 800230c <serialTestComm+0x40>)
 8002306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230a:	bf00      	nop
 800230c:	08002517 	.word	0x08002517
 8002310:	0800264b 	.word	0x0800264b
 8002314:	0800264b 	.word	0x0800264b
 8002318:	0800264b 	.word	0x0800264b
 800231c:	0800264b 	.word	0x0800264b
 8002320:	0800264b 	.word	0x0800264b
 8002324:	0800264b 	.word	0x0800264b
 8002328:	0800264b 	.word	0x0800264b
 800232c:	0800264b 	.word	0x0800264b
 8002330:	0800264b 	.word	0x0800264b
 8002334:	08002517 	.word	0x08002517
 8002338:	0800264b 	.word	0x0800264b
 800233c:	0800264b 	.word	0x0800264b
 8002340:	0800264b 	.word	0x0800264b
 8002344:	0800264b 	.word	0x0800264b
 8002348:	08002425 	.word	0x08002425
 800234c:	0800264b 	.word	0x0800264b
 8002350:	0800264b 	.word	0x0800264b
 8002354:	0800264b 	.word	0x0800264b
 8002358:	0800264b 	.word	0x0800264b
 800235c:	0800264b 	.word	0x0800264b
 8002360:	0800264b 	.word	0x0800264b
 8002364:	0800264b 	.word	0x0800264b
 8002368:	0800264b 	.word	0x0800264b
 800236c:	0800264b 	.word	0x0800264b
 8002370:	080023f1 	.word	0x080023f1
 8002374:	0800264b 	.word	0x0800264b
 8002378:	0800264b 	.word	0x0800264b
 800237c:	08002405 	.word	0x08002405
 8002380:	0800264b 	.word	0x0800264b
 8002384:	0800264b 	.word	0x0800264b
 8002388:	0800264b 	.word	0x0800264b
 800238c:	0800264b 	.word	0x0800264b
 8002390:	0800264b 	.word	0x0800264b
 8002394:	0800264b 	.word	0x0800264b
 8002398:	0800264b 	.word	0x0800264b
 800239c:	0800264b 	.word	0x0800264b
 80023a0:	0800264b 	.word	0x0800264b
 80023a4:	0800264b 	.word	0x0800264b
 80023a8:	0800264b 	.word	0x0800264b
 80023ac:	0800264b 	.word	0x0800264b
 80023b0:	0800264b 	.word	0x0800264b
 80023b4:	0800264b 	.word	0x0800264b
 80023b8:	080023e1 	.word	0x080023e1
 80023bc:	0800264b 	.word	0x0800264b
 80023c0:	0800264b 	.word	0x0800264b
 80023c4:	0800264b 	.word	0x0800264b
 80023c8:	080023cd 	.word	0x080023cd
  {
    case 0: break;

    case 'w':
      moveCursor(0,-CURSOR_MOVE_STEP);
 80023cc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80023d0:	425b      	negs	r3, r3
 80023d2:	4619      	mov	r1, r3
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff feab 	bl	8002130 <moveCursor>
      putcursor();
 80023da:	f7ff feeb 	bl	80021b4 <putcursor>
      break;
 80023de:	e13c      	b.n	800265a <serialTestComm+0x38e>
    case 's':
      moveCursor(0,CURSOR_MOVE_STEP);
 80023e0:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff fea3 	bl	8002130 <moveCursor>
      putcursor();
 80023ea:	f7ff fee3 	bl	80021b4 <putcursor>
      break;
 80023ee:	e134      	b.n	800265a <serialTestComm+0x38e>
    case 'a':
      moveCursor(-CURSOR_MOVE_STEP,0);
 80023f0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80023f4:	425b      	negs	r3, r3
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fe99 	bl	8002130 <moveCursor>
      putcursor();
 80023fe:	f7ff fed9 	bl	80021b4 <putcursor>
      break;
 8002402:	e12a      	b.n	800265a <serialTestComm+0x38e>
    case 'd':
      moveCursor(CURSOR_MOVE_STEP,0);
 8002404:	2100      	movs	r1, #0
 8002406:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 800240a:	f7ff fe91 	bl	8002130 <moveCursor>
      putcursor();
 800240e:	f7ff fed1 	bl	80021b4 <putcursor>
      break;
 8002412:	e122      	b.n	800265a <serialTestComm+0x38e>
    case ' ':
      cursorPress = 1;
 8002414:	4b94      	ldr	r3, [pc, #592]	; (8002668 <serialTestComm+0x39c>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
      putcursor();
 800241a:	f7ff fecb 	bl	80021b4 <putcursor>
      cursorPressAction();
 800241e:	f7ff ff35 	bl	800228c <cursorPressAction>
      break;
 8002422:	e11a      	b.n	800265a <serialTestComm+0x38e>

    case 'W':
    {
 8002424:	466b      	mov	r3, sp
 8002426:	461d      	mov	r5, r3
      xprintf("write-append test\n");
 8002428:	4890      	ldr	r0, [pc, #576]	; (800266c <serialTestComm+0x3a0>)
 800242a:	f001 fc8f 	bl	8003d4c <xprintf>
      FRESULT res;
      UINT bw;
      FIL file;
      const int TEXTBUF_SIZE = 128;
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
      char text[TEXTBUF_SIZE];
 8002434:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002438:	3b01      	subs	r3, #1
 800243a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800243e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002442:	4618      	mov	r0, r3
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	00cb      	lsls	r3, r1, #3
 8002452:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002456:	00c2      	lsls	r2, r0, #3
 8002458:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800245c:	4618      	mov	r0, r3
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	00cb      	lsls	r3, r1, #3
 800246c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002470:	00c2      	lsls	r2, r0, #3
 8002472:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002476:	3307      	adds	r3, #7
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	ebad 0d03 	sub.w	sp, sp, r3
 8002480:	466b      	mov	r3, sp
 8002482:	3300      	adds	r3, #0
 8002484:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
      sprintf(text,"Linia tekstu. Czas systemowy to: %08d\n",(int)xTaskGetTickCount());
 8002488:	f8d7 4254 	ldr.w	r4, [r7, #596]	; 0x254
 800248c:	f018 fa30 	bl	801a8f0 <xTaskGetTickCount>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	4976      	ldr	r1, [pc, #472]	; (8002670 <serialTestComm+0x3a4>)
 8002496:	4620      	mov	r0, r4
 8002498:	f01a fa02 	bl	801c8a0 <siprintf>
      xprintf("f_open... ");
 800249c:	4875      	ldr	r0, [pc, #468]	; (8002674 <serialTestComm+0x3a8>)
 800249e:	f001 fc55 	bl	8003d4c <xprintf>
      res = f_open(&file,"0:/test.txt",FA_WRITE|FA_OPEN_APPEND);
 80024a2:	f107 030c 	add.w	r3, r7, #12
 80024a6:	2232      	movs	r2, #50	; 0x32
 80024a8:	4973      	ldr	r1, [pc, #460]	; (8002678 <serialTestComm+0x3ac>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f015 fcf4 	bl	8017e98 <f_open>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
      xprintf("res=%d\n",res);
 80024b6:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80024ba:	4619      	mov	r1, r3
 80024bc:	486f      	ldr	r0, [pc, #444]	; (800267c <serialTestComm+0x3b0>)
 80024be:	f001 fc45 	bl	8003d4c <xprintf>
      if(res) break;
 80024c2:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d122      	bne.n	8002510 <serialTestComm+0x244>
      xprintf("f_write... ");
 80024ca:	486d      	ldr	r0, [pc, #436]	; (8002680 <serialTestComm+0x3b4>)
 80024cc:	f001 fc3e 	bl	8003d4c <xprintf>
      res = f_write(&file,text,strlen(text),&bw);
 80024d0:	f8d7 4254 	ldr.w	r4, [r7, #596]	; 0x254
 80024d4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd fe99 	bl	8000210 <strlen>
 80024de:	4602      	mov	r2, r0
 80024e0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80024e4:	f107 000c 	add.w	r0, r7, #12
 80024e8:	4621      	mov	r1, r4
 80024ea:	f016 f81c 	bl	8018526 <f_write>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
      xprintf("res=%d, bw=%d\n",res,bw);
 80024f4:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80024f8:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80024fc:	4619      	mov	r1, r3
 80024fe:	4861      	ldr	r0, [pc, #388]	; (8002684 <serialTestComm+0x3b8>)
 8002500:	f001 fc24 	bl	8003d4c <xprintf>
      f_close(&file);
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	4618      	mov	r0, r3
 800250a:	f016 fa39 	bl	8018980 <f_close>
      break;
 800250e:	e000      	b.n	8002512 <serialTestComm+0x246>
      if(res) break;
 8002510:	bf00      	nop
 8002512:	46ad      	mov	sp, r5
 8002514:	e0a1      	b.n	800265a <serialTestComm+0x38e>
    }

    case 'R': //read and disp in text-only mode
    case 'H': //read and disp in text-hex mode
    {
 8002516:	466b      	mov	r3, sp
 8002518:	461c      	mov	r4, r3
      xprintf("read test!\n");
 800251a:	485b      	ldr	r0, [pc, #364]	; (8002688 <serialTestComm+0x3bc>)
 800251c:	f001 fc16 	bl	8003d4c <xprintf>
      FIL file;
      FRESULT res = f_open(&file,"0:/test.txt",FA_READ);
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	2201      	movs	r2, #1
 8002526:	4954      	ldr	r1, [pc, #336]	; (8002678 <serialTestComm+0x3ac>)
 8002528:	4618      	mov	r0, r3
 800252a:	f015 fcb5 	bl	8017e98 <f_open>
 800252e:	4603      	mov	r3, r0
 8002530:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
      xprintf("f_open res=%d\n",res);
 8002534:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8002538:	4619      	mov	r1, r3
 800253a:	4854      	ldr	r0, [pc, #336]	; (800268c <serialTestComm+0x3c0>)
 800253c:	f001 fc06 	bl	8003d4c <xprintf>
      if(res) break;
 8002540:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8002544:	2b00      	cmp	r3, #0
 8002546:	d17d      	bne.n	8002644 <serialTestComm+0x378>

      const uint32_t BUF_SIZE = 64;
 8002548:	2340      	movs	r3, #64	; 0x40
 800254a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
      char buf[BUF_SIZE];
 800254e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002552:	3b01      	subs	r3, #1
 8002554:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8002558:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800255c:	4618      	mov	r0, r3
 800255e:	f04f 0100 	mov.w	r1, #0
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	00cb      	lsls	r3, r1, #3
 800256c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002570:	00c2      	lsls	r2, r0, #3
 8002572:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002576:	4618      	mov	r0, r3
 8002578:	f04f 0100 	mov.w	r1, #0
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	00cb      	lsls	r3, r1, #3
 8002586:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800258a:	00c2      	lsls	r2, r0, #3
 800258c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002590:	3307      	adds	r3, #7
 8002592:	08db      	lsrs	r3, r3, #3
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	ebad 0d03 	sub.w	sp, sp, r3
 800259a:	466b      	mov	r3, sp
 800259c:	3300      	adds	r3, #0
 800259e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
      int dispSizeLimit = 4*1024;
 80025a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

      UINT br;
      xprintf(ANSI_FG_YELLOW "File contents:" ANSI_FG_DEFAULT "\n");
 80025aa:	4839      	ldr	r0, [pc, #228]	; (8002690 <serialTestComm+0x3c4>)
 80025ac:	f001 fbce 	bl	8003d4c <xprintf>
      do
      {
      xprintf("\n" ANSI_FG_YELLOW "f_read...");
 80025b0:	4838      	ldr	r0, [pc, #224]	; (8002694 <serialTestComm+0x3c8>)
 80025b2:	f001 fbcb 	bl	8003d4c <xprintf>
      res = f_read(&file,buf,BUF_SIZE,&br);
 80025b6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80025ba:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80025be:	f107 000c 	add.w	r0, r7, #12
 80025c2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80025c6:	f015 fe40 	bl	801824a <f_read>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
      xprintf("f_read res=%d" ANSI_FG_DEFAULT "\n",res);
 80025d0:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 80025d4:	4619      	mov	r1, r3
 80025d6:	4830      	ldr	r0, [pc, #192]	; (8002698 <serialTestComm+0x3cc>)
 80025d8:	f001 fbb8 	bl	8003d4c <xprintf>

      if((res == FR_OK) && (br))
 80025dc:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d129      	bne.n	8002638 <serialTestComm+0x36c>
 80025e4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d025      	beq.n	8002638 <serialTestComm+0x36c>
      {
        if(key=='h')
 80025ec:	1dfb      	adds	r3, r7, #7
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b68      	cmp	r3, #104	; 0x68
 80025f2:	d109      	bne.n	8002608 <serialTestComm+0x33c>
        {
          debug_dump(buf,br);
 80025f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80025f8:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80025fc:	b292      	uxth	r2, r2
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe f877 	bl	80006f4 <debug_dump>
 8002606:	e008      	b.n	800261a <serialTestComm+0x34e>
        }
        else
        {
          debug_txt_limit(buf,br);
 8002608:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800260c:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe f82f 	bl	8000678 <debug_txt_limit>
        }
        dispSizeLimit -= br;
 800261a:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800261e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
      }
      else
      {
        break;
      }
      }while( (br>0) && (dispSizeLimit > 0) );
 8002628:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <serialTestComm+0x36c>
 8002630:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002634:	2b00      	cmp	r3, #0
 8002636:	dcbb      	bgt.n	80025b0 <serialTestComm+0x2e4>
      f_close(&file);
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	4618      	mov	r0, r3
 800263e:	f016 f99f 	bl	8018980 <f_close>
      break;
 8002642:	e000      	b.n	8002646 <serialTestComm+0x37a>
      if(res) break;
 8002644:	bf00      	nop
 8002646:	46a5      	mov	sp, r4
 8002648:	e007      	b.n	800265a <serialTestComm+0x38e>
    }


    default:
    {
      xprintf("not supported command: %c\n",key);
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	4812      	ldr	r0, [pc, #72]	; (800269c <serialTestComm+0x3d0>)
 8002652:	f001 fb7b 	bl	8003d4c <xprintf>
      break;
 8002656:	e000      	b.n	800265a <serialTestComm+0x38e>
    case 0: break;
 8002658:	bf00      	nop
    }
  }
  return 0;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8002662:	46bd      	mov	sp, r7
 8002664:	bdb0      	pop	{r4, r5, r7, pc}
 8002666:	bf00      	nop
 8002668:	200003a5 	.word	0x200003a5
 800266c:	0801d984 	.word	0x0801d984
 8002670:	0801d998 	.word	0x0801d998
 8002674:	0801d9c0 	.word	0x0801d9c0
 8002678:	0801d9cc 	.word	0x0801d9cc
 800267c:	0801d9d8 	.word	0x0801d9d8
 8002680:	0801d9e0 	.word	0x0801d9e0
 8002684:	0801d9ec 	.word	0x0801d9ec
 8002688:	0801d9fc 	.word	0x0801d9fc
 800268c:	0801da08 	.word	0x0801da08
 8002690:	0801da18 	.word	0x0801da18
 8002694:	0801da38 	.word	0x0801da38
 8002698:	0801da4c 	.word	0x0801da4c
 800269c:	0801da64 	.word	0x0801da64

080026a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08e      	sub	sp, #56	; 0x38
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80026a8:	f010 fb2e 	bl	8012d08 <MX_LWIP_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80026ac:	f019 fadc 	bl	801bc68 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  draw_background();
 80026b0:	f7ff fcfc 	bl	80020ac <draw_background>

  uint8_t status = BSP_TS_Init(LCD_X_SIZE, LCD_Y_SIZE);
 80026b4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80026b8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80026bc:	f003 fae4 	bl	8005c88 <BSP_TS_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if( status != TS_OK )
 80026c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <StartDefaultTask+0x34>
    xprintf("TS init error\n");
 80026ce:	4833      	ldr	r0, [pc, #204]	; (800279c <StartDefaultTask+0xfc>)
 80026d0:	f001 fb3c 	bl	8003d4c <xprintf>
  static ApplicationTypeDef previousAppli_state;

  /* Infinite loop */
  for(;;)
  {
    HAL_IWDG_Refresh(&hiwdg);
 80026d4:	4832      	ldr	r0, [pc, #200]	; (80027a0 <StartDefaultTask+0x100>)
 80026d6:	f008 f981 	bl	800a9dc <HAL_IWDG_Refresh>
    vTaskDelay(5);
 80026da:	2005      	movs	r0, #5
 80026dc:	f017 ffb8 	bl	801a650 <vTaskDelay>
    LD1_TOGGLE; /* Just blink to say "I'm alive" */
 80026e0:	2102      	movs	r1, #2
 80026e2:	4830      	ldr	r0, [pc, #192]	; (80027a4 <StartDefaultTask+0x104>)
 80026e4:	f005 fdfd 	bl	80082e2 <HAL_GPIO_TogglePin>

    //a recommended line to read the touch screen :)

    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 fb0b 	bl	8005d08 <BSP_TS_GetState>
        if( TS_State.touchDetected )
 80026f2:	7a3b      	ldrb	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <StartDefaultTask+0x6a>
        {
          cursorX = TS_State.touchX[0];
 80026f8:	897a      	ldrh	r2, [r7, #10]
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <StartDefaultTask+0x108>)
 80026fc:	801a      	strh	r2, [r3, #0]
          cursorY = TS_State.touchY[0];
 80026fe:	8aba      	ldrh	r2, [r7, #20]
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <StartDefaultTask+0x10c>)
 8002702:	801a      	strh	r2, [r3, #0]
          cursorUpd = 1;
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <StartDefaultTask+0x110>)
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
        }
        putcursor();
 800270a:	f7ff fd53 	bl	80021b4 <putcursor>

    char key = debug_inkey();
 800270e:	f7fd ff8d 	bl	800062c <debug_inkey>
 8002712:	4603      	mov	r3, r0
 8002714:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    serialTestComm(key);
 8002718:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fdd5 	bl	80022cc <serialTestComm>

    if( previousAppli_state != Appli_state )
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <StartDefaultTask+0x114>)
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <StartDefaultTask+0x118>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d0d2      	beq.n	80026d4 <StartDefaultTask+0x34>
    {

      if( Appli_state == APPLICATION_READY )
 800272e:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <StartDefaultTask+0x118>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d12c      	bne.n	8002790 <StartDefaultTask+0xf0>
      {
        HID_TypeTypeDef hiddev = USBH_HID_GetDeviceType(&hUsbHostFS);
 8002736:	4821      	ldr	r0, [pc, #132]	; (80027bc <StartDefaultTask+0x11c>)
 8002738:	f010 ff52 	bl	80135e0 <USBH_HID_GetDeviceType>
 800273c:	4603      	mov	r3, r0
 800273e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        xprintf("Appli_state is now APPLICATION_READY, detected device: ");
 8002742:	481f      	ldr	r0, [pc, #124]	; (80027c0 <StartDefaultTask+0x120>)
 8002744:	f001 fb02 	bl	8003d4c <xprintf>
        switch(hiddev)
 8002748:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800274c:	2bff      	cmp	r3, #255	; 0xff
 800274e:	d014      	beq.n	800277a <StartDefaultTask+0xda>
 8002750:	2bff      	cmp	r3, #255	; 0xff
 8002752:	dc1e      	bgt.n	8002792 <StartDefaultTask+0xf2>
 8002754:	2b01      	cmp	r3, #1
 8002756:	d002      	beq.n	800275e <StartDefaultTask+0xbe>
 8002758:	2b02      	cmp	r3, #2
 800275a:	d007      	beq.n	800276c <StartDefaultTask+0xcc>
 800275c:	e019      	b.n	8002792 <StartDefaultTask+0xf2>
        {
          case HID_MOUSE:
          {
            xprintf("mouse\n");
 800275e:	4819      	ldr	r0, [pc, #100]	; (80027c4 <StartDefaultTask+0x124>)
 8002760:	f001 faf4 	bl	8003d4c <xprintf>
            USBH_HID_MouseInit(&hUsbHostFS);
 8002764:	4815      	ldr	r0, [pc, #84]	; (80027bc <StartDefaultTask+0x11c>)
 8002766:	f011 f947 	bl	80139f8 <USBH_HID_MouseInit>
            break;
 800276a:	e012      	b.n	8002792 <StartDefaultTask+0xf2>
          }
          case HID_KEYBOARD:
          {
            xprintf("keyboard\n");
 800276c:	4816      	ldr	r0, [pc, #88]	; (80027c8 <StartDefaultTask+0x128>)
 800276e:	f001 faed 	bl	8003d4c <xprintf>
            USBH_HID_KeybdInit(&hUsbHostFS);
 8002772:	4812      	ldr	r0, [pc, #72]	; (80027bc <StartDefaultTask+0x11c>)
 8002774:	f011 f818 	bl	80137a8 <USBH_HID_KeybdInit>
            break;
 8002778:	e00b      	b.n	8002792 <StartDefaultTask+0xf2>
          }
          case HID_UNKNOWN:
          {
            xprintf("unknown or not supported by the firmware driver.\n");
 800277a:	4814      	ldr	r0, [pc, #80]	; (80027cc <StartDefaultTask+0x12c>)
 800277c:	f001 fae6 	bl	8003d4c <xprintf>
            vTaskDelay(1000);
 8002780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002784:	f017 ff64 	bl	801a650 <vTaskDelay>
            xprintf("Hey, it's just firmware - not Linux :P\n");
 8002788:	4811      	ldr	r0, [pc, #68]	; (80027d0 <StartDefaultTask+0x130>)
 800278a:	f001 fadf 	bl	8003d4c <xprintf>
            break;
 800278e:	e000      	b.n	8002792 <StartDefaultTask+0xf2>
          }
        }
      }
 8002790:	bf00      	nop

      previousAppli_state = Appli_state;
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <StartDefaultTask+0x118>)
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <StartDefaultTask+0x114>)
 8002798:	701a      	strb	r2, [r3, #0]
  {
 800279a:	e79b      	b.n	80026d4 <StartDefaultTask+0x34>
 800279c:	0801da80 	.word	0x0801da80
 80027a0:	200089a4 	.word	0x200089a4
 80027a4:	40022000 	.word	0x40022000
 80027a8:	200003a0 	.word	0x200003a0
 80027ac:	200003a2 	.word	0x200003a2
 80027b0:	200003a4 	.word	0x200003a4
 80027b4:	200003a6 	.word	0x200003a6
 80027b8:	200086ac 	.word	0x200086ac
 80027bc:	2000c76c 	.word	0x2000c76c
 80027c0:	0801da90 	.word	0x0801da90
 80027c4:	0801d81c 	.word	0x0801d81c
 80027c8:	0801d824 	.word	0x0801d824
 80027cc:	0801dac8 	.word	0x0801dac8
 80027d0:	0801dafc 	.word	0x0801dafc

080027d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027e6:	f003 fcf5 	bl	80061d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40001000 	.word	0x40001000

080027f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027fc:	b672      	cpsid	i
}
 80027fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002800:	e7fe      	b.n	8002800 <Error_Handler+0x8>
	...

08002804 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_MspInit+0x4c>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_MspInit+0x4c>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_MspInit+0x4c>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_MspInit+0x4c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_MspInit+0x4c>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_MspInit+0x4c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	210f      	movs	r1, #15
 800283e:	f06f 0001 	mvn.w	r0, #1
 8002842:	f004 f84b 	bl	80068dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <HAL_ADC_MspInit+0xa4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d13c      	bne.n	80028f0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002876:	4b21      	ldr	r3, [pc, #132]	; (80028fc <HAL_ADC_MspInit+0xa8>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_ADC_MspInit+0xa8>)
 800287c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002880:	6453      	str	r3, [r2, #68]	; 0x44
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <HAL_ADC_MspInit+0xa8>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_ADC_MspInit+0xa8>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <HAL_ADC_MspInit+0xa8>)
 8002894:	f043 0320 	orr.w	r3, r3, #32
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_ADC_MspInit+0xa8>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_ADC_MspInit+0xa8>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a14      	ldr	r2, [pc, #80]	; (80028fc <HAL_ADC_MspInit+0xa8>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_ADC_MspInit+0xa8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80028be:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80028c2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c4:	2303      	movs	r3, #3
 80028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4619      	mov	r1, r3
 80028d2:	480b      	ldr	r0, [pc, #44]	; (8002900 <HAL_ADC_MspInit+0xac>)
 80028d4:	f005 fa1c 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80028d8:	2301      	movs	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028dc:	2303      	movs	r3, #3
 80028de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	4806      	ldr	r0, [pc, #24]	; (8002904 <HAL_ADC_MspInit+0xb0>)
 80028ec:	f005 fa10 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40012200 	.word	0x40012200
 80028fc:	40023800 	.word	0x40023800
 8002900:	40021400 	.word	0x40021400
 8002904:	40020000 	.word	0x40020000

08002908 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <HAL_CRC_MspInit+0x38>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d10b      	bne.n	8002932 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_CRC_MspInit+0x3c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_CRC_MspInit+0x3c>)
 8002920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_CRC_MspInit+0x3c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023000 	.word	0x40023000
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08e      	sub	sp, #56	; 0x38
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a50      	ldr	r2, [pc, #320]	; (8002aa8 <HAL_DCMI_MspInit+0x160>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f040 809a 	bne.w	8002aa0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800296c:	4b4f      	ldr	r3, [pc, #316]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6353      	str	r3, [r2, #52]	; 0x34
 8002978:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002984:	4b49      	ldr	r3, [pc, #292]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	4a48      	ldr	r2, [pc, #288]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 800298a:	f043 0310 	orr.w	r3, r3, #16
 800298e:	6313      	str	r3, [r2, #48]	; 0x30
 8002990:	4b46      	ldr	r3, [pc, #280]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4a42      	ldr	r2, [pc, #264]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029a2:	f043 0308 	orr.w	r3, r3, #8
 80029a6:	6313      	str	r3, [r2, #48]	; 0x30
 80029a8:	4b40      	ldr	r3, [pc, #256]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029b4:	4b3d      	ldr	r3, [pc, #244]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4a3c      	ldr	r2, [pc, #240]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029be:	6313      	str	r3, [r2, #48]	; 0x30
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029cc:	4b37      	ldr	r3, [pc, #220]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	4a36      	ldr	r2, [pc, #216]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d6:	6313      	str	r3, [r2, #48]	; 0x30
 80029d8:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e4:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4a30      	ldr	r2, [pc, #192]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6313      	str	r3, [r2, #48]	; 0x30
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_DCMI_MspInit+0x164>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80029fc:	2360      	movs	r3, #96	; 0x60
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a0c:	230d      	movs	r3, #13
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a14:	4619      	mov	r1, r3
 8002a16:	4826      	ldr	r0, [pc, #152]	; (8002ab0 <HAL_DCMI_MspInit+0x168>)
 8002a18:	f005 f97a 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a2c:	230d      	movs	r3, #13
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a34:	4619      	mov	r1, r3
 8002a36:	481f      	ldr	r0, [pc, #124]	; (8002ab4 <HAL_DCMI_MspInit+0x16c>)
 8002a38:	f005 f96a 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a4e:	230d      	movs	r3, #13
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a56:	4619      	mov	r1, r3
 8002a58:	4817      	ldr	r0, [pc, #92]	; (8002ab8 <HAL_DCMI_MspInit+0x170>)
 8002a5a:	f005 f959 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002a5e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a70:	230d      	movs	r3, #13
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4810      	ldr	r0, [pc, #64]	; (8002abc <HAL_DCMI_MspInit+0x174>)
 8002a7c:	f005 f948 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002a80:	2350      	movs	r3, #80	; 0x50
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a90:	230d      	movs	r3, #13
 8002a92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4809      	ldr	r0, [pc, #36]	; (8002ac0 <HAL_DCMI_MspInit+0x178>)
 8002a9c:	f005 f938 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002aa0:	bf00      	nop
 8002aa2:	3738      	adds	r7, #56	; 0x38
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	50050000 	.word	0x50050000
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021800 	.word	0x40021800
 8002abc:	40021c00 	.word	0x40021c00
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_DMA2D_MspInit+0x44>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d113      	bne.n	8002afe <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_DMA2D_MspInit+0x48>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <HAL_DMA2D_MspInit+0x48>)
 8002adc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_DMA2D_MspInit+0x48>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2105      	movs	r1, #5
 8002af2:	205a      	movs	r0, #90	; 0x5a
 8002af4:	f003 fef2 	bl	80068dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002af8:	205a      	movs	r0, #90	; 0x5a
 8002afa:	f003 ff0b 	bl	8006914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	4002b000 	.word	0x4002b000
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	; 0x30
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 031c 	add.w	r3, r7, #28
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2f      	ldr	r2, [pc, #188]	; (8002bec <HAL_I2C_MspInit+0xdc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d129      	bne.n	8002b86 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a2e      	ldr	r2, [pc, #184]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b50:	2312      	movs	r3, #18
 8002b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b54:	2301      	movs	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	4619      	mov	r1, r3
 8002b66:	4823      	ldr	r0, [pc, #140]	; (8002bf4 <HAL_I2C_MspInit+0xe4>)
 8002b68:	f005 f8d2 	bl	8007d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b6c:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b84:	e02d      	b.n	8002be2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_I2C_MspInit+0xe8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d128      	bne.n	8002be2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002ba8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bae:	2312      	movs	r3, #18
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bbe:	f107 031c 	add.w	r3, r7, #28
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	480d      	ldr	r0, [pc, #52]	; (8002bfc <HAL_I2C_MspInit+0xec>)
 8002bc6:	f005 f8a3 	bl	8007d10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_I2C_MspInit+0xe0>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
}
 8002be2:	bf00      	nop
 8002be4:	3730      	adds	r7, #48	; 0x30
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40005400 	.word	0x40005400
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40005c00 	.word	0x40005c00
 8002bfc:	40021c00 	.word	0x40021c00

08002c00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <HAL_I2C_MspDeInit+0x64>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d110      	bne.n	8002c34 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_I2C_MspDeInit+0x68>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <HAL_I2C_MspDeInit+0x68>)
 8002c18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c22:	4812      	ldr	r0, [pc, #72]	; (8002c6c <HAL_I2C_MspDeInit+0x6c>)
 8002c24:	f005 fa20 	bl	8008068 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c2c:	480f      	ldr	r0, [pc, #60]	; (8002c6c <HAL_I2C_MspDeInit+0x6c>)
 8002c2e:	f005 fa1b 	bl	8008068 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002c32:	e013      	b.n	8002c5c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <HAL_I2C_MspDeInit+0x70>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d10e      	bne.n	8002c5c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_I2C_MspDeInit+0x68>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <HAL_I2C_MspDeInit+0x68>)
 8002c44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002c4a:	2180      	movs	r1, #128	; 0x80
 8002c4c:	4809      	ldr	r0, [pc, #36]	; (8002c74 <HAL_I2C_MspDeInit+0x74>)
 8002c4e:	f005 fa0b 	bl	8008068 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002c52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c56:	4807      	ldr	r0, [pc, #28]	; (8002c74 <HAL_I2C_MspDeInit+0x74>)
 8002c58:	f005 fa06 	bl	8008068 <HAL_GPIO_DeInit>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40005400 	.word	0x40005400
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40005c00 	.word	0x40005c00
 8002c74:	40021c00 	.word	0x40021c00

08002c78 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08e      	sub	sp, #56	; 0x38
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a55      	ldr	r2, [pc, #340]	; (8002dec <HAL_LTDC_MspInit+0x174>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	f040 80a3 	bne.w	8002de2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c9c:	4b54      	ldr	r3, [pc, #336]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	4a53      	ldr	r2, [pc, #332]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca8:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cb4:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	4a4d      	ldr	r2, [pc, #308]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cba:	f043 0310 	orr.w	r3, r3, #16
 8002cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ccc:	4b48      	ldr	r3, [pc, #288]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	4a47      	ldr	r2, [pc, #284]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd8:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ce4:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	4a41      	ldr	r2, [pc, #260]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cee:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d06:	6313      	str	r3, [r2, #48]	; 0x30
 8002d08:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a35      	ldr	r2, [pc, #212]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <HAL_LTDC_MspInit+0x178>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d3c:	230e      	movs	r3, #14
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d44:	4619      	mov	r1, r3
 8002d46:	482b      	ldr	r0, [pc, #172]	; (8002df4 <HAL_LTDC_MspInit+0x17c>)
 8002d48:	f004 ffe2 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002d4c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d5e:	230e      	movs	r3, #14
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d66:	4619      	mov	r1, r3
 8002d68:	4823      	ldr	r0, [pc, #140]	; (8002df8 <HAL_LTDC_MspInit+0x180>)
 8002d6a:	f004 ffd1 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002d6e:	23f7      	movs	r3, #247	; 0xf7
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d7e:	230e      	movs	r3, #14
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d86:	4619      	mov	r1, r3
 8002d88:	481c      	ldr	r0, [pc, #112]	; (8002dfc <HAL_LTDC_MspInit+0x184>)
 8002d8a:	f004 ffc1 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002da0:	2309      	movs	r3, #9
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da8:	4619      	mov	r1, r3
 8002daa:	4815      	ldr	r0, [pc, #84]	; (8002e00 <HAL_LTDC_MspInit+0x188>)
 8002dac:	f004 ffb0 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002db0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dc2:	230e      	movs	r3, #14
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dca:	4619      	mov	r1, r3
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <HAL_LTDC_MspInit+0x18c>)
 8002dce:	f004 ff9f 	bl	8007d10 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2105      	movs	r1, #5
 8002dd6:	2058      	movs	r0, #88	; 0x58
 8002dd8:	f003 fd80 	bl	80068dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ddc:	2058      	movs	r0, #88	; 0x58
 8002dde:	f003 fd99 	bl	8006914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002de2:	bf00      	nop
 8002de4:	3738      	adds	r7, #56	; 0x38
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40016800 	.word	0x40016800
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40022400 	.word	0x40022400
 8002dfc:	40022800 	.word	0x40022800
 8002e00:	40021800 	.word	0x40021800
 8002e04:	40022000 	.word	0x40022000

08002e08 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	; 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3b      	ldr	r2, [pc, #236]	; (8002f14 <HAL_QSPI_MspInit+0x10c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d170      	bne.n	8002f0c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	4a3a      	ldr	r2, [pc, #232]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	6393      	str	r3, [r2, #56]	; 0x38
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e42:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a34      	ldr	r2, [pc, #208]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e48:	f043 0310 	orr.w	r3, r3, #16
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a2e      	ldr	r2, [pc, #184]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_QSPI_MspInit+0x110>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e9a:	2309      	movs	r3, #9
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002e9e:	f107 031c 	add.w	r3, r7, #28
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	481d      	ldr	r0, [pc, #116]	; (8002f1c <HAL_QSPI_MspInit+0x114>)
 8002ea6:	f004 ff33 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002eaa:	2340      	movs	r3, #64	; 0x40
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002eba:	230a      	movs	r3, #10
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4816      	ldr	r0, [pc, #88]	; (8002f20 <HAL_QSPI_MspInit+0x118>)
 8002ec6:	f004 ff23 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eca:	2304      	movs	r3, #4
 8002ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002eda:	2309      	movs	r3, #9
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ede:	f107 031c 	add.w	r3, r7, #28
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	480e      	ldr	r0, [pc, #56]	; (8002f20 <HAL_QSPI_MspInit+0x118>)
 8002ee6:	f004 ff13 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002eea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002efc:	2309      	movs	r3, #9
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	4619      	mov	r1, r3
 8002f06:	4807      	ldr	r0, [pc, #28]	; (8002f24 <HAL_QSPI_MspInit+0x11c>)
 8002f08:	f004 ff02 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002f0c:	bf00      	nop
 8002f0e:	3730      	adds	r7, #48	; 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	a0001000 	.word	0xa0001000
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40020c00 	.word	0x40020c00

08002f28 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_RNG_MspInit+0x38>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10b      	bne.n	8002f52 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_RNG_MspInit+0x3c>)
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RNG_MspInit+0x3c>)
 8002f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f44:	6353      	str	r3, [r2, #52]	; 0x34
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_RNG_MspInit+0x3c>)
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	50060800 	.word	0x50060800
 8002f64:	40023800 	.word	0x40023800

08002f68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_RTC_MspInit+0x2c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d105      	bne.n	8002f86 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f7a:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <HAL_RTC_MspInit+0x30>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a06      	ldr	r2, [pc, #24]	; (8002f98 <HAL_RTC_MspInit+0x30>)
 8002f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40002800 	.word	0x40002800
 8002f98:	40023800 	.word	0x40023800

08002f9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a65      	ldr	r2, [pc, #404]	; (8003150 <HAL_SD_MspInit+0x1b4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	f040 80c3 	bne.w	8003146 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fc0:	4b64      	ldr	r3, [pc, #400]	; (8003154 <HAL_SD_MspInit+0x1b8>)
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	4a63      	ldr	r2, [pc, #396]	; (8003154 <HAL_SD_MspInit+0x1b8>)
 8002fc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fca:	6453      	str	r3, [r2, #68]	; 0x44
 8002fcc:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_SD_MspInit+0x1b8>)
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd8:	4b5e      	ldr	r3, [pc, #376]	; (8003154 <HAL_SD_MspInit+0x1b8>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4a5d      	ldr	r2, [pc, #372]	; (8003154 <HAL_SD_MspInit+0x1b8>)
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe4:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <HAL_SD_MspInit+0x1b8>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff0:	4b58      	ldr	r3, [pc, #352]	; (8003154 <HAL_SD_MspInit+0x1b8>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	4a57      	ldr	r2, [pc, #348]	; (8003154 <HAL_SD_MspInit+0x1b8>)
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffc:	4b55      	ldr	r3, [pc, #340]	; (8003154 <HAL_SD_MspInit+0x1b8>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003008:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800300c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	2303      	movs	r3, #3
 8003018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800301a:	230c      	movs	r3, #12
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800301e:	f107 0314 	add.w	r3, r7, #20
 8003022:	4619      	mov	r1, r3
 8003024:	484c      	ldr	r0, [pc, #304]	; (8003158 <HAL_SD_MspInit+0x1bc>)
 8003026:	f004 fe73 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800302a:	2304      	movs	r3, #4
 800302c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003036:	2303      	movs	r3, #3
 8003038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800303a:	230c      	movs	r3, #12
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800303e:	f107 0314 	add.w	r3, r7, #20
 8003042:	4619      	mov	r1, r3
 8003044:	4845      	ldr	r0, [pc, #276]	; (800315c <HAL_SD_MspInit+0x1c0>)
 8003046:	f004 fe63 	bl	8007d10 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800304a:	4b45      	ldr	r3, [pc, #276]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 800304c:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_SD_MspInit+0x1c8>)
 800304e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003050:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 8003052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003056:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800305e:	4b40      	ldr	r3, [pc, #256]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 8003060:	2200      	movs	r2, #0
 8003062:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003064:	4b3e      	ldr	r3, [pc, #248]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 8003066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800306a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800306c:	4b3c      	ldr	r3, [pc, #240]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 800306e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003072:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 8003076:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800307a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 8003084:	2200      	movs	r2, #0
 8003086:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 800308a:	2204      	movs	r2, #4
 800308c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 8003090:	2203      	movs	r2, #3
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 8003096:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 800309e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80030a4:	482e      	ldr	r0, [pc, #184]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 80030a6:	f003 fda7 	bl	8006bf8 <HAL_DMA_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80030b0:	f7ff fba2 	bl	80027f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
 80030ba:	4a29      	ldr	r2, [pc, #164]	; (8003160 <HAL_SD_MspInit+0x1c4>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80030c0:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 80030c2:	4a2a      	ldr	r2, [pc, #168]	; (800316c <HAL_SD_MspInit+0x1d0>)
 80030c4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80030c6:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 80030c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030cc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 80030d0:	2240      	movs	r2, #64	; 0x40
 80030d2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 80030dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030e2:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 80030e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030e8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030ea:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 80030ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030f0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 80030f4:	2220      	movs	r2, #32
 80030f6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 8003100:	2204      	movs	r2, #4
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 8003106:	2203      	movs	r2, #3
 8003108:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 800310c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 8003114:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800311a:	4813      	ldr	r0, [pc, #76]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 800311c:	f003 fd6c 	bl	8006bf8 <HAL_DMA_Init>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8003126:	f7ff fb67 	bl	80027f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 800312e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003130:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <HAL_SD_MspInit+0x1cc>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2105      	movs	r1, #5
 800313a:	2031      	movs	r0, #49	; 0x31
 800313c:	f003 fbce 	bl	80068dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003140:	2031      	movs	r0, #49	; 0x31
 8003142:	f003 fbe7 	bl	8006914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003146:	bf00      	nop
 8003148:	3728      	adds	r7, #40	; 0x28
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40023800 	.word	0x40023800
 8003158:	40020800 	.word	0x40020800
 800315c:	40020c00 	.word	0x40020c00
 8003160:	20008d80 	.word	0x20008d80
 8003164:	40026458 	.word	0x40026458
 8003168:	20008f70 	.word	0x20008f70
 800316c:	400264a0 	.word	0x400264a0

08003170 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003190:	d127      	bne.n	80031e2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a15      	ldr	r2, [pc, #84]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80031d2:	2308      	movs	r3, #8
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	4619      	mov	r1, r3
 80031dc:	4804      	ldr	r0, [pc, #16]	; (80031f0 <HAL_SPDIFRX_MspInit+0x80>)
 80031de:	f004 fd97 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80031e2:	bf00      	nop
 80031e4:	3728      	adds	r7, #40	; 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020c00 	.word	0x40020c00

080031f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <HAL_SPI_MspInit+0xb4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d144      	bne.n	80032a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003216:	4b25      	ldr	r3, [pc, #148]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a24      	ldr	r2, [pc, #144]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
 8003222:	4b22      	ldr	r3, [pc, #136]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800322e:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a18      	ldr	r2, [pc, #96]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800325e:	2302      	movs	r3, #2
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800326e:	2305      	movs	r3, #5
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <HAL_SPI_MspInit+0xbc>)
 800327a:	f004 fd49 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800327e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2302      	movs	r3, #2
 8003286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328c:	2300      	movs	r3, #0
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003290:	2305      	movs	r3, #5
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	4619      	mov	r1, r3
 800329a:	4806      	ldr	r0, [pc, #24]	; (80032b4 <HAL_SPI_MspInit+0xc0>)
 800329c:	f004 fd38 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032a0:	bf00      	nop
 80032a2:	3728      	adds	r7, #40	; 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40003800 	.word	0x40003800
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40020400 	.word	0x40020400

080032b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b08b      	sub	sp, #44	; 0x2c
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a49      	ldr	r2, [pc, #292]	; (80033ec <HAL_TIM_Base_MspInit+0x134>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10c      	bne.n	80032e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ca:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	4a48      	ldr	r2, [pc, #288]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6453      	str	r3, [r2, #68]	; 0x44
 80032d6:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80032e2:	e07c      	b.n	80033de <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ec:	d10c      	bne.n	8003308 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ee:	4b40      	ldr	r3, [pc, #256]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a3f      	ldr	r2, [pc, #252]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	6a3b      	ldr	r3, [r7, #32]
}
 8003306:	e06a      	b.n	80033de <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a39      	ldr	r2, [pc, #228]	; (80033f4 <HAL_TIM_Base_MspInit+0x13c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10c      	bne.n	800332c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003312:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a36      	ldr	r2, [pc, #216]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	69fb      	ldr	r3, [r7, #28]
}
 800332a:	e058      	b.n	80033de <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <HAL_TIM_Base_MspInit+0x140>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10c      	bne.n	8003350 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003336:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	69bb      	ldr	r3, [r7, #24]
}
 800334e:	e046      	b.n	80033de <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM7)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a29      	ldr	r2, [pc, #164]	; (80033fc <HAL_TIM_Base_MspInit+0x144>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10c      	bne.n	8003374 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800335a:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 8003360:	f043 0320 	orr.w	r3, r3, #32
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]
}
 8003372:	e034      	b.n	80033de <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM8)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_TIM_Base_MspInit+0x148>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10c      	bne.n	8003398 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	6453      	str	r3, [r2, #68]	; 0x44
 800338a:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
}
 8003396:	e022      	b.n	80033de <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM10)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <HAL_TIM_Base_MspInit+0x14c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10c      	bne.n	80033bc <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80033a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
}
 80033ba:	e010      	b.n	80033de <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM11)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a11      	ldr	r2, [pc, #68]	; (8003408 <HAL_TIM_Base_MspInit+0x150>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10b      	bne.n	80033de <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d0:	6453      	str	r3, [r2, #68]	; 0x44
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_TIM_Base_MspInit+0x138>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
}
 80033de:	bf00      	nop
 80033e0:	372c      	adds	r7, #44	; 0x2c
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40001400 	.word	0x40001400
 8003400:	40010400 	.word	0x40010400
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800

0800340c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <HAL_TIM_PWM_MspInit+0x38>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10b      	bne.n	8003436 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <HAL_TIM_PWM_MspInit+0x3c>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <HAL_TIM_PWM_MspInit+0x3c>)
 8003424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b07      	ldr	r3, [pc, #28]	; (8003448 <HAL_TIM_PWM_MspInit+0x3c>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40001800 	.word	0x40001800
 8003448:	40023800 	.word	0x40023800

0800344c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	; 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003454:	f107 031c 	add.w	r3, r7, #28
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a45      	ldr	r2, [pc, #276]	; (8003580 <HAL_TIM_MspPostInit+0x134>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d11d      	bne.n	80034aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346e:	4b45      	ldr	r3, [pc, #276]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a44      	ldr	r2, [pc, #272]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b42      	ldr	r3, [pc, #264]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800348a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003494:	2300      	movs	r3, #0
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003498:	2301      	movs	r3, #1
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	4619      	mov	r1, r3
 80034a2:	4839      	ldr	r0, [pc, #228]	; (8003588 <HAL_TIM_MspPostInit+0x13c>)
 80034a4:	f004 fc34 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80034a8:	e065      	b.n	8003576 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d11d      	bne.n	80034f0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	4a32      	ldr	r2, [pc, #200]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6313      	str	r3, [r2, #48]	; 0x30
 80034c0:	4b30      	ldr	r3, [pc, #192]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80034cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2300      	movs	r3, #0
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034de:	2301      	movs	r3, #1
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	4619      	mov	r1, r3
 80034e8:	4827      	ldr	r0, [pc, #156]	; (8003588 <HAL_TIM_MspPostInit+0x13c>)
 80034ea:	f004 fc11 	bl	8007d10 <HAL_GPIO_Init>
}
 80034ee:	e042      	b.n	8003576 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a25      	ldr	r2, [pc, #148]	; (800358c <HAL_TIM_MspPostInit+0x140>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d11c      	bne.n	8003534 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a21      	ldr	r2, [pc, #132]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003512:	2310      	movs	r3, #16
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003522:	2302      	movs	r3, #2
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	4818      	ldr	r0, [pc, #96]	; (8003590 <HAL_TIM_MspPostInit+0x144>)
 800352e:	f004 fbef 	bl	8007d10 <HAL_GPIO_Init>
}
 8003532:	e020      	b.n	8003576 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM12)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a16      	ldr	r2, [pc, #88]	; (8003594 <HAL_TIM_MspPostInit+0x148>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d11b      	bne.n	8003576 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 8003544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_TIM_MspPostInit+0x138>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	2300      	movs	r3, #0
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003566:	2309      	movs	r3, #9
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800356a:	f107 031c 	add.w	r3, r7, #28
 800356e:	4619      	mov	r1, r3
 8003570:	4809      	ldr	r0, [pc, #36]	; (8003598 <HAL_TIM_MspPostInit+0x14c>)
 8003572:	f004 fbcd 	bl	8007d10 <HAL_GPIO_Init>
}
 8003576:	bf00      	nop
 8003578:	3730      	adds	r7, #48	; 0x30
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40023800 	.word	0x40023800
 8003588:	40020000 	.word	0x40020000
 800358c:	40000400 	.word	0x40000400
 8003590:	40020400 	.word	0x40020400
 8003594:	40001800 	.word	0x40001800
 8003598:	40021c00 	.word	0x40021c00

0800359c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	; 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a40      	ldr	r2, [pc, #256]	; (80036bc <HAL_UART_MspInit+0x120>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d145      	bne.n	800364a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	4a3f      	ldr	r2, [pc, #252]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80035c4:	f043 0310 	orr.w	r3, r3, #16
 80035c8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d6:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a39      	ldr	r2, [pc, #228]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a33      	ldr	r2, [pc, #204]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <HAL_UART_MspInit+0x124>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003612:	2300      	movs	r3, #0
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003616:	2307      	movs	r3, #7
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800361a:	f107 031c 	add.w	r3, r7, #28
 800361e:	4619      	mov	r1, r3
 8003620:	4828      	ldr	r0, [pc, #160]	; (80036c4 <HAL_UART_MspInit+0x128>)
 8003622:	f004 fb75 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800362a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362c:	2302      	movs	r3, #2
 800362e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003634:	2300      	movs	r3, #0
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003638:	2307      	movs	r3, #7
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800363c:	f107 031c 	add.w	r3, r7, #28
 8003640:	4619      	mov	r1, r3
 8003642:	4821      	ldr	r0, [pc, #132]	; (80036c8 <HAL_UART_MspInit+0x12c>)
 8003644:	f004 fb64 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003648:	e034      	b.n	80036b4 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART6)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <HAL_UART_MspInit+0x130>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d12f      	bne.n	80036b4 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_UART_MspInit+0x124>)
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_UART_MspInit+0x124>)
 800365a:	f043 0320 	orr.w	r3, r3, #32
 800365e:	6453      	str	r3, [r2, #68]	; 0x44
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_UART_MspInit+0x124>)
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_UART_MspInit+0x124>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <HAL_UART_MspInit+0x124>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6313      	str	r3, [r2, #48]	; 0x30
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_UART_MspInit+0x124>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003684:	23c0      	movs	r3, #192	; 0xc0
 8003686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003688:	2302      	movs	r3, #2
 800368a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003690:	2303      	movs	r3, #3
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003694:	2308      	movs	r3, #8
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003698:	f107 031c 	add.w	r3, r7, #28
 800369c:	4619      	mov	r1, r3
 800369e:	480c      	ldr	r0, [pc, #48]	; (80036d0 <HAL_UART_MspInit+0x134>)
 80036a0:	f004 fb36 	bl	8007d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80036a4:	2200      	movs	r2, #0
 80036a6:	2105      	movs	r1, #5
 80036a8:	2047      	movs	r0, #71	; 0x47
 80036aa:	f003 f917 	bl	80068dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80036ae:	2047      	movs	r0, #71	; 0x47
 80036b0:	f003 f930 	bl	8006914 <HAL_NVIC_EnableIRQ>
}
 80036b4:	bf00      	nop
 80036b6:	3730      	adds	r7, #48	; 0x30
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40011000 	.word	0x40011000
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40020400 	.word	0x40020400
 80036c8:	40020000 	.word	0x40020000
 80036cc:	40011400 	.word	0x40011400
 80036d0:	40020800 	.word	0x40020800

080036d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80036e8:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_FMC_MspInit+0x100>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d16d      	bne.n	80037cc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80036f0:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_FMC_MspInit+0x100>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036f6:	4b38      	ldr	r3, [pc, #224]	; (80037d8 <HAL_FMC_MspInit+0x104>)
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	4a37      	ldr	r2, [pc, #220]	; (80037d8 <HAL_FMC_MspInit+0x104>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6393      	str	r3, [r2, #56]	; 0x38
 8003702:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_FMC_MspInit+0x104>)
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800370e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003712:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003714:	2302      	movs	r3, #2
 8003716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371c:	2303      	movs	r3, #3
 800371e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003720:	230c      	movs	r3, #12
 8003722:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	4619      	mov	r1, r3
 8003728:	482c      	ldr	r0, [pc, #176]	; (80037dc <HAL_FMC_MspInit+0x108>)
 800372a:	f004 faf1 	bl	8007d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800372e:	f248 1333 	movw	r3, #33075	; 0x8133
 8003732:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003740:	230c      	movs	r3, #12
 8003742:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	4619      	mov	r1, r3
 8003748:	4825      	ldr	r0, [pc, #148]	; (80037e0 <HAL_FMC_MspInit+0x10c>)
 800374a:	f004 fae1 	bl	8007d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800374e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003752:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003754:	2302      	movs	r3, #2
 8003756:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375c:	2303      	movs	r3, #3
 800375e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003760:	230c      	movs	r3, #12
 8003762:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	4619      	mov	r1, r3
 8003768:	481e      	ldr	r0, [pc, #120]	; (80037e4 <HAL_FMC_MspInit+0x110>)
 800376a:	f004 fad1 	bl	8007d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800376e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003772:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377c:	2303      	movs	r3, #3
 800377e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003780:	230c      	movs	r3, #12
 8003782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4817      	ldr	r0, [pc, #92]	; (80037e8 <HAL_FMC_MspInit+0x114>)
 800378a:	f004 fac1 	bl	8007d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800378e:	2328      	movs	r3, #40	; 0x28
 8003790:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003792:	2302      	movs	r3, #2
 8003794:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379a:	2303      	movs	r3, #3
 800379c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800379e:	230c      	movs	r3, #12
 80037a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	4619      	mov	r1, r3
 80037a6:	4811      	ldr	r0, [pc, #68]	; (80037ec <HAL_FMC_MspInit+0x118>)
 80037a8:	f004 fab2 	bl	8007d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80037ac:	2308      	movs	r3, #8
 80037ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037bc:	230c      	movs	r3, #12
 80037be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80037c0:	1d3b      	adds	r3, r7, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	480a      	ldr	r0, [pc, #40]	; (80037f0 <HAL_FMC_MspInit+0x11c>)
 80037c6:	f004 faa3 	bl	8007d10 <HAL_GPIO_Init>
 80037ca:	e000      	b.n	80037ce <HAL_FMC_MspInit+0xfa>
    return;
 80037cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200003a8 	.word	0x200003a8
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40021800 	.word	0x40021800
 80037e4:	40020c00 	.word	0x40020c00
 80037e8:	40021400 	.word	0x40021400
 80037ec:	40021c00 	.word	0x40021c00
 80037f0:	40020800 	.word	0x40020800

080037f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80037fc:	f7ff ff6a 	bl	80036d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2b      	ldr	r2, [pc, #172]	; (80038c4 <HAL_SAI_MspInit+0xbc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d124      	bne.n	8003864 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800381a:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <HAL_SAI_MspInit+0xc0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003822:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <HAL_SAI_MspInit+0xc4>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	4a29      	ldr	r2, [pc, #164]	; (80038cc <HAL_SAI_MspInit+0xc4>)
 8003828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800382c:	6453      	str	r3, [r2, #68]	; 0x44
 800382e:	4b27      	ldr	r3, [pc, #156]	; (80038cc <HAL_SAI_MspInit+0xc4>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800383a:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <HAL_SAI_MspInit+0xc0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <HAL_SAI_MspInit+0xc0>)
 8003842:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003844:	23f0      	movs	r3, #240	; 0xf0
 8003846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003854:	230a      	movs	r3, #10
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	4619      	mov	r1, r3
 800385e:	481c      	ldr	r0, [pc, #112]	; (80038d0 <HAL_SAI_MspInit+0xc8>)
 8003860:	f004 fa56 	bl	8007d10 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <HAL_SAI_MspInit+0xcc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d125      	bne.n	80038ba <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <HAL_SAI_MspInit+0xc0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_SAI_MspInit+0xc4>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <HAL_SAI_MspInit+0xc4>)
 800387c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_SAI_MspInit+0xc4>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <HAL_SAI_MspInit+0xc0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a0c      	ldr	r2, [pc, #48]	; (80038c8 <HAL_SAI_MspInit+0xc0>)
 8003896:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800389c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389e:	2302      	movs	r3, #2
 80038a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80038aa:	230a      	movs	r3, #10
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80038ae:	f107 0314 	add.w	r3, r7, #20
 80038b2:	4619      	mov	r1, r3
 80038b4:	4808      	ldr	r0, [pc, #32]	; (80038d8 <HAL_SAI_MspInit+0xd0>)
 80038b6:	f004 fa2b 	bl	8007d10 <HAL_GPIO_Init>

    }
}
 80038ba:	bf00      	nop
 80038bc:	3728      	adds	r7, #40	; 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40015c04 	.word	0x40015c04
 80038c8:	200003ac 	.word	0x200003ac
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40015c24 	.word	0x40015c24
 80038d8:	40021800 	.word	0x40021800

080038dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	; 0x30
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	2036      	movs	r0, #54	; 0x36
 80038f2:	f002 fff3 	bl	80068dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038f6:	2036      	movs	r0, #54	; 0x36
 80038f8:	f003 f80c 	bl	8006914 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038fc:	4b1f      	ldr	r3, [pc, #124]	; (800397c <HAL_InitTick+0xa0>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	4a1e      	ldr	r2, [pc, #120]	; (800397c <HAL_InitTick+0xa0>)
 8003902:	f043 0310 	orr.w	r3, r3, #16
 8003906:	6413      	str	r3, [r2, #64]	; 0x40
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <HAL_InitTick+0xa0>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003914:	f107 0210 	add.w	r2, r7, #16
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f008 fa34 	bl	800bd8c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003924:	f008 fa0a 	bl	800bd3c <HAL_RCC_GetPCLK1Freq>
 8003928:	4603      	mov	r3, r0
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003930:	4a13      	ldr	r2, [pc, #76]	; (8003980 <HAL_InitTick+0xa4>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0c9b      	lsrs	r3, r3, #18
 8003938:	3b01      	subs	r3, #1
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_InitTick+0xa8>)
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <HAL_InitTick+0xac>)
 8003940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <HAL_InitTick+0xa8>)
 8003944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003948:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800394a:	4a0e      	ldr	r2, [pc, #56]	; (8003984 <HAL_InitTick+0xa8>)
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <HAL_InitTick+0xa8>)
 8003952:	2200      	movs	r2, #0
 8003954:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_InitTick+0xa8>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800395c:	4809      	ldr	r0, [pc, #36]	; (8003984 <HAL_InitTick+0xa8>)
 800395e:	f00b f9e0 	bl	800ed22 <HAL_TIM_Base_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003968:	4806      	ldr	r0, [pc, #24]	; (8003984 <HAL_InitTick+0xa8>)
 800396a:	f00b fa31 	bl	800edd0 <HAL_TIM_Base_Start_IT>
 800396e:	4603      	mov	r3, r0
 8003970:	e000      	b.n	8003974 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
}
 8003974:	4618      	mov	r0, r3
 8003976:	3730      	adds	r7, #48	; 0x30
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	431bde83 	.word	0x431bde83
 8003984:	20009068 	.word	0x20009068
 8003988:	40001000 	.word	0x40001000

0800398c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003990:	e7fe      	b.n	8003990 <NMI_Handler+0x4>

08003992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003996:	e7fe      	b.n	8003996 <HardFault_Handler+0x4>

08003998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800399c:	e7fe      	b.n	800399c <MemManage_Handler+0x4>

0800399e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039a2:	e7fe      	b.n	80039a2 <BusFault_Handler+0x4>

080039a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <UsageFault_Handler+0x4>

080039aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <SDMMC1_IRQHandler+0x10>)
 80039be:	f009 ff81 	bl	800d8c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200089d8 	.word	0x200089d8

080039cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <TIM6_DAC_IRQHandler+0x10>)
 80039d2:	f00b facc 	bl	800ef6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20009068 	.word	0x20009068

080039e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <DMA2_Stream3_IRQHandler+0x10>)
 80039e6:	f003 fb05 	bl	8006ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20008d80 	.word	0x20008d80

080039f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <ETH_IRQHandler+0x10>)
 80039fa:	f004 f90d 	bl	8007c18 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	2000aed4 	.word	0x2000aed4

08003a08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <OTG_FS_IRQHandler+0x10>)
 8003a0e:	f004 feed 	bl	80087ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2000cb50 	.word	0x2000cb50

08003a1c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <DMA2_Stream6_IRQHandler+0x10>)
 8003a22:	f003 fae7 	bl	8006ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20008f70 	.word	0x20008f70

08003a30 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <USART6_IRQHandler+0x10>)
 8003a36:	f00c fac7 	bl	800ffc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20008de0 	.word	0x20008de0

08003a44 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <LTDC_IRQHandler+0x10>)
 8003a4a:	f007 f8a7 	bl	800ab9c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20008af4 	.word	0x20008af4

08003a58 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <DMA2D_IRQHandler+0x10>)
 8003a5e:	f003 fe9d 	bl	800779c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20008e64 	.word	0x20008e64

08003a6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e00a      	b.n	8003a94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a7e:	f3af 8000 	nop.w
 8003a82:	4601      	mov	r1, r0
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	60ba      	str	r2, [r7, #8]
 8003a8a:	b2ca      	uxtb	r2, r1
 8003a8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	dbf0      	blt.n	8003a7e <_read+0x12>
	}

return len;
 8003a9c:	687b      	ldr	r3, [r7, #4]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e009      	b.n	8003acc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	60ba      	str	r2, [r7, #8]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fc fda5 	bl	8000610 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	dbf1      	blt.n	8003ab8 <_write+0x12>
	}
	return len;
 8003ad4:	687b      	ldr	r3, [r7, #4]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_close>:

int _close(int file)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
	return -1;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b06:	605a      	str	r2, [r3, #4]
	return 0;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <_isatty>:

int _isatty(int file)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
	return 1;
 8003b1e:	2301      	movs	r3, #1
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	return 0;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <_sbrk+0x5c>)
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <_sbrk+0x60>)
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <_sbrk+0x64>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <_sbrk+0x64>)
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <_sbrk+0x68>)
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <_sbrk+0x64>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d205      	bcs.n	8003b84 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <_sbrk+0x6c>)
 8003b7a:	220c      	movs	r2, #12
 8003b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b82:	e009      	b.n	8003b98 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <_sbrk+0x64>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <_sbrk+0x64>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	4a06      	ldr	r2, [pc, #24]	; (8003bac <_sbrk+0x64>)
 8003b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b96:	68fb      	ldr	r3, [r7, #12]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	20050000 	.word	0x20050000
 8003ba8:	00000400 	.word	0x00000400
 8003bac:	200003b0 	.word	0x200003b0
 8003bb0:	2000ce60 	.word	0x2000ce60
 8003bb4:	2000c764 	.word	0x2000c764

08003bb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <SystemInit+0x20>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <SystemInit+0x20>)
 8003bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <xputc>:




void xputc (char c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
	debug_chr(c);
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fc fcf5 	bl	80005d8 <debug_chr>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <xputs>:




void xputs (const char* str)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
	while (*str)
 8003bfe:	e006      	b.n	8003c0e <xputs+0x18>
		xputc(*str++);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ffe7 	bl	8003bdc <xputc>
	while (*str)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f4      	bne.n	8003c00 <xputs+0xa>
}
 8003c16:	bf00      	nop
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <xitoa>:




void xitoa (long val, int radix, int len)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	; 0x30
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
	uint8_t c, r, sgn = 0, pad = ' ';
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003c32:	2320      	movs	r3, #32
 8003c34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t s[20], i = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint32_t v;


	if (radix < 0) {
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	da0b      	bge.n	8003c5c <xitoa+0x3c>
		radix = -radix;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	425b      	negs	r3, r3
 8003c48:	60bb      	str	r3, [r7, #8]
		if (val < 0) {
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	da05      	bge.n	8003c5c <xitoa+0x3c>
			val = -val;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	425b      	negs	r3, r3
 8003c54:	60fb      	str	r3, [r7, #12]
			sgn = '-';
 8003c56:	232d      	movs	r3, #45	; 0x2d
 8003c58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
	}
	v = val;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
	r = radix;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (len < 0) {
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	da05      	bge.n	8003c78 <xitoa+0x58>
		len = -len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	425b      	negs	r3, r3
 8003c70:	607b      	str	r3, [r7, #4]
		pad = '0';
 8003c72:	2330      	movs	r3, #48	; 0x30
 8003c74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	}
	if (len > 20) return;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b14      	cmp	r3, #20
 8003c7c:	dc62      	bgt.n	8003d44 <xitoa+0x124>
	do {
		c = (uint8_t)(v % r);
 8003c7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c88:	fb02 f201 	mul.w	r2, r2, r1
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c >= 10) c += 7;
 8003c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c96:	2b09      	cmp	r3, #9
 8003c98:	d904      	bls.n	8003ca4 <xitoa+0x84>
 8003c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c9e:	3307      	adds	r3, #7
 8003ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		c += '0';
 8003ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ca8:	3330      	adds	r3, #48	; 0x30
 8003caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		s[i++] = c;
 8003cae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8003cb8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003cc2:	f803 2c20 	strb.w	r2, [r3, #-32]
		v /= r;
 8003cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
	} while (v);
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1d2      	bne.n	8003c7e <xitoa+0x5e>
	if (sgn) s[i++] = sgn;
 8003cd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d018      	beq.n	8003d12 <xitoa+0xf2>
 8003ce0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8003cea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003cee:	4413      	add	r3, r2
 8003cf0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003cf4:	f803 2c20 	strb.w	r2, [r3, #-32]
	while (i < len)
 8003cf8:	e00b      	b.n	8003d12 <xitoa+0xf2>
		s[i++] = pad;
 8003cfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8003d04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d08:	4413      	add	r3, r2
 8003d0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003d0e:	f803 2c20 	strb.w	r2, [r3, #-32]
	while (i < len)
 8003d12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dcee      	bgt.n	8003cfa <xitoa+0xda>
	do
		xputc(s[--i]);
 8003d1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d20:	3b01      	subs	r3, #1
 8003d22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003d26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d2e:	4413      	add	r3, r2
 8003d30:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff51 	bl	8003bdc <xputc>
	while (i);
 8003d3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ec      	bne.n	8003d1c <xitoa+0xfc>
 8003d42:	e000      	b.n	8003d46 <xitoa+0x126>
	if (len > 20) return;
 8003d44:	bf00      	nop
}
 8003d46:	3730      	adds	r7, #48	; 0x30
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <xprintf>:

void xprintf (const char* str, ...)
{
 8003d4c:	b40f      	push	{r0, r1, r2, r3}
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b086      	sub	sp, #24
 8003d52:	af00      	add	r7, sp, #0
	va_list arp;
	int d, r, w, s, l;


	va_start(arp, str);
 8003d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d58:	603b      	str	r3, [r7, #0]

	while ((d = *str++) != 0) {
 8003d5a:	e09f      	b.n	8003e9c <xprintf+0x150>
		if (d != '%') {
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b25      	cmp	r3, #37	; 0x25
 8003d60:	d005      	beq.n	8003d6e <xprintf+0x22>
			xputc(d); continue;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff ff38 	bl	8003bdc <xputc>
 8003d6c:	e096      	b.n	8003e9c <xprintf+0x150>
		}
		d = *str++; w = r = s = l = 0;
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	623a      	str	r2, [r7, #32]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	60fb      	str	r3, [r7, #12]
		if (d == '0') {
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b30      	cmp	r3, #48	; 0x30
 8003d8c:	d118      	bne.n	8003dc0 <xprintf+0x74>
			d = *str++; s = 1;
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	623a      	str	r2, [r7, #32]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	2301      	movs	r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
		}
		while ((d >= '0')&&(d <= '9')) {
 8003d9c:	e010      	b.n	8003dc0 <xprintf+0x74>
			w += w * 10 + (d - '0');
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	461a      	mov	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	3b30      	subs	r3, #48	; 0x30
 8003dae:	4413      	add	r3, r2
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
			d = *str++;
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	623a      	str	r2, [r7, #32]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	617b      	str	r3, [r7, #20]
		while ((d >= '0')&&(d <= '9')) {
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b2f      	cmp	r3, #47	; 0x2f
 8003dc4:	dd02      	ble.n	8003dcc <xprintf+0x80>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b39      	cmp	r3, #57	; 0x39
 8003dca:	dde8      	ble.n	8003d9e <xprintf+0x52>
		}
		if (s) w = -w;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <xprintf+0x8c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	425b      	negs	r3, r3
 8003dd6:	60fb      	str	r3, [r7, #12]
		if (d == 'l') {
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b6c      	cmp	r3, #108	; 0x6c
 8003ddc:	d106      	bne.n	8003dec <xprintf+0xa0>
			l = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	607b      	str	r3, [r7, #4]
			d = *str++;
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	623a      	str	r2, [r7, #32]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]
		}
		if (!d) break;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d05e      	beq.n	8003eb0 <xprintf+0x164>
		if (d == 's') {
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b73      	cmp	r3, #115	; 0x73
 8003df6:	d107      	bne.n	8003e08 <xprintf+0xbc>
			xputs(va_arg(arp, char*));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	1d1a      	adds	r2, r3, #4
 8003dfc:	603a      	str	r2, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fef8 	bl	8003bf6 <xputs>
			continue;
 8003e06:	e049      	b.n	8003e9c <xprintf+0x150>
		}
		if (d == 'c') {
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b63      	cmp	r3, #99	; 0x63
 8003e0c:	d108      	bne.n	8003e20 <xprintf+0xd4>
			xputc((char)va_arg(arp, int));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	1d1a      	adds	r2, r3, #4
 8003e12:	603a      	str	r2, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fedf 	bl	8003bdc <xputc>
			continue;
 8003e1e:	e03d      	b.n	8003e9c <xprintf+0x150>
		}
		if (d == 'u') r = 10;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b75      	cmp	r3, #117	; 0x75
 8003e24:	d101      	bne.n	8003e2a <xprintf+0xde>
 8003e26:	230a      	movs	r3, #10
 8003e28:	613b      	str	r3, [r7, #16]
		if (d == 'd') r = -10;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b64      	cmp	r3, #100	; 0x64
 8003e2e:	d102      	bne.n	8003e36 <xprintf+0xea>
 8003e30:	f06f 0309 	mvn.w	r3, #9
 8003e34:	613b      	str	r3, [r7, #16]
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b58      	cmp	r3, #88	; 0x58
 8003e3a:	d002      	beq.n	8003e42 <xprintf+0xf6>
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b78      	cmp	r3, #120	; 0x78
 8003e40:	d101      	bne.n	8003e46 <xprintf+0xfa>
 8003e42:	2310      	movs	r3, #16
 8003e44:	613b      	str	r3, [r7, #16]
		if (d == 'b') r = 2;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b62      	cmp	r3, #98	; 0x62
 8003e4a:	d101      	bne.n	8003e50 <xprintf+0x104>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	613b      	str	r3, [r7, #16]
		if (!r) break;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d02e      	beq.n	8003eb4 <xprintf+0x168>
		if (l) {
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d009      	beq.n	8003e70 <xprintf+0x124>
			xitoa((long)va_arg(arp, long), r, w);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	1d1a      	adds	r2, r3, #4
 8003e60:	603a      	str	r2, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	6939      	ldr	r1, [r7, #16]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fed9 	bl	8003c20 <xitoa>
 8003e6e:	e015      	b.n	8003e9c <xprintf+0x150>
		} else {
			if (r > 0)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dd09      	ble.n	8003e8a <xprintf+0x13e>
				xitoa((unsigned long)va_arg(arp, int), r, w);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	1d1a      	adds	r2, r3, #4
 8003e7a:	603a      	str	r2, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	6939      	ldr	r1, [r7, #16]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fecc 	bl	8003c20 <xitoa>
 8003e88:	e008      	b.n	8003e9c <xprintf+0x150>
			else
				xitoa((long)va_arg(arp, int), r, w);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	1d1a      	adds	r2, r3, #4
 8003e8e:	603a      	str	r2, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	6939      	ldr	r1, [r7, #16]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fec2 	bl	8003c20 <xitoa>
	while ((d = *str++) != 0) {
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	623a      	str	r2, [r7, #32]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f47f af57 	bne.w	8003d5c <xprintf+0x10>
		}
	}

	va_end(arp);
}
 8003eae:	e002      	b.n	8003eb6 <xprintf+0x16a>
		if (!d) break;
 8003eb0:	bf00      	nop
 8003eb2:	e000      	b.n	8003eb6 <xprintf+0x16a>
		if (!r) break;
 8003eb4:	bf00      	nop
}
 8003eb6:	bf00      	nop
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ec0:	b004      	add	sp, #16
 8003ec2:	4770      	bx	lr

08003ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ec8:	480d      	ldr	r0, [pc, #52]	; (8003f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003eca:	490e      	ldr	r1, [pc, #56]	; (8003f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed0:	e002      	b.n	8003ed8 <LoopCopyDataInit>

08003ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ed6:	3304      	adds	r3, #4

08003ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003edc:	d3f9      	bcc.n	8003ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ede:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ee0:	4c0b      	ldr	r4, [pc, #44]	; (8003f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ee4:	e001      	b.n	8003eea <LoopFillZerobss>

08003ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ee8:	3204      	adds	r2, #4

08003eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eec:	d3fb      	bcc.n	8003ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003eee:	f7ff fe63 	bl	8003bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ef2:	f018 faa5 	bl	801c440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ef6:	f7fc fdb9 	bl	8000a6c <main>
  bx  lr    
 8003efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003efc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f04:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8003f08:	080204c8 	.word	0x080204c8
  ldr r2, =_sbss
 8003f0c:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8003f10:	2000ce60 	.word	0x2000ce60

08003f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f14:	e7fe      	b.n	8003f14 <ADC_IRQHandler>

08003f16 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8003f20:	20c8      	movs	r0, #200	; 0xc8
 8003f22:	f000 fc33 	bl	800478c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003f26:	f000 fa7b 	bl	8004420 <ft5336_I2C_InitializeIfRequired>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003f5e:	f000 fa5f 	bl	8004420 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
 8003f66:	e010      	b.n	8003f8a <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	21a8      	movs	r1, #168	; 0xa8
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fbee 	bl	8004750 <TS_IO_Read>
 8003f74:	4603      	mov	r3, r0
 8003f76:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8003f78:	7b7b      	ldrb	r3, [r7, #13]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b51      	cmp	r3, #81	; 0x51
 8003f7e:	d101      	bne.n	8003f84 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	3301      	adds	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d802      	bhi.n	8003f96 <ft5336_ReadID+0x4e>
 8003f90:	7bbb      	ldrb	r3, [r7, #14]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0e8      	beq.n	8003f68 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8003f96:	7b7b      	ldrb	r3, [r7, #13]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	b29b      	uxth	r3, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fa45 	bl	8004440 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f933 	bl	8004224 <ft5336_TS_DisableIT>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fbb7 	bl	8004750 <TS_IO_Read>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d901      	bls.n	8003ffe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <ft5336_TS_DetectTouch+0x50>)
 8004004:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <ft5336_TS_DetectTouch+0x50>)
 8004008:	2200      	movs	r2, #0
 800400a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	b2db      	uxtb	r3, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	200003b4 	.word	0x200003b4

0800401c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800403e:	4b6d      	ldr	r3, [pc, #436]	; (80041f4 <ft5336_TS_GetXY+0x1d8>)
 8004040:	789a      	ldrb	r2, [r3, #2]
 8004042:	4b6c      	ldr	r3, [pc, #432]	; (80041f4 <ft5336_TS_GetXY+0x1d8>)
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	429a      	cmp	r2, r3
 8004048:	f080 80cf 	bcs.w	80041ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800404c:	4b69      	ldr	r3, [pc, #420]	; (80041f4 <ft5336_TS_GetXY+0x1d8>)
 800404e:	789b      	ldrb	r3, [r3, #2]
 8004050:	2b09      	cmp	r3, #9
 8004052:	d871      	bhi.n	8004138 <ft5336_TS_GetXY+0x11c>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <ft5336_TS_GetXY+0x40>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004085 	.word	0x08004085
 8004060:	08004097 	.word	0x08004097
 8004064:	080040a9 	.word	0x080040a9
 8004068:	080040bb 	.word	0x080040bb
 800406c:	080040cd 	.word	0x080040cd
 8004070:	080040df 	.word	0x080040df
 8004074:	080040f1 	.word	0x080040f1
 8004078:	08004103 	.word	0x08004103
 800407c:	08004115 	.word	0x08004115
 8004080:	08004127 	.word	0x08004127
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8004084:	2304      	movs	r3, #4
 8004086:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8004088:	2303      	movs	r3, #3
 800408a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800408c:	2306      	movs	r3, #6
 800408e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8004090:	2305      	movs	r3, #5
 8004092:	753b      	strb	r3, [r7, #20]
      break;
 8004094:	e051      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8004096:	230a      	movs	r3, #10
 8004098:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800409a:	2309      	movs	r3, #9
 800409c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800409e:	230c      	movs	r3, #12
 80040a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80040a2:	230b      	movs	r3, #11
 80040a4:	753b      	strb	r3, [r7, #20]
      break;
 80040a6:	e048      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80040a8:	2310      	movs	r3, #16
 80040aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80040ac:	230f      	movs	r3, #15
 80040ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80040b0:	2312      	movs	r3, #18
 80040b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80040b4:	2311      	movs	r3, #17
 80040b6:	753b      	strb	r3, [r7, #20]
      break;
 80040b8:	e03f      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80040ba:	2316      	movs	r3, #22
 80040bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80040be:	2315      	movs	r3, #21
 80040c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80040c2:	2318      	movs	r3, #24
 80040c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80040c6:	2317      	movs	r3, #23
 80040c8:	753b      	strb	r3, [r7, #20]
      break;
 80040ca:	e036      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80040cc:	231c      	movs	r3, #28
 80040ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80040d0:	231b      	movs	r3, #27
 80040d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80040d4:	231e      	movs	r3, #30
 80040d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80040d8:	231d      	movs	r3, #29
 80040da:	753b      	strb	r3, [r7, #20]
      break;
 80040dc:	e02d      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80040de:	2322      	movs	r3, #34	; 0x22
 80040e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80040e2:	2321      	movs	r3, #33	; 0x21
 80040e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80040e6:	2324      	movs	r3, #36	; 0x24
 80040e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80040ea:	2323      	movs	r3, #35	; 0x23
 80040ec:	753b      	strb	r3, [r7, #20]
      break;
 80040ee:	e024      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80040f0:	2328      	movs	r3, #40	; 0x28
 80040f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80040f4:	2327      	movs	r3, #39	; 0x27
 80040f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80040f8:	232a      	movs	r3, #42	; 0x2a
 80040fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80040fc:	2329      	movs	r3, #41	; 0x29
 80040fe:	753b      	strb	r3, [r7, #20]
      break;
 8004100:	e01b      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8004102:	232e      	movs	r3, #46	; 0x2e
 8004104:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8004106:	232d      	movs	r3, #45	; 0x2d
 8004108:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800410a:	2330      	movs	r3, #48	; 0x30
 800410c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800410e:	232f      	movs	r3, #47	; 0x2f
 8004110:	753b      	strb	r3, [r7, #20]
      break;
 8004112:	e012      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8004114:	2334      	movs	r3, #52	; 0x34
 8004116:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8004118:	2333      	movs	r3, #51	; 0x33
 800411a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800411c:	2336      	movs	r3, #54	; 0x36
 800411e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8004120:	2335      	movs	r3, #53	; 0x35
 8004122:	753b      	strb	r3, [r7, #20]
      break;
 8004124:	e009      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8004126:	233a      	movs	r3, #58	; 0x3a
 8004128:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800412a:	2339      	movs	r3, #57	; 0x39
 800412c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800412e:	233c      	movs	r3, #60	; 0x3c
 8004130:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8004132:	233b      	movs	r3, #59	; 0x3b
 8004134:	753b      	strb	r3, [r7, #20]
      break;
 8004136:	e000      	b.n	800413a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8004138:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800413a:	89fb      	ldrh	r3, [r7, #14]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	7dfa      	ldrb	r2, [r7, #23]
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fb04 	bl	8004750 <TS_IO_Read>
 8004148:	4603      	mov	r3, r0
 800414a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	b29a      	uxth	r2, r3
 8004152:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <ft5336_TS_GetXY+0x1dc>)
 8004154:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	7dba      	ldrb	r2, [r7, #22]
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f000 faf6 	bl	8004750 <TS_IO_Read>
 8004164:	4603      	mov	r3, r0
 8004166:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004172:	b21a      	sxth	r2, r3
 8004174:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <ft5336_TS_GetXY+0x1dc>)
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b21b      	sxth	r3, r3
 800417a:	4313      	orrs	r3, r2
 800417c:	b21b      	sxth	r3, r3
 800417e:	b29a      	uxth	r2, r3
 8004180:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <ft5336_TS_GetXY+0x1dc>)
 8004182:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8004184:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <ft5336_TS_GetXY+0x1dc>)
 8004186:	881a      	ldrh	r2, [r3, #0]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800418c:	89fb      	ldrh	r3, [r7, #14]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	7d7a      	ldrb	r2, [r7, #21]
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fadb 	bl	8004750 <TS_IO_Read>
 800419a:	4603      	mov	r3, r0
 800419c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <ft5336_TS_GetXY+0x1dc>)
 80041a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	7d3a      	ldrb	r2, [r7, #20]
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 facd 	bl	8004750 <TS_IO_Read>
 80041b6:	4603      	mov	r3, r0
 80041b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80041ba:	7cfb      	ldrb	r3, [r7, #19]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041c4:	b21a      	sxth	r2, r3
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <ft5336_TS_GetXY+0x1dc>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b21b      	sxth	r3, r3
 80041cc:	4313      	orrs	r3, r2
 80041ce:	b21b      	sxth	r3, r3
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <ft5336_TS_GetXY+0x1dc>)
 80041d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <ft5336_TS_GetXY+0x1dc>)
 80041d8:	881a      	ldrh	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <ft5336_TS_GetXY+0x1d8>)
 80041e0:	789b      	ldrb	r3, [r3, #2]
 80041e2:	3301      	adds	r3, #1
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <ft5336_TS_GetXY+0x1d8>)
 80041e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80041ea:	bf00      	nop
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200003b4 	.word	0x200003b4
 80041f8:	200003b8 	.word	0x200003b8

080041fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	21a4      	movs	r1, #164	; 0xa4
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fa80 	bl	800471c <TS_IO_Write>
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	21a4      	movs	r1, #164	; 0xa4
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fa6c 	bl	800471c <TS_IO_Write>
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	6039      	str	r1, [r7, #0]
 8004284:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fa5d 	bl	8004750 <TS_IO_Read>
 8004296:	4603      	mov	r3, r0
 8004298:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	601a      	str	r2, [r3, #0]
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4603      	mov	r3, r0
 80042ba:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80042cc:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <ft5336_TS_GetTouchInfo+0x158>)
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	461a      	mov	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4293      	cmp	r3, r2
 80042d6:	f080 8090 	bcs.w	80043fa <ft5336_TS_GetTouchInfo+0x14e>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d85d      	bhi.n	800439c <ft5336_TS_GetTouchInfo+0xf0>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <ft5336_TS_GetTouchInfo+0x3c>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	08004311 	.word	0x08004311
 80042ec:	0800431f 	.word	0x0800431f
 80042f0:	0800432d 	.word	0x0800432d
 80042f4:	0800433b 	.word	0x0800433b
 80042f8:	08004349 	.word	0x08004349
 80042fc:	08004357 	.word	0x08004357
 8004300:	08004365 	.word	0x08004365
 8004304:	08004373 	.word	0x08004373
 8004308:	08004381 	.word	0x08004381
 800430c:	0800438f 	.word	0x0800438f
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8004310:	2303      	movs	r3, #3
 8004312:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8004314:	2307      	movs	r3, #7
 8004316:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8004318:	2308      	movs	r3, #8
 800431a:	757b      	strb	r3, [r7, #21]
      break;
 800431c:	e03f      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800431e:	2309      	movs	r3, #9
 8004320:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8004322:	230d      	movs	r3, #13
 8004324:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8004326:	230e      	movs	r3, #14
 8004328:	757b      	strb	r3, [r7, #21]
      break;
 800432a:	e038      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 800432c:	230f      	movs	r3, #15
 800432e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8004330:	2313      	movs	r3, #19
 8004332:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8004334:	2314      	movs	r3, #20
 8004336:	757b      	strb	r3, [r7, #21]
      break;
 8004338:	e031      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800433a:	2315      	movs	r3, #21
 800433c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800433e:	2319      	movs	r3, #25
 8004340:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8004342:	231a      	movs	r3, #26
 8004344:	757b      	strb	r3, [r7, #21]
      break;
 8004346:	e02a      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8004348:	231b      	movs	r3, #27
 800434a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 800434c:	231f      	movs	r3, #31
 800434e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8004350:	2320      	movs	r3, #32
 8004352:	757b      	strb	r3, [r7, #21]
      break;
 8004354:	e023      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8004356:	2321      	movs	r3, #33	; 0x21
 8004358:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800435a:	2325      	movs	r3, #37	; 0x25
 800435c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800435e:	2326      	movs	r3, #38	; 0x26
 8004360:	757b      	strb	r3, [r7, #21]
      break;
 8004362:	e01c      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8004364:	2327      	movs	r3, #39	; 0x27
 8004366:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8004368:	232b      	movs	r3, #43	; 0x2b
 800436a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800436c:	232c      	movs	r3, #44	; 0x2c
 800436e:	757b      	strb	r3, [r7, #21]
      break;
 8004370:	e015      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8004372:	232d      	movs	r3, #45	; 0x2d
 8004374:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8004376:	2331      	movs	r3, #49	; 0x31
 8004378:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800437a:	2332      	movs	r3, #50	; 0x32
 800437c:	757b      	strb	r3, [r7, #21]
      break;
 800437e:	e00e      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8004380:	2333      	movs	r3, #51	; 0x33
 8004382:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8004384:	2337      	movs	r3, #55	; 0x37
 8004386:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8004388:	2338      	movs	r3, #56	; 0x38
 800438a:	757b      	strb	r3, [r7, #21]
      break;
 800438c:	e007      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800438e:	2339      	movs	r3, #57	; 0x39
 8004390:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8004392:	233d      	movs	r3, #61	; 0x3d
 8004394:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8004396:	233e      	movs	r3, #62	; 0x3e
 8004398:	757b      	strb	r3, [r7, #21]
      break;
 800439a:	e000      	b.n	800439e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800439c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800439e:	89fb      	ldrh	r3, [r7, #14]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	7dfa      	ldrb	r2, [r7, #23]
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f9d2 	bl	8004750 <TS_IO_Read>
 80043ac:	4603      	mov	r3, r0
 80043ae:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80043b0:	7d3b      	ldrb	r3, [r7, #20]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	119b      	asrs	r3, r3, #6
 80043b6:	f003 0203 	and.w	r2, r3, #3
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80043be:	89fb      	ldrh	r3, [r7, #14]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	7dba      	ldrb	r2, [r7, #22]
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f9c2 	bl	8004750 <TS_IO_Read>
 80043cc:	4603      	mov	r3, r0
 80043ce:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80043d0:	7d3b      	ldrb	r3, [r7, #20]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80043da:	89fb      	ldrh	r3, [r7, #14]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	7d7a      	ldrb	r2, [r7, #21]
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f9b4 	bl	8004750 <TS_IO_Read>
 80043e8:	4603      	mov	r3, r0
 80043ea:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80043ec:	7d3b      	ldrb	r3, [r7, #20]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	111b      	asrs	r3, r3, #4
 80043f2:	f003 0204 	and.w	r2, r3, #4
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200003b4 	.word	0x200003b4

08004408 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <ft5336_Get_I2C_InitializedStatus+0x14>)
 800440e:	781b      	ldrb	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	200003b4 	.word	0x200003b4

08004420 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004424:	f7ff fff0 	bl	8004408 <ft5336_Get_I2C_InitializedStatus>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800442e:	f000 f96b 	bl	8004708 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004432:	4b02      	ldr	r3, [pc, #8]	; (800443c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
  }
}
 8004438:	bf00      	nop
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200003b4 	.word	0x200003b4

08004440 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800444e:	68fb      	ldr	r3, [r7, #12]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a51      	ldr	r2, [pc, #324]	; (80045ac <I2Cx_MspInit+0x150>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d14d      	bne.n	8004508 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800446c:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <I2Cx_MspInit+0x154>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	4a4f      	ldr	r2, [pc, #316]	; (80045b0 <I2Cx_MspInit+0x154>)
 8004472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004476:	6313      	str	r3, [r2, #48]	; 0x30
 8004478:	4b4d      	ldr	r3, [pc, #308]	; (80045b0 <I2Cx_MspInit+0x154>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004488:	2312      	movs	r3, #18
 800448a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800448c:	2300      	movs	r3, #0
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004490:	2302      	movs	r3, #2
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004494:	2304      	movs	r3, #4
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004498:	f107 031c 	add.w	r3, r7, #28
 800449c:	4619      	mov	r1, r3
 800449e:	4845      	ldr	r0, [pc, #276]	; (80045b4 <I2Cx_MspInit+0x158>)
 80044a0:	f003 fc36 	bl	8007d10 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80044a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80044aa:	f107 031c 	add.w	r3, r7, #28
 80044ae:	4619      	mov	r1, r3
 80044b0:	4840      	ldr	r0, [pc, #256]	; (80045b4 <I2Cx_MspInit+0x158>)
 80044b2:	f003 fc2d 	bl	8007d10 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80044b6:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <I2Cx_MspInit+0x154>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a3d      	ldr	r2, [pc, #244]	; (80045b0 <I2Cx_MspInit+0x154>)
 80044bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
 80044c2:	4b3b      	ldr	r3, [pc, #236]	; (80045b0 <I2Cx_MspInit+0x154>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80044ce:	4b38      	ldr	r3, [pc, #224]	; (80045b0 <I2Cx_MspInit+0x154>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4a37      	ldr	r2, [pc, #220]	; (80045b0 <I2Cx_MspInit+0x154>)
 80044d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044d8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80044da:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <I2Cx_MspInit+0x154>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4a34      	ldr	r2, [pc, #208]	; (80045b0 <I2Cx_MspInit+0x154>)
 80044e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044e4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80044e6:	2200      	movs	r2, #0
 80044e8:	210f      	movs	r1, #15
 80044ea:	2048      	movs	r0, #72	; 0x48
 80044ec:	f002 f9f6 	bl	80068dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80044f0:	2048      	movs	r0, #72	; 0x48
 80044f2:	f002 fa0f 	bl	8006914 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80044f6:	2200      	movs	r2, #0
 80044f8:	210f      	movs	r1, #15
 80044fa:	2049      	movs	r0, #73	; 0x49
 80044fc:	f002 f9ee 	bl	80068dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004500:	2049      	movs	r0, #73	; 0x49
 8004502:	f002 fa07 	bl	8006914 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004506:	e04d      	b.n	80045a4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004508:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <I2Cx_MspInit+0x154>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	4a28      	ldr	r2, [pc, #160]	; (80045b0 <I2Cx_MspInit+0x154>)
 800450e:	f043 0302 	orr.w	r3, r3, #2
 8004512:	6313      	str	r3, [r2, #48]	; 0x30
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <I2Cx_MspInit+0x154>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004524:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004526:	2312      	movs	r3, #18
 8004528:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800452e:	2302      	movs	r3, #2
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004532:	2304      	movs	r3, #4
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004536:	f107 031c 	add.w	r3, r7, #28
 800453a:	4619      	mov	r1, r3
 800453c:	481e      	ldr	r0, [pc, #120]	; (80045b8 <I2Cx_MspInit+0x15c>)
 800453e:	f003 fbe7 	bl	8007d10 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004546:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	4619      	mov	r1, r3
 800454e:	481a      	ldr	r0, [pc, #104]	; (80045b8 <I2Cx_MspInit+0x15c>)
 8004550:	f003 fbde 	bl	8007d10 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <I2Cx_MspInit+0x154>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <I2Cx_MspInit+0x154>)
 800455a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800455e:	6413      	str	r3, [r2, #64]	; 0x40
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <I2Cx_MspInit+0x154>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <I2Cx_MspInit+0x154>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4a0f      	ldr	r2, [pc, #60]	; (80045b0 <I2Cx_MspInit+0x154>)
 8004572:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004576:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <I2Cx_MspInit+0x154>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <I2Cx_MspInit+0x154>)
 800457e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004582:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004584:	2200      	movs	r2, #0
 8004586:	210f      	movs	r1, #15
 8004588:	201f      	movs	r0, #31
 800458a:	f002 f9a7 	bl	80068dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800458e:	201f      	movs	r0, #31
 8004590:	f002 f9c0 	bl	8006914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004594:	2200      	movs	r2, #0
 8004596:	210f      	movs	r1, #15
 8004598:	2020      	movs	r0, #32
 800459a:	f002 f99f 	bl	80068dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800459e:	2020      	movs	r0, #32
 80045a0:	f002 f9b8 	bl	8006914 <HAL_NVIC_EnableIRQ>
}
 80045a4:	bf00      	nop
 80045a6:	3730      	adds	r7, #48	; 0x30
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200003bc 	.word	0x200003bc
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40021c00 	.word	0x40021c00
 80045b8:	40020400 	.word	0x40020400

080045bc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f005 fef9 	bl	800a3bc <HAL_I2C_GetState>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d125      	bne.n	800461c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a14      	ldr	r2, [pc, #80]	; (8004624 <I2Cx_Init+0x68>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d103      	bne.n	80045e0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a13      	ldr	r2, [pc, #76]	; (8004628 <I2Cx_Init+0x6c>)
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e002      	b.n	80045e6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a12      	ldr	r2, [pc, #72]	; (800462c <I2Cx_Init+0x70>)
 80045e4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a11      	ldr	r2, [pc, #68]	; (8004630 <I2Cx_Init+0x74>)
 80045ea:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff ff23 	bl	800445c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f005 fbe2 	bl	8009de0 <HAL_I2C_Init>
  }
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	200003bc 	.word	0x200003bc
 8004628:	40005c00 	.word	0x40005c00
 800462c:	40005400 	.word	0x40005400
 8004630:	40912732 	.word	0x40912732

08004634 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af04      	add	r7, sp, #16
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	4608      	mov	r0, r1
 800463e:	4611      	mov	r1, r2
 8004640:	461a      	mov	r2, r3
 8004642:	4603      	mov	r3, r0
 8004644:	72fb      	strb	r3, [r7, #11]
 8004646:	460b      	mov	r3, r1
 8004648:	813b      	strh	r3, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004652:	7afb      	ldrb	r3, [r7, #11]
 8004654:	b299      	uxth	r1, r3
 8004656:	88f8      	ldrh	r0, [r7, #6]
 8004658:	893a      	ldrh	r2, [r7, #8]
 800465a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800465e:	9302      	str	r3, [sp, #8]
 8004660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	4603      	mov	r3, r0
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f005 fd8c 	bl	800a188 <HAL_I2C_Mem_Read>
 8004670:	4603      	mov	r3, r0
 8004672:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800467a:	7afb      	ldrb	r3, [r7, #11]
 800467c:	4619      	mov	r1, r3
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f832 	bl	80046e8 <I2Cx_Error>
  }
  return status;    
 8004684:	7dfb      	ldrb	r3, [r7, #23]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b08a      	sub	sp, #40	; 0x28
 8004692:	af04      	add	r7, sp, #16
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	4608      	mov	r0, r1
 8004698:	4611      	mov	r1, r2
 800469a:	461a      	mov	r2, r3
 800469c:	4603      	mov	r3, r0
 800469e:	72fb      	strb	r3, [r7, #11]
 80046a0:	460b      	mov	r3, r1
 80046a2:	813b      	strh	r3, [r7, #8]
 80046a4:	4613      	mov	r3, r2
 80046a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80046ac:	7afb      	ldrb	r3, [r7, #11]
 80046ae:	b299      	uxth	r1, r3
 80046b0:	88f8      	ldrh	r0, [r7, #6]
 80046b2:	893a      	ldrh	r2, [r7, #8]
 80046b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046b8:	9302      	str	r3, [sp, #8]
 80046ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	4603      	mov	r3, r0
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f005 fc4b 	bl	8009f60 <HAL_I2C_Mem_Write>
 80046ca:	4603      	mov	r3, r0
 80046cc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80046d4:	7afb      	ldrb	r3, [r7, #11]
 80046d6:	4619      	mov	r1, r3
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f805 	bl	80046e8 <I2Cx_Error>
  }
  return status;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f005 fc03 	bl	8009f00 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff ff5e 	bl	80045bc <I2Cx_Init>
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800470c:	4802      	ldr	r0, [pc, #8]	; (8004718 <TS_IO_Init+0x10>)
 800470e:	f7ff ff55 	bl	80045bc <I2Cx_Init>
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200003bc 	.word	0x200003bc

0800471c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af02      	add	r7, sp, #8
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
 8004726:	460b      	mov	r3, r1
 8004728:	71bb      	strb	r3, [r7, #6]
 800472a:	4613      	mov	r3, r2
 800472c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800472e:	79bb      	ldrb	r3, [r7, #6]
 8004730:	b29a      	uxth	r2, r3
 8004732:	79f9      	ldrb	r1, [r7, #7]
 8004734:	2301      	movs	r3, #1
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	1d7b      	adds	r3, r7, #5
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	2301      	movs	r3, #1
 800473e:	4803      	ldr	r0, [pc, #12]	; (800474c <TS_IO_Write+0x30>)
 8004740:	f7ff ffa5 	bl	800468e <I2Cx_WriteMultiple>
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	200003bc 	.word	0x200003bc

08004750 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
 8004756:	4603      	mov	r3, r0
 8004758:	460a      	mov	r2, r1
 800475a:	71fb      	strb	r3, [r7, #7]
 800475c:	4613      	mov	r3, r2
 800475e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004764:	79bb      	ldrb	r3, [r7, #6]
 8004766:	b29a      	uxth	r2, r3
 8004768:	79f9      	ldrb	r1, [r7, #7]
 800476a:	2301      	movs	r3, #1
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	f107 030f 	add.w	r3, r7, #15
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	2301      	movs	r3, #1
 8004776:	4804      	ldr	r0, [pc, #16]	; (8004788 <TS_IO_Read+0x38>)
 8004778:	f7ff ff5c 	bl	8004634 <I2Cx_ReadMultiple>

  return read_value;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	200003bc 	.word	0x200003bc

0800478c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f001 fd3d 	bl	8006214 <HAL_Delay>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80047a8:	4b2f      	ldr	r3, [pc, #188]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047aa:	2228      	movs	r2, #40	; 0x28
 80047ac:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80047ae:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047b0:	2209      	movs	r2, #9
 80047b2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80047b4:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047b6:	2235      	movs	r2, #53	; 0x35
 80047b8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80047ba:	4b2b      	ldr	r3, [pc, #172]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047bc:	220b      	movs	r2, #11
 80047be:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80047c0:	4b29      	ldr	r3, [pc, #164]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047c2:	f240 121b 	movw	r2, #283	; 0x11b
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80047c8:	4b27      	ldr	r3, [pc, #156]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047ca:	f240 2215 	movw	r2, #533	; 0x215
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047d2:	f240 121d 	movw	r2, #285	; 0x11d
 80047d6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80047d8:	4b23      	ldr	r3, [pc, #140]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047da:	f240 2235 	movw	r2, #565	; 0x235
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c
#if HACK_DO_NOT_INITIALIZE_LCD_CLK_IN_BSP==0
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
#endif

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80047e8:	4b1f      	ldr	r3, [pc, #124]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047ea:	f44f 7288 	mov.w	r2, #272	; 0x110
 80047ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80047f0:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <BSP_LCD_Init+0xc4>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <BSP_LCD_Init+0xc4>)
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004808:	4b17      	ldr	r3, [pc, #92]	; (8004868 <BSP_LCD_Init+0xc4>)
 800480a:	2200      	movs	r2, #0
 800480c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800480e:	4b16      	ldr	r3, [pc, #88]	; (8004868 <BSP_LCD_Init+0xc4>)
 8004810:	2200      	movs	r2, #0
 8004812:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004814:	4b14      	ldr	r3, [pc, #80]	; (8004868 <BSP_LCD_Init+0xc4>)
 8004816:	2200      	movs	r2, #0
 8004818:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <BSP_LCD_Init+0xc4>)
 800481c:	2200      	movs	r2, #0
 800481e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <BSP_LCD_Init+0xc4>)
 8004822:	4a12      	ldr	r2, [pc, #72]	; (800486c <BSP_LCD_Init+0xc8>)
 8004824:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004826:	4810      	ldr	r0, [pc, #64]	; (8004868 <BSP_LCD_Init+0xc4>)
 8004828:	f006 fb6b 	bl	800af02 <HAL_LTDC_GetState>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <BSP_LCD_Init+0x96>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004832:	2100      	movs	r1, #0
 8004834:	480c      	ldr	r0, [pc, #48]	; (8004868 <BSP_LCD_Init+0xc4>)
 8004836:	f000 fe8b 	bl	8005550 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800483a:	480b      	ldr	r0, [pc, #44]	; (8004868 <BSP_LCD_Init+0xc4>)
 800483c:	f006 f8de 	bl	800a9fc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004840:	2201      	movs	r2, #1
 8004842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004846:	480a      	ldr	r0, [pc, #40]	; (8004870 <BSP_LCD_Init+0xcc>)
 8004848:	f003 fd32 	bl	80082b0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800484c:	2201      	movs	r2, #1
 800484e:	2108      	movs	r1, #8
 8004850:	4808      	ldr	r0, [pc, #32]	; (8004874 <BSP_LCD_Init+0xd0>)
 8004852:	f003 fd2d 	bl	80082b0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004856:	f001 f861 	bl	800591c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800485a:	4807      	ldr	r0, [pc, #28]	; (8004878 <BSP_LCD_Init+0xd4>)
 800485c:	f000 f8fe 	bl	8004a5c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200090b4 	.word	0x200090b4
 800486c:	40016800 	.word	0x40016800
 8004870:	40022000 	.word	0x40022000
 8004874:	40022800 	.word	0x40022800
 8004878:	2000002c 	.word	0x2000002c

0800487c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <BSP_LCD_GetXSize+0x20>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a06      	ldr	r2, [pc, #24]	; (80048a0 <BSP_LCD_GetXSize+0x24>)
 8004886:	2134      	movs	r1, #52	; 0x34
 8004888:	fb01 f303 	mul.w	r3, r1, r3
 800488c:	4413      	add	r3, r2
 800488e:	3360      	adds	r3, #96	; 0x60
 8004890:	681b      	ldr	r3, [r3, #0]
}
 8004892:	4618      	mov	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	20000448 	.word	0x20000448
 80048a0:	200090b4 	.word	0x200090b4

080048a4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <BSP_LCD_GetYSize+0x20>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a06      	ldr	r2, [pc, #24]	; (80048c8 <BSP_LCD_GetYSize+0x24>)
 80048ae:	2134      	movs	r1, #52	; 0x34
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	4413      	add	r3, r2
 80048b6:	3364      	adds	r3, #100	; 0x64
 80048b8:	681b      	ldr	r3, [r3, #0]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20000448 	.word	0x20000448
 80048c8:	200090b4 	.word	0x200090b4

080048cc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b090      	sub	sp, #64	; 0x40
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	6039      	str	r1, [r7, #0]
 80048d6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80048dc:	f7ff ffce 	bl	800487c <BSP_LCD_GetXSize>
 80048e0:	4603      	mov	r3, r0
 80048e2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80048e8:	f7ff ffdc 	bl	80048a4 <BSP_LCD_GetYSize>
 80048ec:	4603      	mov	r3, r0
 80048ee:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80048f8:	23ff      	movs	r3, #255	; 0xff
 80048fa:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004912:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004918:	2307      	movs	r3, #7
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800491c:	f7ff ffae 	bl	800487c <BSP_LCD_GetXSize>
 8004920:	4603      	mov	r3, r0
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004924:	f7ff ffbe 	bl	80048a4 <BSP_LCD_GetYSize>
 8004928:	4603      	mov	r3, r0
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	f107 030c 	add.w	r3, r7, #12
 8004932:	4619      	mov	r1, r3
 8004934:	4812      	ldr	r0, [pc, #72]	; (8004980 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004936:	f006 f9f3 	bl	800ad20 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	4911      	ldr	r1, [pc, #68]	; (8004984 <BSP_LCD_LayerDefaultInit+0xb8>)
 800493e:	4613      	mov	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	3304      	adds	r3, #4
 800494a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800494e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	490c      	ldr	r1, [pc, #48]	; (8004984 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004954:	4613      	mov	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	3308      	adds	r3, #8
 8004960:	4a09      	ldr	r2, [pc, #36]	; (8004988 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004962:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004964:	88fa      	ldrh	r2, [r7, #6]
 8004966:	4907      	ldr	r1, [pc, #28]	; (8004984 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004968:	4613      	mov	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004976:	601a      	str	r2, [r3, #0]
}
 8004978:	bf00      	nop
 800497a:	3740      	adds	r7, #64	; 0x40
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	200090b4 	.word	0x200090b4
 8004984:	2000044c 	.word	0x2000044c
 8004988:	2000002c 	.word	0x2000002c

0800498c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004994:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <BSP_LCD_SelectLayer+0x1c>)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6013      	str	r3, [r2, #0]
} 
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000448 	.word	0x20000448

080049ac <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4619      	mov	r1, r3
 80049be:	4803      	ldr	r0, [pc, #12]	; (80049cc <BSP_LCD_SetTransparency+0x20>)
 80049c0:	f006 fa69 	bl	800ae96 <HAL_LTDC_SetAlpha>
}
 80049c4:	bf00      	nop
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	200090b4 	.word	0x200090b4

080049d0 <BSP_LCD_SetColorKeying>:
  * @param  LayerIndex: Layer foreground or background
  * @param  RGBValue: Color reference
  * @retval None
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&hLtdcHandler, RGBValue, LayerIndex);
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6839      	ldr	r1, [r7, #0]
 80049de:	4805      	ldr	r0, [pc, #20]	; (80049f4 <BSP_LCD_SetColorKeying+0x24>)
 80049e0:	f006 f9dc 	bl	800ad9c <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&hLtdcHandler, LayerIndex);
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4803      	ldr	r0, [pc, #12]	; (80049f4 <BSP_LCD_SetColorKeying+0x24>)
 80049e8:	f006 fa1c 	bl	800ae24 <HAL_LTDC_EnableColorKeying>
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	200090b4 	.word	0x200090b4

080049f8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <BSP_LCD_SetTextColor+0x28>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4907      	ldr	r1, [pc, #28]	; (8004a24 <BSP_LCD_SetTextColor+0x2c>)
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	601a      	str	r2, [r3, #0]
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	20000448 	.word	0x20000448
 8004a24:	2000044c 	.word	0x2000044c

08004a28 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <BSP_LCD_SetBackColor+0x2c>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4908      	ldr	r1, [pc, #32]	; (8004a58 <BSP_LCD_SetBackColor+0x30>)
 8004a36:	4613      	mov	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	3304      	adds	r3, #4
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	20000448 	.word	0x20000448
 8004a58:	2000044c 	.word	0x2000044c

08004a5c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004a64:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <BSP_LCD_SetFont+0x2c>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4908      	ldr	r1, [pc, #32]	; (8004a8c <BSP_LCD_SetFont+0x30>)
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	3308      	adds	r3, #8
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	601a      	str	r2, [r3, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000448 	.word	0x20000448
 8004a8c:	2000044c 	.word	0x2000044c

08004a90 <BSP_LCD_ReadPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position 
  * @retval RGB pixel color
  */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8004a90:	b5b0      	push	{r4, r5, r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	460a      	mov	r2, r1
 8004a9a:	80fb      	strh	r3, [r7, #6]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
  
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004aa4:	4b4b      	ldr	r3, [pc, #300]	; (8004bd4 <BSP_LCD_ReadPixel+0x144>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a4b      	ldr	r2, [pc, #300]	; (8004bd8 <BSP_LCD_ReadPixel+0x148>)
 8004aaa:	2134      	movs	r1, #52	; 0x34
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3348      	adds	r3, #72	; 0x48
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d115      	bne.n	8004ae6 <BSP_LCD_ReadPixel+0x56>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 8004aba:	4b46      	ldr	r3, [pc, #280]	; (8004bd4 <BSP_LCD_ReadPixel+0x144>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a46      	ldr	r2, [pc, #280]	; (8004bd8 <BSP_LCD_ReadPixel+0x148>)
 8004ac0:	2134      	movs	r1, #52	; 0x34
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	335c      	adds	r3, #92	; 0x5c
 8004aca:	681c      	ldr	r4, [r3, #0]
 8004acc:	88bd      	ldrh	r5, [r7, #4]
 8004ace:	f7ff fed5 	bl	800487c <BSP_LCD_GetXSize>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	fb03 f205 	mul.w	r2, r3, r5
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4423      	add	r3, r4
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e070      	b.n	8004bc8 <BSP_LCD_ReadPixel+0x138>
  }
  else if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <BSP_LCD_ReadPixel+0x144>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3b      	ldr	r2, [pc, #236]	; (8004bd8 <BSP_LCD_ReadPixel+0x148>)
 8004aec:	2134      	movs	r1, #52	; 0x34
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	4413      	add	r3, r2
 8004af4:	3348      	adds	r3, #72	; 0x48
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d117      	bne.n	8004b2c <BSP_LCD_ReadPixel+0x9c>
  {
    /* Read data value from SDRAM memory */
    ret = (*(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 8004afc:	4b35      	ldr	r3, [pc, #212]	; (8004bd4 <BSP_LCD_ReadPixel+0x144>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a35      	ldr	r2, [pc, #212]	; (8004bd8 <BSP_LCD_ReadPixel+0x148>)
 8004b02:	2134      	movs	r1, #52	; 0x34
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	4413      	add	r3, r2
 8004b0a:	335c      	adds	r3, #92	; 0x5c
 8004b0c:	681c      	ldr	r4, [r3, #0]
 8004b0e:	88bd      	ldrh	r5, [r7, #4]
 8004b10:	f7ff feb4 	bl	800487c <BSP_LCD_GetXSize>
 8004b14:	4603      	mov	r3, r0
 8004b16:	fb03 f205 	mul.w	r2, r3, r5
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4423      	add	r3, r4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e04d      	b.n	8004bc8 <BSP_LCD_ReadPixel+0x138>
  }
  else if((hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8004b2c:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <BSP_LCD_ReadPixel+0x144>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a29      	ldr	r2, [pc, #164]	; (8004bd8 <BSP_LCD_ReadPixel+0x148>)
 8004b32:	2134      	movs	r1, #52	; 0x34
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	3348      	adds	r3, #72	; 0x48
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d015      	beq.n	8004b6e <BSP_LCD_ReadPixel+0xde>
          (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <BSP_LCD_ReadPixel+0x144>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <BSP_LCD_ReadPixel+0x148>)
 8004b48:	2134      	movs	r1, #52	; 0x34
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3348      	adds	r3, #72	; 0x48
 8004b52:	681b      	ldr	r3, [r3, #0]
  else if((hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d00a      	beq.n	8004b6e <BSP_LCD_ReadPixel+0xde>
          (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_AL88))  
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <BSP_LCD_ReadPixel+0x144>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <BSP_LCD_ReadPixel+0x148>)
 8004b5e:	2134      	movs	r1, #52	; 0x34
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	3348      	adds	r3, #72	; 0x48
 8004b68:	681b      	ldr	r3, [r3, #0]
          (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b6a:	2b07      	cmp	r3, #7
 8004b6c:	d116      	bne.n	8004b9c <BSP_LCD_ReadPixel+0x10c>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8004b6e:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <BSP_LCD_ReadPixel+0x144>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <BSP_LCD_ReadPixel+0x148>)
 8004b74:	2134      	movs	r1, #52	; 0x34
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	335c      	adds	r3, #92	; 0x5c
 8004b7e:	681c      	ldr	r4, [r3, #0]
 8004b80:	88bd      	ldrh	r5, [r7, #4]
 8004b82:	f7ff fe7b 	bl	800487c <BSP_LCD_GetXSize>
 8004b86:	4603      	mov	r3, r0
 8004b88:	fb03 f205 	mul.w	r2, r3, r5
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	4413      	add	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4423      	add	r3, r4
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e015      	b.n	8004bc8 <BSP_LCD_ReadPixel+0x138>
  }
  else
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint8_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8004b9c:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <BSP_LCD_ReadPixel+0x144>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	; (8004bd8 <BSP_LCD_ReadPixel+0x148>)
 8004ba2:	2134      	movs	r1, #52	; 0x34
 8004ba4:	fb01 f303 	mul.w	r3, r1, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	335c      	adds	r3, #92	; 0x5c
 8004bac:	681c      	ldr	r4, [r3, #0]
 8004bae:	88bd      	ldrh	r5, [r7, #4]
 8004bb0:	f7ff fe64 	bl	800487c <BSP_LCD_GetXSize>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	fb03 f205 	mul.w	r2, r3, r5
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	4423      	add	r3, r4
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000448 	.word	0x20000448
 8004bd8:	200090b4 	.word	0x200090b4

08004bdc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <BSP_LCD_Clear+0x48>)
 8004be6:	681c      	ldr	r4, [r3, #0]
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <BSP_LCD_Clear+0x48>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <BSP_LCD_Clear+0x4c>)
 8004bee:	2134      	movs	r1, #52	; 0x34
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	335c      	adds	r3, #92	; 0x5c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461e      	mov	r6, r3
 8004bfc:	f7ff fe3e 	bl	800487c <BSP_LCD_GetXSize>
 8004c00:	4605      	mov	r5, r0
 8004c02:	f7ff fe4f 	bl	80048a4 <BSP_LCD_GetYSize>
 8004c06:	4602      	mov	r2, r0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	462a      	mov	r2, r5
 8004c14:	4631      	mov	r1, r6
 8004c16:	4620      	mov	r0, r4
 8004c18:	f000 fe34 	bl	8005884 <LL_FillBuffer>
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c24:	20000448 	.word	0x20000448
 8004c28:	200090b4 	.word	0x200090b4

08004c2c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004c2c:	b5b0      	push	{r4, r5, r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	4603      	mov	r3, r0
 8004c34:	80fb      	strh	r3, [r7, #6]
 8004c36:	460b      	mov	r3, r1
 8004c38:	80bb      	strh	r3, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004c42:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <BSP_LCD_DrawHLine+0xb0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a26      	ldr	r2, [pc, #152]	; (8004ce0 <BSP_LCD_DrawHLine+0xb4>)
 8004c48:	2134      	movs	r1, #52	; 0x34
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	3348      	adds	r3, #72	; 0x48
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d114      	bne.n	8004c82 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <BSP_LCD_DrawHLine+0xb0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a20      	ldr	r2, [pc, #128]	; (8004ce0 <BSP_LCD_DrawHLine+0xb4>)
 8004c5e:	2134      	movs	r1, #52	; 0x34
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	335c      	adds	r3, #92	; 0x5c
 8004c68:	681c      	ldr	r4, [r3, #0]
 8004c6a:	f7ff fe07 	bl	800487c <BSP_LCD_GetXSize>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	88bb      	ldrh	r3, [r7, #4]
 8004c72:	fb03 f202 	mul.w	r2, r3, r2
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	4413      	add	r3, r2
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4423      	add	r3, r4
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e013      	b.n	8004caa <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004c82:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <BSP_LCD_DrawHLine+0xb0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <BSP_LCD_DrawHLine+0xb4>)
 8004c88:	2134      	movs	r1, #52	; 0x34
 8004c8a:	fb01 f303 	mul.w	r3, r1, r3
 8004c8e:	4413      	add	r3, r2
 8004c90:	335c      	adds	r3, #92	; 0x5c
 8004c92:	681c      	ldr	r4, [r3, #0]
 8004c94:	f7ff fdf2 	bl	800487c <BSP_LCD_GetXSize>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	88bb      	ldrh	r3, [r7, #4]
 8004c9c:	fb03 f202 	mul.w	r2, r3, r2
 8004ca0:	88fb      	ldrh	r3, [r7, #6]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4423      	add	r3, r4
 8004ca8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004caa:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <BSP_LCD_DrawHLine+0xb0>)
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	887c      	ldrh	r4, [r7, #2]
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <BSP_LCD_DrawHLine+0xb0>)
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	4d0b      	ldr	r5, [pc, #44]	; (8004ce4 <BSP_LCD_DrawHLine+0xb8>)
 8004cb8:	4613      	mov	r3, r2
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	442b      	add	r3, r5
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4622      	mov	r2, r4
 8004cce:	f000 fdd9 	bl	8005884 <LL_FillBuffer>
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000448 	.word	0x20000448
 8004ce0:	200090b4 	.word	0x200090b4
 8004ce4:	2000044c 	.word	0x2000044c

08004ce8 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	4603      	mov	r3, r0
 8004cf0:	80fb      	strh	r3, [r7, #6]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	80bb      	strh	r3, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004cfe:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <BSP_LCD_DrawVLine+0xb8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <BSP_LCD_DrawVLine+0xbc>)
 8004d04:	2134      	movs	r1, #52	; 0x34
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3348      	adds	r3, #72	; 0x48
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d114      	bne.n	8004d3e <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004d14:	4b22      	ldr	r3, [pc, #136]	; (8004da0 <BSP_LCD_DrawVLine+0xb8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a22      	ldr	r2, [pc, #136]	; (8004da4 <BSP_LCD_DrawVLine+0xbc>)
 8004d1a:	2134      	movs	r1, #52	; 0x34
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	335c      	adds	r3, #92	; 0x5c
 8004d24:	681c      	ldr	r4, [r3, #0]
 8004d26:	f7ff fda9 	bl	800487c <BSP_LCD_GetXSize>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	88bb      	ldrh	r3, [r7, #4]
 8004d2e:	fb03 f202 	mul.w	r2, r3, r2
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	4413      	add	r3, r2
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4423      	add	r3, r4
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e013      	b.n	8004d66 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004d3e:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <BSP_LCD_DrawVLine+0xb8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <BSP_LCD_DrawVLine+0xbc>)
 8004d44:	2134      	movs	r1, #52	; 0x34
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	335c      	adds	r3, #92	; 0x5c
 8004d4e:	681c      	ldr	r4, [r3, #0]
 8004d50:	f7ff fd94 	bl	800487c <BSP_LCD_GetXSize>
 8004d54:	4602      	mov	r2, r0
 8004d56:	88bb      	ldrh	r3, [r7, #4]
 8004d58:	fb03 f202 	mul.w	r2, r3, r2
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4423      	add	r3, r4
 8004d64:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8004d66:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <BSP_LCD_DrawVLine+0xb8>)
 8004d68:	681c      	ldr	r4, [r3, #0]
 8004d6a:	68fd      	ldr	r5, [r7, #12]
 8004d6c:	887e      	ldrh	r6, [r7, #2]
 8004d6e:	f7ff fd85 	bl	800487c <BSP_LCD_GetXSize>
 8004d72:	4603      	mov	r3, r0
 8004d74:	1e59      	subs	r1, r3, #1
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <BSP_LCD_DrawVLine+0xb8>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	480b      	ldr	r0, [pc, #44]	; (8004da8 <BSP_LCD_DrawVLine+0xc0>)
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4403      	add	r3, r0
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	9100      	str	r1, [sp, #0]
 8004d8c:	4633      	mov	r3, r6
 8004d8e:	2201      	movs	r2, #1
 8004d90:	4629      	mov	r1, r5
 8004d92:	4620      	mov	r0, r4
 8004d94:	f000 fd76 	bl	8005884 <LL_FillBuffer>
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da0:	20000448 	.word	0x20000448
 8004da4:	200090b4 	.word	0x200090b4
 8004da8:	2000044c 	.word	0x2000044c

08004dac <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b08b      	sub	sp, #44	; 0x2c
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	461a      	mov	r2, r3
 8004dba:	4623      	mov	r3, r4
 8004dbc:	80fb      	strh	r3, [r7, #6]
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80bb      	strh	r3, [r7, #4]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	807b      	strh	r3, [r7, #2]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8004dca:	2300      	movs	r3, #0
 8004dcc:	823b      	strh	r3, [r7, #16]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	81fb      	strh	r3, [r7, #14]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004dda:	2300      	movs	r3, #0
 8004ddc:	847b      	strh	r3, [r7, #34]	; 0x22
 8004dde:	2300      	movs	r3, #0
 8004de0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8004de2:	2300      	movs	r3, #0
 8004de4:	83fb      	strh	r3, [r7, #30]
 8004de6:	2300      	movs	r3, #0
 8004de8:	83bb      	strh	r3, [r7, #28]
 8004dea:	2300      	movs	r3, #0
 8004dec:	837b      	strh	r3, [r7, #26]
 8004dee:	2300      	movs	r3, #0
 8004df0:	833b      	strh	r3, [r7, #24]
 8004df2:	2300      	movs	r3, #0
 8004df4:	82fb      	strh	r3, [r7, #22]
 8004df6:	2300      	movs	r3, #0
 8004df8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8004dfe:	887a      	ldrh	r2, [r7, #2]
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bfb8      	it	lt
 8004e08:	425b      	neglt	r3, r3
 8004e0a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8004e0c:	883a      	ldrh	r2, [r7, #0]
 8004e0e:	88bb      	ldrh	r3, [r7, #4]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bfb8      	it	lt
 8004e16:	425b      	neglt	r3, r3
 8004e18:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8004e1e:	88bb      	ldrh	r3, [r7, #4]
 8004e20:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d304      	bcc.n	8004e34 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	843b      	strh	r3, [r7, #32]
 8004e32:	e005      	b.n	8004e40 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e38:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8004e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e3e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8004e40:	883a      	ldrh	r2, [r7, #0]
 8004e42:	88bb      	ldrh	r3, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d304      	bcc.n	8004e52 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	83bb      	strh	r3, [r7, #28]
 8004e50:	e005      	b.n	8004e5e <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8004e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e56:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8004e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e5c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8004e5e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	db11      	blt.n	8004e8e <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8004e6e:	2300      	movs	r3, #0
 8004e70:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8004e72:	8a3b      	ldrh	r3, [r7, #16]
 8004e74:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8004e76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	da00      	bge.n	8004e80 <BSP_LCD_DrawLine+0xd4>
 8004e7e:	3301      	adds	r3, #1
 8004e80:	105b      	asrs	r3, r3, #1
 8004e82:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8004e84:	89fb      	ldrh	r3, [r7, #14]
 8004e86:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8004e88:	8a3b      	ldrh	r3, [r7, #16]
 8004e8a:	82bb      	strh	r3, [r7, #20]
 8004e8c:	e010      	b.n	8004eb0 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8004e8e:	2300      	movs	r3, #0
 8004e90:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8004e92:	2300      	movs	r3, #0
 8004e94:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004e96:	89fb      	ldrh	r3, [r7, #14]
 8004e98:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8004e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da00      	bge.n	8004ea4 <BSP_LCD_DrawLine+0xf8>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	105b      	asrs	r3, r3, #1
 8004ea6:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8004ea8:	8a3b      	ldrh	r3, [r7, #16]
 8004eaa:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8004eac:	89fb      	ldrh	r3, [r7, #14]
 8004eae:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	827b      	strh	r3, [r7, #18]
 8004eb4:	e037      	b.n	8004f26 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8004eb6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004eb8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <BSP_LCD_DrawLine+0x190>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4c20      	ldr	r4, [pc, #128]	; (8004f40 <BSP_LCD_DrawLine+0x194>)
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4423      	add	r3, r4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f000 f955 	bl	800517c <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8004ed2:	8b3a      	ldrh	r2, [r7, #24]
 8004ed4:	8afb      	ldrh	r3, [r7, #22]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8004edc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004ee0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	db0e      	blt.n	8004f06 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8004ee8:	8b3a      	ldrh	r2, [r7, #24]
 8004eea:	8b7b      	ldrh	r3, [r7, #26]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8004ef2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ef6:	4413      	add	r3, r2
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8004efc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004efe:	8bfb      	ldrh	r3, [r7, #30]
 8004f00:	4413      	add	r3, r2
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8004f06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f08:	8c3b      	ldrh	r3, [r7, #32]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8004f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f12:	8bbb      	ldrh	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8004f1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3301      	adds	r3, #1
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	827b      	strh	r3, [r7, #18]
 8004f26:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004f2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	ddc1      	ble.n	8004eb6 <BSP_LCD_DrawLine+0x10a>
  }
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	372c      	adds	r7, #44	; 0x2c
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd90      	pop	{r4, r7, pc}
 8004f3c:	20000448 	.word	0x20000448
 8004f40:	2000044c 	.word	0x2000044c

08004f44 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	461a      	mov	r2, r3
 8004f52:	4623      	mov	r3, r4
 8004f54:	80fb      	strh	r3, [r7, #6]
 8004f56:	4603      	mov	r3, r0
 8004f58:	80bb      	strh	r3, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	807b      	strh	r3, [r7, #2]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8004f62:	887a      	ldrh	r2, [r7, #2]
 8004f64:	88b9      	ldrh	r1, [r7, #4]
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fe5f 	bl	8004c2c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8004f6e:	88ba      	ldrh	r2, [r7, #4]
 8004f70:	883b      	ldrh	r3, [r7, #0]
 8004f72:	4413      	add	r3, r2
 8004f74:	b299      	uxth	r1, r3
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fe56 	bl	8004c2c <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8004f80:	883a      	ldrh	r2, [r7, #0]
 8004f82:	88b9      	ldrh	r1, [r7, #4]
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff feae 	bl	8004ce8 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	887b      	ldrh	r3, [r7, #2]
 8004f90:	4413      	add	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	883a      	ldrh	r2, [r7, #0]
 8004f96:	88b9      	ldrh	r1, [r7, #4]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fea5 	bl	8004ce8 <BSP_LCD_DrawVLine>
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd90      	pop	{r4, r7, pc}
	...

08004fa8 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	80fb      	strh	r3, [r7, #6]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	80bb      	strh	r3, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004fba:	887b      	ldrh	r3, [r7, #2]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	f1c3 0303 	rsb	r3, r3, #3
 8004fc2:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004fc8:	887b      	ldrh	r3, [r7, #2]
 8004fca:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8004fcc:	e0c7      	b.n	800515e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	b298      	uxth	r0, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	88ba      	ldrh	r2, [r7, #4]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	b299      	uxth	r1, r3
 8004fe2:	4b64      	ldr	r3, [pc, #400]	; (8005174 <BSP_LCD_DrawCircle+0x1cc>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4c64      	ldr	r4, [pc, #400]	; (8005178 <BSP_LCD_DrawCircle+0x1d0>)
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4423      	add	r3, r4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f000 f8c1 	bl	800517c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	88fa      	ldrh	r2, [r7, #6]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	b298      	uxth	r0, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	b29b      	uxth	r3, r3
 8005008:	88ba      	ldrh	r2, [r7, #4]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	b299      	uxth	r1, r3
 800500e:	4b59      	ldr	r3, [pc, #356]	; (8005174 <BSP_LCD_DrawCircle+0x1cc>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4c59      	ldr	r4, [pc, #356]	; (8005178 <BSP_LCD_DrawCircle+0x1d0>)
 8005014:	4613      	mov	r3, r2
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4423      	add	r3, r4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	f000 f8ab 	bl	800517c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	b29a      	uxth	r2, r3
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	4413      	add	r3, r2
 800502e:	b298      	uxth	r0, r3
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	b29b      	uxth	r3, r3
 8005034:	88ba      	ldrh	r2, [r7, #4]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	b299      	uxth	r1, r3
 800503a:	4b4e      	ldr	r3, [pc, #312]	; (8005174 <BSP_LCD_DrawCircle+0x1cc>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4c4e      	ldr	r4, [pc, #312]	; (8005178 <BSP_LCD_DrawCircle+0x1d0>)
 8005040:	4613      	mov	r3, r2
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4423      	add	r3, r4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	f000 f895 	bl	800517c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	b29b      	uxth	r3, r3
 8005056:	88fa      	ldrh	r2, [r7, #6]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	b298      	uxth	r0, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	b29b      	uxth	r3, r3
 8005060:	88ba      	ldrh	r2, [r7, #4]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	b299      	uxth	r1, r3
 8005066:	4b43      	ldr	r3, [pc, #268]	; (8005174 <BSP_LCD_DrawCircle+0x1cc>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4c43      	ldr	r4, [pc, #268]	; (8005178 <BSP_LCD_DrawCircle+0x1d0>)
 800506c:	4613      	mov	r3, r2
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4423      	add	r3, r4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	f000 f87f 	bl	800517c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	b29a      	uxth	r2, r3
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	4413      	add	r3, r2
 8005086:	b298      	uxth	r0, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	b29a      	uxth	r2, r3
 800508c:	88bb      	ldrh	r3, [r7, #4]
 800508e:	4413      	add	r3, r2
 8005090:	b299      	uxth	r1, r3
 8005092:	4b38      	ldr	r3, [pc, #224]	; (8005174 <BSP_LCD_DrawCircle+0x1cc>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4c38      	ldr	r4, [pc, #224]	; (8005178 <BSP_LCD_DrawCircle+0x1d0>)
 8005098:	4613      	mov	r3, r2
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4423      	add	r3, r4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	f000 f869 	bl	800517c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	b298      	uxth	r0, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	88bb      	ldrh	r3, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	b299      	uxth	r1, r3
 80050be:	4b2d      	ldr	r3, [pc, #180]	; (8005174 <BSP_LCD_DrawCircle+0x1cc>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4c2d      	ldr	r4, [pc, #180]	; (8005178 <BSP_LCD_DrawCircle+0x1d0>)
 80050c4:	4613      	mov	r3, r2
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4423      	add	r3, r4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	f000 f853 	bl	800517c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	4413      	add	r3, r2
 80050de:	b298      	uxth	r0, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	88bb      	ldrh	r3, [r7, #4]
 80050e6:	4413      	add	r3, r2
 80050e8:	b299      	uxth	r1, r3
 80050ea:	4b22      	ldr	r3, [pc, #136]	; (8005174 <BSP_LCD_DrawCircle+0x1cc>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4c22      	ldr	r4, [pc, #136]	; (8005178 <BSP_LCD_DrawCircle+0x1d0>)
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4423      	add	r3, r4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	f000 f83d 	bl	800517c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	b29b      	uxth	r3, r3
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	b298      	uxth	r0, r3
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	b29a      	uxth	r2, r3
 8005110:	88bb      	ldrh	r3, [r7, #4]
 8005112:	4413      	add	r3, r2
 8005114:	b299      	uxth	r1, r3
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <BSP_LCD_DrawCircle+0x1cc>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4c17      	ldr	r4, [pc, #92]	; (8005178 <BSP_LCD_DrawCircle+0x1d0>)
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4423      	add	r3, r4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	f000 f827 	bl	800517c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	da06      	bge.n	8005142 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	009a      	lsls	r2, r3, #2
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	3306      	adds	r3, #6
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e00a      	b.n	8005158 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	009a      	lsls	r2, r3, #2
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4413      	add	r3, r2
 800514e:	330a      	adds	r3, #10
 8005150:	617b      	str	r3, [r7, #20]
      current_y--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3b01      	subs	r3, #1
 8005156:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	3301      	adds	r3, #1
 800515c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	429a      	cmp	r2, r3
 8005164:	f67f af33 	bls.w	8004fce <BSP_LCD_DrawCircle+0x26>
  } 
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd90      	pop	{r4, r7, pc}
 8005172:	bf00      	nop
 8005174:	20000448 	.word	0x20000448
 8005178:	2000044c 	.word	0x2000044c

0800517c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800517c:	b5b0      	push	{r4, r5, r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	603a      	str	r2, [r7, #0]
 8005186:	80fb      	strh	r3, [r7, #6]
 8005188:	460b      	mov	r3, r1
 800518a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800518c:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <BSP_LCD_DrawPixel+0x88>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <BSP_LCD_DrawPixel+0x8c>)
 8005192:	2134      	movs	r1, #52	; 0x34
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	3348      	adds	r3, #72	; 0x48
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d116      	bne.n	80051d0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <BSP_LCD_DrawPixel+0x88>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a18      	ldr	r2, [pc, #96]	; (8005208 <BSP_LCD_DrawPixel+0x8c>)
 80051a8:	2134      	movs	r1, #52	; 0x34
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	335c      	adds	r3, #92	; 0x5c
 80051b2:	681c      	ldr	r4, [r3, #0]
 80051b4:	88bd      	ldrh	r5, [r7, #4]
 80051b6:	f7ff fb61 	bl	800487c <BSP_LCD_GetXSize>
 80051ba:	4603      	mov	r3, r0
 80051bc:	fb03 f205 	mul.w	r2, r3, r5
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	4413      	add	r3, r2
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	4423      	add	r3, r4
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	b292      	uxth	r2, r2
 80051cc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80051ce:	e015      	b.n	80051fc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <BSP_LCD_DrawPixel+0x88>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a0c      	ldr	r2, [pc, #48]	; (8005208 <BSP_LCD_DrawPixel+0x8c>)
 80051d6:	2134      	movs	r1, #52	; 0x34
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	4413      	add	r3, r2
 80051de:	335c      	adds	r3, #92	; 0x5c
 80051e0:	681c      	ldr	r4, [r3, #0]
 80051e2:	88bd      	ldrh	r5, [r7, #4]
 80051e4:	f7ff fb4a 	bl	800487c <BSP_LCD_GetXSize>
 80051e8:	4603      	mov	r3, r0
 80051ea:	fb03 f205 	mul.w	r2, r3, r5
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4423      	add	r3, r4
 80051f6:	461a      	mov	r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bdb0      	pop	{r4, r5, r7, pc}
 8005204:	20000448 	.word	0x20000448
 8005208:	200090b4 	.word	0x200090b4

0800520c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	80fb      	strh	r3, [r7, #6]
 8005216:	460b      	mov	r3, r1
 8005218:	80bb      	strh	r3, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800521e:	887b      	ldrh	r3, [r7, #2]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	f1c3 0303 	rsb	r3, r3, #3
 8005226:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800522c:	887b      	ldrh	r3, [r7, #2]
 800522e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005230:	4b44      	ldr	r3, [pc, #272]	; (8005344 <BSP_LCD_FillCircle+0x138>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4944      	ldr	r1, [pc, #272]	; (8005348 <BSP_LCD_FillCircle+0x13c>)
 8005236:	4613      	mov	r3, r2
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fbd8 	bl	80049f8 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8005248:	e061      	b.n	800530e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d021      	beq.n	8005294 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	b29b      	uxth	r3, r3
 8005254:	88fa      	ldrh	r2, [r7, #6]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	b298      	uxth	r0, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	b29a      	uxth	r2, r3
 800525e:	88bb      	ldrh	r3, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	b299      	uxth	r1, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	b29b      	uxth	r3, r3
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	f7ff fcdd 	bl	8004c2c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	b29b      	uxth	r3, r3
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	b298      	uxth	r0, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	b29b      	uxth	r3, r3
 8005280:	88ba      	ldrh	r2, [r7, #4]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	b299      	uxth	r1, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	b29b      	uxth	r3, r3
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	b29b      	uxth	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	f7ff fccc 	bl	8004c2c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d021      	beq.n	80052de <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	b29b      	uxth	r3, r3
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	b298      	uxth	r0, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	88ba      	ldrh	r2, [r7, #4]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	b299      	uxth	r1, r3
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7ff fcb8 	bl	8004c2c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	b298      	uxth	r0, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	88bb      	ldrh	r3, [r7, #4]
 80052cc:	4413      	add	r3, r2
 80052ce:	b299      	uxth	r1, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	f7ff fca7 	bl	8004c2c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	da06      	bge.n	80052f2 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	009a      	lsls	r2, r3, #2
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	3306      	adds	r3, #6
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e00a      	b.n	8005308 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	009a      	lsls	r2, r3, #2
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	4413      	add	r3, r2
 80052fe:	330a      	adds	r3, #10
 8005300:	617b      	str	r3, [r7, #20]
      current_y--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b01      	subs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3301      	adds	r3, #1
 800530c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	429a      	cmp	r2, r3
 8005314:	d999      	bls.n	800524a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <BSP_LCD_FillCircle+0x138>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	490b      	ldr	r1, [pc, #44]	; (8005348 <BSP_LCD_FillCircle+0x13c>)
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fb65 	bl	80049f8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800532e:	887a      	ldrh	r2, [r7, #2]
 8005330:	88b9      	ldrh	r1, [r7, #4]
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fe37 	bl	8004fa8 <BSP_LCD_DrawCircle>
}
 800533a:	bf00      	nop
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000448 	.word	0x20000448
 8005348:	2000044c 	.word	0x2000044c

0800534c <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 800534c:	b5b0      	push	{r4, r5, r7, lr}
 800534e:	b08c      	sub	sp, #48	; 0x30
 8005350:	af02      	add	r7, sp, #8
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	833b      	strh	r3, [r7, #24]
 800535c:	2300      	movs	r3, #0
 800535e:	82fb      	strh	r3, [r7, #22]
 8005360:	2300      	movs	r3, #0
 8005362:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005364:	2300      	movs	r3, #0
 8005366:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005368:	2300      	movs	r3, #0
 800536a:	82bb      	strh	r3, [r7, #20]
 800536c:	2300      	movs	r3, #0
 800536e:	827b      	strh	r3, [r7, #18]
 8005370:	2300      	movs	r3, #0
 8005372:	823b      	strh	r3, [r7, #16]
 8005374:	2300      	movs	r3, #0
 8005376:	81fb      	strh	r3, [r7, #14]
 8005378:	2300      	movs	r3, #0
 800537a:	81bb      	strh	r3, [r7, #12]
 800537c:	2300      	movs	r3, #0
 800537e:	817b      	strh	r3, [r7, #10]
 8005380:	2300      	movs	r3, #0
 8005382:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	843b      	strh	r3, [r7, #32]
 8005388:	2300      	movs	r3, #0
 800538a:	83fb      	strh	r3, [r7, #30]
 800538c:	2300      	movs	r3, #0
 800538e:	83bb      	strh	r3, [r7, #28]
 8005390:	2300      	movs	r3, #0
 8005392:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800539a:	83fb      	strh	r3, [r7, #30]
 800539c:	8bfb      	ldrh	r3, [r7, #30]
 800539e:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80053a6:	837b      	strh	r3, [r7, #26]
 80053a8:	8b7b      	ldrh	r3, [r7, #26]
 80053aa:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 80053ac:	2301      	movs	r3, #1
 80053ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80053b0:	e02f      	b.n	8005412 <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 80053b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	4413      	add	r3, r2
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 80053c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80053c4:	8c3b      	ldrh	r3, [r7, #32]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	da01      	bge.n	80053ce <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 80053ca:	89bb      	ldrh	r3, [r7, #12]
 80053cc:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 80053ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80053d2:	8bfb      	ldrh	r3, [r7, #30]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	dd01      	ble.n	80053dc <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 80053d8:	89bb      	ldrh	r3, [r7, #12]
 80053da:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 80053dc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4413      	add	r3, r2
 80053e6:	885b      	ldrh	r3, [r3, #2]
 80053e8:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 80053ea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80053ee:	8bbb      	ldrh	r3, [r7, #28]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	da01      	bge.n	80053f8 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 80053f4:	897b      	ldrh	r3, [r7, #10]
 80053f6:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 80053f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80053fc:	8b7b      	ldrh	r3, [r7, #26]
 80053fe:	429a      	cmp	r2, r3
 8005400:	dd01      	ble.n	8005406 <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 8005402:	897b      	ldrh	r3, [r7, #10]
 8005404:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8005406:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800540a:	b29b      	uxth	r3, r3
 800540c:	3301      	adds	r3, #1
 800540e:	b29b      	uxth	r3, r3
 8005410:	847b      	strh	r3, [r7, #34]	; 0x22
 8005412:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	429a      	cmp	r2, r3
 800541a:	dbca      	blt.n	80053b2 <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 800541c:	887b      	ldrh	r3, [r7, #2]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d974      	bls.n	800550c <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 8005422:	8c3a      	ldrh	r2, [r7, #32]
 8005424:	8bfb      	ldrh	r3, [r7, #30]
 8005426:	4413      	add	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	da00      	bge.n	800542e <BSP_LCD_FillPolygon+0xe2>
 800542c:	3301      	adds	r3, #1
 800542e:	105b      	asrs	r3, r3, #1
 8005430:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 8005432:	8b7a      	ldrh	r2, [r7, #26]
 8005434:	8bbb      	ldrh	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	da00      	bge.n	800543e <BSP_LCD_FillPolygon+0xf2>
 800543c:	3301      	adds	r3, #1
 800543e:	105b      	asrs	r3, r3, #1
 8005440:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	885b      	ldrh	r3, [r3, #2]
 800544c:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 800544e:	e032      	b.n	80054b6 <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	885b      	ldrh	r3, [r3, #2]
 800545a:	82fb      	strh	r3, [r7, #22]
    Points++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	885b      	ldrh	r3, [r3, #2]
 800546c:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800546e:	8b38      	ldrh	r0, [r7, #24]
 8005470:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8005472:	8abc      	ldrh	r4, [r7, #20]
 8005474:	8afd      	ldrh	r5, [r7, #22]
 8005476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005478:	8a7a      	ldrh	r2, [r7, #18]
 800547a:	9201      	str	r2, [sp, #4]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	462b      	mov	r3, r5
 8005480:	4622      	mov	r2, r4
 8005482:	f000 f93f 	bl	8005704 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8005486:	8b38      	ldrh	r0, [r7, #24]
 8005488:	8ab9      	ldrh	r1, [r7, #20]
 800548a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800548c:	8afd      	ldrh	r5, [r7, #22]
 800548e:	8a7b      	ldrh	r3, [r7, #18]
 8005490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005492:	9201      	str	r2, [sp, #4]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	462b      	mov	r3, r5
 8005498:	4622      	mov	r2, r4
 800549a:	f000 f933 	bl	8005704 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 800549e:	8ab8      	ldrh	r0, [r7, #20]
 80054a0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80054a2:	8b3c      	ldrh	r4, [r7, #24]
 80054a4:	8a7d      	ldrh	r5, [r7, #18]
 80054a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054a8:	8afa      	ldrh	r2, [r7, #22]
 80054aa:	9201      	str	r2, [sp, #4]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	462b      	mov	r3, r5
 80054b0:	4622      	mov	r2, r4
 80054b2:	f000 f927 	bl	8005704 <FillTriangle>
  while(--PointCount)
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	807b      	strh	r3, [r7, #2]
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1c6      	bne.n	8005450 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80054c2:	8a38      	ldrh	r0, [r7, #16]
 80054c4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80054c6:	8abc      	ldrh	r4, [r7, #20]
 80054c8:	89fd      	ldrh	r5, [r7, #14]
 80054ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054cc:	8a7a      	ldrh	r2, [r7, #18]
 80054ce:	9201      	str	r2, [sp, #4]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	462b      	mov	r3, r5
 80054d4:	4622      	mov	r2, r4
 80054d6:	f000 f915 	bl	8005704 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80054da:	8a38      	ldrh	r0, [r7, #16]
 80054dc:	8ab9      	ldrh	r1, [r7, #20]
 80054de:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80054e0:	89fd      	ldrh	r5, [r7, #14]
 80054e2:	8a7b      	ldrh	r3, [r7, #18]
 80054e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054e6:	9201      	str	r2, [sp, #4]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	462b      	mov	r3, r5
 80054ec:	4622      	mov	r2, r4
 80054ee:	f000 f909 	bl	8005704 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 80054f2:	8ab8      	ldrh	r0, [r7, #20]
 80054f4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80054f6:	8a3c      	ldrh	r4, [r7, #16]
 80054f8:	8a7d      	ldrh	r5, [r7, #18]
 80054fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054fc:	89fa      	ldrh	r2, [r7, #14]
 80054fe:	9201      	str	r2, [sp, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	462b      	mov	r3, r5
 8005504:	4622      	mov	r2, r4
 8005506:	f000 f8fd 	bl	8005704 <FillTriangle>
 800550a:	e000      	b.n	800550e <BSP_LCD_FillPolygon+0x1c2>
    return;
 800550c:	bf00      	nop
}
 800550e:	3728      	adds	r7, #40	; 0x28
 8005510:	46bd      	mov	sp, r7
 8005512:	bdb0      	pop	{r4, r5, r7, pc}

08005514 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <BSP_LCD_DisplayOn+0x30>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	4b09      	ldr	r3, [pc, #36]	; (8005544 <BSP_LCD_DisplayOn+0x30>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005528:	2201      	movs	r2, #1
 800552a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800552e:	4806      	ldr	r0, [pc, #24]	; (8005548 <BSP_LCD_DisplayOn+0x34>)
 8005530:	f002 febe 	bl	80082b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005534:	2201      	movs	r2, #1
 8005536:	2108      	movs	r1, #8
 8005538:	4804      	ldr	r0, [pc, #16]	; (800554c <BSP_LCD_DisplayOn+0x38>)
 800553a:	f002 feb9 	bl	80082b0 <HAL_GPIO_WritePin>
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200090b4 	.word	0x200090b4
 8005548:	40022000 	.word	0x40022000
 800554c:	40022800 	.word	0x40022800

08005550 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b090      	sub	sp, #64	; 0x40
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800555a:	4b64      	ldr	r3, [pc, #400]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	4a63      	ldr	r2, [pc, #396]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005564:	6453      	str	r3, [r2, #68]	; 0x44
 8005566:	4b61      	ldr	r3, [pc, #388]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005572:	4b5e      	ldr	r3, [pc, #376]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	4a5d      	ldr	r2, [pc, #372]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800557c:	6313      	str	r3, [r2, #48]	; 0x30
 800557e:	4b5b      	ldr	r3, [pc, #364]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800558a:	4b58      	ldr	r3, [pc, #352]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	4a57      	ldr	r2, [pc, #348]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005590:	f043 0310 	orr.w	r3, r3, #16
 8005594:	6313      	str	r3, [r2, #48]	; 0x30
 8005596:	4b55      	ldr	r3, [pc, #340]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80055a2:	4b52      	ldr	r3, [pc, #328]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	4a51      	ldr	r2, [pc, #324]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ac:	6313      	str	r3, [r2, #48]	; 0x30
 80055ae:	4b4f      	ldr	r3, [pc, #316]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80055ba:	4b4c      	ldr	r3, [pc, #304]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	4a4b      	ldr	r2, [pc, #300]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c4:	6313      	str	r3, [r2, #48]	; 0x30
 80055c6:	4b49      	ldr	r3, [pc, #292]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80055d2:	4b46      	ldr	r3, [pc, #280]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	4a45      	ldr	r2, [pc, #276]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055dc:	6313      	str	r3, [r2, #48]	; 0x30
 80055de:	4b43      	ldr	r3, [pc, #268]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80055ea:	4b40      	ldr	r3, [pc, #256]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	4a3f      	ldr	r2, [pc, #252]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055f4:	6313      	str	r3, [r2, #48]	; 0x30
 80055f6:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8005602:	4b3a      	ldr	r3, [pc, #232]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	4a39      	ldr	r2, [pc, #228]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800560c:	6313      	str	r3, [r2, #48]	; 0x30
 800560e:	4b37      	ldr	r3, [pc, #220]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800561a:	4b34      	ldr	r3, [pc, #208]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	4a33      	ldr	r2, [pc, #204]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005624:	6313      	str	r3, [r2, #48]	; 0x30
 8005626:	4b31      	ldr	r3, [pc, #196]	; (80056ec <BSP_LCD_MspInit+0x19c>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562e:	60bb      	str	r3, [r7, #8]
 8005630:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8005632:	2310      	movs	r3, #16
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005636:	2302      	movs	r3, #2
 8005638:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800563a:	2300      	movs	r3, #0
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800563e:	2302      	movs	r3, #2
 8005640:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005642:	230e      	movs	r3, #14
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800564a:	4619      	mov	r1, r3
 800564c:	4828      	ldr	r0, [pc, #160]	; (80056f0 <BSP_LCD_MspInit+0x1a0>)
 800564e:	f002 fb5f 	bl	8007d10 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005658:	2302      	movs	r3, #2
 800565a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800565c:	2309      	movs	r3, #9
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005664:	4619      	mov	r1, r3
 8005666:	4823      	ldr	r0, [pc, #140]	; (80056f4 <BSP_LCD_MspInit+0x1a4>)
 8005668:	f002 fb52 	bl	8007d10 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800566c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005672:	2302      	movs	r3, #2
 8005674:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005676:	230e      	movs	r3, #14
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800567a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800567e:	4619      	mov	r1, r3
 8005680:	481d      	ldr	r0, [pc, #116]	; (80056f8 <BSP_LCD_MspInit+0x1a8>)
 8005682:	f002 fb45 	bl	8007d10 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8005686:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800568c:	2302      	movs	r3, #2
 800568e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005690:	230e      	movs	r3, #14
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005698:	4619      	mov	r1, r3
 800569a:	4818      	ldr	r0, [pc, #96]	; (80056fc <BSP_LCD_MspInit+0x1ac>)
 800569c:	f002 fb38 	bl	8007d10 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80056a0:	23f7      	movs	r3, #247	; 0xf7
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80056a4:	2302      	movs	r3, #2
 80056a6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80056a8:	230e      	movs	r3, #14
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80056ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056b0:	4619      	mov	r1, r3
 80056b2:	4813      	ldr	r0, [pc, #76]	; (8005700 <BSP_LCD_MspInit+0x1b0>)
 80056b4:	f002 fb2c 	bl	8007d10 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80056b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80056be:	2301      	movs	r3, #1
 80056c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80056c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056c6:	4619      	mov	r1, r3
 80056c8:	480b      	ldr	r0, [pc, #44]	; (80056f8 <BSP_LCD_MspInit+0x1a8>)
 80056ca:	f002 fb21 	bl	8007d10 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80056ce:	2308      	movs	r3, #8
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80056d2:	2301      	movs	r3, #1
 80056d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80056d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056da:	4619      	mov	r1, r3
 80056dc:	4808      	ldr	r0, [pc, #32]	; (8005700 <BSP_LCD_MspInit+0x1b0>)
 80056de:	f002 fb17 	bl	8007d10 <HAL_GPIO_Init>
}
 80056e2:	bf00      	nop
 80056e4:	3740      	adds	r7, #64	; 0x40
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40021800 	.word	0x40021800
 80056f8:	40022000 	.word	0x40022000
 80056fc:	40022400 	.word	0x40022400
 8005700:	40022800 	.word	0x40022800

08005704 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8005704:	b590      	push	{r4, r7, lr}
 8005706:	b08b      	sub	sp, #44	; 0x2c
 8005708:	af00      	add	r7, sp, #0
 800570a:	4604      	mov	r4, r0
 800570c:	4608      	mov	r0, r1
 800570e:	4611      	mov	r1, r2
 8005710:	461a      	mov	r2, r3
 8005712:	4623      	mov	r3, r4
 8005714:	80fb      	strh	r3, [r7, #6]
 8005716:	4603      	mov	r3, r0
 8005718:	80bb      	strh	r3, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	807b      	strh	r3, [r7, #2]
 800571e:	4613      	mov	r3, r2
 8005720:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8005722:	2300      	movs	r3, #0
 8005724:	823b      	strh	r3, [r7, #16]
 8005726:	2300      	movs	r3, #0
 8005728:	81fb      	strh	r3, [r7, #14]
 800572a:	2300      	movs	r3, #0
 800572c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800572e:	2300      	movs	r3, #0
 8005730:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005732:	2300      	movs	r3, #0
 8005734:	847b      	strh	r3, [r7, #34]	; 0x22
 8005736:	2300      	movs	r3, #0
 8005738:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 800573a:	2300      	movs	r3, #0
 800573c:	83fb      	strh	r3, [r7, #30]
 800573e:	2300      	movs	r3, #0
 8005740:	83bb      	strh	r3, [r7, #28]
 8005742:	2300      	movs	r3, #0
 8005744:	837b      	strh	r3, [r7, #26]
 8005746:	2300      	movs	r3, #0
 8005748:	833b      	strh	r3, [r7, #24]
 800574a:	2300      	movs	r3, #0
 800574c:	82fb      	strh	r3, [r7, #22]
 800574e:	2300      	movs	r3, #0
 8005750:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8005756:	88ba      	ldrh	r2, [r7, #4]
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	bfb8      	it	lt
 8005760:	425b      	neglt	r3, r3
 8005762:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8005764:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005766:	883b      	ldrh	r3, [r7, #0]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	bfb8      	it	lt
 800576e:	425b      	neglt	r3, r3
 8005770:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8005776:	883b      	ldrh	r3, [r7, #0]
 8005778:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800577a:	88ba      	ldrh	r2, [r7, #4]
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	429a      	cmp	r2, r3
 8005780:	d304      	bcc.n	800578c <FillTriangle+0x88>
  {
    xinc1 = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8005786:	2301      	movs	r3, #1
 8005788:	843b      	strh	r3, [r7, #32]
 800578a:	e005      	b.n	8005798 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800578c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005790:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8005792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005796:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8005798:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800579a:	883b      	ldrh	r3, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d304      	bcc.n	80057aa <FillTriangle+0xa6>
  {
    yinc1 = 1;
 80057a0:	2301      	movs	r3, #1
 80057a2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80057a4:	2301      	movs	r3, #1
 80057a6:	83bb      	strh	r3, [r7, #28]
 80057a8:	e005      	b.n	80057b6 <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80057aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057ae:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80057b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057b4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80057b6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80057ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057be:	429a      	cmp	r2, r3
 80057c0:	db11      	blt.n	80057e6 <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80057c2:	2300      	movs	r3, #0
 80057c4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80057c6:	2300      	movs	r3, #0
 80057c8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80057ca:	8a3b      	ldrh	r3, [r7, #16]
 80057cc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80057ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	da00      	bge.n	80057d8 <FillTriangle+0xd4>
 80057d6:	3301      	adds	r3, #1
 80057d8:	105b      	asrs	r3, r3, #1
 80057da:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80057dc:	89fb      	ldrh	r3, [r7, #14]
 80057de:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80057e0:	8a3b      	ldrh	r3, [r7, #16]
 80057e2:	82bb      	strh	r3, [r7, #20]
 80057e4:	e010      	b.n	8005808 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80057e6:	2300      	movs	r3, #0
 80057e8:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80057ea:	2300      	movs	r3, #0
 80057ec:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80057ee:	89fb      	ldrh	r3, [r7, #14]
 80057f0:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80057f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da00      	bge.n	80057fc <FillTriangle+0xf8>
 80057fa:	3301      	adds	r3, #1
 80057fc:	105b      	asrs	r3, r3, #1
 80057fe:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8005800:	8a3b      	ldrh	r3, [r7, #16]
 8005802:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8005804:	89fb      	ldrh	r3, [r7, #14]
 8005806:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8005808:	2300      	movs	r3, #0
 800580a:	827b      	strh	r3, [r7, #18]
 800580c:	e02f      	b.n	800586e <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 800580e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8005810:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005812:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005814:	887a      	ldrh	r2, [r7, #2]
 8005816:	f7ff fac9 	bl	8004dac <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800581a:	8b3a      	ldrh	r2, [r7, #24]
 800581c:	8afb      	ldrh	r3, [r7, #22]
 800581e:	4413      	add	r3, r2
 8005820:	b29b      	uxth	r3, r3
 8005822:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8005824:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005828:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800582c:	429a      	cmp	r2, r3
 800582e:	db0e      	blt.n	800584e <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 8005830:	8b3a      	ldrh	r2, [r7, #24]
 8005832:	8b7b      	ldrh	r3, [r7, #26]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	b29b      	uxth	r3, r3
 8005838:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 800583a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800583c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800583e:	4413      	add	r3, r2
 8005840:	b29b      	uxth	r3, r3
 8005842:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8005844:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005846:	8bfb      	ldrh	r3, [r7, #30]
 8005848:	4413      	add	r3, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 800584e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005850:	8c3b      	ldrh	r3, [r7, #32]
 8005852:	4413      	add	r3, r2
 8005854:	b29b      	uxth	r3, r3
 8005856:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8005858:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800585a:	8bbb      	ldrh	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8005862:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005866:	b29b      	uxth	r3, r3
 8005868:	3301      	adds	r3, #1
 800586a:	b29b      	uxth	r3, r3
 800586c:	827b      	strh	r3, [r7, #18]
 800586e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005872:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005876:	429a      	cmp	r2, r3
 8005878:	ddc9      	ble.n	800580e <FillTriangle+0x10a>
  } 
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	372c      	adds	r7, #44	; 0x2c
 8005880:	46bd      	mov	sp, r7
 8005882:	bd90      	pop	{r4, r7, pc}

08005884 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8005892:	4b1e      	ldr	r3, [pc, #120]	; (800590c <LL_FillBuffer+0x88>)
 8005894:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005898:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800589a:	4b1d      	ldr	r3, [pc, #116]	; (8005910 <LL_FillBuffer+0x8c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1d      	ldr	r2, [pc, #116]	; (8005914 <LL_FillBuffer+0x90>)
 80058a0:	2134      	movs	r1, #52	; 0x34
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	3348      	adds	r3, #72	; 0x48
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d103      	bne.n	80058b8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <LL_FillBuffer+0x88>)
 80058b2:	2202      	movs	r2, #2
 80058b4:	609a      	str	r2, [r3, #8]
 80058b6:	e002      	b.n	80058be <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80058b8:	4b14      	ldr	r3, [pc, #80]	; (800590c <LL_FillBuffer+0x88>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80058be:	4a13      	ldr	r2, [pc, #76]	; (800590c <LL_FillBuffer+0x88>)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <LL_FillBuffer+0x88>)
 80058c6:	4a14      	ldr	r2, [pc, #80]	; (8005918 <LL_FillBuffer+0x94>)
 80058c8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80058ca:	4810      	ldr	r0, [pc, #64]	; (800590c <LL_FillBuffer+0x88>)
 80058cc:	f001 fe08 	bl	80074e0 <HAL_DMA2D_Init>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d115      	bne.n	8005902 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	480c      	ldr	r0, [pc, #48]	; (800590c <LL_FillBuffer+0x88>)
 80058da:	f002 f86f 	bl	80079bc <HAL_DMA2D_ConfigLayer>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10e      	bne.n	8005902 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69f9      	ldr	r1, [r7, #28]
 80058ee:	4807      	ldr	r0, [pc, #28]	; (800590c <LL_FillBuffer+0x88>)
 80058f0:	f001 fe40 	bl	8007574 <HAL_DMA2D_Start>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80058fa:	210a      	movs	r1, #10
 80058fc:	4803      	ldr	r0, [pc, #12]	; (800590c <LL_FillBuffer+0x88>)
 80058fe:	f001 fe64 	bl	80075ca <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000408 	.word	0x20000408
 8005910:	20000448 	.word	0x20000448
 8005914:	200090b4 	.word	0x200090b4
 8005918:	4002b000 	.word	0x4002b000

0800591c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005920:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 8005922:	4a2a      	ldr	r2, [pc, #168]	; (80059cc <BSP_SDRAM_Init+0xb0>)
 8005924:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005926:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <BSP_SDRAM_Init+0xb4>)
 8005928:	2202      	movs	r2, #2
 800592a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800592c:	4b28      	ldr	r3, [pc, #160]	; (80059d0 <BSP_SDRAM_Init+0xb4>)
 800592e:	2207      	movs	r2, #7
 8005930:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005932:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <BSP_SDRAM_Init+0xb4>)
 8005934:	2204      	movs	r2, #4
 8005936:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005938:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <BSP_SDRAM_Init+0xb4>)
 800593a:	2207      	movs	r2, #7
 800593c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <BSP_SDRAM_Init+0xb4>)
 8005940:	2202      	movs	r2, #2
 8005942:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005944:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <BSP_SDRAM_Init+0xb4>)
 8005946:	2202      	movs	r2, #2
 8005948:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800594a:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <BSP_SDRAM_Init+0xb4>)
 800594c:	2202      	movs	r2, #2
 800594e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005950:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 8005952:	2200      	movs	r2, #0
 8005954:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 8005958:	2200      	movs	r2, #0
 800595a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800595c:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 800595e:	2204      	movs	r2, #4
 8005960:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005962:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 8005964:	2210      	movs	r2, #16
 8005966:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005968:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 800596a:	2240      	movs	r2, #64	; 0x40
 800596c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800596e:	4b16      	ldr	r3, [pc, #88]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 8005970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005974:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005976:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 8005978:	2200      	movs	r2, #0
 800597a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 800597e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005982:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005984:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 8005986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800598a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800598c:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 800598e:	2200      	movs	r2, #0
 8005990:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005992:	2100      	movs	r1, #0
 8005994:	480c      	ldr	r0, [pc, #48]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 8005996:	f000 f87f 	bl	8005a98 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800599a:	490d      	ldr	r1, [pc, #52]	; (80059d0 <BSP_SDRAM_Init+0xb4>)
 800599c:	480a      	ldr	r0, [pc, #40]	; (80059c8 <BSP_SDRAM_Init+0xac>)
 800599e:	f009 f83a 	bl	800ea16 <HAL_SDRAM_Init>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <BSP_SDRAM_Init+0xb8>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e002      	b.n	80059b6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80059b0:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <BSP_SDRAM_Init+0xb8>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80059b6:	f240 6003 	movw	r0, #1539	; 0x603
 80059ba:	f000 f80d 	bl	80059d8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80059be:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <BSP_SDRAM_Init+0xb8>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	2000915c 	.word	0x2000915c
 80059cc:	a0000140 	.word	0xa0000140
 80059d0:	20000464 	.word	0x20000464
 80059d4:	20000034 	.word	0x20000034

080059d8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80059e4:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059ea:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80059ec:	2210      	movs	r2, #16
 80059ee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80059f0:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80059f6:	4b26      	ldr	r3, [pc, #152]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80059fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a00:	4923      	ldr	r1, [pc, #140]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a02:	4824      	ldr	r0, [pc, #144]	; (8005a94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005a04:	f009 f83b 	bl	800ea7e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005a08:	2001      	movs	r0, #1
 8005a0a:	f000 fc03 	bl	8006214 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005a0e:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a10:	2202      	movs	r2, #2
 8005a12:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005a14:	4b1e      	ldr	r3, [pc, #120]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a16:	2210      	movs	r2, #16
 8005a18:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005a20:	4b1b      	ldr	r3, [pc, #108]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2a:	4919      	ldr	r1, [pc, #100]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a2c:	4819      	ldr	r0, [pc, #100]	; (8005a94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005a2e:	f009 f826 	bl	800ea7e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005a32:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a34:	2203      	movs	r2, #3
 8005a36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a3a:	2210      	movs	r2, #16
 8005a3c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005a3e:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a40:	2208      	movs	r2, #8
 8005a42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005a44:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a4e:	4910      	ldr	r1, [pc, #64]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a50:	4810      	ldr	r0, [pc, #64]	; (8005a94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005a52:	f009 f814 	bl	800ea7e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005a56:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005a5a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a5e:	2204      	movs	r2, #4
 8005a60:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005a62:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a64:	2210      	movs	r2, #16
 8005a66:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005a68:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4a07      	ldr	r2, [pc, #28]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a72:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a78:	4905      	ldr	r1, [pc, #20]	; (8005a90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005a7a:	4806      	ldr	r0, [pc, #24]	; (8005a94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005a7c:	f008 ffff 	bl	800ea7e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4804      	ldr	r0, [pc, #16]	; (8005a94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005a84:	f009 f826 	bl	800ead4 <HAL_SDRAM_ProgramRefreshRate>
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000480 	.word	0x20000480
 8005a94:	2000915c 	.word	0x2000915c

08005a98 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b090      	sub	sp, #64	; 0x40
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005aa2:	4b70      	ldr	r3, [pc, #448]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	4a6f      	ldr	r2, [pc, #444]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	6393      	str	r3, [r2, #56]	; 0x38
 8005aae:	4b6d      	ldr	r3, [pc, #436]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005aba:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	4a69      	ldr	r2, [pc, #420]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005ac0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ac6:	4b67      	ldr	r3, [pc, #412]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ad2:	4b64      	ldr	r3, [pc, #400]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	4a63      	ldr	r2, [pc, #396]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005ad8:	f043 0304 	orr.w	r3, r3, #4
 8005adc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ade:	4b61      	ldr	r3, [pc, #388]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	623b      	str	r3, [r7, #32]
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005aea:	4b5e      	ldr	r3, [pc, #376]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	4a5d      	ldr	r2, [pc, #372]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005af0:	f043 0308 	orr.w	r3, r3, #8
 8005af4:	6313      	str	r3, [r2, #48]	; 0x30
 8005af6:	4b5b      	ldr	r3, [pc, #364]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b02:	4b58      	ldr	r3, [pc, #352]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	4a57      	ldr	r2, [pc, #348]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b08:	f043 0310 	orr.w	r3, r3, #16
 8005b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b0e:	4b55      	ldr	r3, [pc, #340]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	61bb      	str	r3, [r7, #24]
 8005b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b1a:	4b52      	ldr	r3, [pc, #328]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	4a51      	ldr	r2, [pc, #324]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b20:	f043 0320 	orr.w	r3, r3, #32
 8005b24:	6313      	str	r3, [r2, #48]	; 0x30
 8005b26:	4b4f      	ldr	r3, [pc, #316]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005b32:	4b4c      	ldr	r3, [pc, #304]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	4a4b      	ldr	r2, [pc, #300]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b3e:	4b49      	ldr	r3, [pc, #292]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b4a:	4b46      	ldr	r3, [pc, #280]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	4a45      	ldr	r2, [pc, #276]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b54:	6313      	str	r3, [r2, #48]	; 0x30
 8005b56:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <BSP_SDRAM_MspInit+0x1cc>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005b62:	2302      	movs	r3, #2
 8005b64:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005b66:	2301      	movs	r3, #1
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005b6e:	230c      	movs	r3, #12
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005b72:	2308      	movs	r3, #8
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	483a      	ldr	r0, [pc, #232]	; (8005c68 <BSP_SDRAM_MspInit+0x1d0>)
 8005b7e:	f002 f8c7 	bl	8007d10 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005b82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005b86:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4837      	ldr	r0, [pc, #220]	; (8005c6c <BSP_SDRAM_MspInit+0x1d4>)
 8005b90:	f002 f8be 	bl	8007d10 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005b94:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4833      	ldr	r0, [pc, #204]	; (8005c70 <BSP_SDRAM_MspInit+0x1d8>)
 8005ba2:	f002 f8b5 	bl	8007d10 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005ba6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4830      	ldr	r0, [pc, #192]	; (8005c74 <BSP_SDRAM_MspInit+0x1dc>)
 8005bb4:	f002 f8ac 	bl	8007d10 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005bb8:	f248 1333 	movw	r3, #33075	; 0x8133
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	482c      	ldr	r0, [pc, #176]	; (8005c78 <BSP_SDRAM_MspInit+0x1e0>)
 8005bc6:	f002 f8a3 	bl	8007d10 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005bca:	2328      	movs	r3, #40	; 0x28
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4829      	ldr	r0, [pc, #164]	; (8005c7c <BSP_SDRAM_MspInit+0x1e4>)
 8005bd6:	f002 f89b 	bl	8007d10 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bec:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005bee:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bf4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005bf6:	4b22      	ldr	r3, [pc, #136]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005bf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bfc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005bfe:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c04:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005c06:	4b1e      	ldr	r3, [pc, #120]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005c0c:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c12:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005c14:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005c1a:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005c20:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005c26:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005c2c:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c2e:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <BSP_SDRAM_MspInit+0x1ec>)
 8005c30:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
 8005c38:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005c3e:	4810      	ldr	r0, [pc, #64]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c40:	f001 f888 	bl	8006d54 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005c44:	480e      	ldr	r0, [pc, #56]	; (8005c80 <BSP_SDRAM_MspInit+0x1e8>)
 8005c46:	f000 ffd7 	bl	8006bf8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	210f      	movs	r1, #15
 8005c4e:	2038      	movs	r0, #56	; 0x38
 8005c50:	f000 fe44 	bl	80068dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005c54:	2038      	movs	r0, #56	; 0x38
 8005c56:	f000 fe5d 	bl	8006914 <HAL_NVIC_EnableIRQ>
}
 8005c5a:	bf00      	nop
 8005c5c:	3740      	adds	r7, #64	; 0x40
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40023800 	.word	0x40023800
 8005c68:	40020800 	.word	0x40020800
 8005c6c:	40020c00 	.word	0x40020c00
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40021400 	.word	0x40021400
 8005c78:	40021800 	.word	0x40021800
 8005c7c:	40021c00 	.word	0x40021c00
 8005c80:	20000490 	.word	0x20000490
 8005c84:	40026410 	.word	0x40026410

08005c88 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	460a      	mov	r2, r1
 8005c92:	80fb      	strh	r3, [r7, #6]
 8005c94:	4613      	mov	r3, r2
 8005c96:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005c9c:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <BSP_TS_Init+0x68>)
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <BSP_TS_Init+0x6c>)
 8005ca4:	88bb      	ldrh	r3, [r7, #4]
 8005ca6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005ca8:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <BSP_TS_Init+0x70>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2070      	movs	r0, #112	; 0x70
 8005cae:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005cb0:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <BSP_TS_Init+0x70>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2070      	movs	r0, #112	; 0x70
 8005cb6:	4798      	blx	r3
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b51      	cmp	r3, #81	; 0x51
 8005cbc:	d111      	bne.n	8005ce2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8005cbe:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <BSP_TS_Init+0x74>)
 8005cc0:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <BSP_TS_Init+0x70>)
 8005cc2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <BSP_TS_Init+0x78>)
 8005cc6:	2270      	movs	r2, #112	; 0x70
 8005cc8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <BSP_TS_Init+0x7c>)
 8005ccc:	2208      	movs	r2, #8
 8005cce:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <BSP_TS_Init+0x74>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <BSP_TS_Init+0x78>)
 8005cd8:	7812      	ldrb	r2, [r2, #0]
 8005cda:	b292      	uxth	r2, r2
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
 8005ce0:	e001      	b.n	8005ce6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	200004f4 	.word	0x200004f4
 8005cf4:	200004f6 	.word	0x200004f6
 8005cf8:	20000004 	.word	0x20000004
 8005cfc:	200004f0 	.word	0x200004f0
 8005d00:	200004f9 	.word	0x200004f9
 8005d04:	200004f8 	.word	0x200004f8

08005d08 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b097      	sub	sp, #92	; 0x5c
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005d22:	4b97      	ldr	r3, [pc, #604]	; (8005f80 <BSP_TS_GetState+0x278>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	4a96      	ldr	r2, [pc, #600]	; (8005f84 <BSP_TS_GetState+0x27c>)
 8005d2a:	7812      	ldrb	r2, [r2, #0]
 8005d2c:	b292      	uxth	r2, r2
 8005d2e:	4610      	mov	r0, r2
 8005d30:	4798      	blx	r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	461a      	mov	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 81a8 	beq.w	8006094 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005d44:	2300      	movs	r3, #0
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d48:	e197      	b.n	800607a <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8005d4a:	4b8d      	ldr	r3, [pc, #564]	; (8005f80 <BSP_TS_GetState+0x278>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	4a8c      	ldr	r2, [pc, #560]	; (8005f84 <BSP_TS_GetState+0x27c>)
 8005d52:	7812      	ldrb	r2, [r2, #0]
 8005d54:	b290      	uxth	r0, r2
 8005d56:	f107 0120 	add.w	r1, r7, #32
 8005d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d5c:	0052      	lsls	r2, r2, #1
 8005d5e:	188c      	adds	r4, r1, r2
 8005d60:	f107 0114 	add.w	r1, r7, #20
 8005d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d66:	0052      	lsls	r2, r2, #1
 8005d68:	440a      	add	r2, r1
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8005d6e:	4b86      	ldr	r3, [pc, #536]	; (8005f88 <BSP_TS_GetState+0x280>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d11b      	bne.n	8005dae <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8005d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005d7e:	4413      	add	r3, r2
 8005d80:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005d8c:	440b      	add	r3, r1
 8005d8e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8005d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005da8:	440b      	add	r3, r1
 8005daa:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8005dae:	4b76      	ldr	r3, [pc, #472]	; (8005f88 <BSP_TS_GetState+0x280>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d010      	beq.n	8005ddc <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8005dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8005dc8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005dd6:	440b      	add	r3, r1
 8005dd8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005ddc:	4b6a      	ldr	r3, [pc, #424]	; (8005f88 <BSP_TS_GetState+0x280>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d010      	beq.n	8005e0a <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8005de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005df0:	4413      	add	r3, r2
 8005df2:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8005df6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005e04:	440b      	add	r3, r1
 8005e06:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8005e0a:	4b5f      	ldr	r3, [pc, #380]	; (8005f88 <BSP_TS_GetState+0x280>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01b      	beq.n	8005e4e <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8005e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005e1e:	4413      	add	r3, r2
 8005e20:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005e2c:	440b      	add	r3, r1
 8005e2e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005e48:	440b      	add	r3, r1
 8005e4a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005e56:	4413      	add	r3, r2
 8005e58:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4a4b      	ldr	r2, [pc, #300]	; (8005f8c <BSP_TS_GetState+0x284>)
 8005e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e66:	4299      	cmp	r1, r3
 8005e68:	d90e      	bls.n	8005e88 <BSP_TS_GetState+0x180>
 8005e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005e72:	4413      	add	r3, r2
 8005e74:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005e78:	4944      	ldr	r1, [pc, #272]	; (8005f8c <BSP_TS_GetState+0x284>)
 8005e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	e00d      	b.n	8005ea4 <BSP_TS_GetState+0x19c>
 8005e88:	4a40      	ldr	r2, [pc, #256]	; (8005f8c <BSP_TS_GetState+0x284>)
 8005e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005e9a:	440b      	add	r3, r1
 8005e9c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4a35      	ldr	r2, [pc, #212]	; (8005f90 <BSP_TS_GetState+0x288>)
 8005eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	d90e      	bls.n	8005ee2 <BSP_TS_GetState+0x1da>
 8005ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005ecc:	4413      	add	r3, r2
 8005ece:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005ed2:	492f      	ldr	r1, [pc, #188]	; (8005f90 <BSP_TS_GetState+0x288>)
 8005ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	e00d      	b.n	8005efe <BSP_TS_GetState+0x1f6>
 8005ee2:	4a2b      	ldr	r2, [pc, #172]	; (8005f90 <BSP_TS_GetState+0x288>)
 8005ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005ef4:	440b      	add	r3, r1
 8005ef6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8005f02:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005f06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f0a:	4413      	add	r3, r2
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	dd17      	ble.n	8005f40 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8005f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005f18:	4413      	add	r3, r2
 8005f1a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4a1a      	ldr	r2, [pc, #104]	; (8005f8c <BSP_TS_GetState+0x284>)
 8005f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005f30:	4413      	add	r3, r2
 8005f32:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005f36:	4619      	mov	r1, r3
 8005f38:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <BSP_TS_GetState+0x288>)
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005f40:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <BSP_TS_GetState+0x27c>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b70      	cmp	r3, #112	; 0x70
 8005f46:	d125      	bne.n	8005f94 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8005f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005f50:	4413      	add	r3, r2
 8005f52:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	4413      	add	r3, r2
 8005f5e:	460a      	mov	r2, r1
 8005f60:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8005f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f74:	3304      	adds	r3, #4
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4413      	add	r3, r2
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	809a      	strh	r2, [r3, #4]
 8005f7e:	e02c      	b.n	8005fda <BSP_TS_GetState+0x2d2>
 8005f80:	200004f0 	.word	0x200004f0
 8005f84:	200004f9 	.word	0x200004f9
 8005f88:	200004f8 	.word	0x200004f8
 8005f8c:	200004fc 	.word	0x200004fc
 8005f90:	20000510 	.word	0x20000510
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005f94:	4b42      	ldr	r3, [pc, #264]	; (80060a0 <BSP_TS_GetState+0x398>)
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4a42      	ldr	r2, [pc, #264]	; (80060a4 <BSP_TS_GetState+0x39c>)
 8005f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa2:	fb03 f301 	mul.w	r3, r3, r1
 8005fa6:	0b1b      	lsrs	r3, r3, #12
 8005fa8:	b299      	uxth	r1, r3
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4413      	add	r3, r2
 8005fb2:	460a      	mov	r2, r1
 8005fb4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005fb6:	4b3c      	ldr	r3, [pc, #240]	; (80060a8 <BSP_TS_GetState+0x3a0>)
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4a3b      	ldr	r2, [pc, #236]	; (80060ac <BSP_TS_GetState+0x3a4>)
 8005fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc4:	fb03 f301 	mul.w	r3, r3, r1
 8005fc8:	0b1b      	lsrs	r3, r3, #12
 8005fca:	b299      	uxth	r1, r3
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	4413      	add	r3, r2
 8005fd6:	460a      	mov	r2, r1
 8005fd8:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005fda:	4b35      	ldr	r3, [pc, #212]	; (80060b0 <BSP_TS_GetState+0x3a8>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b298      	uxth	r0, r3
 8005fe0:	f107 010c 	add.w	r1, r7, #12
 8005fe4:	f107 0210 	add.w	r2, r7, #16
 8005fe8:	f107 0308 	add.w	r3, r7, #8
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ff2:	f7fe f95b 	bl	80042ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	b2d9      	uxtb	r1, r3
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ffe:	4413      	add	r3, r2
 8006000:	3316      	adds	r3, #22
 8006002:	460a      	mov	r2, r1
 8006004:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	b2d9      	uxtb	r1, r3
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600e:	4413      	add	r3, r2
 8006010:	3320      	adds	r3, #32
 8006012:	460a      	mov	r2, r1
 8006014:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b03      	cmp	r3, #3
 800601a:	d827      	bhi.n	800606c <BSP_TS_GetState+0x364>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <BSP_TS_GetState+0x31c>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006035 	.word	0x08006035
 8006028:	08006043 	.word	0x08006043
 800602c:	08006051 	.word	0x08006051
 8006030:	0800605f 	.word	0x0800605f
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006038:	4413      	add	r3, r2
 800603a:	331b      	adds	r3, #27
 800603c:	2201      	movs	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]
          break;
 8006040:	e018      	b.n	8006074 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006046:	4413      	add	r3, r2
 8006048:	331b      	adds	r3, #27
 800604a:	2202      	movs	r2, #2
 800604c:	701a      	strb	r2, [r3, #0]
          break;
 800604e:	e011      	b.n	8006074 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006054:	4413      	add	r3, r2
 8006056:	331b      	adds	r3, #27
 8006058:	2203      	movs	r2, #3
 800605a:	701a      	strb	r2, [r3, #0]
          break;
 800605c:	e00a      	b.n	8006074 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006062:	4413      	add	r3, r2
 8006064:	331b      	adds	r3, #27
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
          break;
 800606a:	e003      	b.n	8006074 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8006072:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8006074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006076:	3301      	adds	r3, #1
 8006078:	64bb      	str	r3, [r7, #72]	; 0x48
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006082:	4293      	cmp	r3, r2
 8006084:	f4ff ae61 	bcc.w	8005d4a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f813 	bl	80060b4 <BSP_TS_Get_GestureId>
 800608e:	4603      	mov	r3, r0
 8006090:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8006094:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006098:	4618      	mov	r0, r3
 800609a:	3754      	adds	r7, #84	; 0x54
 800609c:	46bd      	mov	sp, r7
 800609e:	bd90      	pop	{r4, r7, pc}
 80060a0:	200004f4 	.word	0x200004f4
 80060a4:	200004fc 	.word	0x200004fc
 80060a8:	200004f6 	.word	0x200004f6
 80060ac:	20000510 	.word	0x20000510
 80060b0:	200004f9 	.word	0x200004f9

080060b4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80060c4:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <BSP_TS_Get_GestureId+0x100>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f107 0208 	add.w	r2, r7, #8
 80060ce:	4611      	mov	r1, r2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe f8d2 	bl	800427a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b49      	cmp	r3, #73	; 0x49
 80060da:	d05e      	beq.n	800619a <BSP_TS_Get_GestureId+0xe6>
 80060dc:	2b49      	cmp	r3, #73	; 0x49
 80060de:	d860      	bhi.n	80061a2 <BSP_TS_Get_GestureId+0xee>
 80060e0:	2b1c      	cmp	r3, #28
 80060e2:	d83f      	bhi.n	8006164 <BSP_TS_Get_GestureId+0xb0>
 80060e4:	2b1c      	cmp	r3, #28
 80060e6:	d85c      	bhi.n	80061a2 <BSP_TS_Get_GestureId+0xee>
 80060e8:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <BSP_TS_Get_GestureId+0x3c>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	0800616b 	.word	0x0800616b
 80060f4:	080061a3 	.word	0x080061a3
 80060f8:	080061a3 	.word	0x080061a3
 80060fc:	080061a3 	.word	0x080061a3
 8006100:	080061a3 	.word	0x080061a3
 8006104:	080061a3 	.word	0x080061a3
 8006108:	080061a3 	.word	0x080061a3
 800610c:	080061a3 	.word	0x080061a3
 8006110:	080061a3 	.word	0x080061a3
 8006114:	080061a3 	.word	0x080061a3
 8006118:	080061a3 	.word	0x080061a3
 800611c:	080061a3 	.word	0x080061a3
 8006120:	080061a3 	.word	0x080061a3
 8006124:	080061a3 	.word	0x080061a3
 8006128:	080061a3 	.word	0x080061a3
 800612c:	080061a3 	.word	0x080061a3
 8006130:	08006173 	.word	0x08006173
 8006134:	080061a3 	.word	0x080061a3
 8006138:	080061a3 	.word	0x080061a3
 800613c:	080061a3 	.word	0x080061a3
 8006140:	0800617b 	.word	0x0800617b
 8006144:	080061a3 	.word	0x080061a3
 8006148:	080061a3 	.word	0x080061a3
 800614c:	080061a3 	.word	0x080061a3
 8006150:	08006183 	.word	0x08006183
 8006154:	080061a3 	.word	0x080061a3
 8006158:	080061a3 	.word	0x080061a3
 800615c:	080061a3 	.word	0x080061a3
 8006160:	0800618b 	.word	0x0800618b
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d014      	beq.n	8006192 <BSP_TS_Get_GestureId+0xde>
 8006168:	e01b      	b.n	80061a2 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006170:	e01a      	b.n	80061a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006178:	e016      	b.n	80061a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006180:	e012      	b.n	80061a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2203      	movs	r2, #3
 8006186:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006188:	e00e      	b.n	80061a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2204      	movs	r2, #4
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006190:	e00a      	b.n	80061a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2205      	movs	r2, #5
 8006196:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8006198:	e006      	b.n	80061a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2206      	movs	r2, #6
 800619e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80061a0:	e002      	b.n	80061a8 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
      break;
 80061a6:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200004f9 	.word	0x200004f9

080061b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061bc:	2003      	movs	r0, #3
 80061be:	f000 fb82 	bl	80068c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061c2:	2000      	movs	r0, #0
 80061c4:	f7fd fb8a 	bl	80038dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80061c8:	f7fc fb1c 	bl	8002804 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <HAL_IncTick+0x20>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <HAL_IncTick+0x24>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4413      	add	r3, r2
 80061e4:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <HAL_IncTick+0x24>)
 80061e6:	6013      	str	r3, [r2, #0]
}
 80061e8:	bf00      	nop
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	2000003c 	.word	0x2000003c
 80061f8:	20009190 	.word	0x20009190

080061fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  return uwTick;
 8006200:	4b03      	ldr	r3, [pc, #12]	; (8006210 <HAL_GetTick+0x14>)
 8006202:	681b      	ldr	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20009190 	.word	0x20009190

08006214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800621c:	f7ff ffee 	bl	80061fc <HAL_GetTick>
 8006220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800622c:	d005      	beq.n	800623a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800622e:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <HAL_Delay+0x44>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800623a:	bf00      	nop
 800623c:	f7ff ffde 	bl	80061fc <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	429a      	cmp	r2, r3
 800624a:	d8f7      	bhi.n	800623c <HAL_Delay+0x28>
  {
  }
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	2000003c 	.word	0x2000003c

0800625c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e031      	b.n	80062d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fc faea 	bl	8002854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f003 0310 	and.w	r3, r3, #16
 8006296:	2b00      	cmp	r3, #0
 8006298:	d116      	bne.n	80062c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <HAL_ADC_Init+0x84>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	f043 0202 	orr.w	r2, r3, #2
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f964 	bl	8006578 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	f043 0201 	orr.w	r2, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40
 80062c6:	e001      	b.n	80062cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	ffffeefd 	.word	0xffffeefd

080062e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_ADC_ConfigChannel+0x1c>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e12a      	b.n	8006556 <HAL_ADC_ConfigChannel+0x272>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b09      	cmp	r3, #9
 800630e:	d93a      	bls.n	8006386 <HAL_ADC_ConfigChannel+0xa2>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006318:	d035      	beq.n	8006386 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68d9      	ldr	r1, [r3, #12]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	4613      	mov	r3, r2
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	4413      	add	r3, r2
 800632e:	3b1e      	subs	r3, #30
 8006330:	2207      	movs	r2, #7
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43da      	mvns	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	400a      	ands	r2, r1
 800633e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a87      	ldr	r2, [pc, #540]	; (8006564 <HAL_ADC_ConfigChannel+0x280>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d10a      	bne.n	8006360 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68d9      	ldr	r1, [r3, #12]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	061a      	lsls	r2, r3, #24
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800635e:	e035      	b.n	80063cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68d9      	ldr	r1, [r3, #12]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	4618      	mov	r0, r3
 8006372:	4603      	mov	r3, r0
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4403      	add	r3, r0
 8006378:	3b1e      	subs	r3, #30
 800637a:	409a      	lsls	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006384:	e022      	b.n	80063cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6919      	ldr	r1, [r3, #16]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	4613      	mov	r3, r2
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	4413      	add	r3, r2
 800639a:	2207      	movs	r2, #7
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	43da      	mvns	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	400a      	ands	r2, r1
 80063a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6919      	ldr	r1, [r3, #16]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	4618      	mov	r0, r3
 80063bc:	4603      	mov	r3, r0
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4403      	add	r3, r0
 80063c2:	409a      	lsls	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b06      	cmp	r3, #6
 80063d2:	d824      	bhi.n	800641e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	3b05      	subs	r3, #5
 80063e6:	221f      	movs	r2, #31
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43da      	mvns	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	400a      	ands	r2, r1
 80063f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	4618      	mov	r0, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	3b05      	subs	r3, #5
 8006410:	fa00 f203 	lsl.w	r2, r0, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	635a      	str	r2, [r3, #52]	; 0x34
 800641c:	e04c      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b0c      	cmp	r3, #12
 8006424:	d824      	bhi.n	8006470 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	3b23      	subs	r3, #35	; 0x23
 8006438:	221f      	movs	r2, #31
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	43da      	mvns	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	400a      	ands	r2, r1
 8006446:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	4618      	mov	r0, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	3b23      	subs	r3, #35	; 0x23
 8006462:	fa00 f203 	lsl.w	r2, r0, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
 800646e:	e023      	b.n	80064b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	3b41      	subs	r3, #65	; 0x41
 8006482:	221f      	movs	r2, #31
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	43da      	mvns	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	400a      	ands	r2, r1
 8006490:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	4618      	mov	r0, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	3b41      	subs	r3, #65	; 0x41
 80064ac:	fa00 f203 	lsl.w	r2, r0, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2a      	ldr	r2, [pc, #168]	; (8006568 <HAL_ADC_ConfigChannel+0x284>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10a      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x1f4>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ca:	d105      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80064cc:	4b27      	ldr	r3, [pc, #156]	; (800656c <HAL_ADC_ConfigChannel+0x288>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4a26      	ldr	r2, [pc, #152]	; (800656c <HAL_ADC_ConfigChannel+0x288>)
 80064d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80064d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a22      	ldr	r2, [pc, #136]	; (8006568 <HAL_ADC_ConfigChannel+0x284>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d109      	bne.n	80064f6 <HAL_ADC_ConfigChannel+0x212>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b12      	cmp	r3, #18
 80064e8:	d105      	bne.n	80064f6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80064ea:	4b20      	ldr	r3, [pc, #128]	; (800656c <HAL_ADC_ConfigChannel+0x288>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4a1f      	ldr	r2, [pc, #124]	; (800656c <HAL_ADC_ConfigChannel+0x288>)
 80064f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <HAL_ADC_ConfigChannel+0x284>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d125      	bne.n	800654c <HAL_ADC_ConfigChannel+0x268>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a17      	ldr	r2, [pc, #92]	; (8006564 <HAL_ADC_ConfigChannel+0x280>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <HAL_ADC_ConfigChannel+0x22e>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b11      	cmp	r3, #17
 8006510:	d11c      	bne.n	800654c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006512:	4b16      	ldr	r3, [pc, #88]	; (800656c <HAL_ADC_ConfigChannel+0x288>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4a15      	ldr	r2, [pc, #84]	; (800656c <HAL_ADC_ConfigChannel+0x288>)
 8006518:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800651c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a10      	ldr	r2, [pc, #64]	; (8006564 <HAL_ADC_ConfigChannel+0x280>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d111      	bne.n	800654c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006528:	4b11      	ldr	r3, [pc, #68]	; (8006570 <HAL_ADC_ConfigChannel+0x28c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a11      	ldr	r2, [pc, #68]	; (8006574 <HAL_ADC_ConfigChannel+0x290>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	0c9a      	lsrs	r2, r3, #18
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800653e:	e002      	b.n	8006546 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3b01      	subs	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1f9      	bne.n	8006540 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	10000012 	.word	0x10000012
 8006568:	40012000 	.word	0x40012000
 800656c:	40012300 	.word	0x40012300
 8006570:	20000000 	.word	0x20000000
 8006574:	431bde83 	.word	0x431bde83

08006578 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006580:	4b78      	ldr	r3, [pc, #480]	; (8006764 <ADC_Init+0x1ec>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	4a77      	ldr	r2, [pc, #476]	; (8006764 <ADC_Init+0x1ec>)
 8006586:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800658a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800658c:	4b75      	ldr	r3, [pc, #468]	; (8006764 <ADC_Init+0x1ec>)
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4973      	ldr	r1, [pc, #460]	; (8006764 <ADC_Init+0x1ec>)
 8006596:	4313      	orrs	r3, r2
 8006598:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	021a      	lsls	r2, r3, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80065cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6859      	ldr	r1, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6899      	ldr	r1, [r3, #8]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	4a58      	ldr	r2, [pc, #352]	; (8006768 <ADC_Init+0x1f0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800661a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6899      	ldr	r1, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800663c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6899      	ldr	r1, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
 8006650:	e00f      	b.n	8006672 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006670:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0202 	bic.w	r2, r2, #2
 8006680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6899      	ldr	r1, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	005a      	lsls	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80066be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	3b01      	subs	r3, #1
 80066cc:	035a      	lsls	r2, r3, #13
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	e007      	b.n	80066e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	3b01      	subs	r3, #1
 8006704:	051a      	lsls	r2, r3, #20
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800671c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6899      	ldr	r1, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800672a:	025a      	lsls	r2, r3, #9
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6899      	ldr	r1, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	029a      	lsls	r2, r3, #10
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	609a      	str	r2, [r3, #8]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	40012300 	.word	0x40012300
 8006768:	0f000001 	.word	0x0f000001

0800676c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <__NVIC_SetPriorityGrouping+0x40>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006788:	4013      	ands	r3, r2
 800678a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <__NVIC_SetPriorityGrouping+0x44>)
 8006796:	4313      	orrs	r3, r2
 8006798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800679a:	4a04      	ldr	r2, [pc, #16]	; (80067ac <__NVIC_SetPriorityGrouping+0x40>)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	60d3      	str	r3, [r2, #12]
}
 80067a0:	bf00      	nop
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	e000ed00 	.word	0xe000ed00
 80067b0:	05fa0000 	.word	0x05fa0000

080067b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067b8:	4b04      	ldr	r3, [pc, #16]	; (80067cc <__NVIC_GetPriorityGrouping+0x18>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	f003 0307 	and.w	r3, r3, #7
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	e000ed00 	.word	0xe000ed00

080067d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	db0b      	blt.n	80067fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	f003 021f 	and.w	r2, r3, #31
 80067e8:	4907      	ldr	r1, [pc, #28]	; (8006808 <__NVIC_EnableIRQ+0x38>)
 80067ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	2001      	movs	r0, #1
 80067f2:	fa00 f202 	lsl.w	r2, r0, r2
 80067f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	e000e100 	.word	0xe000e100

0800680c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	6039      	str	r1, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681c:	2b00      	cmp	r3, #0
 800681e:	db0a      	blt.n	8006836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	490c      	ldr	r1, [pc, #48]	; (8006858 <__NVIC_SetPriority+0x4c>)
 8006826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682a:	0112      	lsls	r2, r2, #4
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	440b      	add	r3, r1
 8006830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006834:	e00a      	b.n	800684c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4908      	ldr	r1, [pc, #32]	; (800685c <__NVIC_SetPriority+0x50>)
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	3b04      	subs	r3, #4
 8006844:	0112      	lsls	r2, r2, #4
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	440b      	add	r3, r1
 800684a:	761a      	strb	r2, [r3, #24]
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	e000e100 	.word	0xe000e100
 800685c:	e000ed00 	.word	0xe000ed00

08006860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006860:	b480      	push	{r7}
 8006862:	b089      	sub	sp, #36	; 0x24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f1c3 0307 	rsb	r3, r3, #7
 800687a:	2b04      	cmp	r3, #4
 800687c:	bf28      	it	cs
 800687e:	2304      	movcs	r3, #4
 8006880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	3304      	adds	r3, #4
 8006886:	2b06      	cmp	r3, #6
 8006888:	d902      	bls.n	8006890 <NVIC_EncodePriority+0x30>
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	3b03      	subs	r3, #3
 800688e:	e000      	b.n	8006892 <NVIC_EncodePriority+0x32>
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43da      	mvns	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	401a      	ands	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	fa01 f303 	lsl.w	r3, r1, r3
 80068b2:	43d9      	mvns	r1, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068b8:	4313      	orrs	r3, r2
         );
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3724      	adds	r7, #36	; 0x24
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b082      	sub	sp, #8
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff ff4c 	bl	800676c <__NVIC_SetPriorityGrouping>
}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068ee:	f7ff ff61 	bl	80067b4 <__NVIC_GetPriorityGrouping>
 80068f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	6978      	ldr	r0, [r7, #20]
 80068fa:	f7ff ffb1 	bl	8006860 <NVIC_EncodePriority>
 80068fe:	4602      	mov	r2, r0
 8006900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff ff80 	bl	800680c <__NVIC_SetPriority>
}
 800690c:	bf00      	nop
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800691e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff ff54 	bl	80067d0 <__NVIC_EnableIRQ>
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e054      	b.n	80069ec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	7f5b      	ldrb	r3, [r3, #29]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d105      	bne.n	8006958 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fb ffd8 	bl	8002908 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	791b      	ldrb	r3, [r3, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10c      	bne.n	8006980 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a22      	ldr	r2, [pc, #136]	; (80069f4 <HAL_CRC_Init+0xc4>)
 800696c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0218 	bic.w	r2, r2, #24
 800697c:	609a      	str	r2, [r3, #8]
 800697e:	e00c      	b.n	800699a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6899      	ldr	r1, [r3, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	461a      	mov	r2, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f834 	bl	80069f8 <HAL_CRCEx_Polynomial_Set>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e028      	b.n	80069ec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	795b      	ldrb	r3, [r3, #5]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d105      	bne.n	80069ae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069aa:	611a      	str	r2, [r3, #16]
 80069ac:	e004      	b.n	80069b8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6912      	ldr	r2, [r2, #16]
 80069b6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	04c11db7 	.word	0x04c11db7

080069f8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006a08:	231f      	movs	r3, #31
 8006a0a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006a0c:	bf00      	nop
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1e5a      	subs	r2, r3, #1
 8006a12:	613a      	str	r2, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d009      	beq.n	8006a2c <HAL_CRCEx_Polynomial_Set+0x34>
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	fa22 f303 	lsr.w	r3, r2, r3
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_CRCEx_Polynomial_Set+0x16>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b18      	cmp	r3, #24
 8006a30:	d846      	bhi.n	8006ac0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006ac7 	.word	0x08006ac7
 8006a3c:	08006ac1 	.word	0x08006ac1
 8006a40:	08006ac1 	.word	0x08006ac1
 8006a44:	08006ac1 	.word	0x08006ac1
 8006a48:	08006ac1 	.word	0x08006ac1
 8006a4c:	08006ac1 	.word	0x08006ac1
 8006a50:	08006ac1 	.word	0x08006ac1
 8006a54:	08006ac1 	.word	0x08006ac1
 8006a58:	08006ab5 	.word	0x08006ab5
 8006a5c:	08006ac1 	.word	0x08006ac1
 8006a60:	08006ac1 	.word	0x08006ac1
 8006a64:	08006ac1 	.word	0x08006ac1
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	08006ac1 	.word	0x08006ac1
 8006a70:	08006ac1 	.word	0x08006ac1
 8006a74:	08006ac1 	.word	0x08006ac1
 8006a78:	08006aa9 	.word	0x08006aa9
 8006a7c:	08006ac1 	.word	0x08006ac1
 8006a80:	08006ac1 	.word	0x08006ac1
 8006a84:	08006ac1 	.word	0x08006ac1
 8006a88:	08006ac1 	.word	0x08006ac1
 8006a8c:	08006ac1 	.word	0x08006ac1
 8006a90:	08006ac1 	.word	0x08006ac1
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	08006a9d 	.word	0x08006a9d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	d913      	bls.n	8006aca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006aa6:	e010      	b.n	8006aca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b07      	cmp	r3, #7
 8006aac:	d90f      	bls.n	8006ace <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006ab2:	e00c      	b.n	8006ace <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	d90b      	bls.n	8006ad2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006abe:	e008      	b.n	8006ad2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac4:	e006      	b.n	8006ad4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ac6:	bf00      	nop
 8006ac8:	e004      	b.n	8006ad4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006aca:	bf00      	nop
 8006acc:	e002      	b.n	8006ad4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ace:	bf00      	nop
 8006ad0:	e000      	b.n	8006ad4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006ad2:	bf00      	nop
  }
  if (status == HAL_OK)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10d      	bne.n	8006af6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f023 0118 	bic.w	r1, r3, #24
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e069      	b.n	8006bea <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d102      	bne.n	8006b28 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb ff10 	bl	8002948 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6819      	ldr	r1, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b2a      	ldr	r3, [pc, #168]	; (8006bf4 <HAL_DCMI_Init+0xf0>)
 8006b4a:	400b      	ands	r3, r1
 8006b4c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6819      	ldr	r1, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006b62:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006b6e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006b7a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006b86:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006b92:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d112      	bne.n	8006bca <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	7f1b      	ldrb	r3, [r3, #28]
 8006ba8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	7f5b      	ldrb	r3, [r3, #29]
 8006bae:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006bb0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	7f9b      	ldrb	r3, [r3, #30]
 8006bb6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006bb8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7fdb      	ldrb	r3, [r3, #31]
 8006bc0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006bc6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006bc8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 021e 	orr.w	r2, r2, #30
 8006bd8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	ffe0f007 	.word	0xffe0f007

08006bf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006c04:	f7ff fafa 	bl	80061fc <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e099      	b.n	8006d48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c34:	e00f      	b.n	8006c56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c36:	f7ff fae1 	bl	80061fc <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b05      	cmp	r3, #5
 8006c42:	d908      	bls.n	8006c56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e078      	b.n	8006d48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e8      	bne.n	8006c36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4b38      	ldr	r3, [pc, #224]	; (8006d50 <HAL_DMA_Init+0x158>)
 8006c70:	4013      	ands	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d107      	bne.n	8006cc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f023 0307 	bic.w	r3, r3, #7
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d117      	bne.n	8006d1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00e      	beq.n	8006d1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fb73 	bl	80073e8 <DMA_CheckFifoParam>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d008      	beq.n	8006d1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2240      	movs	r2, #64	; 0x40
 8006d0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006d16:	2301      	movs	r3, #1
 8006d18:	e016      	b.n	8006d48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fb2a 	bl	800737c <DMA_CalcBaseAndBitshift>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d30:	223f      	movs	r2, #63	; 0x3f
 8006d32:	409a      	lsls	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	f010803f 	.word	0xf010803f

08006d54 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e050      	b.n	8006e08 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d101      	bne.n	8006d76 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006d72:	2302      	movs	r3, #2
 8006d74:	e048      	b.n	8006e08 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2200      	movs	r2, #0
 8006d94:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2221      	movs	r2, #33	; 0x21
 8006db4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fae0 	bl	800737c <DMA_CalcBaseAndBitshift>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc4:	223f      	movs	r2, #63	; 0x3f
 8006dc6:	409a      	lsls	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_DMA_Start_IT+0x26>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e048      	b.n	8006ec8 <HAL_DMA_Start_IT+0xb8>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d137      	bne.n	8006eba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fa5e 	bl	8007320 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e68:	223f      	movs	r2, #63	; 0x3f
 8006e6a:	409a      	lsls	r2, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0216 	orr.w	r2, r2, #22
 8006e7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e8e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d007      	beq.n	8006ea8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0208 	orr.w	r2, r2, #8
 8006ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	e005      	b.n	8006ec6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006edc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006ede:	f7ff f98d 	bl	80061fc <HAL_GetTick>
 8006ee2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d008      	beq.n	8006f02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2280      	movs	r2, #128	; 0x80
 8006ef4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e052      	b.n	8006fa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0216 	bic.w	r2, r2, #22
 8006f10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	695a      	ldr	r2, [r3, #20]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d103      	bne.n	8006f32 <HAL_DMA_Abort+0x62>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d007      	beq.n	8006f42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0208 	bic.w	r2, r2, #8
 8006f40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0201 	bic.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f52:	e013      	b.n	8006f7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f54:	f7ff f952 	bl	80061fc <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b05      	cmp	r3, #5
 8006f60:	d90c      	bls.n	8006f7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2203      	movs	r2, #3
 8006f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e015      	b.n	8006fa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e4      	bne.n	8006f54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8e:	223f      	movs	r2, #63	; 0x3f
 8006f90:	409a      	lsls	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d004      	beq.n	8006fce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2280      	movs	r2, #128	; 0x80
 8006fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e00c      	b.n	8006fe8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2205      	movs	r2, #5
 8006fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007000:	4b92      	ldr	r3, [pc, #584]	; (800724c <HAL_DMA_IRQHandler+0x258>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a92      	ldr	r2, [pc, #584]	; (8007250 <HAL_DMA_IRQHandler+0x25c>)
 8007006:	fba2 2303 	umull	r2, r3, r2, r3
 800700a:	0a9b      	lsrs	r3, r3, #10
 800700c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701e:	2208      	movs	r2, #8
 8007020:	409a      	lsls	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4013      	ands	r3, r2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01a      	beq.n	8007060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d013      	beq.n	8007060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0204 	bic.w	r2, r2, #4
 8007046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704c:	2208      	movs	r2, #8
 800704e:	409a      	lsls	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007058:	f043 0201 	orr.w	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007064:	2201      	movs	r2, #1
 8007066:	409a      	lsls	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007082:	2201      	movs	r2, #1
 8007084:	409a      	lsls	r2, r3
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	f043 0202 	orr.w	r2, r3, #2
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709a:	2204      	movs	r2, #4
 800709c:	409a      	lsls	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4013      	ands	r3, r2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d012      	beq.n	80070cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b8:	2204      	movs	r2, #4
 80070ba:	409a      	lsls	r2, r3
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c4:	f043 0204 	orr.w	r2, r3, #4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d0:	2210      	movs	r2, #16
 80070d2:	409a      	lsls	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d043      	beq.n	8007164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d03c      	beq.n	8007164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ee:	2210      	movs	r2, #16
 80070f0:	409a      	lsls	r2, r3
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d018      	beq.n	8007136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d108      	bne.n	8007124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d024      	beq.n	8007164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
 8007122:	e01f      	b.n	8007164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01b      	beq.n	8007164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
 8007134:	e016      	b.n	8007164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007140:	2b00      	cmp	r3, #0
 8007142:	d107      	bne.n	8007154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0208 	bic.w	r2, r2, #8
 8007152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007168:	2220      	movs	r2, #32
 800716a:	409a      	lsls	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 808e 	beq.w	8007292 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0310 	and.w	r3, r3, #16
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 8086 	beq.w	8007292 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718a:	2220      	movs	r2, #32
 800718c:	409a      	lsls	r2, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b05      	cmp	r3, #5
 800719c:	d136      	bne.n	800720c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0216 	bic.w	r2, r2, #22
 80071ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	695a      	ldr	r2, [r3, #20]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <HAL_DMA_IRQHandler+0x1da>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0208 	bic.w	r2, r2, #8
 80071dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e2:	223f      	movs	r2, #63	; 0x3f
 80071e4:	409a      	lsls	r2, r3
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d07d      	beq.n	80072fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
        }
        return;
 800720a:	e078      	b.n	80072fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01c      	beq.n	8007254 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d108      	bne.n	800723a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722c:	2b00      	cmp	r3, #0
 800722e:	d030      	beq.n	8007292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
 8007238:	e02b      	b.n	8007292 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d027      	beq.n	8007292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	4798      	blx	r3
 800724a:	e022      	b.n	8007292 <HAL_DMA_IRQHandler+0x29e>
 800724c:	20000000 	.word	0x20000000
 8007250:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10f      	bne.n	8007282 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0210 	bic.w	r2, r2, #16
 8007270:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007296:	2b00      	cmp	r3, #0
 8007298:	d032      	beq.n	8007300 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d022      	beq.n	80072ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2205      	movs	r2, #5
 80072aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0201 	bic.w	r2, r2, #1
 80072bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	3301      	adds	r3, #1
 80072c2:	60bb      	str	r3, [r7, #8]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d307      	bcc.n	80072da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f2      	bne.n	80072be <HAL_DMA_IRQHandler+0x2ca>
 80072d8:	e000      	b.n	80072dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80072da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
 80072fc:	e000      	b.n	8007300 <HAL_DMA_IRQHandler+0x30c>
        return;
 80072fe:	bf00      	nop
    }
  }
}
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop

08007308 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800733c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b40      	cmp	r3, #64	; 0x40
 800734c:	d108      	bne.n	8007360 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800735e:	e007      	b.n	8007370 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	60da      	str	r2, [r3, #12]
}
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	b2db      	uxtb	r3, r3
 800738a:	3b10      	subs	r3, #16
 800738c:	4a13      	ldr	r2, [pc, #76]	; (80073dc <DMA_CalcBaseAndBitshift+0x60>)
 800738e:	fba2 2303 	umull	r2, r3, r2, r3
 8007392:	091b      	lsrs	r3, r3, #4
 8007394:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007396:	4a12      	ldr	r2, [pc, #72]	; (80073e0 <DMA_CalcBaseAndBitshift+0x64>)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d908      	bls.n	80073bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <DMA_CalcBaseAndBitshift+0x68>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	1d1a      	adds	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	659a      	str	r2, [r3, #88]	; 0x58
 80073ba:	e006      	b.n	80073ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <DMA_CalcBaseAndBitshift+0x68>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	aaaaaaab 	.word	0xaaaaaaab
 80073e0:	0801fc14 	.word	0x0801fc14
 80073e4:	fffffc00 	.word	0xfffffc00

080073e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d11f      	bne.n	8007442 <DMA_CheckFifoParam+0x5a>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b03      	cmp	r3, #3
 8007406:	d856      	bhi.n	80074b6 <DMA_CheckFifoParam+0xce>
 8007408:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <DMA_CheckFifoParam+0x28>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007421 	.word	0x08007421
 8007414:	08007433 	.word	0x08007433
 8007418:	08007421 	.word	0x08007421
 800741c:	080074b7 	.word	0x080074b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d046      	beq.n	80074ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007430:	e043      	b.n	80074ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800743a:	d140      	bne.n	80074be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007440:	e03d      	b.n	80074be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800744a:	d121      	bne.n	8007490 <DMA_CheckFifoParam+0xa8>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b03      	cmp	r3, #3
 8007450:	d837      	bhi.n	80074c2 <DMA_CheckFifoParam+0xda>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <DMA_CheckFifoParam+0x70>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	08007469 	.word	0x08007469
 800745c:	0800746f 	.word	0x0800746f
 8007460:	08007469 	.word	0x08007469
 8007464:	08007481 	.word	0x08007481
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	73fb      	strb	r3, [r7, #15]
      break;
 800746c:	e030      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d025      	beq.n	80074c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800747e:	e022      	b.n	80074c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007488:	d11f      	bne.n	80074ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800748e:	e01c      	b.n	80074ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d903      	bls.n	800749e <DMA_CheckFifoParam+0xb6>
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b03      	cmp	r3, #3
 800749a:	d003      	beq.n	80074a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800749c:	e018      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	73fb      	strb	r3, [r7, #15]
      break;
 80074a2:	e015      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00e      	beq.n	80074ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	e00b      	b.n	80074ce <DMA_CheckFifoParam+0xe6>
      break;
 80074b6:	bf00      	nop
 80074b8:	e00a      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
      break;
 80074ba:	bf00      	nop
 80074bc:	e008      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
      break;
 80074be:	bf00      	nop
 80074c0:	e006      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
      break;
 80074c2:	bf00      	nop
 80074c4:	e004      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
      break;
 80074c6:	bf00      	nop
 80074c8:	e002      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
      break;
 80074ce:	bf00      	nop
    }
  } 
  
  return status; 
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop

080074e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e039      	b.n	8007566 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fb fadc 	bl	8002ac4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	f023 0107 	bic.w	r1, r3, #7
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007546:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <HAL_DMA2D_Init+0x90>)
 8007548:	4013      	ands	r3, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68d1      	ldr	r1, [r2, #12]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	430b      	orrs	r3, r1
 8007554:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	ffffc000 	.word	0xffffc000

08007574 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af02      	add	r7, sp, #8
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_DMA2D_Start+0x1c>
 800758c:	2302      	movs	r3, #2
 800758e:	e018      	b.n	80075c2 <HAL_DMA2D_Start+0x4e>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	68b9      	ldr	r1, [r7, #8]
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 fa98 	bl	8007ae0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d056      	beq.n	8007694 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80075e6:	f7fe fe09 	bl	80061fc <HAL_GetTick>
 80075ea:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80075ec:	e04b      	b.n	8007686 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d023      	beq.n	8007648 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	f043 0202 	orr.w	r2, r3, #2
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007624:	f043 0201 	orr.w	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2221      	movs	r2, #33	; 0x21
 8007632:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2204      	movs	r2, #4
 8007638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e0a5      	b.n	8007794 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800764e:	d01a      	beq.n	8007686 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007650:	f7fe fdd4 	bl	80061fc <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d302      	bcc.n	8007666 <HAL_DMA2D_PollForTransfer+0x9c>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10f      	bne.n	8007686 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766a:	f043 0220 	orr.w	r2, r3, #32
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2203      	movs	r2, #3
 8007676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e086      	b.n	8007794 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0ac      	beq.n	80075ee <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d061      	beq.n	800777a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80076b6:	f7fe fda1 	bl	80061fc <HAL_GetTick>
 80076ba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80076bc:	e056      	b.n	800776c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d02e      	beq.n	800772e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076de:	f043 0204 	orr.w	r2, r3, #4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f4:	f043 0202 	orr.w	r2, r3, #2
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770a:	f043 0201 	orr.w	r2, r3, #1
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2229      	movs	r2, #41	; 0x29
 8007718:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2204      	movs	r2, #4
 800771e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e032      	b.n	8007794 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007734:	d01a      	beq.n	800776c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007736:	f7fe fd61 	bl	80061fc <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d302      	bcc.n	800774c <HAL_DMA2D_PollForTransfer+0x182>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10f      	bne.n	800776c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007750:	f043 0220 	orr.w	r2, r3, #32
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2203      	movs	r2, #3
 800775c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e013      	b.n	8007794 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0a1      	beq.n	80076be <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2212      	movs	r2, #18
 8007780:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d026      	beq.n	800780c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d021      	beq.n	800780c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077d6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077dc:	f043 0201 	orr.w	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2201      	movs	r2, #1
 80077ea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2204      	movs	r2, #4
 80077f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	d026      	beq.n	8007864 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d021      	beq.n	8007864 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800782e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2220      	movs	r2, #32
 8007836:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783c:	f043 0202 	orr.w	r2, r3, #2
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2204      	movs	r2, #4
 8007848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d026      	beq.n	80078bc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007874:	2b00      	cmp	r3, #0
 8007876:	d021      	beq.n	80078bc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007886:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2208      	movs	r2, #8
 800788e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007894:	f043 0204 	orr.w	r2, r3, #4
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d013      	beq.n	80078ee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00e      	beq.n	80078ee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2204      	movs	r2, #4
 80078e6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f853 	bl	8007994 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d024      	beq.n	8007942 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01f      	beq.n	8007942 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007910:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2202      	movs	r2, #2
 8007918:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01f      	beq.n	800798c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d01a      	beq.n	800798c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007964:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2210      	movs	r2, #16
 800796c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f80e 	bl	80079a8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_DMA2D_ConfigLayer+0x20>
 80079d8:	2302      	movs	r3, #2
 80079da:	e079      	b.n	8007ad0 <HAL_DMA2D_ConfigLayer+0x114>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	3318      	adds	r3, #24
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	4413      	add	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	041b      	lsls	r3, r3, #16
 8007a02:	4313      	orrs	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007a06:	4b35      	ldr	r3, [pc, #212]	; (8007adc <HAL_DMA2D_ConfigLayer+0x120>)
 8007a08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2b0a      	cmp	r3, #10
 8007a10:	d003      	beq.n	8007a1a <HAL_DMA2D_ConfigLayer+0x5e>
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b09      	cmp	r3, #9
 8007a18:	d107      	bne.n	8007a2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	e005      	b.n	8007a36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	061b      	lsls	r3, r3, #24
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d120      	bne.n	8007a7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	43db      	mvns	r3, r3
 8007a46:	ea02 0103 	and.w	r1, r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	6812      	ldr	r2, [r2, #0]
 8007a5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b0a      	cmp	r3, #10
 8007a64:	d003      	beq.n	8007a6e <HAL_DMA2D_ConfigLayer+0xb2>
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b09      	cmp	r3, #9
 8007a6c:	d127      	bne.n	8007abe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	68da      	ldr	r2, [r3, #12]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a7c:	e01f      	b.n	8007abe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	43db      	mvns	r3, r3
 8007a88:	ea02 0103 	and.w	r1, r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b0a      	cmp	r3, #10
 8007aa6:	d003      	beq.n	8007ab0 <HAL_DMA2D_ConfigLayer+0xf4>
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2b09      	cmp	r3, #9
 8007aae:	d106      	bne.n	8007abe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007abc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	ff03000f 	.word	0xff03000f

08007ae0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b08b      	sub	sp, #44	; 0x2c
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	041a      	lsls	r2, r3, #16
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	431a      	orrs	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b18:	d174      	bne.n	8007c04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007b20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d108      	bne.n	8007b52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	431a      	orrs	r2, r3
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b50:	e053      	b.n	8007bfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d106      	bne.n	8007b68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
 8007b66:	e048      	b.n	8007bfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d111      	bne.n	8007b94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	0cdb      	lsrs	r3, r3, #19
 8007b74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	0a9b      	lsrs	r3, r3, #10
 8007b7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	08db      	lsrs	r3, r3, #3
 8007b80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	02db      	lsls	r3, r3, #11
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
 8007b92:	e032      	b.n	8007bfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d117      	bne.n	8007bcc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	0fdb      	lsrs	r3, r3, #31
 8007ba0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	0cdb      	lsrs	r3, r3, #19
 8007ba6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	0adb      	lsrs	r3, r3, #11
 8007bac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	08db      	lsrs	r3, r3, #3
 8007bb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	029b      	lsls	r3, r3, #10
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	03db      	lsls	r3, r3, #15
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bca:	e016      	b.n	8007bfa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	0f1b      	lsrs	r3, r3, #28
 8007bd0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	0d1b      	lsrs	r3, r3, #20
 8007bd6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	0b1b      	lsrs	r3, r3, #12
 8007bdc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	091b      	lsrs	r3, r3, #4
 8007be2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	011a      	lsls	r2, r3, #4
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	431a      	orrs	r2, r3
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	031b      	lsls	r3, r3, #12
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c00:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007c02:	e003      	b.n	8007c0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	60da      	str	r2, [r3, #12]
}
 8007c0c:	bf00      	nop
 8007c0e:	372c      	adds	r7, #44	; 0x2c
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c28:	4413      	add	r3, r2
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c30:	2b40      	cmp	r3, #64	; 0x40
 8007c32:	d112      	bne.n	8007c5a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f00b f86f 	bl	8012d18 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c42:	4413      	add	r3, r2
 8007c44:	2240      	movs	r2, #64	; 0x40
 8007c46:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c58:	e01b      	b.n	8007c92 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c62:	4413      	add	r3, r2
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d111      	bne.n	8007c92 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f839 	bl	8007ce6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c7c:	4413      	add	r3, r2
 8007c7e:	2201      	movs	r2, #1
 8007c80:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ca0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	f241 0314 	movw	r3, #4116	; 0x1014
 8007caa:	4413      	add	r3, r2
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb6:	d112      	bne.n	8007cde <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f81e 	bl	8007cfa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	f241 0314 	movw	r3, #4116	; 0x1014
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007ccc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b089      	sub	sp, #36	; 0x24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007d22:	2300      	movs	r3, #0
 8007d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007d26:	2300      	movs	r3, #0
 8007d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	e175      	b.n	800801c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007d30:	2201      	movs	r2, #1
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	4013      	ands	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	f040 8164 	bne.w	8008016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d00b      	beq.n	8007d6e <HAL_GPIO_Init+0x5e>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d007      	beq.n	8007d6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d62:	2b11      	cmp	r3, #17
 8007d64:	d003      	beq.n	8007d6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b12      	cmp	r3, #18
 8007d6c:	d130      	bne.n	8007dd0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	2203      	movs	r2, #3
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	43db      	mvns	r3, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	4013      	ands	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007da4:	2201      	movs	r2, #1
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dac:	43db      	mvns	r3, r3
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	4013      	ands	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	091b      	lsrs	r3, r3, #4
 8007dba:	f003 0201 	and.w	r2, r3, #1
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	2203      	movs	r2, #3
 8007ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8007de0:	43db      	mvns	r3, r3
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	4013      	ands	r3, r2
 8007de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d003      	beq.n	8007e10 <HAL_GPIO_Init+0x100>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b12      	cmp	r3, #18
 8007e0e:	d123      	bne.n	8007e58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	08da      	lsrs	r2, r3, #3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3208      	adds	r2, #8
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	220f      	movs	r2, #15
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	43db      	mvns	r3, r3
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	4013      	ands	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	08da      	lsrs	r2, r3, #3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3208      	adds	r2, #8
 8007e52:	69b9      	ldr	r1, [r7, #24]
 8007e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	2203      	movs	r2, #3
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	43db      	mvns	r3, r3
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f003 0203 	and.w	r2, r3, #3
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80be 	beq.w	8008016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e9a:	4b66      	ldr	r3, [pc, #408]	; (8008034 <HAL_GPIO_Init+0x324>)
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9e:	4a65      	ldr	r2, [pc, #404]	; (8008034 <HAL_GPIO_Init+0x324>)
 8007ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ea6:	4b63      	ldr	r3, [pc, #396]	; (8008034 <HAL_GPIO_Init+0x324>)
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007eb2:	4a61      	ldr	r2, [pc, #388]	; (8008038 <HAL_GPIO_Init+0x328>)
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	089b      	lsrs	r3, r3, #2
 8007eb8:	3302      	adds	r3, #2
 8007eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	220f      	movs	r2, #15
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a58      	ldr	r2, [pc, #352]	; (800803c <HAL_GPIO_Init+0x32c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d037      	beq.n	8007f4e <HAL_GPIO_Init+0x23e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a57      	ldr	r2, [pc, #348]	; (8008040 <HAL_GPIO_Init+0x330>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d031      	beq.n	8007f4a <HAL_GPIO_Init+0x23a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a56      	ldr	r2, [pc, #344]	; (8008044 <HAL_GPIO_Init+0x334>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d02b      	beq.n	8007f46 <HAL_GPIO_Init+0x236>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a55      	ldr	r2, [pc, #340]	; (8008048 <HAL_GPIO_Init+0x338>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d025      	beq.n	8007f42 <HAL_GPIO_Init+0x232>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a54      	ldr	r2, [pc, #336]	; (800804c <HAL_GPIO_Init+0x33c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d01f      	beq.n	8007f3e <HAL_GPIO_Init+0x22e>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a53      	ldr	r2, [pc, #332]	; (8008050 <HAL_GPIO_Init+0x340>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d019      	beq.n	8007f3a <HAL_GPIO_Init+0x22a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a52      	ldr	r2, [pc, #328]	; (8008054 <HAL_GPIO_Init+0x344>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d013      	beq.n	8007f36 <HAL_GPIO_Init+0x226>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a51      	ldr	r2, [pc, #324]	; (8008058 <HAL_GPIO_Init+0x348>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00d      	beq.n	8007f32 <HAL_GPIO_Init+0x222>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a50      	ldr	r2, [pc, #320]	; (800805c <HAL_GPIO_Init+0x34c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d007      	beq.n	8007f2e <HAL_GPIO_Init+0x21e>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a4f      	ldr	r2, [pc, #316]	; (8008060 <HAL_GPIO_Init+0x350>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d101      	bne.n	8007f2a <HAL_GPIO_Init+0x21a>
 8007f26:	2309      	movs	r3, #9
 8007f28:	e012      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f2a:	230a      	movs	r3, #10
 8007f2c:	e010      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f2e:	2308      	movs	r3, #8
 8007f30:	e00e      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f32:	2307      	movs	r3, #7
 8007f34:	e00c      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f36:	2306      	movs	r3, #6
 8007f38:	e00a      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f3a:	2305      	movs	r3, #5
 8007f3c:	e008      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f3e:	2304      	movs	r3, #4
 8007f40:	e006      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f42:	2303      	movs	r3, #3
 8007f44:	e004      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e002      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <HAL_GPIO_Init+0x240>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	f002 0203 	and.w	r2, r2, #3
 8007f56:	0092      	lsls	r2, r2, #2
 8007f58:	4093      	lsls	r3, r2
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007f60:	4935      	ldr	r1, [pc, #212]	; (8008038 <HAL_GPIO_Init+0x328>)
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	089b      	lsrs	r3, r3, #2
 8007f66:	3302      	adds	r3, #2
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f6e:	4b3d      	ldr	r3, [pc, #244]	; (8008064 <HAL_GPIO_Init+0x354>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	43db      	mvns	r3, r3
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f92:	4a34      	ldr	r2, [pc, #208]	; (8008064 <HAL_GPIO_Init+0x354>)
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f98:	4b32      	ldr	r3, [pc, #200]	; (8008064 <HAL_GPIO_Init+0x354>)
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007fbc:	4a29      	ldr	r2, [pc, #164]	; (8008064 <HAL_GPIO_Init+0x354>)
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007fc2:	4b28      	ldr	r3, [pc, #160]	; (8008064 <HAL_GPIO_Init+0x354>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007fe6:	4a1f      	ldr	r2, [pc, #124]	; (8008064 <HAL_GPIO_Init+0x354>)
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007fec:	4b1d      	ldr	r3, [pc, #116]	; (8008064 <HAL_GPIO_Init+0x354>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008010:	4a14      	ldr	r2, [pc, #80]	; (8008064 <HAL_GPIO_Init+0x354>)
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	3301      	adds	r3, #1
 800801a:	61fb      	str	r3, [r7, #28]
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	2b0f      	cmp	r3, #15
 8008020:	f67f ae86 	bls.w	8007d30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop
 8008028:	3724      	adds	r7, #36	; 0x24
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40023800 	.word	0x40023800
 8008038:	40013800 	.word	0x40013800
 800803c:	40020000 	.word	0x40020000
 8008040:	40020400 	.word	0x40020400
 8008044:	40020800 	.word	0x40020800
 8008048:	40020c00 	.word	0x40020c00
 800804c:	40021000 	.word	0x40021000
 8008050:	40021400 	.word	0x40021400
 8008054:	40021800 	.word	0x40021800
 8008058:	40021c00 	.word	0x40021c00
 800805c:	40022000 	.word	0x40022000
 8008060:	40022400 	.word	0x40022400
 8008064:	40013c00 	.word	0x40013c00

08008068 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008072:	2300      	movs	r3, #0
 8008074:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800807a:	2300      	movs	r3, #0
 800807c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	e0d9      	b.n	8008238 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008084:	2201      	movs	r2, #1
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	4013      	ands	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	429a      	cmp	r2, r3
 800809c:	f040 80c9 	bne.w	8008232 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80080a0:	4a6b      	ldr	r2, [pc, #428]	; (8008250 <HAL_GPIO_DeInit+0x1e8>)
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	089b      	lsrs	r3, r3, #2
 80080a6:	3302      	adds	r3, #2
 80080a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ac:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f003 0303 	and.w	r3, r3, #3
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	220f      	movs	r2, #15
 80080b8:	fa02 f303 	lsl.w	r3, r2, r3
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	4013      	ands	r3, r2
 80080c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a63      	ldr	r2, [pc, #396]	; (8008254 <HAL_GPIO_DeInit+0x1ec>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d037      	beq.n	800813a <HAL_GPIO_DeInit+0xd2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a62      	ldr	r2, [pc, #392]	; (8008258 <HAL_GPIO_DeInit+0x1f0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d031      	beq.n	8008136 <HAL_GPIO_DeInit+0xce>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a61      	ldr	r2, [pc, #388]	; (800825c <HAL_GPIO_DeInit+0x1f4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d02b      	beq.n	8008132 <HAL_GPIO_DeInit+0xca>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a60      	ldr	r2, [pc, #384]	; (8008260 <HAL_GPIO_DeInit+0x1f8>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d025      	beq.n	800812e <HAL_GPIO_DeInit+0xc6>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a5f      	ldr	r2, [pc, #380]	; (8008264 <HAL_GPIO_DeInit+0x1fc>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d01f      	beq.n	800812a <HAL_GPIO_DeInit+0xc2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a5e      	ldr	r2, [pc, #376]	; (8008268 <HAL_GPIO_DeInit+0x200>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d019      	beq.n	8008126 <HAL_GPIO_DeInit+0xbe>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a5d      	ldr	r2, [pc, #372]	; (800826c <HAL_GPIO_DeInit+0x204>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d013      	beq.n	8008122 <HAL_GPIO_DeInit+0xba>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a5c      	ldr	r2, [pc, #368]	; (8008270 <HAL_GPIO_DeInit+0x208>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00d      	beq.n	800811e <HAL_GPIO_DeInit+0xb6>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a5b      	ldr	r2, [pc, #364]	; (8008274 <HAL_GPIO_DeInit+0x20c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d007      	beq.n	800811a <HAL_GPIO_DeInit+0xb2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a5a      	ldr	r2, [pc, #360]	; (8008278 <HAL_GPIO_DeInit+0x210>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d101      	bne.n	8008116 <HAL_GPIO_DeInit+0xae>
 8008112:	2309      	movs	r3, #9
 8008114:	e012      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 8008116:	230a      	movs	r3, #10
 8008118:	e010      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 800811a:	2308      	movs	r3, #8
 800811c:	e00e      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 800811e:	2307      	movs	r3, #7
 8008120:	e00c      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 8008122:	2306      	movs	r3, #6
 8008124:	e00a      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 8008126:	2305      	movs	r3, #5
 8008128:	e008      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 800812a:	2304      	movs	r3, #4
 800812c:	e006      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 800812e:	2303      	movs	r3, #3
 8008130:	e004      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 8008132:	2302      	movs	r3, #2
 8008134:	e002      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <HAL_GPIO_DeInit+0xd4>
 800813a:	2300      	movs	r3, #0
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	f002 0203 	and.w	r2, r2, #3
 8008142:	0092      	lsls	r2, r2, #2
 8008144:	4093      	lsls	r3, r2
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	429a      	cmp	r2, r3
 800814a:	d132      	bne.n	80081b2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800814c:	4b4b      	ldr	r3, [pc, #300]	; (800827c <HAL_GPIO_DeInit+0x214>)
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	43db      	mvns	r3, r3
 8008154:	4949      	ldr	r1, [pc, #292]	; (800827c <HAL_GPIO_DeInit+0x214>)
 8008156:	4013      	ands	r3, r2
 8008158:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800815a:	4b48      	ldr	r3, [pc, #288]	; (800827c <HAL_GPIO_DeInit+0x214>)
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	43db      	mvns	r3, r3
 8008162:	4946      	ldr	r1, [pc, #280]	; (800827c <HAL_GPIO_DeInit+0x214>)
 8008164:	4013      	ands	r3, r2
 8008166:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008168:	4b44      	ldr	r3, [pc, #272]	; (800827c <HAL_GPIO_DeInit+0x214>)
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	43db      	mvns	r3, r3
 8008170:	4942      	ldr	r1, [pc, #264]	; (800827c <HAL_GPIO_DeInit+0x214>)
 8008172:	4013      	ands	r3, r2
 8008174:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008176:	4b41      	ldr	r3, [pc, #260]	; (800827c <HAL_GPIO_DeInit+0x214>)
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	43db      	mvns	r3, r3
 800817e:	493f      	ldr	r1, [pc, #252]	; (800827c <HAL_GPIO_DeInit+0x214>)
 8008180:	4013      	ands	r3, r2
 8008182:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	220f      	movs	r2, #15
 800818e:	fa02 f303 	lsl.w	r3, r2, r3
 8008192:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008194:	4a2e      	ldr	r2, [pc, #184]	; (8008250 <HAL_GPIO_DeInit+0x1e8>)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	089b      	lsrs	r3, r3, #2
 800819a:	3302      	adds	r3, #2
 800819c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	43da      	mvns	r2, r3
 80081a4:	482a      	ldr	r0, [pc, #168]	; (8008250 <HAL_GPIO_DeInit+0x1e8>)
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	089b      	lsrs	r3, r3, #2
 80081aa:	400a      	ands	r2, r1
 80081ac:	3302      	adds	r3, #2
 80081ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	2103      	movs	r1, #3
 80081bc:	fa01 f303 	lsl.w	r3, r1, r3
 80081c0:	43db      	mvns	r3, r3
 80081c2:	401a      	ands	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	08da      	lsrs	r2, r3, #3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3208      	adds	r2, #8
 80081d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	220f      	movs	r2, #15
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
 80081e2:	43db      	mvns	r3, r3
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	08d2      	lsrs	r2, r2, #3
 80081e8:	4019      	ands	r1, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3208      	adds	r2, #8
 80081ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	2103      	movs	r1, #3
 80081fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008200:	43db      	mvns	r3, r3
 8008202:	401a      	ands	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	2101      	movs	r1, #1
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	fa01 f303 	lsl.w	r3, r1, r3
 8008214:	43db      	mvns	r3, r3
 8008216:	401a      	ands	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	2103      	movs	r1, #3
 8008226:	fa01 f303 	lsl.w	r3, r1, r3
 800822a:	43db      	mvns	r3, r3
 800822c:	401a      	ands	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	3301      	adds	r3, #1
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2b0f      	cmp	r3, #15
 800823c:	f67f af22 	bls.w	8008084 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008240:	bf00      	nop
 8008242:	bf00      	nop
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	40013800 	.word	0x40013800
 8008254:	40020000 	.word	0x40020000
 8008258:	40020400 	.word	0x40020400
 800825c:	40020800 	.word	0x40020800
 8008260:	40020c00 	.word	0x40020c00
 8008264:	40021000 	.word	0x40021000
 8008268:	40021400 	.word	0x40021400
 800826c:	40021800 	.word	0x40021800
 8008270:	40021c00 	.word	0x40021c00
 8008274:	40022000 	.word	0x40022000
 8008278:	40022400 	.word	0x40022400
 800827c:	40013c00 	.word	0x40013c00

08008280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	887b      	ldrh	r3, [r7, #2]
 8008292:	4013      	ands	r3, r2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
 800829c:	e001      	b.n	80082a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	807b      	strh	r3, [r7, #2]
 80082bc:	4613      	mov	r3, r2
 80082be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80082c0:	787b      	ldrb	r3, [r7, #1]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082c6:	887a      	ldrh	r2, [r7, #2]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80082cc:	e003      	b.n	80082d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80082ce:	887b      	ldrh	r3, [r7, #2]
 80082d0:	041a      	lsls	r2, r3, #16
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	619a      	str	r2, [r3, #24]
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80082f4:	887a      	ldrh	r2, [r7, #2]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4013      	ands	r3, r2
 80082fa:	041a      	lsls	r2, r3, #16
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	43d9      	mvns	r1, r3
 8008300:	887b      	ldrh	r3, [r7, #2]
 8008302:	400b      	ands	r3, r1
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	619a      	str	r2, [r3, #24]
}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008318:	b08f      	sub	sp, #60	; 0x3c
 800831a:	af0a      	add	r7, sp, #40	; 0x28
 800831c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e054      	b.n	80083d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d106      	bne.n	8008348 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f013 fce4 	bl	801bd10 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2203      	movs	r2, #3
 800834c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f009 fb57 	bl	8011a1a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	603b      	str	r3, [r7, #0]
 8008372:	687e      	ldr	r6, [r7, #4]
 8008374:	466d      	mov	r5, sp
 8008376:	f106 0410 	add.w	r4, r6, #16
 800837a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800837c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800837e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008382:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008386:	e885 0003 	stmia.w	r5, {r0, r1}
 800838a:	1d33      	adds	r3, r6, #4
 800838c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800838e:	6838      	ldr	r0, [r7, #0]
 8008390:	f009 fada 	bl	8011948 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2101      	movs	r1, #1
 800839a:	4618      	mov	r0, r3
 800839c:	f009 fb4e 	bl	8011a3c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	603b      	str	r3, [r7, #0]
 80083a6:	687e      	ldr	r6, [r7, #4]
 80083a8:	466d      	mov	r5, sp
 80083aa:	f106 0410 	add.w	r4, r6, #16
 80083ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80083be:	1d33      	adds	r3, r6, #4
 80083c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083c2:	6838      	ldr	r0, [r7, #0]
 80083c4:	f009 fc60 	bl	8011c88 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80083da:	b590      	push	{r4, r7, lr}
 80083dc:	b089      	sub	sp, #36	; 0x24
 80083de:	af04      	add	r7, sp, #16
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	4608      	mov	r0, r1
 80083e4:	4611      	mov	r1, r2
 80083e6:	461a      	mov	r2, r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	70fb      	strb	r3, [r7, #3]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70bb      	strb	r3, [r7, #2]
 80083f0:	4613      	mov	r3, r2
 80083f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <HAL_HCD_HC_Init+0x28>
 80083fe:	2302      	movs	r3, #2
 8008400:	e076      	b.n	80084f0 <HAL_HCD_HC_Init+0x116>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	212c      	movs	r1, #44	; 0x2c
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	4413      	add	r3, r2
 8008416:	333d      	adds	r3, #61	; 0x3d
 8008418:	2200      	movs	r2, #0
 800841a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800841c:	78fb      	ldrb	r3, [r7, #3]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	212c      	movs	r1, #44	; 0x2c
 8008422:	fb01 f303 	mul.w	r3, r1, r3
 8008426:	4413      	add	r3, r2
 8008428:	3338      	adds	r3, #56	; 0x38
 800842a:	787a      	ldrb	r2, [r7, #1]
 800842c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	212c      	movs	r1, #44	; 0x2c
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	4413      	add	r3, r2
 800843a:	3340      	adds	r3, #64	; 0x40
 800843c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800843e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	212c      	movs	r1, #44	; 0x2c
 8008446:	fb01 f303 	mul.w	r3, r1, r3
 800844a:	4413      	add	r3, r2
 800844c:	3339      	adds	r3, #57	; 0x39
 800844e:	78fa      	ldrb	r2, [r7, #3]
 8008450:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	212c      	movs	r1, #44	; 0x2c
 8008458:	fb01 f303 	mul.w	r3, r1, r3
 800845c:	4413      	add	r3, r2
 800845e:	333f      	adds	r3, #63	; 0x3f
 8008460:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008464:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	78ba      	ldrb	r2, [r7, #2]
 800846a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800846e:	b2d0      	uxtb	r0, r2
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	212c      	movs	r1, #44	; 0x2c
 8008474:	fb01 f303 	mul.w	r3, r1, r3
 8008478:	4413      	add	r3, r2
 800847a:	333a      	adds	r3, #58	; 0x3a
 800847c:	4602      	mov	r2, r0
 800847e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8008480:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008484:	2b00      	cmp	r3, #0
 8008486:	da09      	bge.n	800849c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	212c      	movs	r1, #44	; 0x2c
 800848e:	fb01 f303 	mul.w	r3, r1, r3
 8008492:	4413      	add	r3, r2
 8008494:	333b      	adds	r3, #59	; 0x3b
 8008496:	2201      	movs	r2, #1
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	e008      	b.n	80084ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	212c      	movs	r1, #44	; 0x2c
 80084a2:	fb01 f303 	mul.w	r3, r1, r3
 80084a6:	4413      	add	r3, r2
 80084a8:	333b      	adds	r3, #59	; 0x3b
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80084ae:	78fb      	ldrb	r3, [r7, #3]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	212c      	movs	r1, #44	; 0x2c
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	4413      	add	r3, r2
 80084ba:	333c      	adds	r3, #60	; 0x3c
 80084bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80084c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	787c      	ldrb	r4, [r7, #1]
 80084c8:	78ba      	ldrb	r2, [r7, #2]
 80084ca:	78f9      	ldrb	r1, [r7, #3]
 80084cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084ce:	9302      	str	r3, [sp, #8]
 80084d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4623      	mov	r3, r4
 80084de:	f009 fd49 	bl	8011f74 <USB_HC_Init>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd90      	pop	{r4, r7, pc}

080084f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800850e:	2b01      	cmp	r3, #1
 8008510:	d101      	bne.n	8008516 <HAL_HCD_HC_Halt+0x1e>
 8008512:	2302      	movs	r3, #2
 8008514:	e00f      	b.n	8008536 <HAL_HCD_HC_Halt+0x3e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	78fa      	ldrb	r2, [r7, #3]
 8008524:	4611      	mov	r1, r2
 8008526:	4618      	mov	r0, r3
 8008528:	f009 ff85 	bl	8012436 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	4608      	mov	r0, r1
 800854a:	4611      	mov	r1, r2
 800854c:	461a      	mov	r2, r3
 800854e:	4603      	mov	r3, r0
 8008550:	70fb      	strb	r3, [r7, #3]
 8008552:	460b      	mov	r3, r1
 8008554:	70bb      	strb	r3, [r7, #2]
 8008556:	4613      	mov	r3, r2
 8008558:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	212c      	movs	r1, #44	; 0x2c
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	4413      	add	r3, r2
 8008566:	333b      	adds	r3, #59	; 0x3b
 8008568:	78ba      	ldrb	r2, [r7, #2]
 800856a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	212c      	movs	r1, #44	; 0x2c
 8008572:	fb01 f303 	mul.w	r3, r1, r3
 8008576:	4413      	add	r3, r2
 8008578:	333f      	adds	r3, #63	; 0x3f
 800857a:	787a      	ldrb	r2, [r7, #1]
 800857c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800857e:	7c3b      	ldrb	r3, [r7, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d112      	bne.n	80085aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	212c      	movs	r1, #44	; 0x2c
 800858a:	fb01 f303 	mul.w	r3, r1, r3
 800858e:	4413      	add	r3, r2
 8008590:	3342      	adds	r3, #66	; 0x42
 8008592:	2203      	movs	r2, #3
 8008594:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	212c      	movs	r1, #44	; 0x2c
 800859c:	fb01 f303 	mul.w	r3, r1, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	333d      	adds	r3, #61	; 0x3d
 80085a4:	7f3a      	ldrb	r2, [r7, #28]
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	e008      	b.n	80085bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	212c      	movs	r1, #44	; 0x2c
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	4413      	add	r3, r2
 80085b6:	3342      	adds	r3, #66	; 0x42
 80085b8:	2202      	movs	r2, #2
 80085ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80085bc:	787b      	ldrb	r3, [r7, #1]
 80085be:	2b03      	cmp	r3, #3
 80085c0:	f200 80c6 	bhi.w	8008750 <HAL_HCD_HC_SubmitRequest+0x210>
 80085c4:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	080085dd 	.word	0x080085dd
 80085d0:	0800873d 	.word	0x0800873d
 80085d4:	08008641 	.word	0x08008641
 80085d8:	080086bf 	.word	0x080086bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80085dc:	7c3b      	ldrb	r3, [r7, #16]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	f040 80b8 	bne.w	8008754 <HAL_HCD_HC_SubmitRequest+0x214>
 80085e4:	78bb      	ldrb	r3, [r7, #2]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f040 80b4 	bne.w	8008754 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80085ec:	8b3b      	ldrh	r3, [r7, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d108      	bne.n	8008604 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	212c      	movs	r1, #44	; 0x2c
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	3355      	adds	r3, #85	; 0x55
 8008600:	2201      	movs	r2, #1
 8008602:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	212c      	movs	r1, #44	; 0x2c
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	4413      	add	r3, r2
 8008610:	3355      	adds	r3, #85	; 0x55
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d109      	bne.n	800862c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	212c      	movs	r1, #44	; 0x2c
 800861e:	fb01 f303 	mul.w	r3, r1, r3
 8008622:	4413      	add	r3, r2
 8008624:	3342      	adds	r3, #66	; 0x42
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800862a:	e093      	b.n	8008754 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800862c:	78fb      	ldrb	r3, [r7, #3]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	212c      	movs	r1, #44	; 0x2c
 8008632:	fb01 f303 	mul.w	r3, r1, r3
 8008636:	4413      	add	r3, r2
 8008638:	3342      	adds	r3, #66	; 0x42
 800863a:	2202      	movs	r2, #2
 800863c:	701a      	strb	r2, [r3, #0]
      break;
 800863e:	e089      	b.n	8008754 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8008640:	78bb      	ldrb	r3, [r7, #2]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d11d      	bne.n	8008682 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	212c      	movs	r1, #44	; 0x2c
 800864c:	fb01 f303 	mul.w	r3, r1, r3
 8008650:	4413      	add	r3, r2
 8008652:	3355      	adds	r3, #85	; 0x55
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	212c      	movs	r1, #44	; 0x2c
 8008660:	fb01 f303 	mul.w	r3, r1, r3
 8008664:	4413      	add	r3, r2
 8008666:	3342      	adds	r3, #66	; 0x42
 8008668:	2200      	movs	r2, #0
 800866a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800866c:	e073      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	212c      	movs	r1, #44	; 0x2c
 8008674:	fb01 f303 	mul.w	r3, r1, r3
 8008678:	4413      	add	r3, r2
 800867a:	3342      	adds	r3, #66	; 0x42
 800867c:	2202      	movs	r2, #2
 800867e:	701a      	strb	r2, [r3, #0]
      break;
 8008680:	e069      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	212c      	movs	r1, #44	; 0x2c
 8008688:	fb01 f303 	mul.w	r3, r1, r3
 800868c:	4413      	add	r3, r2
 800868e:	3354      	adds	r3, #84	; 0x54
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	212c      	movs	r1, #44	; 0x2c
 800869c:	fb01 f303 	mul.w	r3, r1, r3
 80086a0:	4413      	add	r3, r2
 80086a2:	3342      	adds	r3, #66	; 0x42
 80086a4:	2200      	movs	r2, #0
 80086a6:	701a      	strb	r2, [r3, #0]
      break;
 80086a8:	e055      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80086aa:	78fb      	ldrb	r3, [r7, #3]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	212c      	movs	r1, #44	; 0x2c
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	4413      	add	r3, r2
 80086b6:	3342      	adds	r3, #66	; 0x42
 80086b8:	2202      	movs	r2, #2
 80086ba:	701a      	strb	r2, [r3, #0]
      break;
 80086bc:	e04b      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80086be:	78bb      	ldrb	r3, [r7, #2]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d11d      	bne.n	8008700 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	212c      	movs	r1, #44	; 0x2c
 80086ca:	fb01 f303 	mul.w	r3, r1, r3
 80086ce:	4413      	add	r3, r2
 80086d0:	3355      	adds	r3, #85	; 0x55
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d109      	bne.n	80086ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	212c      	movs	r1, #44	; 0x2c
 80086de:	fb01 f303 	mul.w	r3, r1, r3
 80086e2:	4413      	add	r3, r2
 80086e4:	3342      	adds	r3, #66	; 0x42
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80086ea:	e034      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	212c      	movs	r1, #44	; 0x2c
 80086f2:	fb01 f303 	mul.w	r3, r1, r3
 80086f6:	4413      	add	r3, r2
 80086f8:	3342      	adds	r3, #66	; 0x42
 80086fa:	2202      	movs	r2, #2
 80086fc:	701a      	strb	r2, [r3, #0]
      break;
 80086fe:	e02a      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	212c      	movs	r1, #44	; 0x2c
 8008706:	fb01 f303 	mul.w	r3, r1, r3
 800870a:	4413      	add	r3, r2
 800870c:	3354      	adds	r3, #84	; 0x54
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	212c      	movs	r1, #44	; 0x2c
 800871a:	fb01 f303 	mul.w	r3, r1, r3
 800871e:	4413      	add	r3, r2
 8008720:	3342      	adds	r3, #66	; 0x42
 8008722:	2200      	movs	r2, #0
 8008724:	701a      	strb	r2, [r3, #0]
      break;
 8008726:	e016      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	212c      	movs	r1, #44	; 0x2c
 800872e:	fb01 f303 	mul.w	r3, r1, r3
 8008732:	4413      	add	r3, r2
 8008734:	3342      	adds	r3, #66	; 0x42
 8008736:	2202      	movs	r2, #2
 8008738:	701a      	strb	r2, [r3, #0]
      break;
 800873a:	e00c      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	212c      	movs	r1, #44	; 0x2c
 8008742:	fb01 f303 	mul.w	r3, r1, r3
 8008746:	4413      	add	r3, r2
 8008748:	3342      	adds	r3, #66	; 0x42
 800874a:	2200      	movs	r2, #0
 800874c:	701a      	strb	r2, [r3, #0]
      break;
 800874e:	e002      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8008750:	bf00      	nop
 8008752:	e000      	b.n	8008756 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8008754:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	212c      	movs	r1, #44	; 0x2c
 800875c:	fb01 f303 	mul.w	r3, r1, r3
 8008760:	4413      	add	r3, r2
 8008762:	3344      	adds	r3, #68	; 0x44
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	8b3a      	ldrh	r2, [r7, #24]
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	202c      	movs	r0, #44	; 0x2c
 8008770:	fb00 f303 	mul.w	r3, r0, r3
 8008774:	440b      	add	r3, r1
 8008776:	334c      	adds	r3, #76	; 0x4c
 8008778:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	212c      	movs	r1, #44	; 0x2c
 8008780:	fb01 f303 	mul.w	r3, r1, r3
 8008784:	4413      	add	r3, r2
 8008786:	3360      	adds	r3, #96	; 0x60
 8008788:	2200      	movs	r2, #0
 800878a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	212c      	movs	r1, #44	; 0x2c
 8008792:	fb01 f303 	mul.w	r3, r1, r3
 8008796:	4413      	add	r3, r2
 8008798:	3350      	adds	r3, #80	; 0x50
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	212c      	movs	r1, #44	; 0x2c
 80087a4:	fb01 f303 	mul.w	r3, r1, r3
 80087a8:	4413      	add	r3, r2
 80087aa:	3339      	adds	r3, #57	; 0x39
 80087ac:	78fa      	ldrb	r2, [r7, #3]
 80087ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80087b0:	78fb      	ldrb	r3, [r7, #3]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	212c      	movs	r1, #44	; 0x2c
 80087b6:	fb01 f303 	mul.w	r3, r1, r3
 80087ba:	4413      	add	r3, r2
 80087bc:	3361      	adds	r3, #97	; 0x61
 80087be:	2200      	movs	r2, #0
 80087c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6818      	ldr	r0, [r3, #0]
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	222c      	movs	r2, #44	; 0x2c
 80087ca:	fb02 f303 	mul.w	r3, r2, r3
 80087ce:	3338      	adds	r3, #56	; 0x38
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	18d1      	adds	r1, r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	f009 fcd8 	bl	8012190 <USB_HC_StartXfer>
 80087e0:	4603      	mov	r3, r0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop

080087ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4618      	mov	r0, r3
 8008804:	f009 f9fd 	bl	8011c02 <USB_GetMode>
 8008808:	4603      	mov	r3, r0
 800880a:	2b01      	cmp	r3, #1
 800880c:	f040 80ef 	bne.w	80089ee <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f009 f9e1 	bl	8011bdc <USB_ReadInterrupts>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 80e5 	beq.w	80089ec <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4618      	mov	r0, r3
 8008828:	f009 f9d8 	bl	8011bdc <USB_ReadInterrupts>
 800882c:	4603      	mov	r3, r0
 800882e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008836:	d104      	bne.n	8008842 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008840:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f009 f9c8 	bl	8011bdc <USB_ReadInterrupts>
 800884c:	4603      	mov	r3, r0
 800884e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008856:	d104      	bne.n	8008862 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008860:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4618      	mov	r0, r3
 8008868:	f009 f9b8 	bl	8011bdc <USB_ReadInterrupts>
 800886c:	4603      	mov	r3, r0
 800886e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008876:	d104      	bne.n	8008882 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008880:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f009 f9a8 	bl	8011bdc <USB_ReadInterrupts>
 800888c:	4603      	mov	r3, r0
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b02      	cmp	r3, #2
 8008894:	d103      	bne.n	800889e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2202      	movs	r2, #2
 800889c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f009 f99a 	bl	8011bdc <USB_ReadInterrupts>
 80088a8:	4603      	mov	r3, r0
 80088aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b2:	d115      	bne.n	80088e0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80088bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d108      	bne.n	80088e0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f013 fa90 	bl	801bdf4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2101      	movs	r1, #1
 80088da:	4618      	mov	r0, r3
 80088dc:	f009 fa84 	bl	8011de8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f009 f979 	bl	8011bdc <USB_ReadInterrupts>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088f4:	d102      	bne.n	80088fc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 f9ff 	bl	8009cfa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4618      	mov	r0, r3
 8008902:	f009 f96b 	bl	8011bdc <USB_ReadInterrupts>
 8008906:	4603      	mov	r3, r0
 8008908:	f003 0308 	and.w	r3, r3, #8
 800890c:	2b08      	cmp	r3, #8
 800890e:	d106      	bne.n	800891e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f013 fa53 	bl	801bdbc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2208      	movs	r2, #8
 800891c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f009 f95a 	bl	8011bdc <USB_ReadInterrupts>
 8008928:	4603      	mov	r3, r0
 800892a:	f003 0310 	and.w	r3, r3, #16
 800892e:	2b10      	cmp	r3, #16
 8008930:	d101      	bne.n	8008936 <HAL_HCD_IRQHandler+0x14a>
 8008932:	2301      	movs	r3, #1
 8008934:	e000      	b.n	8008938 <HAL_HCD_IRQHandler+0x14c>
 8008936:	2300      	movs	r3, #0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d012      	beq.n	8008962 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699a      	ldr	r2, [r3, #24]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0210 	bic.w	r2, r2, #16
 800894a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 f902 	bl	8009b56 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	699a      	ldr	r2, [r3, #24]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0210 	orr.w	r2, r2, #16
 8008960:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f009 f938 	bl	8011bdc <USB_ReadInterrupts>
 800896c:	4603      	mov	r3, r0
 800896e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008976:	d13a      	bne.n	80089ee <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f009 fd49 	bl	8012414 <USB_HC_ReadInterrupt>
 8008982:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e025      	b.n	80089d6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	fa22 f303 	lsr.w	r3, r2, r3
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d018      	beq.n	80089d0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	015a      	lsls	r2, r3, #5
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b4:	d106      	bne.n	80089c4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f8ab 	bl	8008b18 <HCD_HC_IN_IRQHandler>
 80089c2:	e005      	b.n	80089d0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fcc6 	bl	800935c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	3301      	adds	r3, #1
 80089d4:	617b      	str	r3, [r7, #20]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d3d4      	bcc.n	800898a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089e8:	615a      	str	r2, [r3, #20]
 80089ea:	e000      	b.n	80089ee <HAL_HCD_IRQHandler+0x202>
      return;
 80089ec:	bf00      	nop
    }
  }
}
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d101      	bne.n	8008a0a <HAL_HCD_Start+0x16>
 8008a06:	2302      	movs	r3, #2
 8008a08:	e013      	b.n	8008a32 <HAL_HCD_Start+0x3e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f008 ffee 	bl	80119f8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2101      	movs	r1, #1
 8008a22:	4618      	mov	r0, r3
 8008a24:	f009 fa44 	bl	8011eb0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d101      	bne.n	8008a50 <HAL_HCD_Stop+0x16>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e00d      	b.n	8008a6c <HAL_HCD_Stop+0x32>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f009 fe43 	bl	80126e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f009 f9eb 	bl	8011e5c <USB_ResetPort>
 8008a86:	4603      	mov	r3, r0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	212c      	movs	r1, #44	; 0x2c
 8008aa2:	fb01 f303 	mul.w	r3, r1, r3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	3360      	adds	r3, #96	; 0x60
 8008aaa:	781b      	ldrb	r3, [r3, #0]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	212c      	movs	r1, #44	; 0x2c
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	3350      	adds	r3, #80	; 0x50
 8008ad2:	681b      	ldr	r3, [r3, #0]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f009 fa2f 	bl	8011f50 <USB_GetCurrentFrame>
 8008af2:	4603      	mov	r3, r0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f009 fa0a 	bl	8011f22 <USB_GetHostSpeed>
 8008b0e:	4603      	mov	r3, r0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	d119      	bne.n	8008b7c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b54:	461a      	mov	r2, r3
 8008b56:	2304      	movs	r3, #4
 8008b58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b74:	f043 0302 	orr.w	r3, r3, #2
 8008b78:	60d3      	str	r3, [r2, #12]
 8008b7a:	e101      	b.n	8008d80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b92:	d12b      	bne.n	8008bec <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ba6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	212c      	movs	r1, #44	; 0x2c
 8008bae:	fb01 f303 	mul.w	r3, r1, r3
 8008bb2:	4413      	add	r3, r2
 8008bb4:	3361      	adds	r3, #97	; 0x61
 8008bb6:	2207      	movs	r2, #7
 8008bb8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	0151      	lsls	r1, r2, #5
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	440a      	add	r2, r1
 8008bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bd4:	f043 0302 	orr.w	r3, r3, #2
 8008bd8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	b2d2      	uxtb	r2, r2
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f009 fc26 	bl	8012436 <USB_HC_Halt>
 8008bea:	e0c9      	b.n	8008d80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b20      	cmp	r3, #32
 8008c00:	d109      	bne.n	8008c16 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0e:	461a      	mov	r2, r3
 8008c10:	2320      	movs	r3, #32
 8008c12:	6093      	str	r3, [r2, #8]
 8008c14:	e0b4      	b.n	8008d80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f003 0308 	and.w	r3, r3, #8
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d133      	bne.n	8008c94 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	0151      	lsls	r1, r2, #5
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	440a      	add	r2, r1
 8008c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c46:	f043 0302 	orr.w	r3, r3, #2
 8008c4a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	212c      	movs	r1, #44	; 0x2c
 8008c52:	fb01 f303 	mul.w	r3, r1, r3
 8008c56:	4413      	add	r3, r2
 8008c58:	3361      	adds	r3, #97	; 0x61
 8008c5a:	2205      	movs	r2, #5
 8008c5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	2308      	movs	r3, #8
 8008c80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f009 fbd2 	bl	8012436 <USB_HC_Halt>
 8008c92:	e075      	b.n	8008d80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008caa:	d134      	bne.n	8008d16 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	0151      	lsls	r1, r2, #5
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc6:	f043 0302 	orr.w	r3, r3, #2
 8008cca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	212c      	movs	r1, #44	; 0x2c
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	4413      	add	r3, r2
 8008cd8:	3361      	adds	r3, #97	; 0x61
 8008cda:	2208      	movs	r2, #8
 8008cdc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cea:	461a      	mov	r2, r3
 8008cec:	2310      	movs	r3, #16
 8008cee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d02:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f009 fb91 	bl	8012436 <USB_HC_Halt>
 8008d14:	e034      	b.n	8008d80 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b80      	cmp	r3, #128	; 0x80
 8008d2a:	d129      	bne.n	8008d80 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	0151      	lsls	r1, r2, #5
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	440a      	add	r2, r1
 8008d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d46:	f043 0302 	orr.w	r3, r3, #2
 8008d4a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	212c      	movs	r1, #44	; 0x2c
 8008d52:	fb01 f303 	mul.w	r3, r1, r3
 8008d56:	4413      	add	r3, r2
 8008d58:	3361      	adds	r3, #97	; 0x61
 8008d5a:	2206      	movs	r2, #6
 8008d5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	b2d2      	uxtb	r2, r2
 8008d66:	4611      	mov	r1, r2
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f009 fb64 	bl	8012436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d96:	d122      	bne.n	8008dde <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	0151      	lsls	r1, r2, #5
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	440a      	add	r2, r1
 8008dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008db2:	f043 0302 	orr.w	r3, r3, #2
 8008db6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f009 fb37 	bl	8012436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dda:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8008ddc:	e2ba      	b.n	8009354 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	f040 811b 	bne.w	800902c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d019      	beq.n	8008e32 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	212c      	movs	r1, #44	; 0x2c
 8008e04:	fb01 f303 	mul.w	r3, r1, r3
 8008e08:	4413      	add	r3, r2
 8008e0a:	3348      	adds	r3, #72	; 0x48
 8008e0c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	0159      	lsls	r1, r3, #5
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	440b      	add	r3, r1
 8008e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008e20:	1ad2      	subs	r2, r2, r3
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	202c      	movs	r0, #44	; 0x2c
 8008e28:	fb00 f303 	mul.w	r3, r0, r3
 8008e2c:	440b      	add	r3, r1
 8008e2e:	3350      	adds	r3, #80	; 0x50
 8008e30:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	212c      	movs	r1, #44	; 0x2c
 8008e38:	fb01 f303 	mul.w	r3, r1, r3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	3361      	adds	r3, #97	; 0x61
 8008e40:	2201      	movs	r2, #1
 8008e42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	212c      	movs	r1, #44	; 0x2c
 8008e4a:	fb01 f303 	mul.w	r3, r1, r3
 8008e4e:	4413      	add	r3, r2
 8008e50:	335c      	adds	r3, #92	; 0x5c
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e62:	461a      	mov	r2, r3
 8008e64:	2301      	movs	r3, #1
 8008e66:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	212c      	movs	r1, #44	; 0x2c
 8008e6e:	fb01 f303 	mul.w	r3, r1, r3
 8008e72:	4413      	add	r3, r2
 8008e74:	333f      	adds	r3, #63	; 0x3f
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d009      	beq.n	8008e90 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	212c      	movs	r1, #44	; 0x2c
 8008e82:	fb01 f303 	mul.w	r3, r1, r3
 8008e86:	4413      	add	r3, r2
 8008e88:	333f      	adds	r3, #63	; 0x3f
 8008e8a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d121      	bne.n	8008ed4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	0151      	lsls	r1, r2, #5
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	440a      	add	r2, r1
 8008ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eaa:	f043 0302 	orr.w	r3, r3, #2
 8008eae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	b2d2      	uxtb	r2, r2
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f009 fabb 	bl	8012436 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ecc:	461a      	mov	r2, r3
 8008ece:	2310      	movs	r3, #16
 8008ed0:	6093      	str	r3, [r2, #8]
 8008ed2:	e066      	b.n	8008fa2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	212c      	movs	r1, #44	; 0x2c
 8008eda:	fb01 f303 	mul.w	r3, r1, r3
 8008ede:	4413      	add	r3, r2
 8008ee0:	333f      	adds	r3, #63	; 0x3f
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d127      	bne.n	8008f38 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f06:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	212c      	movs	r1, #44	; 0x2c
 8008f0e:	fb01 f303 	mul.w	r3, r1, r3
 8008f12:	4413      	add	r3, r2
 8008f14:	3360      	adds	r3, #96	; 0x60
 8008f16:	2201      	movs	r2, #1
 8008f18:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	b2d9      	uxtb	r1, r3
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	202c      	movs	r0, #44	; 0x2c
 8008f24:	fb00 f303 	mul.w	r3, r0, r3
 8008f28:	4413      	add	r3, r2
 8008f2a:	3360      	adds	r3, #96	; 0x60
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f012 ff6d 	bl	801be10 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008f36:	e034      	b.n	8008fa2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	212c      	movs	r1, #44	; 0x2c
 8008f3e:	fb01 f303 	mul.w	r3, r1, r3
 8008f42:	4413      	add	r3, r2
 8008f44:	333f      	adds	r3, #63	; 0x3f
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d12a      	bne.n	8008fa2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	212c      	movs	r1, #44	; 0x2c
 8008f52:	fb01 f303 	mul.w	r3, r1, r3
 8008f56:	4413      	add	r3, r2
 8008f58:	3360      	adds	r3, #96	; 0x60
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	212c      	movs	r1, #44	; 0x2c
 8008f64:	fb01 f303 	mul.w	r3, r1, r3
 8008f68:	4413      	add	r3, r2
 8008f6a:	3354      	adds	r3, #84	; 0x54
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	f083 0301 	eor.w	r3, r3, #1
 8008f72:	b2d8      	uxtb	r0, r3
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	212c      	movs	r1, #44	; 0x2c
 8008f7a:	fb01 f303 	mul.w	r3, r1, r3
 8008f7e:	4413      	add	r3, r2
 8008f80:	3354      	adds	r3, #84	; 0x54
 8008f82:	4602      	mov	r2, r0
 8008f84:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	b2d9      	uxtb	r1, r3
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	202c      	movs	r0, #44	; 0x2c
 8008f90:	fb00 f303 	mul.w	r3, r0, r3
 8008f94:	4413      	add	r3, r2
 8008f96:	3360      	adds	r3, #96	; 0x60
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f012 ff37 	bl	801be10 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d12b      	bne.n	8009002 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	212c      	movs	r1, #44	; 0x2c
 8008fb0:	fb01 f303 	mul.w	r3, r1, r3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	3348      	adds	r3, #72	; 0x48
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	202c      	movs	r0, #44	; 0x2c
 8008fc0:	fb00 f202 	mul.w	r2, r0, r2
 8008fc4:	440a      	add	r2, r1
 8008fc6:	3240      	adds	r2, #64	; 0x40
 8008fc8:	8812      	ldrh	r2, [r2, #0]
 8008fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 81be 	beq.w	8009354 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	212c      	movs	r1, #44	; 0x2c
 8008fde:	fb01 f303 	mul.w	r3, r1, r3
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3354      	adds	r3, #84	; 0x54
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	f083 0301 	eor.w	r3, r3, #1
 8008fec:	b2d8      	uxtb	r0, r3
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	212c      	movs	r1, #44	; 0x2c
 8008ff4:	fb01 f303 	mul.w	r3, r1, r3
 8008ff8:	4413      	add	r3, r2
 8008ffa:	3354      	adds	r3, #84	; 0x54
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	701a      	strb	r2, [r3, #0]
}
 8009000:	e1a8      	b.n	8009354 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	212c      	movs	r1, #44	; 0x2c
 8009008:	fb01 f303 	mul.w	r3, r1, r3
 800900c:	4413      	add	r3, r2
 800900e:	3354      	adds	r3, #84	; 0x54
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	f083 0301 	eor.w	r3, r3, #1
 8009016:	b2d8      	uxtb	r0, r3
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	212c      	movs	r1, #44	; 0x2c
 800901e:	fb01 f303 	mul.w	r3, r1, r3
 8009022:	4413      	add	r3, r2
 8009024:	3354      	adds	r3, #84	; 0x54
 8009026:	4602      	mov	r2, r0
 8009028:	701a      	strb	r2, [r3, #0]
}
 800902a:	e193      	b.n	8009354 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	4413      	add	r3, r2
 8009034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b02      	cmp	r3, #2
 8009040:	f040 8106 	bne.w	8009250 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	4413      	add	r3, r2
 800904c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	0151      	lsls	r1, r2, #5
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	440a      	add	r2, r1
 800905a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800905e:	f023 0302 	bic.w	r3, r3, #2
 8009062:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	212c      	movs	r1, #44	; 0x2c
 800906a:	fb01 f303 	mul.w	r3, r1, r3
 800906e:	4413      	add	r3, r2
 8009070:	3361      	adds	r3, #97	; 0x61
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d109      	bne.n	800908c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	212c      	movs	r1, #44	; 0x2c
 800907e:	fb01 f303 	mul.w	r3, r1, r3
 8009082:	4413      	add	r3, r2
 8009084:	3360      	adds	r3, #96	; 0x60
 8009086:	2201      	movs	r2, #1
 8009088:	701a      	strb	r2, [r3, #0]
 800908a:	e0c9      	b.n	8009220 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	212c      	movs	r1, #44	; 0x2c
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	4413      	add	r3, r2
 8009098:	3361      	adds	r3, #97	; 0x61
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b05      	cmp	r3, #5
 800909e:	d109      	bne.n	80090b4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	212c      	movs	r1, #44	; 0x2c
 80090a6:	fb01 f303 	mul.w	r3, r1, r3
 80090aa:	4413      	add	r3, r2
 80090ac:	3360      	adds	r3, #96	; 0x60
 80090ae:	2205      	movs	r2, #5
 80090b0:	701a      	strb	r2, [r3, #0]
 80090b2:	e0b5      	b.n	8009220 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	212c      	movs	r1, #44	; 0x2c
 80090ba:	fb01 f303 	mul.w	r3, r1, r3
 80090be:	4413      	add	r3, r2
 80090c0:	3361      	adds	r3, #97	; 0x61
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b06      	cmp	r3, #6
 80090c6:	d009      	beq.n	80090dc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	212c      	movs	r1, #44	; 0x2c
 80090ce:	fb01 f303 	mul.w	r3, r1, r3
 80090d2:	4413      	add	r3, r2
 80090d4:	3361      	adds	r3, #97	; 0x61
 80090d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d150      	bne.n	800917e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	212c      	movs	r1, #44	; 0x2c
 80090e2:	fb01 f303 	mul.w	r3, r1, r3
 80090e6:	4413      	add	r3, r2
 80090e8:	335c      	adds	r3, #92	; 0x5c
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	202c      	movs	r0, #44	; 0x2c
 80090f4:	fb00 f303 	mul.w	r3, r0, r3
 80090f8:	440b      	add	r3, r1
 80090fa:	335c      	adds	r3, #92	; 0x5c
 80090fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	212c      	movs	r1, #44	; 0x2c
 8009104:	fb01 f303 	mul.w	r3, r1, r3
 8009108:	4413      	add	r3, r2
 800910a:	335c      	adds	r3, #92	; 0x5c
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d912      	bls.n	8009138 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	212c      	movs	r1, #44	; 0x2c
 8009118:	fb01 f303 	mul.w	r3, r1, r3
 800911c:	4413      	add	r3, r2
 800911e:	335c      	adds	r3, #92	; 0x5c
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	212c      	movs	r1, #44	; 0x2c
 800912a:	fb01 f303 	mul.w	r3, r1, r3
 800912e:	4413      	add	r3, r2
 8009130:	3360      	adds	r3, #96	; 0x60
 8009132:	2204      	movs	r2, #4
 8009134:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009136:	e073      	b.n	8009220 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	212c      	movs	r1, #44	; 0x2c
 800913e:	fb01 f303 	mul.w	r3, r1, r3
 8009142:	4413      	add	r3, r2
 8009144:	3360      	adds	r3, #96	; 0x60
 8009146:	2202      	movs	r2, #2
 8009148:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	4413      	add	r3, r2
 8009152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009160:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009168:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	4413      	add	r3, r2
 8009172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009176:	461a      	mov	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800917c:	e050      	b.n	8009220 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	212c      	movs	r1, #44	; 0x2c
 8009184:	fb01 f303 	mul.w	r3, r1, r3
 8009188:	4413      	add	r3, r2
 800918a:	3361      	adds	r3, #97	; 0x61
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b03      	cmp	r3, #3
 8009190:	d122      	bne.n	80091d8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	212c      	movs	r1, #44	; 0x2c
 8009198:	fb01 f303 	mul.w	r3, r1, r3
 800919c:	4413      	add	r3, r2
 800919e:	3360      	adds	r3, #96	; 0x60
 80091a0:	2202      	movs	r2, #2
 80091a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d0:	461a      	mov	r2, r3
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	e023      	b.n	8009220 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	212c      	movs	r1, #44	; 0x2c
 80091de:	fb01 f303 	mul.w	r3, r1, r3
 80091e2:	4413      	add	r3, r2
 80091e4:	3361      	adds	r3, #97	; 0x61
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b07      	cmp	r3, #7
 80091ea:	d119      	bne.n	8009220 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	212c      	movs	r1, #44	; 0x2c
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	335c      	adds	r3, #92	; 0x5c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	202c      	movs	r0, #44	; 0x2c
 8009204:	fb00 f303 	mul.w	r3, r0, r3
 8009208:	440b      	add	r3, r1
 800920a:	335c      	adds	r3, #92	; 0x5c
 800920c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	212c      	movs	r1, #44	; 0x2c
 8009214:	fb01 f303 	mul.w	r3, r1, r3
 8009218:	4413      	add	r3, r2
 800921a:	3360      	adds	r3, #96	; 0x60
 800921c:	2204      	movs	r2, #4
 800921e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	4413      	add	r3, r2
 8009228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922c:	461a      	mov	r2, r3
 800922e:	2302      	movs	r3, #2
 8009230:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	b2d9      	uxtb	r1, r3
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	202c      	movs	r0, #44	; 0x2c
 800923c:	fb00 f303 	mul.w	r3, r0, r3
 8009240:	4413      	add	r3, r2
 8009242:	3360      	adds	r3, #96	; 0x60
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f012 fde1 	bl	801be10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800924e:	e081      	b.n	8009354 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	4413      	add	r3, r2
 8009258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 0310 	and.w	r3, r3, #16
 8009262:	2b10      	cmp	r3, #16
 8009264:	d176      	bne.n	8009354 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	212c      	movs	r1, #44	; 0x2c
 800926c:	fb01 f303 	mul.w	r3, r1, r3
 8009270:	4413      	add	r3, r2
 8009272:	333f      	adds	r3, #63	; 0x3f
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b03      	cmp	r3, #3
 8009278:	d121      	bne.n	80092be <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	212c      	movs	r1, #44	; 0x2c
 8009280:	fb01 f303 	mul.w	r3, r1, r3
 8009284:	4413      	add	r3, r2
 8009286:	335c      	adds	r3, #92	; 0x5c
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	4413      	add	r3, r2
 8009294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	0151      	lsls	r1, r2, #5
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	440a      	add	r2, r1
 80092a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092a6:	f043 0302 	orr.w	r3, r3, #2
 80092aa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	b2d2      	uxtb	r2, r2
 80092b4:	4611      	mov	r1, r2
 80092b6:	4618      	mov	r0, r3
 80092b8:	f009 f8bd 	bl	8012436 <USB_HC_Halt>
 80092bc:	e041      	b.n	8009342 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	212c      	movs	r1, #44	; 0x2c
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	4413      	add	r3, r2
 80092ca:	333f      	adds	r3, #63	; 0x3f
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d009      	beq.n	80092e6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	212c      	movs	r1, #44	; 0x2c
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	4413      	add	r3, r2
 80092de:	333f      	adds	r3, #63	; 0x3f
 80092e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d12d      	bne.n	8009342 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	212c      	movs	r1, #44	; 0x2c
 80092ec:	fb01 f303 	mul.w	r3, r1, r3
 80092f0:	4413      	add	r3, r2
 80092f2:	335c      	adds	r3, #92	; 0x5c
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d120      	bne.n	8009342 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	212c      	movs	r1, #44	; 0x2c
 8009306:	fb01 f303 	mul.w	r3, r1, r3
 800930a:	4413      	add	r3, r2
 800930c:	3361      	adds	r3, #97	; 0x61
 800930e:	2203      	movs	r2, #3
 8009310:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	4413      	add	r3, r2
 800931a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	0151      	lsls	r1, r2, #5
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	440a      	add	r2, r1
 8009328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800932c:	f043 0302 	orr.w	r3, r3, #2
 8009330:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	4611      	mov	r1, r2
 800933c:	4618      	mov	r0, r3
 800933e:	f009 f87a 	bl	8012436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	4413      	add	r3, r2
 800934a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800934e:	461a      	mov	r2, r3
 8009350:	2310      	movs	r3, #16
 8009352:	6093      	str	r3, [r2, #8]
}
 8009354:	bf00      	nop
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8009372:	78fb      	ldrb	r3, [r7, #3]
 8009374:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	4413      	add	r3, r2
 800937e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f003 0304 	and.w	r3, r3, #4
 8009388:	2b04      	cmp	r3, #4
 800938a:	d119      	bne.n	80093c0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	4413      	add	r3, r2
 8009394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009398:	461a      	mov	r2, r3
 800939a:	2304      	movs	r3, #4
 800939c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	0151      	lsls	r1, r2, #5
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	440a      	add	r2, r1
 80093b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b8:	f043 0302 	orr.w	r3, r3, #2
 80093bc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80093be:	e3c6      	b.n	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 0320 	and.w	r3, r3, #32
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	d13e      	bne.n	8009454 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e2:	461a      	mov	r2, r3
 80093e4:	2320      	movs	r3, #32
 80093e6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	212c      	movs	r1, #44	; 0x2c
 80093ee:	fb01 f303 	mul.w	r3, r1, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	333d      	adds	r3, #61	; 0x3d
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	f040 83a8 	bne.w	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	212c      	movs	r1, #44	; 0x2c
 8009404:	fb01 f303 	mul.w	r3, r1, r3
 8009408:	4413      	add	r3, r2
 800940a:	333d      	adds	r3, #61	; 0x3d
 800940c:	2200      	movs	r2, #0
 800940e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	212c      	movs	r1, #44	; 0x2c
 8009416:	fb01 f303 	mul.w	r3, r1, r3
 800941a:	4413      	add	r3, r2
 800941c:	3360      	adds	r3, #96	; 0x60
 800941e:	2202      	movs	r2, #2
 8009420:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	4413      	add	r3, r2
 800942a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	0151      	lsls	r1, r2, #5
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	440a      	add	r2, r1
 8009438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800943c:	f043 0302 	orr.w	r3, r3, #2
 8009440:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	4611      	mov	r1, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f008 fff2 	bl	8012436 <USB_HC_Halt>
}
 8009452:	e37c      	b.n	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	4413      	add	r3, r2
 800945c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800946a:	d122      	bne.n	80094b2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	4413      	add	r3, r2
 8009474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	0151      	lsls	r1, r2, #5
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	440a      	add	r2, r1
 8009482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009486:	f043 0302 	orr.w	r3, r3, #2
 800948a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	b2d2      	uxtb	r2, r2
 8009494:	4611      	mov	r1, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f008 ffcd 	bl	8012436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a8:	461a      	mov	r2, r3
 80094aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094ae:	6093      	str	r3, [r2, #8]
}
 80094b0:	e34d      	b.n	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d150      	bne.n	800956a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	212c      	movs	r1, #44	; 0x2c
 80094ce:	fb01 f303 	mul.w	r3, r1, r3
 80094d2:	4413      	add	r3, r2
 80094d4:	335c      	adds	r3, #92	; 0x5c
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ec:	2b40      	cmp	r3, #64	; 0x40
 80094ee:	d111      	bne.n	8009514 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	212c      	movs	r1, #44	; 0x2c
 80094f6:	fb01 f303 	mul.w	r3, r1, r3
 80094fa:	4413      	add	r3, r2
 80094fc:	333d      	adds	r3, #61	; 0x3d
 80094fe:	2201      	movs	r2, #1
 8009500:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	4413      	add	r3, r2
 800950a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950e:	461a      	mov	r2, r3
 8009510:	2340      	movs	r3, #64	; 0x40
 8009512:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	4413      	add	r3, r2
 800951c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	440a      	add	r2, r1
 800952a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800952e:	f043 0302 	orr.w	r3, r3, #2
 8009532:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	b2d2      	uxtb	r2, r2
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f008 ff79 	bl	8012436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	4413      	add	r3, r2
 800954c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009550:	461a      	mov	r2, r3
 8009552:	2301      	movs	r3, #1
 8009554:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	212c      	movs	r1, #44	; 0x2c
 800955c:	fb01 f303 	mul.w	r3, r1, r3
 8009560:	4413      	add	r3, r2
 8009562:	3361      	adds	r3, #97	; 0x61
 8009564:	2201      	movs	r2, #1
 8009566:	701a      	strb	r2, [r3, #0]
}
 8009568:	e2f1      	b.n	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	4413      	add	r3, r2
 8009572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957c:	2b40      	cmp	r3, #64	; 0x40
 800957e:	d13c      	bne.n	80095fa <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	212c      	movs	r1, #44	; 0x2c
 8009586:	fb01 f303 	mul.w	r3, r1, r3
 800958a:	4413      	add	r3, r2
 800958c:	3361      	adds	r3, #97	; 0x61
 800958e:	2204      	movs	r2, #4
 8009590:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	212c      	movs	r1, #44	; 0x2c
 8009598:	fb01 f303 	mul.w	r3, r1, r3
 800959c:	4413      	add	r3, r2
 800959e:	333d      	adds	r3, #61	; 0x3d
 80095a0:	2201      	movs	r2, #1
 80095a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	212c      	movs	r1, #44	; 0x2c
 80095aa:	fb01 f303 	mul.w	r3, r1, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	335c      	adds	r3, #92	; 0x5c
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	0151      	lsls	r1, r2, #5
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	440a      	add	r2, r1
 80095cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095d0:	f043 0302 	orr.w	r3, r3, #2
 80095d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	b2d2      	uxtb	r2, r2
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f008 ff28 	bl	8012436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f2:	461a      	mov	r2, r3
 80095f4:	2340      	movs	r3, #64	; 0x40
 80095f6:	6093      	str	r3, [r2, #8]
}
 80095f8:	e2a9      	b.n	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	4413      	add	r3, r2
 8009602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 0308 	and.w	r3, r3, #8
 800960c:	2b08      	cmp	r3, #8
 800960e:	d12a      	bne.n	8009666 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	4413      	add	r3, r2
 8009618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961c:	461a      	mov	r2, r3
 800961e:	2308      	movs	r3, #8
 8009620:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	4413      	add	r3, r2
 800962a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	0151      	lsls	r1, r2, #5
 8009634:	69ba      	ldr	r2, [r7, #24]
 8009636:	440a      	add	r2, r1
 8009638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800963c:	f043 0302 	orr.w	r3, r3, #2
 8009640:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	b2d2      	uxtb	r2, r2
 800964a:	4611      	mov	r1, r2
 800964c:	4618      	mov	r0, r3
 800964e:	f008 fef2 	bl	8012436 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	212c      	movs	r1, #44	; 0x2c
 8009658:	fb01 f303 	mul.w	r3, r1, r3
 800965c:	4413      	add	r3, r2
 800965e:	3361      	adds	r3, #97	; 0x61
 8009660:	2205      	movs	r2, #5
 8009662:	701a      	strb	r2, [r3, #0]
}
 8009664:	e273      	b.n	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	4413      	add	r3, r2
 800966e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	2b10      	cmp	r3, #16
 800967a:	d150      	bne.n	800971e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	212c      	movs	r1, #44	; 0x2c
 8009682:	fb01 f303 	mul.w	r3, r1, r3
 8009686:	4413      	add	r3, r2
 8009688:	335c      	adds	r3, #92	; 0x5c
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	212c      	movs	r1, #44	; 0x2c
 8009694:	fb01 f303 	mul.w	r3, r1, r3
 8009698:	4413      	add	r3, r2
 800969a:	3361      	adds	r3, #97	; 0x61
 800969c:	2203      	movs	r2, #3
 800969e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	212c      	movs	r1, #44	; 0x2c
 80096a6:	fb01 f303 	mul.w	r3, r1, r3
 80096aa:	4413      	add	r3, r2
 80096ac:	333d      	adds	r3, #61	; 0x3d
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d112      	bne.n	80096da <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	212c      	movs	r1, #44	; 0x2c
 80096ba:	fb01 f303 	mul.w	r3, r1, r3
 80096be:	4413      	add	r3, r2
 80096c0:	333c      	adds	r3, #60	; 0x3c
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d108      	bne.n	80096da <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	212c      	movs	r1, #44	; 0x2c
 80096ce:	fb01 f303 	mul.w	r3, r1, r3
 80096d2:	4413      	add	r3, r2
 80096d4:	333d      	adds	r3, #61	; 0x3d
 80096d6:	2201      	movs	r2, #1
 80096d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	0151      	lsls	r1, r2, #5
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	440a      	add	r2, r1
 80096f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096f4:	f043 0302 	orr.w	r3, r3, #2
 80096f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	b2d2      	uxtb	r2, r2
 8009702:	4611      	mov	r1, r2
 8009704:	4618      	mov	r0, r3
 8009706:	f008 fe96 	bl	8012436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	4413      	add	r3, r2
 8009712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009716:	461a      	mov	r2, r3
 8009718:	2310      	movs	r3, #16
 800971a:	6093      	str	r3, [r2, #8]
}
 800971c:	e217      	b.n	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	4413      	add	r3, r2
 8009726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009730:	2b80      	cmp	r3, #128	; 0x80
 8009732:	d174      	bne.n	800981e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d121      	bne.n	8009780 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	212c      	movs	r1, #44	; 0x2c
 8009742:	fb01 f303 	mul.w	r3, r1, r3
 8009746:	4413      	add	r3, r2
 8009748:	3361      	adds	r3, #97	; 0x61
 800974a:	2206      	movs	r2, #6
 800974c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	4413      	add	r3, r2
 8009756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	0151      	lsls	r1, r2, #5
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	440a      	add	r2, r1
 8009764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009768:	f043 0302 	orr.w	r3, r3, #2
 800976c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	b2d2      	uxtb	r2, r2
 8009776:	4611      	mov	r1, r2
 8009778:	4618      	mov	r0, r3
 800977a:	f008 fe5c 	bl	8012436 <USB_HC_Halt>
 800977e:	e044      	b.n	800980a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	212c      	movs	r1, #44	; 0x2c
 8009786:	fb01 f303 	mul.w	r3, r1, r3
 800978a:	4413      	add	r3, r2
 800978c:	335c      	adds	r3, #92	; 0x5c
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	202c      	movs	r0, #44	; 0x2c
 8009798:	fb00 f303 	mul.w	r3, r0, r3
 800979c:	440b      	add	r3, r1
 800979e:	335c      	adds	r3, #92	; 0x5c
 80097a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	212c      	movs	r1, #44	; 0x2c
 80097a8:	fb01 f303 	mul.w	r3, r1, r3
 80097ac:	4413      	add	r3, r2
 80097ae:	335c      	adds	r3, #92	; 0x5c
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d920      	bls.n	80097f8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	212c      	movs	r1, #44	; 0x2c
 80097bc:	fb01 f303 	mul.w	r3, r1, r3
 80097c0:	4413      	add	r3, r2
 80097c2:	335c      	adds	r3, #92	; 0x5c
 80097c4:	2200      	movs	r2, #0
 80097c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	212c      	movs	r1, #44	; 0x2c
 80097ce:	fb01 f303 	mul.w	r3, r1, r3
 80097d2:	4413      	add	r3, r2
 80097d4:	3360      	adds	r3, #96	; 0x60
 80097d6:	2204      	movs	r2, #4
 80097d8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	b2d9      	uxtb	r1, r3
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	202c      	movs	r0, #44	; 0x2c
 80097e4:	fb00 f303 	mul.w	r3, r0, r3
 80097e8:	4413      	add	r3, r2
 80097ea:	3360      	adds	r3, #96	; 0x60
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f012 fb0d 	bl	801be10 <HAL_HCD_HC_NotifyURBChange_Callback>
 80097f6:	e008      	b.n	800980a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	212c      	movs	r1, #44	; 0x2c
 80097fe:	fb01 f303 	mul.w	r3, r1, r3
 8009802:	4413      	add	r3, r2
 8009804:	3360      	adds	r3, #96	; 0x60
 8009806:	2202      	movs	r2, #2
 8009808:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	015a      	lsls	r2, r3, #5
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	4413      	add	r3, r2
 8009812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009816:	461a      	mov	r2, r3
 8009818:	2380      	movs	r3, #128	; 0x80
 800981a:	6093      	str	r3, [r2, #8]
}
 800981c:	e197      	b.n	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	4413      	add	r3, r2
 8009826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009834:	d134      	bne.n	80098a0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	4413      	add	r3, r2
 800983e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	697a      	ldr	r2, [r7, #20]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	440a      	add	r2, r1
 800984c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009850:	f043 0302 	orr.w	r3, r3, #2
 8009854:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f008 fde8 	bl	8012436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	4413      	add	r3, r2
 800986e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009872:	461a      	mov	r2, r3
 8009874:	2310      	movs	r3, #16
 8009876:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	4413      	add	r3, r2
 8009880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009884:	461a      	mov	r2, r3
 8009886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800988a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	212c      	movs	r1, #44	; 0x2c
 8009892:	fb01 f303 	mul.w	r3, r1, r3
 8009896:	4413      	add	r3, r2
 8009898:	3361      	adds	r3, #97	; 0x61
 800989a:	2208      	movs	r2, #8
 800989c:	701a      	strb	r2, [r3, #0]
}
 800989e:	e156      	b.n	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	f040 814b 	bne.w	8009b4e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	0151      	lsls	r1, r2, #5
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	440a      	add	r2, r1
 80098ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098d2:	f023 0302 	bic.w	r3, r3, #2
 80098d6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	212c      	movs	r1, #44	; 0x2c
 80098de:	fb01 f303 	mul.w	r3, r1, r3
 80098e2:	4413      	add	r3, r2
 80098e4:	3361      	adds	r3, #97	; 0x61
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d179      	bne.n	80099e0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	212c      	movs	r1, #44	; 0x2c
 80098f2:	fb01 f303 	mul.w	r3, r1, r3
 80098f6:	4413      	add	r3, r2
 80098f8:	3360      	adds	r3, #96	; 0x60
 80098fa:	2201      	movs	r2, #1
 80098fc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	212c      	movs	r1, #44	; 0x2c
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	4413      	add	r3, r2
 800990a:	333f      	adds	r3, #63	; 0x3f
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	2b02      	cmp	r3, #2
 8009910:	d00a      	beq.n	8009928 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	212c      	movs	r1, #44	; 0x2c
 8009918:	fb01 f303 	mul.w	r3, r1, r3
 800991c:	4413      	add	r3, r2
 800991e:	333f      	adds	r3, #63	; 0x3f
 8009920:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8009922:	2b03      	cmp	r3, #3
 8009924:	f040 80fc 	bne.w	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d142      	bne.n	80099b6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	212c      	movs	r1, #44	; 0x2c
 8009936:	fb01 f303 	mul.w	r3, r1, r3
 800993a:	4413      	add	r3, r2
 800993c:	334c      	adds	r3, #76	; 0x4c
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 80ed 	beq.w	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	212c      	movs	r1, #44	; 0x2c
 800994c:	fb01 f303 	mul.w	r3, r1, r3
 8009950:	4413      	add	r3, r2
 8009952:	334c      	adds	r3, #76	; 0x4c
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	202c      	movs	r0, #44	; 0x2c
 800995c:	fb00 f202 	mul.w	r2, r0, r2
 8009960:	440a      	add	r2, r1
 8009962:	3240      	adds	r2, #64	; 0x40
 8009964:	8812      	ldrh	r2, [r2, #0]
 8009966:	4413      	add	r3, r2
 8009968:	3b01      	subs	r3, #1
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	202c      	movs	r0, #44	; 0x2c
 8009970:	fb00 f202 	mul.w	r2, r0, r2
 8009974:	440a      	add	r2, r1
 8009976:	3240      	adds	r2, #64	; 0x40
 8009978:	8812      	ldrh	r2, [r2, #0]
 800997a:	fbb3 f3f2 	udiv	r3, r3, r2
 800997e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 80ca 	beq.w	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	212c      	movs	r1, #44	; 0x2c
 8009992:	fb01 f303 	mul.w	r3, r1, r3
 8009996:	4413      	add	r3, r2
 8009998:	3355      	adds	r3, #85	; 0x55
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f083 0301 	eor.w	r3, r3, #1
 80099a0:	b2d8      	uxtb	r0, r3
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	212c      	movs	r1, #44	; 0x2c
 80099a8:	fb01 f303 	mul.w	r3, r1, r3
 80099ac:	4413      	add	r3, r2
 80099ae:	3355      	adds	r3, #85	; 0x55
 80099b0:	4602      	mov	r2, r0
 80099b2:	701a      	strb	r2, [r3, #0]
 80099b4:	e0b4      	b.n	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	212c      	movs	r1, #44	; 0x2c
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	4413      	add	r3, r2
 80099c2:	3355      	adds	r3, #85	; 0x55
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	f083 0301 	eor.w	r3, r3, #1
 80099ca:	b2d8      	uxtb	r0, r3
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	212c      	movs	r1, #44	; 0x2c
 80099d2:	fb01 f303 	mul.w	r3, r1, r3
 80099d6:	4413      	add	r3, r2
 80099d8:	3355      	adds	r3, #85	; 0x55
 80099da:	4602      	mov	r2, r0
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	e09f      	b.n	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	212c      	movs	r1, #44	; 0x2c
 80099e6:	fb01 f303 	mul.w	r3, r1, r3
 80099ea:	4413      	add	r3, r2
 80099ec:	3361      	adds	r3, #97	; 0x61
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d109      	bne.n	8009a08 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	212c      	movs	r1, #44	; 0x2c
 80099fa:	fb01 f303 	mul.w	r3, r1, r3
 80099fe:	4413      	add	r3, r2
 8009a00:	3360      	adds	r3, #96	; 0x60
 8009a02:	2202      	movs	r2, #2
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	e08b      	b.n	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	212c      	movs	r1, #44	; 0x2c
 8009a0e:	fb01 f303 	mul.w	r3, r1, r3
 8009a12:	4413      	add	r3, r2
 8009a14:	3361      	adds	r3, #97	; 0x61
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b04      	cmp	r3, #4
 8009a1a:	d109      	bne.n	8009a30 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	212c      	movs	r1, #44	; 0x2c
 8009a22:	fb01 f303 	mul.w	r3, r1, r3
 8009a26:	4413      	add	r3, r2
 8009a28:	3360      	adds	r3, #96	; 0x60
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	701a      	strb	r2, [r3, #0]
 8009a2e:	e077      	b.n	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	212c      	movs	r1, #44	; 0x2c
 8009a36:	fb01 f303 	mul.w	r3, r1, r3
 8009a3a:	4413      	add	r3, r2
 8009a3c:	3361      	adds	r3, #97	; 0x61
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b05      	cmp	r3, #5
 8009a42:	d109      	bne.n	8009a58 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	212c      	movs	r1, #44	; 0x2c
 8009a4a:	fb01 f303 	mul.w	r3, r1, r3
 8009a4e:	4413      	add	r3, r2
 8009a50:	3360      	adds	r3, #96	; 0x60
 8009a52:	2205      	movs	r2, #5
 8009a54:	701a      	strb	r2, [r3, #0]
 8009a56:	e063      	b.n	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	212c      	movs	r1, #44	; 0x2c
 8009a5e:	fb01 f303 	mul.w	r3, r1, r3
 8009a62:	4413      	add	r3, r2
 8009a64:	3361      	adds	r3, #97	; 0x61
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2b06      	cmp	r3, #6
 8009a6a:	d009      	beq.n	8009a80 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	212c      	movs	r1, #44	; 0x2c
 8009a72:	fb01 f303 	mul.w	r3, r1, r3
 8009a76:	4413      	add	r3, r2
 8009a78:	3361      	adds	r3, #97	; 0x61
 8009a7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009a7c:	2b08      	cmp	r3, #8
 8009a7e:	d14f      	bne.n	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	212c      	movs	r1, #44	; 0x2c
 8009a86:	fb01 f303 	mul.w	r3, r1, r3
 8009a8a:	4413      	add	r3, r2
 8009a8c:	335c      	adds	r3, #92	; 0x5c
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	202c      	movs	r0, #44	; 0x2c
 8009a98:	fb00 f303 	mul.w	r3, r0, r3
 8009a9c:	440b      	add	r3, r1
 8009a9e:	335c      	adds	r3, #92	; 0x5c
 8009aa0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	212c      	movs	r1, #44	; 0x2c
 8009aa8:	fb01 f303 	mul.w	r3, r1, r3
 8009aac:	4413      	add	r3, r2
 8009aae:	335c      	adds	r3, #92	; 0x5c
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d912      	bls.n	8009adc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	212c      	movs	r1, #44	; 0x2c
 8009abc:	fb01 f303 	mul.w	r3, r1, r3
 8009ac0:	4413      	add	r3, r2
 8009ac2:	335c      	adds	r3, #92	; 0x5c
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	212c      	movs	r1, #44	; 0x2c
 8009ace:	fb01 f303 	mul.w	r3, r1, r3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3360      	adds	r3, #96	; 0x60
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	701a      	strb	r2, [r3, #0]
 8009ada:	e021      	b.n	8009b20 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	212c      	movs	r1, #44	; 0x2c
 8009ae2:	fb01 f303 	mul.w	r3, r1, r3
 8009ae6:	4413      	add	r3, r2
 8009ae8:	3360      	adds	r3, #96	; 0x60
 8009aea:	2202      	movs	r2, #2
 8009aec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b04:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b0c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	2302      	movs	r3, #2
 8009b30:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	b2d9      	uxtb	r1, r3
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	202c      	movs	r0, #44	; 0x2c
 8009b3c:	fb00 f303 	mul.w	r3, r0, r3
 8009b40:	4413      	add	r3, r2
 8009b42:	3360      	adds	r3, #96	; 0x60
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f012 f961 	bl	801be10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009b4e:	bf00      	nop
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b08a      	sub	sp, #40	; 0x28
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	f003 030f 	and.w	r3, r3, #15
 8009b76:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	0c5b      	lsrs	r3, r3, #17
 8009b7c:	f003 030f 	and.w	r3, r3, #15
 8009b80:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	091b      	lsrs	r3, r3, #4
 8009b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b8a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d004      	beq.n	8009b9c <HCD_RXQLVL_IRQHandler+0x46>
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b05      	cmp	r3, #5
 8009b96:	f000 80a9 	beq.w	8009cec <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009b9a:	e0aa      	b.n	8009cf2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 80a6 	beq.w	8009cf0 <HCD_RXQLVL_IRQHandler+0x19a>
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	212c      	movs	r1, #44	; 0x2c
 8009baa:	fb01 f303 	mul.w	r3, r1, r3
 8009bae:	4413      	add	r3, r2
 8009bb0:	3344      	adds	r3, #68	; 0x44
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 809b 	beq.w	8009cf0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	212c      	movs	r1, #44	; 0x2c
 8009bc0:	fb01 f303 	mul.w	r3, r1, r3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	3350      	adds	r3, #80	; 0x50
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	441a      	add	r2, r3
 8009bce:	6879      	ldr	r1, [r7, #4]
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	202c      	movs	r0, #44	; 0x2c
 8009bd4:	fb00 f303 	mul.w	r3, r0, r3
 8009bd8:	440b      	add	r3, r1
 8009bda:	334c      	adds	r3, #76	; 0x4c
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d87a      	bhi.n	8009cd8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	212c      	movs	r1, #44	; 0x2c
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3344      	adds	r3, #68	; 0x44
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	b292      	uxth	r2, r2
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f007 ffc5 	bl	8011b8a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	212c      	movs	r1, #44	; 0x2c
 8009c06:	fb01 f303 	mul.w	r3, r1, r3
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3344      	adds	r3, #68	; 0x44
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	441a      	add	r2, r3
 8009c14:	6879      	ldr	r1, [r7, #4]
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	202c      	movs	r0, #44	; 0x2c
 8009c1a:	fb00 f303 	mul.w	r3, r0, r3
 8009c1e:	440b      	add	r3, r1
 8009c20:	3344      	adds	r3, #68	; 0x44
 8009c22:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	212c      	movs	r1, #44	; 0x2c
 8009c2a:	fb01 f303 	mul.w	r3, r1, r3
 8009c2e:	4413      	add	r3, r2
 8009c30:	3350      	adds	r3, #80	; 0x50
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	441a      	add	r2, r3
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	202c      	movs	r0, #44	; 0x2c
 8009c3e:	fb00 f303 	mul.w	r3, r0, r3
 8009c42:	440b      	add	r3, r1
 8009c44:	3350      	adds	r3, #80	; 0x50
 8009c46:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	0cdb      	lsrs	r3, r3, #19
 8009c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c5c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	212c      	movs	r1, #44	; 0x2c
 8009c64:	fb01 f303 	mul.w	r3, r1, r3
 8009c68:	4413      	add	r3, r2
 8009c6a:	3340      	adds	r3, #64	; 0x40
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d13c      	bne.n	8009cf0 <HCD_RXQLVL_IRQHandler+0x19a>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d039      	beq.n	8009cf0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c92:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c9a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ca8:	461a      	mov	r2, r3
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	212c      	movs	r1, #44	; 0x2c
 8009cb4:	fb01 f303 	mul.w	r3, r1, r3
 8009cb8:	4413      	add	r3, r2
 8009cba:	3354      	adds	r3, #84	; 0x54
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	f083 0301 	eor.w	r3, r3, #1
 8009cc2:	b2d8      	uxtb	r0, r3
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	212c      	movs	r1, #44	; 0x2c
 8009cca:	fb01 f303 	mul.w	r3, r1, r3
 8009cce:	4413      	add	r3, r2
 8009cd0:	3354      	adds	r3, #84	; 0x54
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	701a      	strb	r2, [r3, #0]
      break;
 8009cd6:	e00b      	b.n	8009cf0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	212c      	movs	r1, #44	; 0x2c
 8009cde:	fb01 f303 	mul.w	r3, r1, r3
 8009ce2:	4413      	add	r3, r2
 8009ce4:	3360      	adds	r3, #96	; 0x60
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	701a      	strb	r2, [r3, #0]
      break;
 8009cea:	e001      	b.n	8009cf0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009cec:	bf00      	nop
 8009cee:	e000      	b.n	8009cf2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009cf0:	bf00      	nop
  }
}
 8009cf2:	bf00      	nop
 8009cf4:	3728      	adds	r7, #40	; 0x28
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009d26:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d10b      	bne.n	8009d4a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d102      	bne.n	8009d42 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f012 f84b 	bl	801bdd8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f043 0302 	orr.w	r3, r3, #2
 8009d48:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f003 0308 	and.w	r3, r3, #8
 8009d50:	2b08      	cmp	r3, #8
 8009d52:	d132      	bne.n	8009dba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f043 0308 	orr.w	r3, r3, #8
 8009d5a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f003 0304 	and.w	r3, r3, #4
 8009d62:	2b04      	cmp	r3, #4
 8009d64:	d126      	bne.n	8009db4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d113      	bne.n	8009d96 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009d74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d78:	d106      	bne.n	8009d88 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2102      	movs	r1, #2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f008 f831 	bl	8011de8 <USB_InitFSLSPClkSel>
 8009d86:	e011      	b.n	8009dac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f008 f82a 	bl	8011de8 <USB_InitFSLSPClkSel>
 8009d94:	e00a      	b.n	8009dac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d106      	bne.n	8009dac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009da4:	461a      	mov	r2, r3
 8009da6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009daa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f012 f841 	bl	801be34 <HAL_HCD_PortEnabled_Callback>
 8009db2:	e002      	b.n	8009dba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f012 f84b 	bl	801be50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f003 0320 	and.w	r3, r3, #32
 8009dc0:	2b20      	cmp	r3, #32
 8009dc2:	d103      	bne.n	8009dcc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	f043 0320 	orr.w	r3, r3, #32
 8009dca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	6013      	str	r3, [r2, #0]
}
 8009dd8:	bf00      	nop
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e07f      	b.n	8009ef2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d106      	bne.n	8009e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7f8 fe82 	bl	8002b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2224      	movs	r2, #36	; 0x24
 8009e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0201 	bic.w	r2, r2, #1
 8009e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d107      	bne.n	8009e5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689a      	ldr	r2, [r3, #8]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e56:	609a      	str	r2, [r3, #8]
 8009e58:	e006      	b.n	8009e68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009e66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d104      	bne.n	8009e7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6859      	ldr	r1, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	4b1d      	ldr	r3, [pc, #116]	; (8009efc <HAL_I2C_Init+0x11c>)
 8009e86:	430b      	orrs	r3, r1
 8009e88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68da      	ldr	r2, [r3, #12]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	ea42 0103 	orr.w	r1, r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	021a      	lsls	r2, r3, #8
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	69d9      	ldr	r1, [r3, #28]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a1a      	ldr	r2, [r3, #32]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0201 	orr.w	r2, r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	02008000 	.word	0x02008000

08009f00 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e021      	b.n	8009f56 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2224      	movs	r2, #36	; 0x24
 8009f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 0201 	bic.w	r2, r2, #1
 8009f28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7f8 fe68 	bl	8002c00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	4608      	mov	r0, r1
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	817b      	strh	r3, [r7, #10]
 8009f72:	460b      	mov	r3, r1
 8009f74:	813b      	strh	r3, [r7, #8]
 8009f76:	4613      	mov	r3, r2
 8009f78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b20      	cmp	r3, #32
 8009f84:	f040 80f9 	bne.w	800a17a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d002      	beq.n	8009f94 <HAL_I2C_Mem_Write+0x34>
 8009f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d105      	bne.n	8009fa0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e0ed      	b.n	800a17c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <HAL_I2C_Mem_Write+0x4e>
 8009faa:	2302      	movs	r3, #2
 8009fac:	e0e6      	b.n	800a17c <HAL_I2C_Mem_Write+0x21c>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009fb6:	f7fc f921 	bl	80061fc <HAL_GetTick>
 8009fba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	2319      	movs	r3, #25
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 fad1 	bl	800a570 <I2C_WaitOnFlagUntilTimeout>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e0d1      	b.n	800a17c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2221      	movs	r2, #33	; 0x21
 8009fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2240      	movs	r2, #64	; 0x40
 8009fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a3a      	ldr	r2, [r7, #32]
 8009ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a000:	88f8      	ldrh	r0, [r7, #6]
 800a002:	893a      	ldrh	r2, [r7, #8]
 800a004:	8979      	ldrh	r1, [r7, #10]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	4603      	mov	r3, r0
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f000 f9e1 	bl	800a3d8 <I2C_RequestMemoryWrite>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e0a9      	b.n	800a17c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	2bff      	cmp	r3, #255	; 0xff
 800a030:	d90e      	bls.n	800a050 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	22ff      	movs	r2, #255	; 0xff
 800a036:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	8979      	ldrh	r1, [r7, #10]
 800a040:	2300      	movs	r3, #0
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 fbb3 	bl	800a7b4 <I2C_TransferConfig>
 800a04e:	e00f      	b.n	800a070 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a054:	b29a      	uxth	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	8979      	ldrh	r1, [r7, #10]
 800a062:	2300      	movs	r3, #0
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 fba2 	bl	800a7b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 fabb 	bl	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e07b      	b.n	800a17c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d034      	beq.n	800a128 <HAL_I2C_Mem_Write+0x1c8>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d130      	bne.n	800a128 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2180      	movs	r1, #128	; 0x80
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 fa4d 	bl	800a570 <I2C_WaitOnFlagUntilTimeout>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e04d      	b.n	800a17c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	2bff      	cmp	r3, #255	; 0xff
 800a0e8:	d90e      	bls.n	800a108 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	22ff      	movs	r2, #255	; 0xff
 800a0ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	8979      	ldrh	r1, [r7, #10]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 fb57 	bl	800a7b4 <I2C_TransferConfig>
 800a106:	e00f      	b.n	800a128 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a116:	b2da      	uxtb	r2, r3
 800a118:	8979      	ldrh	r1, [r7, #10]
 800a11a:	2300      	movs	r3, #0
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 fb46 	bl	800a7b4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d19e      	bne.n	800a070 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 fa9a 	bl	800a670 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e01a      	b.n	800a17c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2220      	movs	r2, #32
 800a14c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6859      	ldr	r1, [r3, #4]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <HAL_I2C_Mem_Write+0x224>)
 800a15a:	400b      	ands	r3, r1
 800a15c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2220      	movs	r2, #32
 800a162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	e000      	b.n	800a17c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a17a:	2302      	movs	r3, #2
  }
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	fe00e800 	.word	0xfe00e800

0800a188 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	4608      	mov	r0, r1
 800a192:	4611      	mov	r1, r2
 800a194:	461a      	mov	r2, r3
 800a196:	4603      	mov	r3, r0
 800a198:	817b      	strh	r3, [r7, #10]
 800a19a:	460b      	mov	r3, r1
 800a19c:	813b      	strh	r3, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b20      	cmp	r3, #32
 800a1ac:	f040 80fd 	bne.w	800a3aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <HAL_I2C_Mem_Read+0x34>
 800a1b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d105      	bne.n	800a1c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e0f1      	b.n	800a3ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <HAL_I2C_Mem_Read+0x4e>
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	e0ea      	b.n	800a3ac <HAL_I2C_Mem_Read+0x224>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a1de:	f7fc f80d 	bl	80061fc <HAL_GetTick>
 800a1e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	2319      	movs	r3, #25
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f9bd 	bl	800a570 <I2C_WaitOnFlagUntilTimeout>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e0d5      	b.n	800a3ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2222      	movs	r2, #34	; 0x22
 800a204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2240      	movs	r2, #64	; 0x40
 800a20c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6a3a      	ldr	r2, [r7, #32]
 800a21a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a220:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a228:	88f8      	ldrh	r0, [r7, #6]
 800a22a:	893a      	ldrh	r2, [r7, #8]
 800a22c:	8979      	ldrh	r1, [r7, #10]
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	4603      	mov	r3, r0
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 f921 	bl	800a480 <I2C_RequestMemoryRead>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d005      	beq.n	800a250 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e0ad      	b.n	800a3ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a254:	b29b      	uxth	r3, r3
 800a256:	2bff      	cmp	r3, #255	; 0xff
 800a258:	d90e      	bls.n	800a278 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	22ff      	movs	r2, #255	; 0xff
 800a25e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a264:	b2da      	uxtb	r2, r3
 800a266:	8979      	ldrh	r1, [r7, #10]
 800a268:	4b52      	ldr	r3, [pc, #328]	; (800a3b4 <HAL_I2C_Mem_Read+0x22c>)
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 fa9f 	bl	800a7b4 <I2C_TransferConfig>
 800a276:	e00f      	b.n	800a298 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a286:	b2da      	uxtb	r2, r3
 800a288:	8979      	ldrh	r1, [r7, #10]
 800a28a:	4b4a      	ldr	r3, [pc, #296]	; (800a3b4 <HAL_I2C_Mem_Read+0x22c>)
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 fa8e 	bl	800a7b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2104      	movs	r1, #4
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f964 	bl	800a570 <I2C_WaitOnFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e07c      	b.n	800a3ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	b2d2      	uxtb	r2, r2
 800a2be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d034      	beq.n	800a358 <HAL_I2C_Mem_Read+0x1d0>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d130      	bne.n	800a358 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2180      	movs	r1, #128	; 0x80
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 f935 	bl	800a570 <I2C_WaitOnFlagUntilTimeout>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e04d      	b.n	800a3ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a314:	b29b      	uxth	r3, r3
 800a316:	2bff      	cmp	r3, #255	; 0xff
 800a318:	d90e      	bls.n	800a338 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	22ff      	movs	r2, #255	; 0xff
 800a31e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a324:	b2da      	uxtb	r2, r3
 800a326:	8979      	ldrh	r1, [r7, #10]
 800a328:	2300      	movs	r3, #0
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 fa3f 	bl	800a7b4 <I2C_TransferConfig>
 800a336:	e00f      	b.n	800a358 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a346:	b2da      	uxtb	r2, r3
 800a348:	8979      	ldrh	r1, [r7, #10]
 800a34a:	2300      	movs	r3, #0
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 fa2e 	bl	800a7b4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d19a      	bne.n	800a298 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f000 f982 	bl	800a670 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e01a      	b.n	800a3ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2220      	movs	r2, #32
 800a37c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6859      	ldr	r1, [r3, #4]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	4b0b      	ldr	r3, [pc, #44]	; (800a3b8 <HAL_I2C_Mem_Read+0x230>)
 800a38a:	400b      	ands	r3, r1
 800a38c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2220      	movs	r2, #32
 800a392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	e000      	b.n	800a3ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a3aa:	2302      	movs	r3, #2
  }
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	80002400 	.word	0x80002400
 800a3b8:	fe00e800 	.word	0xfe00e800

0800a3bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3ca:	b2db      	uxtb	r3, r3
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	817b      	strh	r3, [r7, #10]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	813b      	strh	r3, [r7, #8]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a3f2:	88fb      	ldrh	r3, [r7, #6]
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	8979      	ldrh	r1, [r7, #10]
 800a3f8:	4b20      	ldr	r3, [pc, #128]	; (800a47c <I2C_RequestMemoryWrite+0xa4>)
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f9d7 	bl	800a7b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a406:	69fa      	ldr	r2, [r7, #28]
 800a408:	69b9      	ldr	r1, [r7, #24]
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f000 f8f0 	bl	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e02c      	b.n	800a474 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d105      	bne.n	800a42c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a420:	893b      	ldrh	r3, [r7, #8]
 800a422:	b2da      	uxtb	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	629a      	str	r2, [r3, #40]	; 0x28
 800a42a:	e015      	b.n	800a458 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a42c:	893b      	ldrh	r3, [r7, #8]
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	b29b      	uxth	r3, r3
 800a432:	b2da      	uxtb	r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a43a:	69fa      	ldr	r2, [r7, #28]
 800a43c:	69b9      	ldr	r1, [r7, #24]
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f8d6 	bl	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e012      	b.n	800a474 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a44e:	893b      	ldrh	r3, [r7, #8]
 800a450:	b2da      	uxtb	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	2200      	movs	r2, #0
 800a460:	2180      	movs	r1, #128	; 0x80
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 f884 	bl	800a570 <I2C_WaitOnFlagUntilTimeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e000      	b.n	800a474 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	80002000 	.word	0x80002000

0800a480 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af02      	add	r7, sp, #8
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	4608      	mov	r0, r1
 800a48a:	4611      	mov	r1, r2
 800a48c:	461a      	mov	r2, r3
 800a48e:	4603      	mov	r3, r0
 800a490:	817b      	strh	r3, [r7, #10]
 800a492:	460b      	mov	r3, r1
 800a494:	813b      	strh	r3, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a49a:	88fb      	ldrh	r3, [r7, #6]
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	8979      	ldrh	r1, [r7, #10]
 800a4a0:	4b20      	ldr	r3, [pc, #128]	; (800a524 <I2C_RequestMemoryRead+0xa4>)
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 f984 	bl	800a7b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4ac:	69fa      	ldr	r2, [r7, #28]
 800a4ae:	69b9      	ldr	r1, [r7, #24]
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 f89d 	bl	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e02c      	b.n	800a51a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d105      	bne.n	800a4d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a4c6:	893b      	ldrh	r3, [r7, #8]
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	629a      	str	r2, [r3, #40]	; 0x28
 800a4d0:	e015      	b.n	800a4fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a4d2:	893b      	ldrh	r3, [r7, #8]
 800a4d4:	0a1b      	lsrs	r3, r3, #8
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4e0:	69fa      	ldr	r2, [r7, #28]
 800a4e2:	69b9      	ldr	r1, [r7, #24]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f883 	bl	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e012      	b.n	800a51a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a4f4:	893b      	ldrh	r3, [r7, #8]
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	2200      	movs	r2, #0
 800a506:	2140      	movs	r1, #64	; 0x40
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 f831 	bl	800a570 <I2C_WaitOnFlagUntilTimeout>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e000      	b.n	800a51a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	80002000 	.word	0x80002000

0800a528 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d103      	bne.n	800a546 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2200      	movs	r2, #0
 800a544:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b01      	cmp	r3, #1
 800a552:	d007      	beq.n	800a564 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	699a      	ldr	r2, [r3, #24]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 0201 	orr.w	r2, r2, #1
 800a562:	619a      	str	r2, [r3, #24]
  }
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	4613      	mov	r3, r2
 800a57e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a580:	e022      	b.n	800a5c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a588:	d01e      	beq.n	800a5c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a58a:	f7fb fe37 	bl	80061fc <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	429a      	cmp	r2, r3
 800a598:	d302      	bcc.n	800a5a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d113      	bne.n	800a5c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a4:	f043 0220 	orr.w	r2, r3, #32
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e00f      	b.n	800a5e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	699a      	ldr	r2, [r3, #24]
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	bf0c      	ite	eq
 800a5d8:	2301      	moveq	r3, #1
 800a5da:	2300      	movne	r3, #0
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	461a      	mov	r2, r3
 800a5e0:	79fb      	ldrb	r3, [r7, #7]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d0cd      	beq.n	800a582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a5fc:	e02c      	b.n	800a658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 f870 	bl	800a6e8 <I2C_IsAcknowledgeFailed>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d001      	beq.n	800a612 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e02a      	b.n	800a668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a618:	d01e      	beq.n	800a658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a61a:	f7fb fdef 	bl	80061fc <HAL_GetTick>
 800a61e:	4602      	mov	r2, r0
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	429a      	cmp	r2, r3
 800a628:	d302      	bcc.n	800a630 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d113      	bne.n	800a658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a634:	f043 0220 	orr.w	r2, r3, #32
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2220      	movs	r2, #32
 800a640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e007      	b.n	800a668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b02      	cmp	r3, #2
 800a664:	d1cb      	bne.n	800a5fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a67c:	e028      	b.n	800a6d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 f830 	bl	800a6e8 <I2C_IsAcknowledgeFailed>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e026      	b.n	800a6e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a692:	f7fb fdb3 	bl	80061fc <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d302      	bcc.n	800a6a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d113      	bne.n	800a6d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ac:	f043 0220 	orr.w	r2, r3, #32
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e007      	b.n	800a6e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	d1cf      	bne.n	800a67e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	f003 0310 	and.w	r3, r3, #16
 800a6fe:	2b10      	cmp	r3, #16
 800a700:	d151      	bne.n	800a7a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a702:	e022      	b.n	800a74a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a70a:	d01e      	beq.n	800a74a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a70c:	f7fb fd76 	bl	80061fc <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d302      	bcc.n	800a722 <I2C_IsAcknowledgeFailed+0x3a>
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d113      	bne.n	800a74a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a726:	f043 0220 	orr.w	r2, r3, #32
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2220      	movs	r2, #32
 800a732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e02e      	b.n	800a7a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b20      	cmp	r3, #32
 800a756:	d1d5      	bne.n	800a704 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2210      	movs	r2, #16
 800a75e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2220      	movs	r2, #32
 800a766:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff fedd 	bl	800a528 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6859      	ldr	r1, [r3, #4]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800a77a:	400b      	ands	r3, r1
 800a77c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a782:	f043 0204 	orr.w	r2, r3, #4
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	fe00e800 	.word	0xfe00e800

0800a7b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	607b      	str	r3, [r7, #4]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	817b      	strh	r3, [r7, #10]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	0d5b      	lsrs	r3, r3, #21
 800a7d0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a7d4:	4b0d      	ldr	r3, [pc, #52]	; (800a80c <I2C_TransferConfig+0x58>)
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	43db      	mvns	r3, r3
 800a7da:	ea02 0103 	and.w	r1, r2, r3
 800a7de:	897b      	ldrh	r3, [r7, #10]
 800a7e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a7e4:	7a7b      	ldrb	r3, [r7, #9]
 800a7e6:	041b      	lsls	r3, r3, #16
 800a7e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	431a      	orrs	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a7fe:	bf00      	nop
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	03ff63ff 	.word	0x03ff63ff

0800a810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b20      	cmp	r3, #32
 800a824:	d138      	bne.n	800a898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a830:	2302      	movs	r3, #2
 800a832:	e032      	b.n	800a89a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2224      	movs	r2, #36	; 0x24
 800a840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f022 0201 	bic.w	r2, r2, #1
 800a852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f042 0201 	orr.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	e000      	b.n	800a89a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a898:	2302      	movs	r3, #2
  }
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d139      	bne.n	800a930 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e033      	b.n	800a932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2224      	movs	r2, #36	; 0x24
 800a8d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 0201 	bic.w	r2, r2, #1
 800a8e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a8f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	021b      	lsls	r3, r3, #8
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	4313      	orrs	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f042 0201 	orr.w	r2, r2, #1
 800a91a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2220      	movs	r2, #32
 800a920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	e000      	b.n	800a932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a930:	2302      	movs	r3, #2
  }
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e041      	b.n	800a9d4 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a958:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f245 5255 	movw	r2, #21845	; 0x5555
 800a962:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	6852      	ldr	r2, [r2, #4]
 800a96c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	6892      	ldr	r2, [r2, #8]
 800a976:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a978:	f7fb fc40 	bl	80061fc <HAL_GetTick>
 800a97c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a97e:	e00f      	b.n	800a9a0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a980:	f7fb fc3c 	bl	80061fc <HAL_GetTick>
 800a984:	4602      	mov	r2, r0
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	2b30      	cmp	r3, #48	; 0x30
 800a98c:	d908      	bls.n	800a9a0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	f003 0307 	and.w	r3, r3, #7
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e019      	b.n	800a9d4 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	f003 0307 	and.w	r3, r3, #7
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1e8      	bne.n	800a980 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	691a      	ldr	r2, [r3, #16]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d005      	beq.n	800a9c8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	68d2      	ldr	r2, [r2, #12]
 800a9c4:	611a      	str	r2, [r3, #16]
 800a9c6:	e004      	b.n	800a9d2 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a9d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a9ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e0bf      	b.n	800ab8e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7f8 f928 	bl	8002c78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699a      	ldr	r2, [r3, #24]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800aa3e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6999      	ldr	r1, [r3, #24]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685a      	ldr	r2, [r3, #4]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aa54:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6899      	ldr	r1, [r3, #8]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	4b4a      	ldr	r3, [pc, #296]	; (800ab98 <HAL_LTDC_Init+0x19c>)
 800aa70:	400b      	ands	r3, r1
 800aa72:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	041b      	lsls	r3, r3, #16
 800aa7a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6899      	ldr	r1, [r3, #8]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	699a      	ldr	r2, [r3, #24]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	431a      	orrs	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	430a      	orrs	r2, r1
 800aa90:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68d9      	ldr	r1, [r3, #12]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	4b3e      	ldr	r3, [pc, #248]	; (800ab98 <HAL_LTDC_Init+0x19c>)
 800aa9e:	400b      	ands	r3, r1
 800aaa0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	041b      	lsls	r3, r3, #16
 800aaa8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68d9      	ldr	r1, [r3, #12]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a1a      	ldr	r2, [r3, #32]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6919      	ldr	r1, [r3, #16]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	4b33      	ldr	r3, [pc, #204]	; (800ab98 <HAL_LTDC_Init+0x19c>)
 800aacc:	400b      	ands	r3, r1
 800aace:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	041b      	lsls	r3, r3, #16
 800aad6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6919      	ldr	r1, [r3, #16]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	6959      	ldr	r1, [r3, #20]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	4b27      	ldr	r3, [pc, #156]	; (800ab98 <HAL_LTDC_Init+0x19c>)
 800aafa:	400b      	ands	r3, r1
 800aafc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	041b      	lsls	r3, r3, #16
 800ab04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6959      	ldr	r1, [r3, #20]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	431a      	orrs	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ab2c:	041b      	lsls	r3, r3, #16
 800ab2e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ab3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	430a      	orrs	r2, r1
 800ab5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f042 0206 	orr.w	r2, r2, #6
 800ab6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	f000f800 	.word	0xf000f800

0800ab9c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abaa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f003 0304 	and.w	r3, r3, #4
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d023      	beq.n	800ac06 <HAL_LTDC_IRQHandler+0x6a>
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d01e      	beq.n	800ac06 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 0204 	bic.w	r2, r2, #4
 800abd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2204      	movs	r2, #4
 800abde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800abe6:	f043 0201 	orr.w	r2, r3, #1
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2204      	movs	r2, #4
 800abf4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f86f 	bl	800ace4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d023      	beq.n	800ac58 <HAL_LTDC_IRQHandler+0xbc>
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d01e      	beq.n	800ac58 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f022 0202 	bic.w	r2, r2, #2
 800ac28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac38:	f043 0202 	orr.w	r2, r3, #2
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2204      	movs	r2, #4
 800ac46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f846 	bl	800ace4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d01b      	beq.n	800ac9a <HAL_LTDC_IRQHandler+0xfe>
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d016      	beq.n	800ac9a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0201 	bic.w	r2, r2, #1
 800ac7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2201      	movs	r2, #1
 800ac82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f82f 	bl	800acf8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f003 0308 	and.w	r3, r3, #8
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01b      	beq.n	800acdc <HAL_LTDC_IRQHandler+0x140>
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d016      	beq.n	800acdc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f022 0208 	bic.w	r2, r2, #8
 800acbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2208      	movs	r2, #8
 800acc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2201      	movs	r2, #1
 800acca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f818 	bl	800ad0c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800acdc:	bf00      	nop
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ad20:	b5b0      	push	{r4, r5, r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d101      	bne.n	800ad3a <HAL_LTDC_ConfigLayer+0x1a>
 800ad36:	2302      	movs	r3, #2
 800ad38:	e02c      	b.n	800ad94 <HAL_LTDC_ConfigLayer+0x74>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2202      	movs	r2, #2
 800ad46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2134      	movs	r1, #52	; 0x34
 800ad50:	fb01 f303 	mul.w	r3, r1, r3
 800ad54:	4413      	add	r3, r2
 800ad56:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	4614      	mov	r4, r2
 800ad5e:	461d      	mov	r5, r3
 800ad60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f000 f8d3 	bl	800af20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bdb0      	pop	{r4, r5, r7, pc}

0800ad9c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d101      	bne.n	800adb6 <HAL_LTDC_ConfigColorKeying+0x1a>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e030      	b.n	800ae18 <HAL_LTDC_ConfigColorKeying+0x7c>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2202      	movs	r2, #2
 800adc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	01db      	lsls	r3, r3, #7
 800add0:	4413      	add	r3, r2
 800add2:	3384      	adds	r3, #132	; 0x84
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	6812      	ldr	r2, [r2, #0]
 800adda:	4611      	mov	r1, r2
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	01d2      	lsls	r2, r2, #7
 800ade0:	440a      	add	r2, r1
 800ade2:	3284      	adds	r2, #132	; 0x84
 800ade4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ade8:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	01db      	lsls	r3, r3, #7
 800adf4:	4413      	add	r3, r2
 800adf6:	3384      	adds	r3, #132	; 0x84
 800adf8:	461a      	mov	r2, r3
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2201      	movs	r2, #1
 800ae04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d101      	bne.n	800ae3c <HAL_LTDC_EnableColorKeying+0x18>
 800ae38:	2302      	movs	r3, #2
 800ae3a:	e026      	b.n	800ae8a <HAL_LTDC_EnableColorKeying+0x66>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2202      	movs	r2, #2
 800ae48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	01db      	lsls	r3, r3, #7
 800ae56:	4413      	add	r3, r2
 800ae58:	3384      	adds	r3, #132	; 0x84
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	6812      	ldr	r2, [r2, #0]
 800ae60:	4611      	mov	r1, r2
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	01d2      	lsls	r2, r2, #7
 800ae66:	440a      	add	r2, r1
 800ae68:	3284      	adds	r2, #132	; 0x84
 800ae6a:	f043 0302 	orr.w	r3, r3, #2
 800ae6e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2201      	movs	r2, #1
 800ae76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b086      	sub	sp, #24
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	60f8      	str	r0, [r7, #12]
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d101      	bne.n	800aeb0 <HAL_LTDC_SetAlpha+0x1a>
 800aeac:	2302      	movs	r3, #2
 800aeae:	e024      	b.n	800aefa <HAL_LTDC_SetAlpha+0x64>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2234      	movs	r2, #52	; 0x34
 800aec4:	fb02 f303 	mul.w	r3, r2, r3
 800aec8:	3338      	adds	r3, #56	; 0x38
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4413      	add	r3, r2
 800aece:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	6979      	ldr	r1, [r7, #20]
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f000 f820 	bl	800af20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2201      	movs	r2, #1
 800aee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800af02:	b480      	push	{r7}
 800af04:	b083      	sub	sp, #12
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800af10:	b2db      	uxtb	r3, r3
}
 800af12:	4618      	mov	r0, r3
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
	...

0800af20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800af20:	b480      	push	{r7}
 800af22:	b089      	sub	sp, #36	; 0x24
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	0c1b      	lsrs	r3, r3, #16
 800af38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af3c:	4413      	add	r3, r2
 800af3e:	041b      	lsls	r3, r3, #16
 800af40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	01db      	lsls	r3, r3, #7
 800af4c:	4413      	add	r3, r2
 800af4e:	3384      	adds	r3, #132	; 0x84
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	6812      	ldr	r2, [r2, #0]
 800af56:	4611      	mov	r1, r2
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	01d2      	lsls	r2, r2, #7
 800af5c:	440a      	add	r2, r1
 800af5e:	3284      	adds	r2, #132	; 0x84
 800af60:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800af64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	0c1b      	lsrs	r3, r3, #16
 800af72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af76:	4413      	add	r3, r2
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4619      	mov	r1, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	01db      	lsls	r3, r3, #7
 800af84:	440b      	add	r3, r1
 800af86:	3384      	adds	r3, #132	; 0x84
 800af88:	4619      	mov	r1, r3
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	68da      	ldr	r2, [r3, #12]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af9e:	4413      	add	r3, r2
 800afa0:	041b      	lsls	r3, r3, #16
 800afa2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	461a      	mov	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	01db      	lsls	r3, r3, #7
 800afae:	4413      	add	r3, r2
 800afb0:	3384      	adds	r3, #132	; 0x84
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	6812      	ldr	r2, [r2, #0]
 800afb8:	4611      	mov	r1, r2
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	01d2      	lsls	r2, r2, #7
 800afbe:	440a      	add	r2, r1
 800afc0:	3284      	adds	r2, #132	; 0x84
 800afc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800afc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afd6:	4413      	add	r3, r2
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4619      	mov	r1, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	01db      	lsls	r3, r3, #7
 800afe4:	440b      	add	r3, r1
 800afe6:	3384      	adds	r3, #132	; 0x84
 800afe8:	4619      	mov	r1, r3
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	4313      	orrs	r3, r2
 800afee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	461a      	mov	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	01db      	lsls	r3, r3, #7
 800affa:	4413      	add	r3, r2
 800affc:	3384      	adds	r3, #132	; 0x84
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	6812      	ldr	r2, [r2, #0]
 800b004:	4611      	mov	r1, r2
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	01d2      	lsls	r2, r2, #7
 800b00a:	440a      	add	r2, r1
 800b00c:	3284      	adds	r2, #132	; 0x84
 800b00e:	f023 0307 	bic.w	r3, r3, #7
 800b012:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	461a      	mov	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	01db      	lsls	r3, r3, #7
 800b01e:	4413      	add	r3, r2
 800b020:	3384      	adds	r3, #132	; 0x84
 800b022:	461a      	mov	r2, r3
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b03a:	041b      	lsls	r3, r3, #16
 800b03c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	061b      	lsls	r3, r3, #24
 800b044:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	01db      	lsls	r3, r3, #7
 800b050:	4413      	add	r3, r2
 800b052:	3384      	adds	r3, #132	; 0x84
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	01db      	lsls	r3, r3, #7
 800b060:	4413      	add	r3, r2
 800b062:	3384      	adds	r3, #132	; 0x84
 800b064:	461a      	mov	r2, r3
 800b066:	2300      	movs	r3, #0
 800b068:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b070:	461a      	mov	r2, r3
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	431a      	orrs	r2, r3
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	431a      	orrs	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4619      	mov	r1, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	01db      	lsls	r3, r3, #7
 800b084:	440b      	add	r3, r1
 800b086:	3384      	adds	r3, #132	; 0x84
 800b088:	4619      	mov	r1, r3
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	461a      	mov	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	01db      	lsls	r3, r3, #7
 800b09a:	4413      	add	r3, r2
 800b09c:	3384      	adds	r3, #132	; 0x84
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	6812      	ldr	r2, [r2, #0]
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	01d2      	lsls	r2, r2, #7
 800b0aa:	440a      	add	r2, r1
 800b0ac:	3284      	adds	r2, #132	; 0x84
 800b0ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	01db      	lsls	r3, r3, #7
 800b0be:	4413      	add	r3, r2
 800b0c0:	3384      	adds	r3, #132	; 0x84
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	01db      	lsls	r3, r3, #7
 800b0d4:	4413      	add	r3, r2
 800b0d6:	3384      	adds	r3, #132	; 0x84
 800b0d8:	69da      	ldr	r2, [r3, #28]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	01db      	lsls	r3, r3, #7
 800b0e4:	440b      	add	r3, r1
 800b0e6:	3384      	adds	r3, #132	; 0x84
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4b58      	ldr	r3, [pc, #352]	; (800b24c <LTDC_SetConfig+0x32c>)
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	69da      	ldr	r2, [r3, #28]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	68f9      	ldr	r1, [r7, #12]
 800b0fa:	6809      	ldr	r1, [r1, #0]
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	01c9      	lsls	r1, r1, #7
 800b102:	4401      	add	r1, r0
 800b104:	3184      	adds	r1, #132	; 0x84
 800b106:	4313      	orrs	r3, r2
 800b108:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	461a      	mov	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	01db      	lsls	r3, r3, #7
 800b114:	4413      	add	r3, r2
 800b116:	3384      	adds	r3, #132	; 0x84
 800b118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	01db      	lsls	r3, r3, #7
 800b124:	4413      	add	r3, r2
 800b126:	3384      	adds	r3, #132	; 0x84
 800b128:	461a      	mov	r2, r3
 800b12a:	2300      	movs	r3, #0
 800b12c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	01db      	lsls	r3, r3, #7
 800b138:	4413      	add	r3, r2
 800b13a:	3384      	adds	r3, #132	; 0x84
 800b13c:	461a      	mov	r2, r3
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d102      	bne.n	800b152 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b14c:	2304      	movs	r3, #4
 800b14e:	61fb      	str	r3, [r7, #28]
 800b150:	e01b      	b.n	800b18a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d102      	bne.n	800b160 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b15a:	2303      	movs	r3, #3
 800b15c:	61fb      	str	r3, [r7, #28]
 800b15e:	e014      	b.n	800b18a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	2b04      	cmp	r3, #4
 800b166:	d00b      	beq.n	800b180 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d007      	beq.n	800b180 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b174:	2b03      	cmp	r3, #3
 800b176:	d003      	beq.n	800b180 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b17c:	2b07      	cmp	r3, #7
 800b17e:	d102      	bne.n	800b186 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b180:	2302      	movs	r3, #2
 800b182:	61fb      	str	r3, [r7, #28]
 800b184:	e001      	b.n	800b18a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b186:	2301      	movs	r3, #1
 800b188:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	01db      	lsls	r3, r3, #7
 800b194:	4413      	add	r3, r2
 800b196:	3384      	adds	r3, #132	; 0x84
 800b198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	6812      	ldr	r2, [r2, #0]
 800b19e:	4611      	mov	r1, r2
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	01d2      	lsls	r2, r2, #7
 800b1a4:	440a      	add	r2, r1
 800b1a6:	3284      	adds	r2, #132	; 0x84
 800b1a8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b1ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b2:	69fa      	ldr	r2, [r7, #28]
 800b1b4:	fb02 f303 	mul.w	r3, r2, r3
 800b1b8:	041a      	lsls	r2, r3, #16
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	6859      	ldr	r1, [r3, #4]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	1acb      	subs	r3, r1, r3
 800b1c4:	69f9      	ldr	r1, [r7, #28]
 800b1c6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ca:	3303      	adds	r3, #3
 800b1cc:	68f9      	ldr	r1, [r7, #12]
 800b1ce:	6809      	ldr	r1, [r1, #0]
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	01c9      	lsls	r1, r1, #7
 800b1d6:	4401      	add	r1, r0
 800b1d8:	3184      	adds	r1, #132	; 0x84
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	01db      	lsls	r3, r3, #7
 800b1e8:	4413      	add	r3, r2
 800b1ea:	3384      	adds	r3, #132	; 0x84
 800b1ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	01db      	lsls	r3, r3, #7
 800b1f8:	440b      	add	r3, r1
 800b1fa:	3384      	adds	r3, #132	; 0x84
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4b14      	ldr	r3, [pc, #80]	; (800b250 <LTDC_SetConfig+0x330>)
 800b200:	4013      	ands	r3, r2
 800b202:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	461a      	mov	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	01db      	lsls	r3, r3, #7
 800b20e:	4413      	add	r3, r2
 800b210:	3384      	adds	r3, #132	; 0x84
 800b212:	461a      	mov	r2, r3
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	01db      	lsls	r3, r3, #7
 800b224:	4413      	add	r3, r2
 800b226:	3384      	adds	r3, #132	; 0x84
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	6812      	ldr	r2, [r2, #0]
 800b22e:	4611      	mov	r1, r2
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	01d2      	lsls	r2, r2, #7
 800b234:	440a      	add	r2, r1
 800b236:	3284      	adds	r2, #132	; 0x84
 800b238:	f043 0301 	orr.w	r3, r3, #1
 800b23c:	6013      	str	r3, [r2, #0]
}
 800b23e:	bf00      	nop
 800b240:	3724      	adds	r7, #36	; 0x24
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	fffff8f8 	.word	0xfffff8f8
 800b250:	fffff800 	.word	0xfffff800

0800b254 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b258:	4b05      	ldr	r3, [pc, #20]	; (800b270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a04      	ldr	r2, [pc, #16]	; (800b270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b25e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b262:	6013      	str	r3, [r2, #0]
}
 800b264:	bf00      	nop
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	40007000 	.word	0x40007000

0800b274 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b27e:	4b23      	ldr	r3, [pc, #140]	; (800b30c <HAL_PWREx_EnableOverDrive+0x98>)
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	4a22      	ldr	r2, [pc, #136]	; (800b30c <HAL_PWREx_EnableOverDrive+0x98>)
 800b284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b288:	6413      	str	r3, [r2, #64]	; 0x40
 800b28a:	4b20      	ldr	r3, [pc, #128]	; (800b30c <HAL_PWREx_EnableOverDrive+0x98>)
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b296:	4b1e      	ldr	r3, [pc, #120]	; (800b310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a1d      	ldr	r2, [pc, #116]	; (800b310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b29c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2a2:	f7fa ffab 	bl	80061fc <HAL_GetTick>
 800b2a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b2a8:	e009      	b.n	800b2be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b2aa:	f7fa ffa7 	bl	80061fc <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2b8:	d901      	bls.n	800b2be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e022      	b.n	800b304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b2be:	4b14      	ldr	r3, [pc, #80]	; (800b310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ca:	d1ee      	bne.n	800b2aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b2cc:	4b10      	ldr	r3, [pc, #64]	; (800b310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0f      	ldr	r2, [pc, #60]	; (800b310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2d8:	f7fa ff90 	bl	80061fc <HAL_GetTick>
 800b2dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b2de:	e009      	b.n	800b2f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b2e0:	f7fa ff8c 	bl	80061fc <HAL_GetTick>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2ee:	d901      	bls.n	800b2f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e007      	b.n	800b304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b2f4:	4b06      	ldr	r3, [pc, #24]	; (800b310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b300:	d1ee      	bne.n	800b2e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	40023800 	.word	0x40023800
 800b310:	40007000 	.word	0x40007000

0800b314 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af02      	add	r7, sp, #8
 800b31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b31c:	f7fa ff6e 	bl	80061fc <HAL_GetTick>
 800b320:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	e067      	b.n	800b3fc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d10b      	bne.n	800b350 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7f7 fd61 	bl	8002e08 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b346:	f241 3188 	movw	r1, #5000	; 0x1388
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f85e 	bl	800b40c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	3b01      	subs	r3, #1
 800b360:	021a      	lsls	r2, r3, #8
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	430a      	orrs	r2, r1
 800b368:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	2120      	movs	r1, #32
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f856 	bl	800b428 <QSPI_WaitFlagStateUntilTimeout>
 800b37c:	4603      	mov	r3, r0
 800b37e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b380:	7afb      	ldrb	r3, [r7, #11]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d135      	bne.n	800b3f2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	4b1d      	ldr	r3, [pc, #116]	; (800b404 <HAL_QSPI_Init+0xf0>)
 800b38e:	4013      	ands	r3, r2
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	6852      	ldr	r2, [r2, #4]
 800b394:	0611      	lsls	r1, r2, #24
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	68d2      	ldr	r2, [r2, #12]
 800b39a:	4311      	orrs	r1, r2
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	69d2      	ldr	r2, [r2, #28]
 800b3a0:	4311      	orrs	r1, r2
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	6a12      	ldr	r2, [r2, #32]
 800b3a6:	4311      	orrs	r1, r2
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	6812      	ldr	r2, [r2, #0]
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	4b14      	ldr	r3, [pc, #80]	; (800b408 <HAL_QSPI_Init+0xf4>)
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	6912      	ldr	r2, [r2, #16]
 800b3be:	0411      	lsls	r1, r2, #16
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6952      	ldr	r2, [r2, #20]
 800b3c4:	4311      	orrs	r1, r2
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	6992      	ldr	r2, [r2, #24]
 800b3ca:	4311      	orrs	r1, r2
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	6812      	ldr	r2, [r2, #0]
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f042 0201 	orr.w	r2, r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b3fa:	7afb      	ldrb	r3, [r7, #11]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	00ffff2f 	.word	0x00ffff2f
 800b408:	ffe0f8fe 	.word	0xffe0f8fe

0800b40c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	603b      	str	r3, [r7, #0]
 800b434:	4613      	mov	r3, r2
 800b436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b438:	e01a      	b.n	800b470 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b440:	d016      	beq.n	800b470 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b442:	f7fa fedb 	bl	80061fc <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	69ba      	ldr	r2, [r7, #24]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d302      	bcc.n	800b458 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10b      	bne.n	800b470 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2204      	movs	r2, #4
 800b45c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b464:	f043 0201 	orr.w	r2, r3, #1
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e00e      	b.n	800b48e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689a      	ldr	r2, [r3, #8]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	4013      	ands	r3, r2
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	bf14      	ite	ne
 800b47e:	2301      	movne	r3, #1
 800b480:	2300      	moveq	r3, #0
 800b482:	b2db      	uxtb	r3, r3
 800b484:	461a      	mov	r2, r3
 800b486:	79fb      	ldrb	r3, [r7, #7]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d1d6      	bne.n	800b43a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e291      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 8087 	beq.w	800b5ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b4bc:	4b96      	ldr	r3, [pc, #600]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f003 030c 	and.w	r3, r3, #12
 800b4c4:	2b04      	cmp	r3, #4
 800b4c6:	d00c      	beq.n	800b4e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b4c8:	4b93      	ldr	r3, [pc, #588]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f003 030c 	and.w	r3, r3, #12
 800b4d0:	2b08      	cmp	r3, #8
 800b4d2:	d112      	bne.n	800b4fa <HAL_RCC_OscConfig+0x62>
 800b4d4:	4b90      	ldr	r3, [pc, #576]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4e0:	d10b      	bne.n	800b4fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4e2:	4b8d      	ldr	r3, [pc, #564]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d06c      	beq.n	800b5c8 <HAL_RCC_OscConfig+0x130>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d168      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e26b      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b502:	d106      	bne.n	800b512 <HAL_RCC_OscConfig+0x7a>
 800b504:	4b84      	ldr	r3, [pc, #528]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a83      	ldr	r2, [pc, #524]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b50a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	e02e      	b.n	800b570 <HAL_RCC_OscConfig+0xd8>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10c      	bne.n	800b534 <HAL_RCC_OscConfig+0x9c>
 800b51a:	4b7f      	ldr	r3, [pc, #508]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a7e      	ldr	r2, [pc, #504]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	4b7c      	ldr	r3, [pc, #496]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a7b      	ldr	r2, [pc, #492]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b52c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	e01d      	b.n	800b570 <HAL_RCC_OscConfig+0xd8>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b53c:	d10c      	bne.n	800b558 <HAL_RCC_OscConfig+0xc0>
 800b53e:	4b76      	ldr	r3, [pc, #472]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a75      	ldr	r2, [pc, #468]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	4b73      	ldr	r3, [pc, #460]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a72      	ldr	r2, [pc, #456]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	e00b      	b.n	800b570 <HAL_RCC_OscConfig+0xd8>
 800b558:	4b6f      	ldr	r3, [pc, #444]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a6e      	ldr	r2, [pc, #440]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b55e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	4b6c      	ldr	r3, [pc, #432]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a6b      	ldr	r2, [pc, #428]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b56a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b56e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d013      	beq.n	800b5a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b578:	f7fa fe40 	bl	80061fc <HAL_GetTick>
 800b57c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b57e:	e008      	b.n	800b592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b580:	f7fa fe3c 	bl	80061fc <HAL_GetTick>
 800b584:	4602      	mov	r2, r0
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	2b64      	cmp	r3, #100	; 0x64
 800b58c:	d901      	bls.n	800b592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b58e:	2303      	movs	r3, #3
 800b590:	e21f      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b592:	4b61      	ldr	r3, [pc, #388]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0f0      	beq.n	800b580 <HAL_RCC_OscConfig+0xe8>
 800b59e:	e014      	b.n	800b5ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a0:	f7fa fe2c 	bl	80061fc <HAL_GetTick>
 800b5a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5a6:	e008      	b.n	800b5ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5a8:	f7fa fe28 	bl	80061fc <HAL_GetTick>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	2b64      	cmp	r3, #100	; 0x64
 800b5b4:	d901      	bls.n	800b5ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e20b      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5ba:	4b57      	ldr	r3, [pc, #348]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1f0      	bne.n	800b5a8 <HAL_RCC_OscConfig+0x110>
 800b5c6:	e000      	b.n	800b5ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d069      	beq.n	800b6aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b5d6:	4b50      	ldr	r3, [pc, #320]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	f003 030c 	and.w	r3, r3, #12
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00b      	beq.n	800b5fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b5e2:	4b4d      	ldr	r3, [pc, #308]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	f003 030c 	and.w	r3, r3, #12
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	d11c      	bne.n	800b628 <HAL_RCC_OscConfig+0x190>
 800b5ee:	4b4a      	ldr	r3, [pc, #296]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d116      	bne.n	800b628 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5fa:	4b47      	ldr	r3, [pc, #284]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 0302 	and.w	r3, r3, #2
 800b602:	2b00      	cmp	r3, #0
 800b604:	d005      	beq.n	800b612 <HAL_RCC_OscConfig+0x17a>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d001      	beq.n	800b612 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e1df      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b612:	4b41      	ldr	r3, [pc, #260]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	00db      	lsls	r3, r3, #3
 800b620:	493d      	ldr	r1, [pc, #244]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b622:	4313      	orrs	r3, r2
 800b624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b626:	e040      	b.n	800b6aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d023      	beq.n	800b678 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b630:	4b39      	ldr	r3, [pc, #228]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a38      	ldr	r2, [pc, #224]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b636:	f043 0301 	orr.w	r3, r3, #1
 800b63a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b63c:	f7fa fdde 	bl	80061fc <HAL_GetTick>
 800b640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b642:	e008      	b.n	800b656 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b644:	f7fa fdda 	bl	80061fc <HAL_GetTick>
 800b648:	4602      	mov	r2, r0
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d901      	bls.n	800b656 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e1bd      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b656:	4b30      	ldr	r3, [pc, #192]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 0302 	and.w	r3, r3, #2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0f0      	beq.n	800b644 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b662:	4b2d      	ldr	r3, [pc, #180]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	00db      	lsls	r3, r3, #3
 800b670:	4929      	ldr	r1, [pc, #164]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b672:	4313      	orrs	r3, r2
 800b674:	600b      	str	r3, [r1, #0]
 800b676:	e018      	b.n	800b6aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b678:	4b27      	ldr	r3, [pc, #156]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a26      	ldr	r2, [pc, #152]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b67e:	f023 0301 	bic.w	r3, r3, #1
 800b682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b684:	f7fa fdba 	bl	80061fc <HAL_GetTick>
 800b688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b68a:	e008      	b.n	800b69e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b68c:	f7fa fdb6 	bl	80061fc <HAL_GetTick>
 800b690:	4602      	mov	r2, r0
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	2b02      	cmp	r3, #2
 800b698:	d901      	bls.n	800b69e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b69a:	2303      	movs	r3, #3
 800b69c:	e199      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b69e:	4b1e      	ldr	r3, [pc, #120]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1f0      	bne.n	800b68c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 0308 	and.w	r3, r3, #8
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d038      	beq.n	800b728 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d019      	beq.n	800b6f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6be:	4b16      	ldr	r3, [pc, #88]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b6c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c2:	4a15      	ldr	r2, [pc, #84]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b6c4:	f043 0301 	orr.w	r3, r3, #1
 800b6c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6ca:	f7fa fd97 	bl	80061fc <HAL_GetTick>
 800b6ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b6d0:	e008      	b.n	800b6e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6d2:	f7fa fd93 	bl	80061fc <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d901      	bls.n	800b6e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	e176      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b6e4:	4b0c      	ldr	r3, [pc, #48]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6e8:	f003 0302 	and.w	r3, r3, #2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0f0      	beq.n	800b6d2 <HAL_RCC_OscConfig+0x23a>
 800b6f0:	e01a      	b.n	800b728 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6f2:	4b09      	ldr	r3, [pc, #36]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f6:	4a08      	ldr	r2, [pc, #32]	; (800b718 <HAL_RCC_OscConfig+0x280>)
 800b6f8:	f023 0301 	bic.w	r3, r3, #1
 800b6fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6fe:	f7fa fd7d 	bl	80061fc <HAL_GetTick>
 800b702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b704:	e00a      	b.n	800b71c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b706:	f7fa fd79 	bl	80061fc <HAL_GetTick>
 800b70a:	4602      	mov	r2, r0
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	2b02      	cmp	r3, #2
 800b712:	d903      	bls.n	800b71c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b714:	2303      	movs	r3, #3
 800b716:	e15c      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
 800b718:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b71c:	4b91      	ldr	r3, [pc, #580]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b71e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b720:	f003 0302 	and.w	r3, r3, #2
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1ee      	bne.n	800b706 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0304 	and.w	r3, r3, #4
 800b730:	2b00      	cmp	r3, #0
 800b732:	f000 80a4 	beq.w	800b87e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b736:	4b8b      	ldr	r3, [pc, #556]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10d      	bne.n	800b75e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b742:	4b88      	ldr	r3, [pc, #544]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b746:	4a87      	ldr	r2, [pc, #540]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b74c:	6413      	str	r3, [r2, #64]	; 0x40
 800b74e:	4b85      	ldr	r3, [pc, #532]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b756:	60bb      	str	r3, [r7, #8]
 800b758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b75a:	2301      	movs	r3, #1
 800b75c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b75e:	4b82      	ldr	r3, [pc, #520]	; (800b968 <HAL_RCC_OscConfig+0x4d0>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b766:	2b00      	cmp	r3, #0
 800b768:	d118      	bne.n	800b79c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b76a:	4b7f      	ldr	r3, [pc, #508]	; (800b968 <HAL_RCC_OscConfig+0x4d0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a7e      	ldr	r2, [pc, #504]	; (800b968 <HAL_RCC_OscConfig+0x4d0>)
 800b770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b776:	f7fa fd41 	bl	80061fc <HAL_GetTick>
 800b77a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b77c:	e008      	b.n	800b790 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b77e:	f7fa fd3d 	bl	80061fc <HAL_GetTick>
 800b782:	4602      	mov	r2, r0
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	2b64      	cmp	r3, #100	; 0x64
 800b78a:	d901      	bls.n	800b790 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e120      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b790:	4b75      	ldr	r3, [pc, #468]	; (800b968 <HAL_RCC_OscConfig+0x4d0>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d0f0      	beq.n	800b77e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d106      	bne.n	800b7b2 <HAL_RCC_OscConfig+0x31a>
 800b7a4:	4b6f      	ldr	r3, [pc, #444]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a8:	4a6e      	ldr	r2, [pc, #440]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7aa:	f043 0301 	orr.w	r3, r3, #1
 800b7ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b7b0:	e02d      	b.n	800b80e <HAL_RCC_OscConfig+0x376>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10c      	bne.n	800b7d4 <HAL_RCC_OscConfig+0x33c>
 800b7ba:	4b6a      	ldr	r3, [pc, #424]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7be:	4a69      	ldr	r2, [pc, #420]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7c0:	f023 0301 	bic.w	r3, r3, #1
 800b7c4:	6713      	str	r3, [r2, #112]	; 0x70
 800b7c6:	4b67      	ldr	r3, [pc, #412]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ca:	4a66      	ldr	r2, [pc, #408]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7cc:	f023 0304 	bic.w	r3, r3, #4
 800b7d0:	6713      	str	r3, [r2, #112]	; 0x70
 800b7d2:	e01c      	b.n	800b80e <HAL_RCC_OscConfig+0x376>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	2b05      	cmp	r3, #5
 800b7da:	d10c      	bne.n	800b7f6 <HAL_RCC_OscConfig+0x35e>
 800b7dc:	4b61      	ldr	r3, [pc, #388]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e0:	4a60      	ldr	r2, [pc, #384]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7e2:	f043 0304 	orr.w	r3, r3, #4
 800b7e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b7e8:	4b5e      	ldr	r3, [pc, #376]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ec:	4a5d      	ldr	r2, [pc, #372]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7ee:	f043 0301 	orr.w	r3, r3, #1
 800b7f2:	6713      	str	r3, [r2, #112]	; 0x70
 800b7f4:	e00b      	b.n	800b80e <HAL_RCC_OscConfig+0x376>
 800b7f6:	4b5b      	ldr	r3, [pc, #364]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fa:	4a5a      	ldr	r2, [pc, #360]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b7fc:	f023 0301 	bic.w	r3, r3, #1
 800b800:	6713      	str	r3, [r2, #112]	; 0x70
 800b802:	4b58      	ldr	r3, [pc, #352]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b806:	4a57      	ldr	r2, [pc, #348]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b808:	f023 0304 	bic.w	r3, r3, #4
 800b80c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d015      	beq.n	800b842 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b816:	f7fa fcf1 	bl	80061fc <HAL_GetTick>
 800b81a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b81c:	e00a      	b.n	800b834 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b81e:	f7fa fced 	bl	80061fc <HAL_GetTick>
 800b822:	4602      	mov	r2, r0
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	f241 3288 	movw	r2, #5000	; 0x1388
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d901      	bls.n	800b834 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e0ce      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b834:	4b4b      	ldr	r3, [pc, #300]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b838:	f003 0302 	and.w	r3, r3, #2
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0ee      	beq.n	800b81e <HAL_RCC_OscConfig+0x386>
 800b840:	e014      	b.n	800b86c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b842:	f7fa fcdb 	bl	80061fc <HAL_GetTick>
 800b846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b848:	e00a      	b.n	800b860 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b84a:	f7fa fcd7 	bl	80061fc <HAL_GetTick>
 800b84e:	4602      	mov	r2, r0
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	f241 3288 	movw	r2, #5000	; 0x1388
 800b858:	4293      	cmp	r3, r2
 800b85a:	d901      	bls.n	800b860 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b85c:	2303      	movs	r3, #3
 800b85e:	e0b8      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b860:	4b40      	ldr	r3, [pc, #256]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b864:	f003 0302 	and.w	r3, r3, #2
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1ee      	bne.n	800b84a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d105      	bne.n	800b87e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b872:	4b3c      	ldr	r3, [pc, #240]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b876:	4a3b      	ldr	r2, [pc, #236]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b87c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 80a4 	beq.w	800b9d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b888:	4b36      	ldr	r3, [pc, #216]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	f003 030c 	and.w	r3, r3, #12
 800b890:	2b08      	cmp	r3, #8
 800b892:	d06b      	beq.n	800b96c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d149      	bne.n	800b930 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b89c:	4b31      	ldr	r3, [pc, #196]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a30      	ldr	r2, [pc, #192]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b8a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a8:	f7fa fca8 	bl	80061fc <HAL_GetTick>
 800b8ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8ae:	e008      	b.n	800b8c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8b0:	f7fa fca4 	bl	80061fc <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d901      	bls.n	800b8c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e087      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b8c2:	4b28      	ldr	r3, [pc, #160]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1f0      	bne.n	800b8b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	69da      	ldr	r2, [r3, #28]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a1b      	ldr	r3, [r3, #32]
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	019b      	lsls	r3, r3, #6
 800b8de:	431a      	orrs	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e4:	085b      	lsrs	r3, r3, #1
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	041b      	lsls	r3, r3, #16
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f0:	061b      	lsls	r3, r3, #24
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	4a1b      	ldr	r2, [pc, #108]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b8f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b8fc:	4b19      	ldr	r3, [pc, #100]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a18      	ldr	r2, [pc, #96]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b908:	f7fa fc78 	bl	80061fc <HAL_GetTick>
 800b90c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b90e:	e008      	b.n	800b922 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b910:	f7fa fc74 	bl	80061fc <HAL_GetTick>
 800b914:	4602      	mov	r2, r0
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d901      	bls.n	800b922 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b91e:	2303      	movs	r3, #3
 800b920:	e057      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b922:	4b10      	ldr	r3, [pc, #64]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d0f0      	beq.n	800b910 <HAL_RCC_OscConfig+0x478>
 800b92e:	e04f      	b.n	800b9d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b930:	4b0c      	ldr	r3, [pc, #48]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a0b      	ldr	r2, [pc, #44]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b93a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b93c:	f7fa fc5e 	bl	80061fc <HAL_GetTick>
 800b940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b942:	e008      	b.n	800b956 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b944:	f7fa fc5a 	bl	80061fc <HAL_GetTick>
 800b948:	4602      	mov	r2, r0
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	1ad3      	subs	r3, r2, r3
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d901      	bls.n	800b956 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b952:	2303      	movs	r3, #3
 800b954:	e03d      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b956:	4b03      	ldr	r3, [pc, #12]	; (800b964 <HAL_RCC_OscConfig+0x4cc>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1f0      	bne.n	800b944 <HAL_RCC_OscConfig+0x4ac>
 800b962:	e035      	b.n	800b9d0 <HAL_RCC_OscConfig+0x538>
 800b964:	40023800 	.word	0x40023800
 800b968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b96c:	4b1b      	ldr	r3, [pc, #108]	; (800b9dc <HAL_RCC_OscConfig+0x544>)
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d028      	beq.n	800b9cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b984:	429a      	cmp	r2, r3
 800b986:	d121      	bne.n	800b9cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b992:	429a      	cmp	r2, r3
 800b994:	d11a      	bne.n	800b9cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b99c:	4013      	ands	r3, r2
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b9a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d111      	bne.n	800b9cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b2:	085b      	lsrs	r3, r3, #1
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d107      	bne.n	800b9cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d001      	beq.n	800b9d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e000      	b.n	800b9d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	40023800 	.word	0x40023800

0800b9e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e0d0      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b9f8:	4b6a      	ldr	r3, [pc, #424]	; (800bba4 <HAL_RCC_ClockConfig+0x1c4>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 030f 	and.w	r3, r3, #15
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d910      	bls.n	800ba28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba06:	4b67      	ldr	r3, [pc, #412]	; (800bba4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f023 020f 	bic.w	r2, r3, #15
 800ba0e:	4965      	ldr	r1, [pc, #404]	; (800bba4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba16:	4b63      	ldr	r3, [pc, #396]	; (800bba4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 030f 	and.w	r3, r3, #15
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d001      	beq.n	800ba28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e0b8      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d020      	beq.n	800ba76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0304 	and.w	r3, r3, #4
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d005      	beq.n	800ba4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba40:	4b59      	ldr	r3, [pc, #356]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	4a58      	ldr	r2, [pc, #352]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ba4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 0308 	and.w	r3, r3, #8
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d005      	beq.n	800ba64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ba58:	4b53      	ldr	r3, [pc, #332]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	4a52      	ldr	r2, [pc, #328]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ba62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba64:	4b50      	ldr	r3, [pc, #320]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	494d      	ldr	r1, [pc, #308]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba72:	4313      	orrs	r3, r2
 800ba74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d040      	beq.n	800bb04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d107      	bne.n	800ba9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba8a:	4b47      	ldr	r3, [pc, #284]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d115      	bne.n	800bac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e07f      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d107      	bne.n	800bab2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800baa2:	4b41      	ldr	r3, [pc, #260]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d109      	bne.n	800bac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e073      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bab2:	4b3d      	ldr	r3, [pc, #244]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 0302 	and.w	r3, r3, #2
 800baba:	2b00      	cmp	r3, #0
 800babc:	d101      	bne.n	800bac2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	e06b      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bac2:	4b39      	ldr	r3, [pc, #228]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	f023 0203 	bic.w	r2, r3, #3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	4936      	ldr	r1, [pc, #216]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800bad0:	4313      	orrs	r3, r2
 800bad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bad4:	f7fa fb92 	bl	80061fc <HAL_GetTick>
 800bad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bada:	e00a      	b.n	800baf2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800badc:	f7fa fb8e 	bl	80061fc <HAL_GetTick>
 800bae0:	4602      	mov	r2, r0
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	f241 3288 	movw	r2, #5000	; 0x1388
 800baea:	4293      	cmp	r3, r2
 800baec:	d901      	bls.n	800baf2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e053      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baf2:	4b2d      	ldr	r3, [pc, #180]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	f003 020c 	and.w	r2, r3, #12
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d1eb      	bne.n	800badc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb04:	4b27      	ldr	r3, [pc, #156]	; (800bba4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 030f 	and.w	r3, r3, #15
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d210      	bcs.n	800bb34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb12:	4b24      	ldr	r3, [pc, #144]	; (800bba4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f023 020f 	bic.w	r2, r3, #15
 800bb1a:	4922      	ldr	r1, [pc, #136]	; (800bba4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb22:	4b20      	ldr	r3, [pc, #128]	; (800bba4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 030f 	and.w	r3, r3, #15
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d001      	beq.n	800bb34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e032      	b.n	800bb9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0304 	and.w	r3, r3, #4
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d008      	beq.n	800bb52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb40:	4b19      	ldr	r3, [pc, #100]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	4916      	ldr	r1, [pc, #88]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 0308 	and.w	r3, r3, #8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d009      	beq.n	800bb72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bb5e:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	490e      	ldr	r1, [pc, #56]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bb72:	f000 f821 	bl	800bbb8 <HAL_RCC_GetSysClockFreq>
 800bb76:	4602      	mov	r2, r0
 800bb78:	4b0b      	ldr	r3, [pc, #44]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	091b      	lsrs	r3, r3, #4
 800bb7e:	f003 030f 	and.w	r3, r3, #15
 800bb82:	490a      	ldr	r1, [pc, #40]	; (800bbac <HAL_RCC_ClockConfig+0x1cc>)
 800bb84:	5ccb      	ldrb	r3, [r1, r3]
 800bb86:	fa22 f303 	lsr.w	r3, r2, r3
 800bb8a:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <HAL_RCC_ClockConfig+0x1d0>)
 800bb8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bb8e:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <HAL_RCC_ClockConfig+0x1d4>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f7 fea2 	bl	80038dc <HAL_InitTick>

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	40023c00 	.word	0x40023c00
 800bba8:	40023800 	.word	0x40023800
 800bbac:	0801e144 	.word	0x0801e144
 800bbb0:	20000000 	.word	0x20000000
 800bbb4:	20000038 	.word	0x20000038

0800bbb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbb8:	b5b0      	push	{r4, r5, r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	6079      	str	r1, [r7, #4]
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	60f9      	str	r1, [r7, #12]
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800bbca:	2100      	movs	r1, #0
 800bbcc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bbce:	4952      	ldr	r1, [pc, #328]	; (800bd18 <HAL_RCC_GetSysClockFreq+0x160>)
 800bbd0:	6889      	ldr	r1, [r1, #8]
 800bbd2:	f001 010c 	and.w	r1, r1, #12
 800bbd6:	2908      	cmp	r1, #8
 800bbd8:	d00d      	beq.n	800bbf6 <HAL_RCC_GetSysClockFreq+0x3e>
 800bbda:	2908      	cmp	r1, #8
 800bbdc:	f200 8094 	bhi.w	800bd08 <HAL_RCC_GetSysClockFreq+0x150>
 800bbe0:	2900      	cmp	r1, #0
 800bbe2:	d002      	beq.n	800bbea <HAL_RCC_GetSysClockFreq+0x32>
 800bbe4:	2904      	cmp	r1, #4
 800bbe6:	d003      	beq.n	800bbf0 <HAL_RCC_GetSysClockFreq+0x38>
 800bbe8:	e08e      	b.n	800bd08 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bbea:	4b4c      	ldr	r3, [pc, #304]	; (800bd1c <HAL_RCC_GetSysClockFreq+0x164>)
 800bbec:	60bb      	str	r3, [r7, #8]
      break;
 800bbee:	e08e      	b.n	800bd0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bbf0:	4b4b      	ldr	r3, [pc, #300]	; (800bd20 <HAL_RCC_GetSysClockFreq+0x168>)
 800bbf2:	60bb      	str	r3, [r7, #8]
      break;
 800bbf4:	e08b      	b.n	800bd0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bbf6:	4948      	ldr	r1, [pc, #288]	; (800bd18 <HAL_RCC_GetSysClockFreq+0x160>)
 800bbf8:	6849      	ldr	r1, [r1, #4]
 800bbfa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800bbfe:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bc00:	4945      	ldr	r1, [pc, #276]	; (800bd18 <HAL_RCC_GetSysClockFreq+0x160>)
 800bc02:	6849      	ldr	r1, [r1, #4]
 800bc04:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800bc08:	2900      	cmp	r1, #0
 800bc0a:	d024      	beq.n	800bc56 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc0c:	4942      	ldr	r1, [pc, #264]	; (800bd18 <HAL_RCC_GetSysClockFreq+0x160>)
 800bc0e:	6849      	ldr	r1, [r1, #4]
 800bc10:	0989      	lsrs	r1, r1, #6
 800bc12:	4608      	mov	r0, r1
 800bc14:	f04f 0100 	mov.w	r1, #0
 800bc18:	f240 14ff 	movw	r4, #511	; 0x1ff
 800bc1c:	f04f 0500 	mov.w	r5, #0
 800bc20:	ea00 0204 	and.w	r2, r0, r4
 800bc24:	ea01 0305 	and.w	r3, r1, r5
 800bc28:	493d      	ldr	r1, [pc, #244]	; (800bd20 <HAL_RCC_GetSysClockFreq+0x168>)
 800bc2a:	fb01 f003 	mul.w	r0, r1, r3
 800bc2e:	2100      	movs	r1, #0
 800bc30:	fb01 f102 	mul.w	r1, r1, r2
 800bc34:	1844      	adds	r4, r0, r1
 800bc36:	493a      	ldr	r1, [pc, #232]	; (800bd20 <HAL_RCC_GetSysClockFreq+0x168>)
 800bc38:	fba2 0101 	umull	r0, r1, r2, r1
 800bc3c:	1863      	adds	r3, r4, r1
 800bc3e:	4619      	mov	r1, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	461a      	mov	r2, r3
 800bc44:	f04f 0300 	mov.w	r3, #0
 800bc48:	f7f4 fb3a 	bl	80002c0 <__aeabi_uldivmod>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4613      	mov	r3, r2
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e04a      	b.n	800bcec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc56:	4b30      	ldr	r3, [pc, #192]	; (800bd18 <HAL_RCC_GetSysClockFreq+0x160>)
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	099b      	lsrs	r3, r3, #6
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	f04f 0300 	mov.w	r3, #0
 800bc62:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bc66:	f04f 0100 	mov.w	r1, #0
 800bc6a:	ea02 0400 	and.w	r4, r2, r0
 800bc6e:	ea03 0501 	and.w	r5, r3, r1
 800bc72:	4620      	mov	r0, r4
 800bc74:	4629      	mov	r1, r5
 800bc76:	f04f 0200 	mov.w	r2, #0
 800bc7a:	f04f 0300 	mov.w	r3, #0
 800bc7e:	014b      	lsls	r3, r1, #5
 800bc80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bc84:	0142      	lsls	r2, r0, #5
 800bc86:	4610      	mov	r0, r2
 800bc88:	4619      	mov	r1, r3
 800bc8a:	1b00      	subs	r0, r0, r4
 800bc8c:	eb61 0105 	sbc.w	r1, r1, r5
 800bc90:	f04f 0200 	mov.w	r2, #0
 800bc94:	f04f 0300 	mov.w	r3, #0
 800bc98:	018b      	lsls	r3, r1, #6
 800bc9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bc9e:	0182      	lsls	r2, r0, #6
 800bca0:	1a12      	subs	r2, r2, r0
 800bca2:	eb63 0301 	sbc.w	r3, r3, r1
 800bca6:	f04f 0000 	mov.w	r0, #0
 800bcaa:	f04f 0100 	mov.w	r1, #0
 800bcae:	00d9      	lsls	r1, r3, #3
 800bcb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bcb4:	00d0      	lsls	r0, r2, #3
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	1912      	adds	r2, r2, r4
 800bcbc:	eb45 0303 	adc.w	r3, r5, r3
 800bcc0:	f04f 0000 	mov.w	r0, #0
 800bcc4:	f04f 0100 	mov.w	r1, #0
 800bcc8:	0299      	lsls	r1, r3, #10
 800bcca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bcce:	0290      	lsls	r0, r2, #10
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f04f 0300 	mov.w	r3, #0
 800bce0:	f7f4 faee 	bl	80002c0 <__aeabi_uldivmod>
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	4613      	mov	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bcec:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <HAL_RCC_GetSysClockFreq+0x160>)
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	0c1b      	lsrs	r3, r3, #16
 800bcf2:	f003 0303 	and.w	r3, r3, #3
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd04:	60bb      	str	r3, [r7, #8]
      break;
 800bd06:	e002      	b.n	800bd0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bd08:	4b04      	ldr	r3, [pc, #16]	; (800bd1c <HAL_RCC_GetSysClockFreq+0x164>)
 800bd0a:	60bb      	str	r3, [r7, #8]
      break;
 800bd0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bdb0      	pop	{r4, r5, r7, pc}
 800bd18:	40023800 	.word	0x40023800
 800bd1c:	00f42400 	.word	0x00f42400
 800bd20:	017d7840 	.word	0x017d7840

0800bd24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd24:	b480      	push	{r7}
 800bd26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bd28:	4b03      	ldr	r3, [pc, #12]	; (800bd38 <HAL_RCC_GetHCLKFreq+0x14>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	20000000 	.word	0x20000000

0800bd3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bd40:	f7ff fff0 	bl	800bd24 <HAL_RCC_GetHCLKFreq>
 800bd44:	4602      	mov	r2, r0
 800bd46:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	0a9b      	lsrs	r3, r3, #10
 800bd4c:	f003 0307 	and.w	r3, r3, #7
 800bd50:	4903      	ldr	r1, [pc, #12]	; (800bd60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd52:	5ccb      	ldrb	r3, [r1, r3]
 800bd54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	40023800 	.word	0x40023800
 800bd60:	0801e154 	.word	0x0801e154

0800bd64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bd68:	f7ff ffdc 	bl	800bd24 <HAL_RCC_GetHCLKFreq>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	0b5b      	lsrs	r3, r3, #13
 800bd74:	f003 0307 	and.w	r3, r3, #7
 800bd78:	4903      	ldr	r1, [pc, #12]	; (800bd88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bd7a:	5ccb      	ldrb	r3, [r1, r3]
 800bd7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40023800 	.word	0x40023800
 800bd88:	0801e154 	.word	0x0801e154

0800bd8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	220f      	movs	r2, #15
 800bd9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bd9c:	4b12      	ldr	r3, [pc, #72]	; (800bde8 <HAL_RCC_GetClockConfig+0x5c>)
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f003 0203 	and.w	r2, r3, #3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bda8:	4b0f      	ldr	r3, [pc, #60]	; (800bde8 <HAL_RCC_GetClockConfig+0x5c>)
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bdb4:	4b0c      	ldr	r3, [pc, #48]	; (800bde8 <HAL_RCC_GetClockConfig+0x5c>)
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bdc0:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <HAL_RCC_GetClockConfig+0x5c>)
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	08db      	lsrs	r3, r3, #3
 800bdc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bdce:	4b07      	ldr	r3, [pc, #28]	; (800bdec <HAL_RCC_GetClockConfig+0x60>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f003 020f 	and.w	r2, r3, #15
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	601a      	str	r2, [r3, #0]
}
 800bdda:	bf00      	nop
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	40023800 	.word	0x40023800
 800bdec:	40023c00 	.word	0x40023c00

0800bdf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b088      	sub	sp, #32
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	2b00      	cmp	r3, #0
 800be16:	d012      	beq.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800be18:	4b69      	ldr	r3, [pc, #420]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	4a68      	ldr	r2, [pc, #416]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800be22:	6093      	str	r3, [r2, #8]
 800be24:	4b66      	ldr	r3, [pc, #408]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be26:	689a      	ldr	r2, [r3, #8]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be2c:	4964      	ldr	r1, [pc, #400]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800be3a:	2301      	movs	r3, #1
 800be3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be46:	2b00      	cmp	r3, #0
 800be48:	d017      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be4a:	4b5d      	ldr	r3, [pc, #372]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be58:	4959      	ldr	r1, [pc, #356]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be5a:	4313      	orrs	r3, r2
 800be5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be68:	d101      	bne.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800be6a:	2301      	movs	r3, #1
 800be6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800be76:	2301      	movs	r3, #1
 800be78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be82:	2b00      	cmp	r3, #0
 800be84:	d017      	beq.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800be86:	4b4e      	ldr	r3, [pc, #312]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be94:	494a      	ldr	r1, [pc, #296]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be96:	4313      	orrs	r3, r2
 800be98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bea4:	d101      	bne.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bea6:	2301      	movs	r3, #1
 800bea8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800beb2:	2301      	movs	r3, #1
 800beb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bec2:	2301      	movs	r3, #1
 800bec4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 0320 	and.w	r3, r3, #32
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f000 808b 	beq.w	800bfea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bed4:	4b3a      	ldr	r3, [pc, #232]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed8:	4a39      	ldr	r2, [pc, #228]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800beda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bede:	6413      	str	r3, [r2, #64]	; 0x40
 800bee0:	4b37      	ldr	r3, [pc, #220]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bee8:	60bb      	str	r3, [r7, #8]
 800beea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800beec:	4b35      	ldr	r3, [pc, #212]	; (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a34      	ldr	r2, [pc, #208]	; (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bef8:	f7fa f980 	bl	80061fc <HAL_GetTick>
 800befc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800befe:	e008      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf00:	f7fa f97c 	bl	80061fc <HAL_GetTick>
 800bf04:	4602      	mov	r2, r0
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	2b64      	cmp	r3, #100	; 0x64
 800bf0c:	d901      	bls.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e357      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bf12:	4b2c      	ldr	r3, [pc, #176]	; (800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0f0      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bf1e:	4b28      	ldr	r3, [pc, #160]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d035      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d02e      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf3c:	4b20      	ldr	r3, [pc, #128]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bf46:	4b1e      	ldr	r3, [pc, #120]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf4a:	4a1d      	ldr	r2, [pc, #116]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bf52:	4b1b      	ldr	r3, [pc, #108]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf56:	4a1a      	ldr	r2, [pc, #104]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bf5e:	4a18      	ldr	r2, [pc, #96]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bf64:	4b16      	ldr	r3, [pc, #88]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d114      	bne.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf70:	f7fa f944 	bl	80061fc <HAL_GetTick>
 800bf74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf76:	e00a      	b.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf78:	f7fa f940 	bl	80061fc <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d901      	bls.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e319      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf8e:	4b0c      	ldr	r3, [pc, #48]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf92:	f003 0302 	and.w	r3, r3, #2
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d0ee      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfa6:	d111      	bne.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bfa8:	4b05      	ldr	r3, [pc, #20]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bfb4:	4b04      	ldr	r3, [pc, #16]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bfb6:	400b      	ands	r3, r1
 800bfb8:	4901      	ldr	r1, [pc, #4]	; (800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	608b      	str	r3, [r1, #8]
 800bfbe:	e00b      	b.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bfc0:	40023800 	.word	0x40023800
 800bfc4:	40007000 	.word	0x40007000
 800bfc8:	0ffffcff 	.word	0x0ffffcff
 800bfcc:	4bb1      	ldr	r3, [pc, #708]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	4ab0      	ldr	r2, [pc, #704]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bfd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bfd6:	6093      	str	r3, [r2, #8]
 800bfd8:	4bae      	ldr	r3, [pc, #696]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bfda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfe4:	49ab      	ldr	r1, [pc, #684]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 0310 	and.w	r3, r3, #16
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d010      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bff6:	4ba7      	ldr	r3, [pc, #668]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bffc:	4aa5      	ldr	r2, [pc, #660]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c002:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c006:	4ba3      	ldr	r3, [pc, #652]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c008:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c010:	49a0      	ldr	r1, [pc, #640]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c012:	4313      	orrs	r3, r2
 800c014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00a      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c024:	4b9b      	ldr	r3, [pc, #620]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c02a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c032:	4998      	ldr	r1, [pc, #608]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c034:	4313      	orrs	r3, r2
 800c036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00a      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c046:	4b93      	ldr	r3, [pc, #588]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c04c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c054:	498f      	ldr	r1, [pc, #572]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c056:	4313      	orrs	r3, r2
 800c058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00a      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c068:	4b8a      	ldr	r3, [pc, #552]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c06e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c076:	4987      	ldr	r1, [pc, #540]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c078:	4313      	orrs	r3, r2
 800c07a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00a      	beq.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c08a:	4b82      	ldr	r3, [pc, #520]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c08c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c090:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c098:	497e      	ldr	r1, [pc, #504]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c09a:	4313      	orrs	r3, r2
 800c09c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00a      	beq.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c0ac:	4b79      	ldr	r3, [pc, #484]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b2:	f023 0203 	bic.w	r2, r3, #3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ba:	4976      	ldr	r1, [pc, #472]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00a      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c0ce:	4b71      	ldr	r3, [pc, #452]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0d4:	f023 020c 	bic.w	r2, r3, #12
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0dc:	496d      	ldr	r1, [pc, #436]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00a      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c0f0:	4b68      	ldr	r3, [pc, #416]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0fe:	4965      	ldr	r1, [pc, #404]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c100:	4313      	orrs	r3, r2
 800c102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00a      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c112:	4b60      	ldr	r3, [pc, #384]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c118:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c120:	495c      	ldr	r1, [pc, #368]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c122:	4313      	orrs	r3, r2
 800c124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00a      	beq.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c134:	4b57      	ldr	r3, [pc, #348]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c13a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c142:	4954      	ldr	r1, [pc, #336]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c144:	4313      	orrs	r3, r2
 800c146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00a      	beq.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c156:	4b4f      	ldr	r3, [pc, #316]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c15c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c164:	494b      	ldr	r1, [pc, #300]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c166:	4313      	orrs	r3, r2
 800c168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00a      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c178:	4b46      	ldr	r3, [pc, #280]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c17e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c186:	4943      	ldr	r1, [pc, #268]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c188:	4313      	orrs	r3, r2
 800c18a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c19a:	4b3e      	ldr	r3, [pc, #248]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1a8:	493a      	ldr	r1, [pc, #232]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00a      	beq.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c1bc:	4b35      	ldr	r3, [pc, #212]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1ca:	4932      	ldr	r1, [pc, #200]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d011      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c1de:	4b2d      	ldr	r3, [pc, #180]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ec:	4929      	ldr	r1, [pc, #164]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1fc:	d101      	bne.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c1fe:	2301      	movs	r3, #1
 800c200:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f003 0308 	and.w	r3, r3, #8
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c20e:	2301      	movs	r3, #1
 800c210:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00a      	beq.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c21e:	4b1d      	ldr	r3, [pc, #116]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c224:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c22c:	4919      	ldr	r1, [pc, #100]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c22e:	4313      	orrs	r3, r2
 800c230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00b      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c240:	4b14      	ldr	r3, [pc, #80]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c246:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c250:	4910      	ldr	r1, [pc, #64]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c252:	4313      	orrs	r3, r2
 800c254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d006      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 80d9 	beq.w	800c41e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c26c:	4b09      	ldr	r3, [pc, #36]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a08      	ldr	r2, [pc, #32]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c272:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c278:	f7f9 ffc0 	bl	80061fc <HAL_GetTick>
 800c27c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c27e:	e00b      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c280:	f7f9 ffbc 	bl	80061fc <HAL_GetTick>
 800c284:	4602      	mov	r2, r0
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	1ad3      	subs	r3, r2, r3
 800c28a:	2b64      	cmp	r3, #100	; 0x64
 800c28c:	d904      	bls.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c28e:	2303      	movs	r3, #3
 800c290:	e197      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c292:	bf00      	nop
 800c294:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c298:	4b6c      	ldr	r3, [pc, #432]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1ed      	bne.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f003 0301 	and.w	r3, r3, #1
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d021      	beq.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d11d      	bne.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c2b8:	4b64      	ldr	r3, [pc, #400]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2be:	0c1b      	lsrs	r3, r3, #16
 800c2c0:	f003 0303 	and.w	r3, r3, #3
 800c2c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c2c6:	4b61      	ldr	r3, [pc, #388]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2cc:	0e1b      	lsrs	r3, r3, #24
 800c2ce:	f003 030f 	and.w	r3, r3, #15
 800c2d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	019a      	lsls	r2, r3, #6
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	041b      	lsls	r3, r3, #16
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	061b      	lsls	r3, r3, #24
 800c2e4:	431a      	orrs	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	071b      	lsls	r3, r3, #28
 800c2ec:	4957      	ldr	r1, [pc, #348]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d004      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c308:	d00a      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c312:	2b00      	cmp	r3, #0
 800c314:	d02e      	beq.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c31e:	d129      	bne.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c320:	4b4a      	ldr	r3, [pc, #296]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c326:	0c1b      	lsrs	r3, r3, #16
 800c328:	f003 0303 	and.w	r3, r3, #3
 800c32c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c32e:	4b47      	ldr	r3, [pc, #284]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c334:	0f1b      	lsrs	r3, r3, #28
 800c336:	f003 0307 	and.w	r3, r3, #7
 800c33a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	019a      	lsls	r2, r3, #6
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	041b      	lsls	r3, r3, #16
 800c346:	431a      	orrs	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	061b      	lsls	r3, r3, #24
 800c34e:	431a      	orrs	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	071b      	lsls	r3, r3, #28
 800c354:	493d      	ldr	r1, [pc, #244]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c356:	4313      	orrs	r3, r2
 800c358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c35c:	4b3b      	ldr	r3, [pc, #236]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c35e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c362:	f023 021f 	bic.w	r2, r3, #31
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36a:	3b01      	subs	r3, #1
 800c36c:	4937      	ldr	r1, [pc, #220]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c36e:	4313      	orrs	r3, r2
 800c370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d01d      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c380:	4b32      	ldr	r3, [pc, #200]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c386:	0e1b      	lsrs	r3, r3, #24
 800c388:	f003 030f 	and.w	r3, r3, #15
 800c38c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c38e:	4b2f      	ldr	r3, [pc, #188]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c394:	0f1b      	lsrs	r3, r3, #28
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	019a      	lsls	r2, r3, #6
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	041b      	lsls	r3, r3, #16
 800c3a8:	431a      	orrs	r2, r3
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	061b      	lsls	r3, r3, #24
 800c3ae:	431a      	orrs	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	071b      	lsls	r3, r3, #28
 800c3b4:	4925      	ldr	r1, [pc, #148]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d011      	beq.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	019a      	lsls	r2, r3, #6
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	041b      	lsls	r3, r3, #16
 800c3d4:	431a      	orrs	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	061b      	lsls	r3, r3, #24
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	071b      	lsls	r3, r3, #28
 800c3e4:	4919      	ldr	r1, [pc, #100]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c3ec:	4b17      	ldr	r3, [pc, #92]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a16      	ldr	r2, [pc, #88]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c3f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c3f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3f8:	f7f9 ff00 	bl	80061fc <HAL_GetTick>
 800c3fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3fe:	e008      	b.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c400:	f7f9 fefc 	bl	80061fc <HAL_GetTick>
 800c404:	4602      	mov	r2, r0
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	2b64      	cmp	r3, #100	; 0x64
 800c40c:	d901      	bls.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c40e:	2303      	movs	r3, #3
 800c410:	e0d7      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c412:	4b0e      	ldr	r3, [pc, #56]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d0f0      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	2b01      	cmp	r3, #1
 800c422:	f040 80cd 	bne.w	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c426:	4b09      	ldr	r3, [pc, #36]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a08      	ldr	r2, [pc, #32]	; (800c44c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c42c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c432:	f7f9 fee3 	bl	80061fc <HAL_GetTick>
 800c436:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c438:	e00a      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c43a:	f7f9 fedf 	bl	80061fc <HAL_GetTick>
 800c43e:	4602      	mov	r2, r0
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	2b64      	cmp	r3, #100	; 0x64
 800c446:	d903      	bls.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c448:	2303      	movs	r3, #3
 800c44a:	e0ba      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c44c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c450:	4b5e      	ldr	r3, [pc, #376]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c45c:	d0ed      	beq.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d009      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d02e      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c482:	2b00      	cmp	r3, #0
 800c484:	d12a      	bne.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c486:	4b51      	ldr	r3, [pc, #324]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c48c:	0c1b      	lsrs	r3, r3, #16
 800c48e:	f003 0303 	and.w	r3, r3, #3
 800c492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c494:	4b4d      	ldr	r3, [pc, #308]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c49a:	0f1b      	lsrs	r3, r3, #28
 800c49c:	f003 0307 	and.w	r3, r3, #7
 800c4a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	695b      	ldr	r3, [r3, #20]
 800c4a6:	019a      	lsls	r2, r3, #6
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	041b      	lsls	r3, r3, #16
 800c4ac:	431a      	orrs	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	061b      	lsls	r3, r3, #24
 800c4b4:	431a      	orrs	r2, r3
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	071b      	lsls	r3, r3, #28
 800c4ba:	4944      	ldr	r1, [pc, #272]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c4c2:	4b42      	ldr	r3, [pc, #264]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c4c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	021b      	lsls	r3, r3, #8
 800c4d4:	493d      	ldr	r1, [pc, #244]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d022      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4f0:	d11d      	bne.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c4f2:	4b36      	ldr	r3, [pc, #216]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4f8:	0e1b      	lsrs	r3, r3, #24
 800c4fa:	f003 030f 	and.w	r3, r3, #15
 800c4fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c500:	4b32      	ldr	r3, [pc, #200]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c506:	0f1b      	lsrs	r3, r3, #28
 800c508:	f003 0307 	and.w	r3, r3, #7
 800c50c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	019a      	lsls	r2, r3, #6
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a1b      	ldr	r3, [r3, #32]
 800c518:	041b      	lsls	r3, r3, #16
 800c51a:	431a      	orrs	r2, r3
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	061b      	lsls	r3, r3, #24
 800c520:	431a      	orrs	r2, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	071b      	lsls	r3, r3, #28
 800c526:	4929      	ldr	r1, [pc, #164]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c528:	4313      	orrs	r3, r2
 800c52a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f003 0308 	and.w	r3, r3, #8
 800c536:	2b00      	cmp	r3, #0
 800c538:	d028      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c53a:	4b24      	ldr	r3, [pc, #144]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c540:	0e1b      	lsrs	r3, r3, #24
 800c542:	f003 030f 	and.w	r3, r3, #15
 800c546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c548:	4b20      	ldr	r3, [pc, #128]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c54e:	0c1b      	lsrs	r3, r3, #16
 800c550:	f003 0303 	and.w	r3, r3, #3
 800c554:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	695b      	ldr	r3, [r3, #20]
 800c55a:	019a      	lsls	r2, r3, #6
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	041b      	lsls	r3, r3, #16
 800c560:	431a      	orrs	r2, r3
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	061b      	lsls	r3, r3, #24
 800c566:	431a      	orrs	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	071b      	lsls	r3, r3, #28
 800c56e:	4917      	ldr	r1, [pc, #92]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c570:	4313      	orrs	r3, r2
 800c572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c576:	4b15      	ldr	r3, [pc, #84]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c57c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c584:	4911      	ldr	r1, [pc, #68]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c586:	4313      	orrs	r3, r2
 800c588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c58c:	4b0f      	ldr	r3, [pc, #60]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a0e      	ldr	r2, [pc, #56]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c598:	f7f9 fe30 	bl	80061fc <HAL_GetTick>
 800c59c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c59e:	e008      	b.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c5a0:	f7f9 fe2c 	bl	80061fc <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	2b64      	cmp	r3, #100	; 0x64
 800c5ac:	d901      	bls.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	e007      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5b2:	4b06      	ldr	r3, [pc, #24]	; (800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5be:	d1ef      	bne.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3720      	adds	r7, #32
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	40023800 	.word	0x40023800

0800c5d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b087      	sub	sp, #28
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c5ee:	f040 808c 	bne.w	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c5f2:	4b95      	ldr	r3, [pc, #596]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c5f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5f8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c600:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c608:	d07c      	beq.n	800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c610:	d87d      	bhi.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d004      	beq.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c61e:	d039      	beq.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c620:	e075      	b.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c622:	4b89      	ldr	r3, [pc, #548]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d108      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c62e:	4b86      	ldr	r3, [pc, #536]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c636:	4a85      	ldr	r2, [pc, #532]	; (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c638:	fbb2 f3f3 	udiv	r3, r2, r3
 800c63c:	613b      	str	r3, [r7, #16]
 800c63e:	e007      	b.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c640:	4b81      	ldr	r3, [pc, #516]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c648:	4a81      	ldr	r2, [pc, #516]	; (800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c64e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c650:	4b7d      	ldr	r3, [pc, #500]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c656:	0e1b      	lsrs	r3, r3, #24
 800c658:	f003 030f 	and.w	r3, r3, #15
 800c65c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c65e:	4b7a      	ldr	r3, [pc, #488]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c664:	099b      	lsrs	r3, r3, #6
 800c666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c66a:	693a      	ldr	r2, [r7, #16]
 800c66c:	fb02 f203 	mul.w	r2, r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	fbb2 f3f3 	udiv	r3, r2, r3
 800c676:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c678:	4b73      	ldr	r3, [pc, #460]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c67a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c67e:	0a1b      	lsrs	r3, r3, #8
 800c680:	f003 031f 	and.w	r3, r3, #31
 800c684:	3301      	adds	r3, #1
 800c686:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c690:	617b      	str	r3, [r7, #20]
        break;
 800c692:	e03d      	b.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c694:	4b6c      	ldr	r3, [pc, #432]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d108      	bne.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c6a0:	4b69      	ldr	r3, [pc, #420]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6a8:	4a68      	ldr	r2, [pc, #416]	; (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c6aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6ae:	613b      	str	r3, [r7, #16]
 800c6b0:	e007      	b.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c6b2:	4b65      	ldr	r3, [pc, #404]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6ba:	4a65      	ldr	r2, [pc, #404]	; (800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6c0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c6c2:	4b61      	ldr	r3, [pc, #388]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6c8:	0e1b      	lsrs	r3, r3, #24
 800c6ca:	f003 030f 	and.w	r3, r3, #15
 800c6ce:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c6d0:	4b5d      	ldr	r3, [pc, #372]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6d6:	099b      	lsrs	r3, r3, #6
 800c6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	fb02 f203 	mul.w	r2, r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c6ea:	4b57      	ldr	r3, [pc, #348]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6f0:	f003 031f 	and.w	r3, r3, #31
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c6f8:	697a      	ldr	r2, [r7, #20]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c700:	617b      	str	r3, [r7, #20]
        break;
 800c702:	e005      	b.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c704:	4b53      	ldr	r3, [pc, #332]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c706:	617b      	str	r3, [r7, #20]
        break;
 800c708:	e002      	b.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800c70a:	bf00      	nop
 800c70c:	e000      	b.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800c70e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c716:	f040 808c 	bne.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c71a:	4b4b      	ldr	r3, [pc, #300]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c720:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c728:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c730:	d07c      	beq.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c738:	d87d      	bhi.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d004      	beq.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c746:	d039      	beq.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c748:	e075      	b.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c74a:	4b3f      	ldr	r3, [pc, #252]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d108      	bne.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c756:	4b3c      	ldr	r3, [pc, #240]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c75e:	4a3b      	ldr	r2, [pc, #236]	; (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c760:	fbb2 f3f3 	udiv	r3, r2, r3
 800c764:	613b      	str	r3, [r7, #16]
 800c766:	e007      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c768:	4b37      	ldr	r3, [pc, #220]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c770:	4a37      	ldr	r2, [pc, #220]	; (800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c772:	fbb2 f3f3 	udiv	r3, r2, r3
 800c776:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c778:	4b33      	ldr	r3, [pc, #204]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c77e:	0e1b      	lsrs	r3, r3, #24
 800c780:	f003 030f 	and.w	r3, r3, #15
 800c784:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c786:	4b30      	ldr	r3, [pc, #192]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c78c:	099b      	lsrs	r3, r3, #6
 800c78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	fb02 f203 	mul.w	r2, r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c79e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c7a0:	4b29      	ldr	r3, [pc, #164]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7a6:	0a1b      	lsrs	r3, r3, #8
 800c7a8:	f003 031f 	and.w	r3, r3, #31
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c7b0:	697a      	ldr	r2, [r7, #20]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7b8:	617b      	str	r3, [r7, #20]
        break;
 800c7ba:	e03d      	b.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c7bc:	4b22      	ldr	r3, [pc, #136]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d108      	bne.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c7c8:	4b1f      	ldr	r3, [pc, #124]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7d0:	4a1e      	ldr	r2, [pc, #120]	; (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d6:	613b      	str	r3, [r7, #16]
 800c7d8:	e007      	b.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c7da:	4b1b      	ldr	r3, [pc, #108]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7e2:	4a1b      	ldr	r2, [pc, #108]	; (800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800c7e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7e8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c7ea:	4b17      	ldr	r3, [pc, #92]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7f0:	0e1b      	lsrs	r3, r3, #24
 800c7f2:	f003 030f 	and.w	r3, r3, #15
 800c7f6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c7f8:	4b13      	ldr	r3, [pc, #76]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7fe:	099b      	lsrs	r3, r3, #6
 800c800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	fb02 f203 	mul.w	r2, r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c810:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c812:	4b0d      	ldr	r3, [pc, #52]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c818:	f003 031f 	and.w	r3, r3, #31
 800c81c:	3301      	adds	r3, #1
 800c81e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	fbb2 f3f3 	udiv	r3, r2, r3
 800c828:	617b      	str	r3, [r7, #20]
        break;
 800c82a:	e005      	b.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c82c:	4b09      	ldr	r3, [pc, #36]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800c82e:	617b      	str	r3, [r7, #20]
        break;
 800c830:	e002      	b.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800c832:	bf00      	nop
 800c834:	e000      	b.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800c836:	bf00      	nop

  return frequency;
 800c838:	697b      	ldr	r3, [r7, #20]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	371c      	adds	r7, #28
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	40023800 	.word	0x40023800
 800c84c:	00f42400 	.word	0x00f42400
 800c850:	017d7840 	.word	0x017d7840
 800c854:	00bb8000 	.word	0x00bb8000

0800c858 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e01c      	b.n	800c8a4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	795b      	ldrb	r3, [r3, #5]
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d105      	bne.n	800c880 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7f6 fb54 	bl	8002f28 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2202      	movs	r2, #2
 800c884:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f042 0204 	orr.w	r2, r2, #4
 800c894:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d101      	bne.n	800c8be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e081      	b.n	800c9c2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	7f5b      	ldrb	r3, [r3, #29]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d105      	bne.n	800c8d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7f6 fb4a 	bl	8002f68 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	22ca      	movs	r2, #202	; 0xca
 800c8e0:	625a      	str	r2, [r3, #36]	; 0x24
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2253      	movs	r2, #83	; 0x53
 800c8e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fb16 	bl	800cf1c <RTC_EnterInitMode>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d008      	beq.n	800c908 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	22ff      	movs	r2, #255	; 0xff
 800c8fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2204      	movs	r2, #4
 800c902:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e05c      	b.n	800c9c2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6899      	ldr	r1, [r3, #8]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	4b2e      	ldr	r3, [pc, #184]	; (800c9cc <HAL_RTC_Init+0x120>)
 800c914:	400b      	ands	r3, r1
 800c916:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6899      	ldr	r1, [r3, #8]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	431a      	orrs	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	431a      	orrs	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	430a      	orrs	r2, r1
 800c934:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	68d2      	ldr	r2, [r2, #12]
 800c93e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	6919      	ldr	r1, [r3, #16]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	041a      	lsls	r2, r3, #16
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	430a      	orrs	r2, r1
 800c952:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68da      	ldr	r2, [r3, #12]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c962:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	f003 0320 	and.w	r3, r3, #32
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10e      	bne.n	800c990 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 faaa 	bl	800cecc <HAL_RTC_WaitForSynchro>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d008      	beq.n	800c990 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	22ff      	movs	r2, #255	; 0xff
 800c984:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2204      	movs	r2, #4
 800c98a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	e018      	b.n	800c9c2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f022 0208 	bic.w	r2, r2, #8
 800c99e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	699a      	ldr	r2, [r3, #24]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	430a      	orrs	r2, r1
 800c9b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	22ff      	movs	r2, #255	; 0xff
 800c9b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
  }
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	ff8fffbf 	.word	0xff8fffbf

0800c9d0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c9d0:	b590      	push	{r4, r7, lr}
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	7f1b      	ldrb	r3, [r3, #28]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d101      	bne.n	800c9ec <HAL_RTC_SetTime+0x1c>
 800c9e8:	2302      	movs	r3, #2
 800c9ea:	e0a8      	b.n	800cb3e <HAL_RTC_SetTime+0x16e>
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2202      	movs	r2, #2
 800c9f6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d126      	bne.n	800ca4c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d102      	bne.n	800ca12 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 faac 	bl	800cf74 <RTC_ByteToBcd2>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	785b      	ldrb	r3, [r3, #1]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f000 faa5 	bl	800cf74 <RTC_ByteToBcd2>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ca2e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	789b      	ldrb	r3, [r3, #2]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 fa9d 	bl	800cf74 <RTC_ByteToBcd2>
 800ca3a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ca3c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	7b1b      	ldrb	r3, [r3, #12]
 800ca44:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ca46:	4313      	orrs	r3, r2
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	e018      	b.n	800ca7e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d102      	bne.n	800ca60 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	785b      	ldrb	r3, [r3, #1]
 800ca6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ca6c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ca72:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	7b1b      	ldrb	r3, [r3, #12]
 800ca78:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	22ca      	movs	r2, #202	; 0xca
 800ca84:	625a      	str	r2, [r3, #36]	; 0x24
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2253      	movs	r2, #83	; 0x53
 800ca8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	f000 fa44 	bl	800cf1c <RTC_EnterInitMode>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00b      	beq.n	800cab2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	22ff      	movs	r2, #255	; 0xff
 800caa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2204      	movs	r2, #4
 800caa6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e045      	b.n	800cb3e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	6979      	ldr	r1, [r7, #20]
 800cab8:	4b23      	ldr	r3, [pc, #140]	; (800cb48 <HAL_RTC_SetTime+0x178>)
 800caba:	400b      	ands	r3, r1
 800cabc:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	689a      	ldr	r2, [r3, #8]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cacc:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	6899      	ldr	r1, [r3, #8]
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	691a      	ldr	r2, [r3, #16]
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	431a      	orrs	r2, r3
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	430a      	orrs	r2, r1
 800cae4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68da      	ldr	r2, [r3, #12]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800caf4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	f003 0320 	and.w	r3, r3, #32
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d111      	bne.n	800cb28 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f000 f9e1 	bl	800cecc <HAL_RTC_WaitForSynchro>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00b      	beq.n	800cb28 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	22ff      	movs	r2, #255	; 0xff
 800cb16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2204      	movs	r2, #4
 800cb1c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cb24:	2301      	movs	r3, #1
 800cb26:	e00a      	b.n	800cb3e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	22ff      	movs	r2, #255	; 0xff
 800cb2e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2201      	movs	r2, #1
 800cb34:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
  }
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	371c      	adds	r7, #28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd90      	pop	{r4, r7, pc}
 800cb46:	bf00      	nop
 800cb48:	007f7f7f 	.word	0x007f7f7f

0800cb4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cb4c:	b590      	push	{r4, r7, lr}
 800cb4e:	b087      	sub	sp, #28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	7f1b      	ldrb	r3, [r3, #28]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d101      	bne.n	800cb68 <HAL_RTC_SetDate+0x1c>
 800cb64:	2302      	movs	r3, #2
 800cb66:	e092      	b.n	800cc8e <HAL_RTC_SetDate+0x142>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2202      	movs	r2, #2
 800cb72:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10e      	bne.n	800cb98 <HAL_RTC_SetDate+0x4c>
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	785b      	ldrb	r3, [r3, #1]
 800cb7e:	f003 0310 	and.w	r3, r3, #16
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d008      	beq.n	800cb98 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	785b      	ldrb	r3, [r3, #1]
 800cb8a:	f023 0310 	bic.w	r3, r3, #16
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	330a      	adds	r3, #10
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d11c      	bne.n	800cbd8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	78db      	ldrb	r3, [r3, #3]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 f9e6 	bl	800cf74 <RTC_ByteToBcd2>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	785b      	ldrb	r3, [r3, #1]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 f9df 	bl	800cf74 <RTC_ByteToBcd2>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cbba:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	789b      	ldrb	r3, [r3, #2]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 f9d7 	bl	800cf74 <RTC_ByteToBcd2>
 800cbc6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800cbc8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	617b      	str	r3, [r7, #20]
 800cbd6:	e00e      	b.n	800cbf6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	78db      	ldrb	r3, [r3, #3]
 800cbdc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	785b      	ldrb	r3, [r3, #1]
 800cbe2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cbe4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800cbea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	22ca      	movs	r2, #202	; 0xca
 800cbfc:	625a      	str	r2, [r3, #36]	; 0x24
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2253      	movs	r2, #83	; 0x53
 800cc04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f000 f988 	bl	800cf1c <RTC_EnterInitMode>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00b      	beq.n	800cc2a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	22ff      	movs	r2, #255	; 0xff
 800cc18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2204      	movs	r2, #4
 800cc1e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e031      	b.n	800cc8e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	6979      	ldr	r1, [r7, #20]
 800cc30:	4b19      	ldr	r3, [pc, #100]	; (800cc98 <HAL_RTC_SetDate+0x14c>)
 800cc32:	400b      	ands	r3, r1
 800cc34:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68da      	ldr	r2, [r3, #12]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc44:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	f003 0320 	and.w	r3, r3, #32
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d111      	bne.n	800cc78 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f000 f939 	bl	800cecc <HAL_RTC_WaitForSynchro>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00b      	beq.n	800cc78 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	22ff      	movs	r2, #255	; 0xff
 800cc66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2204      	movs	r2, #4
 800cc6c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	e00a      	b.n	800cc8e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	22ff      	movs	r2, #255	; 0xff
 800cc7e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2201      	movs	r2, #1
 800cc84:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
  }
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	371c      	adds	r7, #28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd90      	pop	{r4, r7, pc}
 800cc96:	bf00      	nop
 800cc98:	00ffff3f 	.word	0x00ffff3f

0800cc9c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cc9c:	b590      	push	{r4, r7, lr}
 800cc9e:	b089      	sub	sp, #36	; 0x24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	61fb      	str	r3, [r7, #28]
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	7f1b      	ldrb	r3, [r3, #28]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d101      	bne.n	800ccc0 <HAL_RTC_SetAlarm+0x24>
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	e101      	b.n	800cec4 <HAL_RTC_SetAlarm+0x228>
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2202      	movs	r2, #2
 800ccca:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d137      	bne.n	800cd42 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d102      	bne.n	800cce6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2200      	movs	r2, #0
 800cce4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 f942 	bl	800cf74 <RTC_ByteToBcd2>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	785b      	ldrb	r3, [r3, #1]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 f93b 	bl	800cf74 <RTC_ByteToBcd2>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800cd02:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	789b      	ldrb	r3, [r3, #2]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 f933 	bl	800cf74 <RTC_ByteToBcd2>
 800cd0e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800cd10:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	7b1b      	ldrb	r3, [r3, #12]
 800cd18:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cd1a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 f925 	bl	800cf74 <RTC_ByteToBcd2>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cd2e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800cd36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	61fb      	str	r3, [r7, #28]
 800cd40:	e023      	b.n	800cd8a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d102      	bne.n	800cd56 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	2200      	movs	r2, #0
 800cd54:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	785b      	ldrb	r3, [r3, #1]
 800cd60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cd62:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800cd68:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	7b1b      	ldrb	r3, [r3, #12]
 800cd6e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800cd70:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cd78:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800cd7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800cd80:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800cd86:	4313      	orrs	r3, r2
 800cd88:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	685a      	ldr	r2, [r3, #4]
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	69db      	ldr	r3, [r3, #28]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	22ca      	movs	r2, #202	; 0xca
 800cd9c:	625a      	str	r2, [r3, #36]	; 0x24
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2253      	movs	r2, #83	; 0x53
 800cda4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdae:	d13f      	bne.n	800ce30 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	689a      	ldr	r2, [r3, #8]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cdbe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	689a      	ldr	r2, [r3, #8]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cdce:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cdd0:	f7f9 fa14 	bl	80061fc <HAL_GetTick>
 800cdd4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800cdd6:	e013      	b.n	800ce00 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cdd8:	f7f9 fa10 	bl	80061fc <HAL_GetTick>
 800cddc:	4602      	mov	r2, r0
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cde6:	d90b      	bls.n	800ce00 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	22ff      	movs	r2, #255	; 0xff
 800cdee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2203      	movs	r2, #3
 800cdf4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	e061      	b.n	800cec4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	f003 0301 	and.w	r3, r3, #1
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0e4      	beq.n	800cdd8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	69fa      	ldr	r2, [r7, #28]
 800ce14:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	689a      	ldr	r2, [r3, #8]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce2c:	609a      	str	r2, [r3, #8]
 800ce2e:	e03e      	b.n	800ceae <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	689a      	ldr	r2, [r3, #8]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ce3e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689a      	ldr	r2, [r3, #8]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ce4e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ce50:	f7f9 f9d4 	bl	80061fc <HAL_GetTick>
 800ce54:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800ce56:	e013      	b.n	800ce80 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ce58:	f7f9 f9d0 	bl	80061fc <HAL_GetTick>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce66:	d90b      	bls.n	800ce80 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	22ff      	movs	r2, #255	; 0xff
 800ce6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2203      	movs	r2, #3
 800ce74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	e021      	b.n	800cec4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	f003 0302 	and.w	r3, r3, #2
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0e4      	beq.n	800ce58 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	69fa      	ldr	r2, [r7, #28]
 800ce94:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	689a      	ldr	r2, [r3, #8]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ceac:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	22ff      	movs	r2, #255	; 0xff
 800ceb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3724      	adds	r7, #36	; 0x24
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd90      	pop	{r4, r7, pc}

0800cecc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68da      	ldr	r2, [r3, #12]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cee6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cee8:	f7f9 f988 	bl	80061fc <HAL_GetTick>
 800ceec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ceee:	e009      	b.n	800cf04 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cef0:	f7f9 f984 	bl	80061fc <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cefe:	d901      	bls.n	800cf04 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cf00:	2303      	movs	r3, #3
 800cf02:	e007      	b.n	800cf14 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	f003 0320 	and.w	r3, r3, #32
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0ee      	beq.n	800cef0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d119      	bne.n	800cf6a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cf40:	f7f9 f95c 	bl	80061fc <HAL_GetTick>
 800cf44:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cf46:	e009      	b.n	800cf5c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cf48:	f7f9 f958 	bl	80061fc <HAL_GetTick>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf56:	d901      	bls.n	800cf5c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	e007      	b.n	800cf6c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0ee      	beq.n	800cf48 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800cf82:	e005      	b.n	800cf90 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	3301      	adds	r3, #1
 800cf88:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	3b0a      	subs	r3, #10
 800cf8e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800cf90:	79fb      	ldrb	r3, [r7, #7]
 800cf92:	2b09      	cmp	r3, #9
 800cf94:	d8f6      	bhi.n	800cf84 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	011b      	lsls	r3, r3, #4
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	79fb      	ldrb	r3, [r7, #7]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	b2db      	uxtb	r3, r3
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b087      	sub	sp, #28
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	7f1b      	ldrb	r3, [r3, #28]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d101      	bne.n	800cfcc <HAL_RTCEx_SetTimeStamp+0x1c>
 800cfc8:	2302      	movs	r3, #2
 800cfca:	e03e      	b.n	800d04a <HAL_RTCEx_SetTimeStamp+0x9a>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	689a      	ldr	r2, [r3, #8]
 800cfde:	4b1e      	ldr	r3, [pc, #120]	; (800d058 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	22ca      	movs	r2, #202	; 0xca
 800cff2:	625a      	str	r2, [r3, #36]	; 0x24
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2253      	movs	r2, #83	; 0x53
 800cffa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f022 0206 	bic.w	r2, r2, #6
 800d00a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	430a      	orrs	r2, r1
 800d01a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	697a      	ldr	r2, [r7, #20]
 800d022:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	689a      	ldr	r2, [r3, #8]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d032:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	22ff      	movs	r2, #255	; 0xff
 800d03a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2201      	movs	r2, #1
 800d040:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d048:	2300      	movs	r3, #0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	371c      	adds	r7, #28
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	fffff7f7 	.word	0xfffff7f7

0800d05c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b088      	sub	sp, #32
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e156      	b.n	800d328 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800d080:	b2db      	uxtb	r3, r3
 800d082:	2b00      	cmp	r3, #0
 800d084:	d106      	bne.n	800d094 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7f6 fbba 	bl	8003808 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2202      	movs	r2, #2
 800d098:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 f95b 	bl	800d358 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d00c      	beq.n	800d0c4 <HAL_SAI_Init+0x68>
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d80d      	bhi.n	800d0ca <HAL_SAI_Init+0x6e>
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <HAL_SAI_Init+0x5c>
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d003      	beq.n	800d0be <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800d0b6:	e008      	b.n	800d0ca <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	61fb      	str	r3, [r7, #28]
      break;
 800d0bc:	e006      	b.n	800d0cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d0be:	2310      	movs	r3, #16
 800d0c0:	61fb      	str	r3, [r7, #28]
      break;
 800d0c2:	e003      	b.n	800d0cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d0c4:	2320      	movs	r3, #32
 800d0c6:	61fb      	str	r3, [r7, #28]
      break;
 800d0c8:	e000      	b.n	800d0cc <HAL_SAI_Init+0x70>
      break;
 800d0ca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	2b03      	cmp	r3, #3
 800d0d2:	d81e      	bhi.n	800d112 <HAL_SAI_Init+0xb6>
 800d0d4:	a201      	add	r2, pc, #4	; (adr r2, 800d0dc <HAL_SAI_Init+0x80>)
 800d0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0da:	bf00      	nop
 800d0dc:	0800d0ed 	.word	0x0800d0ed
 800d0e0:	0800d0f3 	.word	0x0800d0f3
 800d0e4:	0800d0fb 	.word	0x0800d0fb
 800d0e8:	0800d103 	.word	0x0800d103
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	617b      	str	r3, [r7, #20]
    }
    break;
 800d0f0:	e010      	b.n	800d114 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0f6:	617b      	str	r3, [r7, #20]
    }
    break;
 800d0f8:	e00c      	b.n	800d114 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d0fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0fe:	617b      	str	r3, [r7, #20]
    }
    break;
 800d100:	e008      	b.n	800d114 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d106:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	f043 0301 	orr.w	r3, r3, #1
 800d10e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800d110:	e000      	b.n	800d114 <HAL_SAI_Init+0xb8>
    default:
      break;
 800d112:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a85      	ldr	r2, [pc, #532]	; (800d330 <HAL_SAI_Init+0x2d4>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d004      	beq.n	800d128 <HAL_SAI_Init+0xcc>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a84      	ldr	r2, [pc, #528]	; (800d334 <HAL_SAI_Init+0x2d8>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d103      	bne.n	800d130 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d128:	4a83      	ldr	r2, [pc, #524]	; (800d338 <HAL_SAI_Init+0x2dc>)
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	e002      	b.n	800d136 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d130:	4a82      	ldr	r2, [pc, #520]	; (800d33c <HAL_SAI_Init+0x2e0>)
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	69db      	ldr	r3, [r3, #28]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d04c      	beq.n	800d1d8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a7a      	ldr	r2, [pc, #488]	; (800d330 <HAL_SAI_Init+0x2d4>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d004      	beq.n	800d156 <HAL_SAI_Init+0xfa>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a78      	ldr	r2, [pc, #480]	; (800d334 <HAL_SAI_Init+0x2d8>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d104      	bne.n	800d160 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d156:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d15a:	f7ff fa39 	bl	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d15e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a76      	ldr	r2, [pc, #472]	; (800d340 <HAL_SAI_Init+0x2e4>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d004      	beq.n	800d174 <HAL_SAI_Init+0x118>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a75      	ldr	r2, [pc, #468]	; (800d344 <HAL_SAI_Init+0x2e8>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d104      	bne.n	800d17e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d174:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d178:	f7ff fa2a 	bl	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d17c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	4613      	mov	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4413      	add	r3, r2
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	461a      	mov	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	69db      	ldr	r3, [r3, #28]
 800d18e:	025b      	lsls	r3, r3, #9
 800d190:	fbb2 f3f3 	udiv	r3, r2, r3
 800d194:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	4a6b      	ldr	r2, [pc, #428]	; (800d348 <HAL_SAI_Init+0x2ec>)
 800d19a:	fba2 2303 	umull	r2, r3, r2, r3
 800d19e:	08da      	lsrs	r2, r3, #3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d1a4:	68f9      	ldr	r1, [r7, #12]
 800d1a6:	4b68      	ldr	r3, [pc, #416]	; (800d348 <HAL_SAI_Init+0x2ec>)
 800d1a8:	fba3 2301 	umull	r2, r3, r3, r1
 800d1ac:	08da      	lsrs	r2, r3, #3
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	1aca      	subs	r2, r1, r3
 800d1b8:	2a08      	cmp	r2, #8
 800d1ba:	d904      	bls.n	800d1c6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a1b      	ldr	r3, [r3, #32]
 800d1c0:	1c5a      	adds	r2, r3, #1
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ca:	2b04      	cmp	r3, #4
 800d1cc:	d104      	bne.n	800d1d8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a1b      	ldr	r3, [r3, #32]
 800d1d2:	085a      	lsrs	r2, r3, #1
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d003      	beq.n	800d1e8 <HAL_SAI_Init+0x18c>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	d109      	bne.n	800d1fc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d101      	bne.n	800d1f4 <HAL_SAI_Init+0x198>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	e001      	b.n	800d1f8 <HAL_SAI_Init+0x19c>
 800d1f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1f8:	61bb      	str	r3, [r7, #24]
 800d1fa:	e008      	b.n	800d20e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d200:	2b01      	cmp	r3, #1
 800d202:	d102      	bne.n	800d20a <HAL_SAI_Init+0x1ae>
 800d204:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d208:	e000      	b.n	800d20c <HAL_SAI_Init+0x1b0>
 800d20a:	2300      	movs	r3, #0
 800d20c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6819      	ldr	r1, [r3, #0]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	4b4c      	ldr	r3, [pc, #304]	; (800d34c <HAL_SAI_Init+0x2f0>)
 800d21a:	400b      	ands	r3, r1
 800d21c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6819      	ldr	r1, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685a      	ldr	r2, [r3, #4]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d22c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d232:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d238:	431a      	orrs	r2, r3
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800d246:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d252:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a1b      	ldr	r3, [r3, #32]
 800d258:	051b      	lsls	r3, r3, #20
 800d25a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	430a      	orrs	r2, r1
 800d262:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6859      	ldr	r1, [r3, #4]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	4b38      	ldr	r3, [pc, #224]	; (800d350 <HAL_SAI_Init+0x2f4>)
 800d270:	400b      	ands	r3, r1
 800d272:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6859      	ldr	r1, [r3, #4]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	699a      	ldr	r2, [r3, #24]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d282:	431a      	orrs	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	431a      	orrs	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	430a      	orrs	r2, r1
 800d290:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6899      	ldr	r1, [r3, #8]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	4b2d      	ldr	r3, [pc, #180]	; (800d354 <HAL_SAI_Init+0x2f8>)
 800d29e:	400b      	ands	r3, r1
 800d2a0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6899      	ldr	r1, [r3, #8]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d2b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800d2b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800d2be:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d2c8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	430a      	orrs	r2, r1
 800d2d0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68d9      	ldr	r1, [r3, #12]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d2e0:	400b      	ands	r3, r1
 800d2e2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68d9      	ldr	r1, [r3, #12]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2f2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2f8:	041b      	lsls	r3, r3, #16
 800d2fa:	431a      	orrs	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d300:	3b01      	subs	r3, #1
 800d302:	021b      	lsls	r3, r3, #8
 800d304:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	430a      	orrs	r2, r1
 800d30c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2201      	movs	r2, #1
 800d31a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d326:	2300      	movs	r3, #0
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3720      	adds	r7, #32
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	40015804 	.word	0x40015804
 800d334:	40015824 	.word	0x40015824
 800d338:	40015800 	.word	0x40015800
 800d33c:	40015c00 	.word	0x40015c00
 800d340:	40015c04 	.word	0x40015c04
 800d344:	40015c24 	.word	0x40015c24
 800d348:	cccccccd 	.word	0xcccccccd
 800d34c:	ff05c010 	.word	0xff05c010
 800d350:	ffff1ff0 	.word	0xffff1ff0
 800d354:	fff88000 	.word	0xfff88000

0800d358 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d360:	4b17      	ldr	r3, [pc, #92]	; (800d3c0 <SAI_Disable+0x68>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a17      	ldr	r2, [pc, #92]	; (800d3c4 <SAI_Disable+0x6c>)
 800d366:	fba2 2303 	umull	r2, r3, r2, r3
 800d36a:	0b1b      	lsrs	r3, r3, #12
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d382:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	1e5a      	subs	r2, r3, #1
 800d388:	60fa      	str	r2, [r7, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d10a      	bne.n	800d3a4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	72fb      	strb	r3, [r7, #11]
      break;
 800d3a2:	e006      	b.n	800d3b2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1e8      	bne.n	800d384 <SAI_Disable+0x2c>

  return status;
 800d3b2:	7afb      	ldrb	r3, [r7, #11]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	20000000 	.word	0x20000000
 800d3c4:	95cbec1b 	.word	0x95cbec1b

0800d3c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e022      	b.n	800d420 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d105      	bne.n	800d3f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7f5 fdd5 	bl	8002f9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2203      	movs	r2, #3
 800d3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f814 	bl	800d428 <HAL_SD_InitCard>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e00a      	b.n	800d420 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d428:	b5b0      	push	{r4, r5, r7, lr}
 800d42a:	b08e      	sub	sp, #56	; 0x38
 800d42c:	af04      	add	r7, sp, #16
 800d42e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d430:	2300      	movs	r3, #0
 800d432:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800d434:	2300      	movs	r3, #0
 800d436:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d438:	2300      	movs	r3, #0
 800d43a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d43c:	2300      	movs	r3, #0
 800d43e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d440:	2300      	movs	r3, #0
 800d442:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800d444:	2376      	movs	r3, #118	; 0x76
 800d446:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681d      	ldr	r5, [r3, #0]
 800d44c:	466c      	mov	r4, sp
 800d44e:	f107 0314 	add.w	r3, r7, #20
 800d452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d45a:	f107 0308 	add.w	r3, r7, #8
 800d45e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d460:	4628      	mov	r0, r5
 800d462:	f003 fcf9 	bl	8010e58 <SDMMC_Init>
 800d466:	4603      	mov	r3, r0
 800d468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d474:	2301      	movs	r3, #1
 800d476:	e056      	b.n	800d526 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	685a      	ldr	r2, [r3, #4]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d486:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f003 fd2d 	bl	8010eec <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	685a      	ldr	r2, [r3, #4]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4a0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fff2 	bl	800e48c <SD_PowerON>
 800d4a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4aa:	6a3b      	ldr	r3, [r7, #32]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00b      	beq.n	800d4c8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4bc:	6a3b      	ldr	r3, [r7, #32]
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e02e      	b.n	800d526 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 ff13 	bl	800e2f4 <SD_InitCard>
 800d4ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4d0:	6a3b      	ldr	r3, [r7, #32]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00b      	beq.n	800d4ee <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	431a      	orrs	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e01b      	b.n	800d526 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f003 fd8c 	bl	8011014 <SDMMC_CmdBlockLength>
 800d4fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4fe:	6a3b      	ldr	r3, [r7, #32]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00f      	beq.n	800d524 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a09      	ldr	r2, [pc, #36]	; (800d530 <HAL_SD_InitCard+0x108>)
 800d50a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d510:	6a3b      	ldr	r3, [r7, #32]
 800d512:	431a      	orrs	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e000      	b.n	800d526 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3728      	adds	r7, #40	; 0x28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bdb0      	pop	{r4, r5, r7, pc}
 800d52e:	bf00      	nop
 800d530:	004005ff 	.word	0x004005ff

0800d534 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b08c      	sub	sp, #48	; 0x30
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	607a      	str	r2, [r7, #4]
 800d540:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d107      	bne.n	800d55c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d550:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	e0c3      	b.n	800d6e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2b01      	cmp	r3, #1
 800d566:	f040 80bc 	bne.w	800d6e2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	441a      	add	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d907      	bls.n	800d58e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d582:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	e0aa      	b.n	800d6e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2203      	movs	r2, #3
 800d592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2200      	movs	r2, #0
 800d59c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d5ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b2:	4a4e      	ldr	r2, [pc, #312]	; (800d6ec <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d5b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ba:	4a4d      	ldr	r2, [pc, #308]	; (800d6f0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d5bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5de:	689a      	ldr	r2, [r3, #8]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	430a      	orrs	r2, r1
 800d5e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	3380      	adds	r3, #128	; 0x80
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	68ba      	ldr	r2, [r7, #8]
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	025b      	lsls	r3, r3, #9
 800d5fc:	089b      	lsrs	r3, r3, #2
 800d5fe:	f7f9 fc07 	bl	8006e10 <HAL_DMA_Start_IT>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d017      	beq.n	800d638 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d616:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a35      	ldr	r2, [pc, #212]	; (800d6f4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d61e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d624:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e055      	b.n	800d6e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f042 0208 	orr.w	r2, r2, #8
 800d646:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d002      	beq.n	800d656 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	025b      	lsls	r3, r3, #9
 800d654:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d65a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	025b      	lsls	r3, r3, #9
 800d660:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d662:	2390      	movs	r3, #144	; 0x90
 800d664:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d666:	2302      	movs	r3, #2
 800d668:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d66e:	2301      	movs	r3, #1
 800d670:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f107 0210 	add.w	r2, r7, #16
 800d67a:	4611      	mov	r1, r2
 800d67c:	4618      	mov	r0, r3
 800d67e:	f003 fc9d 	bl	8010fbc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	2b01      	cmp	r3, #1
 800d686:	d90a      	bls.n	800d69e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2282      	movs	r2, #130	; 0x82
 800d68c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d694:	4618      	mov	r0, r3
 800d696:	f003 fd01 	bl	801109c <SDMMC_CmdReadMultiBlock>
 800d69a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d69c:	e009      	b.n	800d6b2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2281      	movs	r2, #129	; 0x81
 800d6a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f003 fcd4 	bl	8011058 <SDMMC_CmdReadSingleBlock>
 800d6b0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d012      	beq.n	800d6de <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a0d      	ldr	r2, [pc, #52]	; (800d6f4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d6be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c6:	431a      	orrs	r2, r3
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e002      	b.n	800d6e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e000      	b.n	800d6e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800d6e2:	2302      	movs	r3, #2
  }
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3730      	adds	r7, #48	; 0x30
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	0800e103 	.word	0x0800e103
 800d6f0:	0800e175 	.word	0x0800e175
 800d6f4:	004005ff 	.word	0x004005ff

0800d6f8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b08c      	sub	sp, #48	; 0x30
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
 800d704:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d107      	bne.n	800d720 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d714:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	e0c6      	b.n	800d8ae <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b01      	cmp	r3, #1
 800d72a:	f040 80bf 	bne.w	800d8ac <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2200      	movs	r2, #0
 800d732:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	441a      	add	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d73e:	429a      	cmp	r2, r3
 800d740:	d907      	bls.n	800d752 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d746:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d74e:	2301      	movs	r3, #1
 800d750:	e0ad      	b.n	800d8ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2203      	movs	r2, #3
 800d756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2200      	movs	r2, #0
 800d760:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f042 021a 	orr.w	r2, r2, #26
 800d770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d776:	4a50      	ldr	r2, [pc, #320]	; (800d8b8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d77e:	4a4f      	ldr	r2, [pc, #316]	; (800d8bc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d780:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d786:	2200      	movs	r2, #0
 800d788:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d002      	beq.n	800d798 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d794:	025b      	lsls	r3, r3, #9
 800d796:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d90a      	bls.n	800d7b4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	22a0      	movs	r2, #160	; 0xa0
 800d7a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f003 fcba 	bl	8011124 <SDMMC_CmdWriteMultiBlock>
 800d7b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d7b2:	e009      	b.n	800d7c8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2290      	movs	r2, #144	; 0x90
 800d7b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f003 fc8d 	bl	80110e0 <SDMMC_CmdWriteSingleBlock>
 800d7c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d012      	beq.n	800d7f4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4a3b      	ldr	r2, [pc, #236]	; (800d8c0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d7d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	431a      	orrs	r2, r3
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e05c      	b.n	800d8ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f042 0208 	orr.w	r2, r2, #8
 800d802:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d808:	2240      	movs	r2, #64	; 0x40
 800d80a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d81c:	689a      	ldr	r2, [r3, #8]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	430a      	orrs	r2, r1
 800d826:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d82c:	68b9      	ldr	r1, [r7, #8]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3380      	adds	r3, #128	; 0x80
 800d834:	461a      	mov	r2, r3
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	025b      	lsls	r3, r3, #9
 800d83a:	089b      	lsrs	r3, r3, #2
 800d83c:	f7f9 fae8 	bl	8006e10 <HAL_DMA_Start_IT>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d01a      	beq.n	800d87c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f022 021a 	bic.w	r2, r2, #26
 800d854:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a19      	ldr	r2, [pc, #100]	; (800d8c0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d862:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	e018      	b.n	800d8ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d87c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d880:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	025b      	lsls	r3, r3, #9
 800d886:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d888:	2390      	movs	r3, #144	; 0x90
 800d88a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d88c:	2300      	movs	r3, #0
 800d88e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d890:	2300      	movs	r3, #0
 800d892:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d894:	2301      	movs	r3, #1
 800d896:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f107 0210 	add.w	r2, r7, #16
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f003 fb8a 	bl	8010fbc <SDMMC_ConfigData>

      return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	e000      	b.n	800d8ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d8ac:	2302      	movs	r3, #2
  }
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3730      	adds	r7, #48	; 0x30
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	0800e0d9 	.word	0x0800e0d9
 800d8bc:	0800e175 	.word	0x0800e175
 800d8c0:	004005ff 	.word	0x004005ff

0800d8c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d008      	beq.n	800d8f2 <HAL_SD_IRQHandler+0x2e>
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f003 0308 	and.w	r3, r3, #8
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 ffed 	bl	800e8ca <SD_Read_IT>
 800d8f0:	e153      	b.n	800db9a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f000 808d 	beq.w	800da1c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d90a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4ba3      	ldr	r3, [pc, #652]	; (800dba4 <HAL_SD_IRQHandler+0x2e0>)
 800d918:	400b      	ands	r3, r1
 800d91a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f022 0201 	bic.w	r2, r2, #1
 800d92a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f003 0308 	and.w	r3, r3, #8
 800d932:	2b00      	cmp	r3, #0
 800d934:	d039      	beq.n	800d9aa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f003 0302 	and.w	r3, r3, #2
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d104      	bne.n	800d94a <HAL_SD_IRQHandler+0x86>
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f003 0320 	and.w	r3, r3, #32
 800d946:	2b00      	cmp	r3, #0
 800d948:	d011      	beq.n	800d96e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4618      	mov	r0, r3
 800d950:	f003 fc0a 	bl	8011168 <SDMMC_CmdStopTransfer>
 800d954:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d008      	beq.n	800d96e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	431a      	orrs	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f921 	bl	800dbb0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f240 523a 	movw	r2, #1338	; 0x53a
 800d976:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2201      	movs	r2, #1
 800d97c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f003 0301 	and.w	r3, r3, #1
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d104      	bne.n	800d99a <HAL_SD_IRQHandler+0xd6>
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f003 0302 	and.w	r3, r3, #2
 800d996:	2b00      	cmp	r3, #0
 800d998:	d003      	beq.n	800d9a2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f004 ffd8 	bl	8012950 <HAL_SD_RxCpltCallback>
 800d9a0:	e0fb      	b.n	800db9a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f004 ffca 	bl	801293c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d9a8:	e0f7      	b.n	800db9a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 80f2 	beq.w	800db9a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f003 0320 	and.w	r3, r3, #32
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d011      	beq.n	800d9e4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f003 fbcf 	bl	8011168 <SDMMC_CmdStopTransfer>
 800d9ca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d008      	beq.n	800d9e4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 f8e6 	bl	800dbb0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f003 0301 	and.w	r3, r3, #1
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f040 80d5 	bne.w	800db9a <HAL_SD_IRQHandler+0x2d6>
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f003 0302 	and.w	r3, r3, #2
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	f040 80cf 	bne.w	800db9a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f022 0208 	bic.w	r2, r2, #8
 800da0a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f004 ff91 	bl	801293c <HAL_SD_TxCpltCallback>
}
 800da1a:	e0be      	b.n	800db9a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da26:	2b00      	cmp	r3, #0
 800da28:	d008      	beq.n	800da3c <HAL_SD_IRQHandler+0x178>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f003 0308 	and.w	r3, r3, #8
 800da30:	2b00      	cmp	r3, #0
 800da32:	d003      	beq.n	800da3c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 ff99 	bl	800e96c <SD_Write_IT>
 800da3a:	e0ae      	b.n	800db9a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da42:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800da46:	2b00      	cmp	r3, #0
 800da48:	f000 80a7 	beq.w	800db9a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da52:	f003 0302 	and.w	r3, r3, #2
 800da56:	2b00      	cmp	r3, #0
 800da58:	d005      	beq.n	800da66 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da5e:	f043 0202 	orr.w	r2, r3, #2
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6c:	f003 0308 	and.w	r3, r3, #8
 800da70:	2b00      	cmp	r3, #0
 800da72:	d005      	beq.n	800da80 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da78:	f043 0208 	orr.w	r2, r3, #8
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da86:	f003 0320 	and.w	r3, r3, #32
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d005      	beq.n	800da9a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da92:	f043 0220 	orr.w	r2, r3, #32
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa0:	f003 0310 	and.w	r3, r3, #16
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d005      	beq.n	800dab4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daac:	f043 0210 	orr.w	r2, r3, #16
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f240 523a 	movw	r2, #1338	; 0x53a
 800dabc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dacc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f003 fb48 	bl	8011168 <SDMMC_CmdStopTransfer>
 800dad8:	4602      	mov	r2, r0
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dade:	431a      	orrs	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f003 0308 	and.w	r3, r3, #8
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00a      	beq.n	800db04 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 f857 	bl	800dbb0 <HAL_SD_ErrorCallback>
}
 800db02:	e04a      	b.n	800db9a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d045      	beq.n	800db9a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f003 0310 	and.w	r3, r3, #16
 800db14:	2b00      	cmp	r3, #0
 800db16:	d104      	bne.n	800db22 <HAL_SD_IRQHandler+0x25e>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f003 0320 	and.w	r3, r3, #32
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d011      	beq.n	800db46 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db26:	4a20      	ldr	r2, [pc, #128]	; (800dba8 <HAL_SD_IRQHandler+0x2e4>)
 800db28:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db2e:	4618      	mov	r0, r3
 800db30:	f7f9 fa3e 	bl	8006fb0 <HAL_DMA_Abort_IT>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d02f      	beq.n	800db9a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 fb6a 	bl	800e218 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800db44:	e029      	b.n	800db9a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f003 0301 	and.w	r3, r3, #1
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d104      	bne.n	800db5a <HAL_SD_IRQHandler+0x296>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f003 0302 	and.w	r3, r3, #2
 800db56:	2b00      	cmp	r3, #0
 800db58:	d011      	beq.n	800db7e <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db5e:	4a13      	ldr	r2, [pc, #76]	; (800dbac <HAL_SD_IRQHandler+0x2e8>)
 800db60:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db66:	4618      	mov	r0, r3
 800db68:	f7f9 fa22 	bl	8006fb0 <HAL_DMA_Abort_IT>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d013      	beq.n	800db9a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db76:	4618      	mov	r0, r3
 800db78:	f000 fb85 	bl	800e286 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800db7c:	e00d      	b.n	800db9a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f004 fec8 	bl	8012928 <HAL_SD_AbortCallback>
}
 800db98:	e7ff      	b.n	800db9a <HAL_SD_IRQHandler+0x2d6>
 800db9a:	bf00      	nop
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	ffff3ec5 	.word	0xffff3ec5
 800dba8:	0800e219 	.word	0x0800e219
 800dbac:	0800e287 	.word	0x0800e287

0800dbb0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbd2:	0f9b      	lsrs	r3, r3, #30
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbde:	0e9b      	lsrs	r3, r3, #26
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	f003 030f 	and.w	r3, r3, #15
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbf0:	0e1b      	lsrs	r3, r3, #24
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	f003 0303 	and.w	r3, r3, #3
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc02:	0c1b      	lsrs	r3, r3, #16
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc0e:	0a1b      	lsrs	r3, r3, #8
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc24:	0d1b      	lsrs	r3, r3, #20
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc30:	0c1b      	lsrs	r3, r3, #16
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	f003 030f 	and.w	r3, r3, #15
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc42:	0bdb      	lsrs	r3, r3, #15
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc54:	0b9b      	lsrs	r3, r3, #14
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	f003 0301 	and.w	r3, r3, #1
 800dc5c:	b2da      	uxtb	r2, r3
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc66:	0b5b      	lsrs	r3, r3, #13
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc78:	0b1b      	lsrs	r3, r3, #12
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	f003 0301 	and.w	r3, r3, #1
 800dc80:	b2da      	uxtb	r2, r3
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d163      	bne.n	800dd5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc98:	009a      	lsls	r2, r3, #2
 800dc9a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dc9e:	4013      	ands	r3, r2
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800dca4:	0f92      	lsrs	r2, r2, #30
 800dca6:	431a      	orrs	r2, r3
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcb0:	0edb      	lsrs	r3, r3, #27
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	f003 0307 	and.w	r3, r3, #7
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc2:	0e1b      	lsrs	r3, r3, #24
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	f003 0307 	and.w	r3, r3, #7
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcd4:	0d5b      	lsrs	r3, r3, #21
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	f003 0307 	and.w	r3, r3, #7
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce6:	0c9b      	lsrs	r3, r3, #18
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	f003 0307 	and.w	r3, r3, #7
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcf8:	0bdb      	lsrs	r3, r3, #15
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 0307 	and.w	r3, r3, #7
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	691b      	ldr	r3, [r3, #16]
 800dd0a:	1c5a      	adds	r2, r3, #1
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	7e1b      	ldrb	r3, [r3, #24]
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	f003 0307 	and.w	r3, r3, #7
 800dd1a:	3302      	adds	r3, #2
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800dd26:	fb02 f203 	mul.w	r2, r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	7a1b      	ldrb	r3, [r3, #8]
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	f003 030f 	and.w	r3, r3, #15
 800dd38:	2201      	movs	r2, #1
 800dd3a:	409a      	lsls	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800dd48:	0a52      	lsrs	r2, r2, #9
 800dd4a:	fb02 f203 	mul.w	r2, r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd58:	661a      	str	r2, [r3, #96]	; 0x60
 800dd5a:	e031      	b.n	800ddc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d11d      	bne.n	800dda0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd68:	041b      	lsls	r3, r3, #16
 800dd6a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd72:	0c1b      	lsrs	r3, r3, #16
 800dd74:	431a      	orrs	r2, r3
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	029a      	lsls	r2, r3, #10
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd94:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	661a      	str	r2, [r3, #96]	; 0x60
 800dd9e:	e00f      	b.n	800ddc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a58      	ldr	r2, [pc, #352]	; (800df08 <HAL_SD_GetCardCSD+0x344>)
 800dda6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e09d      	b.n	800defc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc4:	0b9b      	lsrs	r3, r3, #14
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	f003 0301 	and.w	r3, r3, #1
 800ddcc:	b2da      	uxtb	r2, r3
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd6:	09db      	lsrs	r3, r3, #7
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddee:	b2da      	uxtb	r2, r3
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddf8:	0fdb      	lsrs	r3, r3, #31
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de04:	0f5b      	lsrs	r3, r3, #29
 800de06:	b2db      	uxtb	r3, r3
 800de08:	f003 0303 	and.w	r3, r3, #3
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de16:	0e9b      	lsrs	r3, r3, #26
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	f003 0307 	and.w	r3, r3, #7
 800de1e:	b2da      	uxtb	r2, r3
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de28:	0d9b      	lsrs	r3, r3, #22
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	b2da      	uxtb	r2, r3
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de3a:	0d5b      	lsrs	r3, r3, #21
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	b2da      	uxtb	r2, r3
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	2200      	movs	r2, #0
 800de4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de56:	0c1b      	lsrs	r3, r3, #16
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	f003 0301 	and.w	r3, r3, #1
 800de5e:	b2da      	uxtb	r2, r3
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de6a:	0bdb      	lsrs	r3, r3, #15
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	f003 0301 	and.w	r3, r3, #1
 800de72:	b2da      	uxtb	r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de7e:	0b9b      	lsrs	r3, r3, #14
 800de80:	b2db      	uxtb	r3, r3
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	b2da      	uxtb	r2, r3
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de92:	0b5b      	lsrs	r3, r3, #13
 800de94:	b2db      	uxtb	r3, r3
 800de96:	f003 0301 	and.w	r3, r3, #1
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dea6:	0b1b      	lsrs	r3, r3, #12
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	f003 0301 	and.w	r3, r3, #1
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deba:	0a9b      	lsrs	r3, r3, #10
 800debc:	b2db      	uxtb	r3, r3
 800debe:	f003 0303 	and.w	r3, r3, #3
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dece:	0a1b      	lsrs	r3, r3, #8
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	f003 0303 	and.w	r3, r3, #3
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dee2:	085b      	lsrs	r3, r3, #1
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deea:	b2da      	uxtb	r2, r3
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2201      	movs	r2, #1
 800def6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr
 800df08:	004005ff 	.word	0x004005ff

0800df0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800df64:	b5b0      	push	{r4, r5, r7, lr}
 800df66:	b08e      	sub	sp, #56	; 0x38
 800df68:	af04      	add	r7, sp, #16
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800df6e:	2300      	movs	r3, #0
 800df70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2203      	movs	r2, #3
 800df78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df80:	2b03      	cmp	r3, #3
 800df82:	d02e      	beq.n	800dfe2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df8a:	d106      	bne.n	800df9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	639a      	str	r2, [r3, #56]	; 0x38
 800df98:	e029      	b.n	800dfee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfa0:	d10a      	bne.n	800dfb8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fb28 	bl	800e5f8 <SD_WideBus_Enable>
 800dfa8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfae:	6a3b      	ldr	r3, [r7, #32]
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	639a      	str	r2, [r3, #56]	; 0x38
 800dfb6:	e01a      	b.n	800dfee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10a      	bne.n	800dfd4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 fb65 	bl	800e68e <SD_WideBus_Disable>
 800dfc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	431a      	orrs	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	639a      	str	r2, [r3, #56]	; 0x38
 800dfd2:	e00c      	b.n	800dfee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	639a      	str	r2, [r3, #56]	; 0x38
 800dfe0:	e005      	b.n	800dfee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00b      	beq.n	800e00e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a26      	ldr	r2, [pc, #152]	; (800e094 <HAL_SD_ConfigWideBusOperation+0x130>)
 800dffc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e00c:	e01f      	b.n	800e04e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	695b      	ldr	r3, [r3, #20]
 800e028:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	699b      	ldr	r3, [r3, #24]
 800e02e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681d      	ldr	r5, [r3, #0]
 800e034:	466c      	mov	r4, sp
 800e036:	f107 0314 	add.w	r3, r7, #20
 800e03a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e03e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e042:	f107 0308 	add.w	r3, r7, #8
 800e046:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e048:	4628      	mov	r0, r5
 800e04a:	f002 ff05 	bl	8010e58 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e056:	4618      	mov	r0, r3
 800e058:	f002 ffdc 	bl	8011014 <SDMMC_CmdBlockLength>
 800e05c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e05e:	6a3b      	ldr	r3, [r7, #32]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00c      	beq.n	800e07e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a0a      	ldr	r2, [pc, #40]	; (800e094 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e06a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e070:	6a3b      	ldr	r3, [r7, #32]
 800e072:	431a      	orrs	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2201      	movs	r2, #1
 800e082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3728      	adds	r7, #40	; 0x28
 800e08e:	46bd      	mov	sp, r7
 800e090:	bdb0      	pop	{r4, r5, r7, pc}
 800e092:	bf00      	nop
 800e094:	004005ff 	.word	0x004005ff

0800e098 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e0a4:	f107 030c 	add.w	r3, r7, #12
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fa7c 	bl	800e5a8 <SD_SendStatus>
 800e0b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d005      	beq.n	800e0c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	431a      	orrs	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	0a5b      	lsrs	r3, r3, #9
 800e0c8:	f003 030f 	and.w	r3, r3, #15
 800e0cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e0ce:	693b      	ldr	r3, [r7, #16]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3718      	adds	r7, #24
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e0f6:	bf00      	nop
 800e0f8:	3714      	adds	r7, #20
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr

0800e102 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b084      	sub	sp, #16
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e10e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e114:	2b82      	cmp	r3, #130	; 0x82
 800e116:	d111      	bne.n	800e13c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f003 f823 	bl	8011168 <SDMMC_CmdStopTransfer>
 800e122:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d008      	beq.n	800e13c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	431a      	orrs	r2, r3
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f7ff fd3a 	bl	800dbb0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f022 0208 	bic.w	r2, r2, #8
 800e14a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f240 523a 	movw	r2, #1338	; 0x53a
 800e154:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2200      	movs	r2, #0
 800e162:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f004 fbf3 	bl	8012950 <HAL_SD_RxCpltCallback>
#endif
}
 800e16a:	bf00      	nop
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
	...

0800e174 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e180:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7f9 f8c0 	bl	8007308 <HAL_DMA_GetError>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b02      	cmp	r3, #2
 800e18c:	d03e      	beq.n	800e20c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e194:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e19c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d002      	beq.n	800e1aa <SD_DMAError+0x36>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d12d      	bne.n	800e206 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a19      	ldr	r2, [pc, #100]	; (800e214 <SD_DMAError+0xa0>)
 800e1b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e1c0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e1ce:	6978      	ldr	r0, [r7, #20]
 800e1d0:	f7ff ff62 	bl	800e098 <HAL_SD_GetCardState>
 800e1d4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	2b06      	cmp	r3, #6
 800e1da:	d002      	beq.n	800e1e2 <SD_DMAError+0x6e>
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	2b05      	cmp	r3, #5
 800e1e0:	d10a      	bne.n	800e1f8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f002 ffbe 	bl	8011168 <SDMMC_CmdStopTransfer>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	2200      	movs	r2, #0
 800e204:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e206:	6978      	ldr	r0, [r7, #20]
 800e208:	f7ff fcd2 	bl	800dbb0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e20c:	bf00      	nop
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	004005ff 	.word	0x004005ff

0800e218 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e224:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f240 523a 	movw	r2, #1338	; 0x53a
 800e22e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f7ff ff31 	bl	800e098 <HAL_SD_GetCardState>
 800e236:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	2b06      	cmp	r3, #6
 800e24a:	d002      	beq.n	800e252 <SD_DMATxAbort+0x3a>
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2b05      	cmp	r3, #5
 800e250:	d10a      	bne.n	800e268 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4618      	mov	r0, r3
 800e258:	f002 ff86 	bl	8011168 <SDMMC_CmdStopTransfer>
 800e25c:	4602      	mov	r2, r0
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e262:	431a      	orrs	r2, r3
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d103      	bne.n	800e278 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f004 fb59 	bl	8012928 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e276:	e002      	b.n	800e27e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f7ff fc99 	bl	800dbb0 <HAL_SD_ErrorCallback>
}
 800e27e:	bf00      	nop
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b084      	sub	sp, #16
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e292:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f240 523a 	movw	r2, #1338	; 0x53a
 800e29c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f7ff fefa 	bl	800e098 <HAL_SD_GetCardState>
 800e2a4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2b06      	cmp	r3, #6
 800e2b8:	d002      	beq.n	800e2c0 <SD_DMARxAbort+0x3a>
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	2b05      	cmp	r3, #5
 800e2be:	d10a      	bne.n	800e2d6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f002 ff4f 	bl	8011168 <SDMMC_CmdStopTransfer>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d0:	431a      	orrs	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d103      	bne.n	800e2e6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f004 fb22 	bl	8012928 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e2e4:	e002      	b.n	800e2ec <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f7ff fc62 	bl	800dbb0 <HAL_SD_ErrorCallback>
}
 800e2ec:	bf00      	nop
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e2f4:	b5b0      	push	{r4, r5, r7, lr}
 800e2f6:	b094      	sub	sp, #80	; 0x50
 800e2f8:	af04      	add	r7, sp, #16
 800e2fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4618      	mov	r0, r3
 800e306:	f002 fe00 	bl	8010f0a <SDMMC_GetPowerState>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d102      	bne.n	800e316 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e310:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e314:	e0b6      	b.n	800e484 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e31a:	2b03      	cmp	r3, #3
 800e31c:	d02f      	beq.n	800e37e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4618      	mov	r0, r3
 800e324:	f003 f82b 	bl	801137e <SDMMC_CmdSendCID>
 800e328:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d001      	beq.n	800e334 <SD_InitCard+0x40>
    {
      return errorstate;
 800e330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e332:	e0a7      	b.n	800e484 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2100      	movs	r1, #0
 800e33a:	4618      	mov	r0, r3
 800e33c:	f002 fe2b 	bl	8010f96 <SDMMC_GetResponse>
 800e340:	4602      	mov	r2, r0
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2104      	movs	r1, #4
 800e34c:	4618      	mov	r0, r3
 800e34e:	f002 fe22 	bl	8010f96 <SDMMC_GetResponse>
 800e352:	4602      	mov	r2, r0
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2108      	movs	r1, #8
 800e35e:	4618      	mov	r0, r3
 800e360:	f002 fe19 	bl	8010f96 <SDMMC_GetResponse>
 800e364:	4602      	mov	r2, r0
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	210c      	movs	r1, #12
 800e370:	4618      	mov	r0, r3
 800e372:	f002 fe10 	bl	8010f96 <SDMMC_GetResponse>
 800e376:	4602      	mov	r2, r0
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e382:	2b03      	cmp	r3, #3
 800e384:	d00d      	beq.n	800e3a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f107 020e 	add.w	r2, r7, #14
 800e38e:	4611      	mov	r1, r2
 800e390:	4618      	mov	r0, r3
 800e392:	f003 f831 	bl	80113f8 <SDMMC_CmdSetRelAdd>
 800e396:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d001      	beq.n	800e3a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800e39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a0:	e070      	b.n	800e484 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3a6:	2b03      	cmp	r3, #3
 800e3a8:	d036      	beq.n	800e418 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e3aa:	89fb      	ldrh	r3, [r7, #14]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3ba:	041b      	lsls	r3, r3, #16
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4610      	mov	r0, r2
 800e3c0:	f002 fffb 	bl	80113ba <SDMMC_CmdSendCSD>
 800e3c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d001      	beq.n	800e3d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ce:	e059      	b.n	800e484 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f002 fddd 	bl	8010f96 <SDMMC_GetResponse>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2104      	movs	r1, #4
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f002 fdd4 	bl	8010f96 <SDMMC_GetResponse>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2108      	movs	r1, #8
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f002 fdcb 	bl	8010f96 <SDMMC_GetResponse>
 800e400:	4602      	mov	r2, r0
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	210c      	movs	r1, #12
 800e40c:	4618      	mov	r0, r3
 800e40e:	f002 fdc2 	bl	8010f96 <SDMMC_GetResponse>
 800e412:	4602      	mov	r2, r0
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2104      	movs	r1, #4
 800e41e:	4618      	mov	r0, r3
 800e420:	f002 fdb9 	bl	8010f96 <SDMMC_GetResponse>
 800e424:	4603      	mov	r3, r0
 800e426:	0d1a      	lsrs	r2, r3, #20
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e42c:	f107 0310 	add.w	r3, r7, #16
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7ff fbc6 	bl	800dbc4 <HAL_SD_GetCardCSD>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e43e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e442:	e01f      	b.n	800e484 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6819      	ldr	r1, [r3, #0]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e44c:	041b      	lsls	r3, r3, #16
 800e44e:	461a      	mov	r2, r3
 800e450:	f04f 0300 	mov.w	r3, #0
 800e454:	4608      	mov	r0, r1
 800e456:	f002 fea9 	bl	80111ac <SDMMC_CmdSelDesel>
 800e45a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d001      	beq.n	800e466 <SD_InitCard+0x172>
  {
    return errorstate;
 800e462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e464:	e00e      	b.n	800e484 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681d      	ldr	r5, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	466c      	mov	r4, sp
 800e46e:	f103 0210 	add.w	r2, r3, #16
 800e472:	ca07      	ldmia	r2, {r0, r1, r2}
 800e474:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e478:	3304      	adds	r3, #4
 800e47a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e47c:	4628      	mov	r0, r5
 800e47e:	f002 fceb 	bl	8010e58 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3740      	adds	r7, #64	; 0x40
 800e488:	46bd      	mov	sp, r7
 800e48a:	bdb0      	pop	{r4, r5, r7, pc}

0800e48c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b086      	sub	sp, #24
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e494:	2300      	movs	r3, #0
 800e496:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e498:	2300      	movs	r3, #0
 800e49a:	617b      	str	r3, [r7, #20]
 800e49c:	2300      	movs	r3, #0
 800e49e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f002 fea4 	bl	80111f2 <SDMMC_CmdGoIdleState>
 800e4aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d001      	beq.n	800e4b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	e072      	b.n	800e59c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f002 feb7 	bl	801122e <SDMMC_CmdOperCond>
 800e4c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00d      	beq.n	800e4e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f002 fe8d 	bl	80111f2 <SDMMC_CmdGoIdleState>
 800e4d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d004      	beq.n	800e4ea <SD_PowerON+0x5e>
    {
      return errorstate;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	e05b      	b.n	800e59c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d137      	bne.n	800e562 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f002 feb7 	bl	801126c <SDMMC_CmdAppCommand>
 800e4fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d02d      	beq.n	800e562 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e506:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e50a:	e047      	b.n	800e59c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2100      	movs	r1, #0
 800e512:	4618      	mov	r0, r3
 800e514:	f002 feaa 	bl	801126c <SDMMC_CmdAppCommand>
 800e518:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d001      	beq.n	800e524 <SD_PowerON+0x98>
    {
      return errorstate;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	e03b      	b.n	800e59c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	491e      	ldr	r1, [pc, #120]	; (800e5a4 <SD_PowerON+0x118>)
 800e52a:	4618      	mov	r0, r3
 800e52c:	f002 fec0 	bl	80112b0 <SDMMC_CmdAppOperCommand>
 800e530:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d002      	beq.n	800e53e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e538:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e53c:	e02e      	b.n	800e59c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2100      	movs	r1, #0
 800e544:	4618      	mov	r0, r3
 800e546:	f002 fd26 	bl	8010f96 <SDMMC_GetResponse>
 800e54a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	0fdb      	lsrs	r3, r3, #31
 800e550:	2b01      	cmp	r3, #1
 800e552:	d101      	bne.n	800e558 <SD_PowerON+0xcc>
 800e554:	2301      	movs	r3, #1
 800e556:	e000      	b.n	800e55a <SD_PowerON+0xce>
 800e558:	2300      	movs	r3, #0
 800e55a:	613b      	str	r3, [r7, #16]

    count++;
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	3301      	adds	r3, #1
 800e560:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e568:	4293      	cmp	r3, r2
 800e56a:	d802      	bhi.n	800e572 <SD_PowerON+0xe6>
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d0cc      	beq.n	800e50c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e578:	4293      	cmp	r3, r2
 800e57a:	d902      	bls.n	800e582 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e57c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e580:	e00c      	b.n	800e59c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d003      	beq.n	800e594 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2201      	movs	r2, #1
 800e590:	645a      	str	r2, [r3, #68]	; 0x44
 800e592:	e002      	b.n	800e59a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3718      	adds	r7, #24
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	c1100000 	.word	0xc1100000

0800e5a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d102      	bne.n	800e5be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e5b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e5bc:	e018      	b.n	800e5f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5c6:	041b      	lsls	r3, r3, #16
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	4610      	mov	r0, r2
 800e5cc:	f002 ff35 	bl	801143a <SDMMC_CmdSendStatus>
 800e5d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d001      	beq.n	800e5dc <SD_SendStatus+0x34>
  {
    return errorstate;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	e009      	b.n	800e5f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2100      	movs	r1, #0
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f002 fcd7 	bl	8010f96 <SDMMC_GetResponse>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e5ee:	2300      	movs	r3, #0
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b086      	sub	sp, #24
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e600:	2300      	movs	r3, #0
 800e602:	60fb      	str	r3, [r7, #12]
 800e604:	2300      	movs	r3, #0
 800e606:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2100      	movs	r1, #0
 800e60e:	4618      	mov	r0, r3
 800e610:	f002 fcc1 	bl	8010f96 <SDMMC_GetResponse>
 800e614:	4603      	mov	r3, r0
 800e616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e61a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e61e:	d102      	bne.n	800e626 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e624:	e02f      	b.n	800e686 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e626:	f107 030c 	add.w	r3, r7, #12
 800e62a:	4619      	mov	r1, r3
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 f879 	bl	800e724 <SD_FindSCR>
 800e632:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	e023      	b.n	800e686 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e644:	2b00      	cmp	r3, #0
 800e646:	d01c      	beq.n	800e682 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e650:	041b      	lsls	r3, r3, #16
 800e652:	4619      	mov	r1, r3
 800e654:	4610      	mov	r0, r2
 800e656:	f002 fe09 	bl	801126c <SDMMC_CmdAppCommand>
 800e65a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	e00f      	b.n	800e686 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2102      	movs	r1, #2
 800e66c:	4618      	mov	r0, r3
 800e66e:	f002 fe43 	bl	80112f8 <SDMMC_CmdBusWidth>
 800e672:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d001      	beq.n	800e67e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	e003      	b.n	800e686 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e67e:	2300      	movs	r3, #0
 800e680:	e001      	b.n	800e686 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e682:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e686:	4618      	mov	r0, r3
 800e688:	3718      	adds	r7, #24
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b086      	sub	sp, #24
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e696:	2300      	movs	r3, #0
 800e698:	60fb      	str	r3, [r7, #12]
 800e69a:	2300      	movs	r3, #0
 800e69c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f002 fc76 	bl	8010f96 <SDMMC_GetResponse>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6b4:	d102      	bne.n	800e6bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e6b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6ba:	e02f      	b.n	800e71c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e6bc:	f107 030c 	add.w	r3, r7, #12
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f82e 	bl	800e724 <SD_FindSCR>
 800e6c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d001      	beq.n	800e6d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	e023      	b.n	800e71c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d01c      	beq.n	800e718 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6e6:	041b      	lsls	r3, r3, #16
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	4610      	mov	r0, r2
 800e6ec:	f002 fdbe 	bl	801126c <SDMMC_CmdAppCommand>
 800e6f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d001      	beq.n	800e6fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	e00f      	b.n	800e71c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2100      	movs	r1, #0
 800e702:	4618      	mov	r0, r3
 800e704:	f002 fdf8 	bl	80112f8 <SDMMC_CmdBusWidth>
 800e708:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d001      	beq.n	800e714 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	e003      	b.n	800e71c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e714:	2300      	movs	r3, #0
 800e716:	e001      	b.n	800e71c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e718:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3718      	adds	r7, #24
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e724:	b590      	push	{r4, r7, lr}
 800e726:	b08f      	sub	sp, #60	; 0x3c
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e72e:	f7f7 fd65 	bl	80061fc <HAL_GetTick>
 800e732:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e734:	2300      	movs	r3, #0
 800e736:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e738:	2300      	movs	r3, #0
 800e73a:	60bb      	str	r3, [r7, #8]
 800e73c:	2300      	movs	r3, #0
 800e73e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2108      	movs	r1, #8
 800e74a:	4618      	mov	r0, r3
 800e74c:	f002 fc62 	bl	8011014 <SDMMC_CmdBlockLength>
 800e750:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75a:	e0b2      	b.n	800e8c2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e764:	041b      	lsls	r3, r3, #16
 800e766:	4619      	mov	r1, r3
 800e768:	4610      	mov	r0, r2
 800e76a:	f002 fd7f 	bl	801126c <SDMMC_CmdAppCommand>
 800e76e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e772:	2b00      	cmp	r3, #0
 800e774:	d001      	beq.n	800e77a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e778:	e0a3      	b.n	800e8c2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e77a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e77e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e780:	2308      	movs	r3, #8
 800e782:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e784:	2330      	movs	r3, #48	; 0x30
 800e786:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e788:	2302      	movs	r3, #2
 800e78a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e78c:	2300      	movs	r3, #0
 800e78e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e790:	2301      	movs	r3, #1
 800e792:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f107 0210 	add.w	r2, r7, #16
 800e79c:	4611      	mov	r1, r2
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f002 fc0c 	bl	8010fbc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f002 fdc7 	bl	801133c <SDMMC_CmdSendSCR>
 800e7ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d02a      	beq.n	800e80c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b8:	e083      	b.n	800e8c2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00f      	beq.n	800e7e8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6819      	ldr	r1, [r3, #0]
 800e7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ce:	009b      	lsls	r3, r3, #2
 800e7d0:	f107 0208 	add.w	r2, r7, #8
 800e7d4:	18d4      	adds	r4, r2, r3
 800e7d6:	4608      	mov	r0, r1
 800e7d8:	f002 fb6a 	bl	8010eb0 <SDMMC_ReadFIFO>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	6023      	str	r3, [r4, #0]
      index++;
 800e7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	637b      	str	r3, [r7, #52]	; 0x34
 800e7e6:	e006      	b.n	800e7f6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d012      	beq.n	800e81c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e7f6:	f7f7 fd01 	bl	80061fc <HAL_GetTick>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e804:	d102      	bne.n	800e80c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e806:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e80a:	e05a      	b.n	800e8c2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e812:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e816:	2b00      	cmp	r3, #0
 800e818:	d0cf      	beq.n	800e7ba <SD_FindSCR+0x96>
 800e81a:	e000      	b.n	800e81e <SD_FindSCR+0xfa>
      break;
 800e81c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e824:	f003 0308 	and.w	r3, r3, #8
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d005      	beq.n	800e838 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2208      	movs	r2, #8
 800e832:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e834:	2308      	movs	r3, #8
 800e836:	e044      	b.n	800e8c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e83e:	f003 0302 	and.w	r3, r3, #2
 800e842:	2b00      	cmp	r3, #0
 800e844:	d005      	beq.n	800e852 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2202      	movs	r2, #2
 800e84c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e84e:	2302      	movs	r3, #2
 800e850:	e037      	b.n	800e8c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e858:	f003 0320 	and.w	r3, r3, #32
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d005      	beq.n	800e86c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2220      	movs	r2, #32
 800e866:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e868:	2320      	movs	r3, #32
 800e86a:	e02a      	b.n	800e8c2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f240 523a 	movw	r2, #1338	; 0x53a
 800e874:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	061a      	lsls	r2, r3, #24
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	021b      	lsls	r3, r3, #8
 800e87e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e882:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	0a1b      	lsrs	r3, r3, #8
 800e888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e88c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	0e1b      	lsrs	r3, r3, #24
 800e892:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	601a      	str	r2, [r3, #0]
    scr++;
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	3304      	adds	r3, #4
 800e89c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	061a      	lsls	r2, r3, #24
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	021b      	lsls	r3, r3, #8
 800e8a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	0a1b      	lsrs	r3, r3, #8
 800e8b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	0e1b      	lsrs	r3, r3, #24
 800e8ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	373c      	adds	r7, #60	; 0x3c
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd90      	pop	{r4, r7, pc}

0800e8ca <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b086      	sub	sp, #24
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d03f      	beq.n	800e964 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	617b      	str	r3, [r7, #20]
 800e8e8:	e033      	b.n	800e952 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f002 fade 	bl	8010eb0 <SDMMC_ReadFIFO>
 800e8f4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	3301      	adds	r3, #1
 800e902:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	3b01      	subs	r3, #1
 800e908:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	0a1b      	lsrs	r3, r3, #8
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3301      	adds	r3, #1
 800e918:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	3b01      	subs	r3, #1
 800e91e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	0c1b      	lsrs	r3, r3, #16
 800e924:	b2da      	uxtb	r2, r3
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	3301      	adds	r3, #1
 800e92e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	3b01      	subs	r3, #1
 800e934:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	0e1b      	lsrs	r3, r3, #24
 800e93a:	b2da      	uxtb	r2, r3
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	3301      	adds	r3, #1
 800e944:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	3b01      	subs	r3, #1
 800e94a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	3301      	adds	r3, #1
 800e950:	617b      	str	r3, [r7, #20]
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	2b07      	cmp	r3, #7
 800e956:	d9c8      	bls.n	800e8ea <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e964:	bf00      	nop
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6a1b      	ldr	r3, [r3, #32]
 800e978:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e97e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d043      	beq.n	800ea0e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e986:	2300      	movs	r3, #0
 800e988:	617b      	str	r3, [r7, #20]
 800e98a:	e037      	b.n	800e9fc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	3301      	adds	r3, #1
 800e996:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	3b01      	subs	r3, #1
 800e99c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	021a      	lsls	r2, r3, #8
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	041a      	lsls	r2, r3, #16
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	061a      	lsls	r2, r3, #24
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	3b01      	subs	r3, #1
 800e9e4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f107 0208 	add.w	r2, r7, #8
 800e9ee:	4611      	mov	r1, r2
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f002 fa6a 	bl	8010eca <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	617b      	str	r3, [r7, #20]
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	2b07      	cmp	r3, #7
 800ea00:	d9c4      	bls.n	800e98c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	693a      	ldr	r2, [r7, #16]
 800ea0c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ea0e:	bf00      	nop
 800ea10:	3718      	adds	r7, #24
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b082      	sub	sp, #8
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
 800ea1e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d101      	bne.n	800ea2a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ea26:	2301      	movs	r3, #1
 800ea28:	e025      	b.n	800ea76 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d106      	bne.n	800ea44 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7f4 fed8 	bl	80037f4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2202      	movs	r2, #2
 800ea48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	3304      	adds	r3, #4
 800ea54:	4619      	mov	r1, r3
 800ea56:	4610      	mov	r0, r2
 800ea58:	f002 f8d4 	bl	8010c04 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6818      	ldr	r0, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	461a      	mov	r2, r3
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	f002 f93e 	bl	8010ce8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b084      	sub	sp, #16
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	60f8      	str	r0, [r7, #12]
 800ea86:	60b9      	str	r1, [r7, #8]
 800ea88:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d101      	bne.n	800ea9a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ea96:	2302      	movs	r3, #2
 800ea98:	e018      	b.n	800eacc <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	68b9      	ldr	r1, [r7, #8]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f002 f99c 	bl	8010de8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d104      	bne.n	800eac2 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2205      	movs	r2, #5
 800eabc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800eac0:	e003      	b.n	800eaca <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	2b02      	cmp	r3, #2
 800eae8:	d101      	bne.n	800eaee <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800eaea:	2302      	movs	r3, #2
 800eaec:	e00e      	b.n	800eb0c <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2202      	movs	r2, #2
 800eaf2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	6839      	ldr	r1, [r7, #0]
 800eafc:	4618      	mov	r0, r3
 800eafe:	f002 f997 	bl	8010e30 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2201      	movs	r2, #1
 800eb06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800eb0a:	2300      	movs	r3, #0
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d101      	bne.n	800eb26 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800eb22:	2301      	movs	r3, #1
 800eb24:	e04c      	b.n	800ebc0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d106      	bne.n	800eb40 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7f4 fb18 	bl	8003170 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2202      	movs	r2, #2
 800eb44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f022 0203 	bic.w	r2, r2, #3
 800eb56:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	4b19      	ldr	r3, [pc, #100]	; (800ebc8 <HAL_SPDIFRX_Init+0xb4>)
 800eb64:	4013      	ands	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800eb70:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800eb76:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800eb7c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800eb82:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800eb88:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800eb8e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800eb94:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800eb9a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800eba0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	4313      	orrs	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2201      	movs	r2, #1
 800ebba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800ebbe:	2300      	movs	r3, #0
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	fff88407 	.word	0xfff88407

0800ebcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d101      	bne.n	800ebde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e09d      	b.n	800ed1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d108      	bne.n	800ebf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebee:	d009      	beq.n	800ec04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	61da      	str	r2, [r3, #28]
 800ebf6:	e005      	b.n	800ec04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d106      	bne.n	800ec24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7f4 fae8 	bl	80031f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2202      	movs	r2, #2
 800ec28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec44:	d902      	bls.n	800ec4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ec46:	2300      	movs	r3, #0
 800ec48:	60fb      	str	r3, [r7, #12]
 800ec4a:	e002      	b.n	800ec52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ec4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ec5a:	d007      	beq.n	800ec6c <HAL_SPI_Init+0xa0>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec64:	d002      	beq.n	800ec6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	689b      	ldr	r3, [r3, #8]
 800ec78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	691b      	ldr	r3, [r3, #16]
 800ec82:	f003 0302 	and.w	r3, r3, #2
 800ec86:	431a      	orrs	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	695b      	ldr	r3, [r3, #20]
 800ec8c:	f003 0301 	and.w	r3, r3, #1
 800ec90:	431a      	orrs	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	699b      	ldr	r3, [r3, #24]
 800ec96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ec9a:	431a      	orrs	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	69db      	ldr	r3, [r3, #28]
 800eca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eca4:	431a      	orrs	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecae:	ea42 0103 	orr.w	r1, r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	430a      	orrs	r2, r1
 800ecc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	0c1b      	lsrs	r3, r3, #16
 800ecc8:	f003 0204 	and.w	r2, r3, #4
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd0:	f003 0310 	and.w	r3, r3, #16
 800ecd4:	431a      	orrs	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecda:	f003 0308 	and.w	r3, r3, #8
 800ecde:	431a      	orrs	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ece8:	ea42 0103 	orr.w	r1, r2, r3
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	430a      	orrs	r2, r1
 800ecf8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	69da      	ldr	r2, [r3, #28]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ed08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b082      	sub	sp, #8
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d101      	bne.n	800ed34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ed30:	2301      	movs	r3, #1
 800ed32:	e049      	b.n	800edc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d106      	bne.n	800ed4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7f4 fab5 	bl	80032b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2202      	movs	r2, #2
 800ed52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	4619      	mov	r1, r3
 800ed60:	4610      	mov	r0, r2
 800ed62:	f000 fc21 	bl	800f5a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2201      	movs	r2, #1
 800ed6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2201      	movs	r2, #1
 800ed72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2201      	movs	r2, #1
 800ed82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2201      	movs	r2, #1
 800ed92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2201      	movs	r2, #1
 800eda2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2201      	movs	r2, #1
 800edaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2201      	movs	r2, #1
 800edb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2201      	movs	r2, #1
 800edba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2201      	movs	r2, #1
 800edc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d001      	beq.n	800ede8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ede4:	2301      	movs	r3, #1
 800ede6:	e054      	b.n	800ee92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2202      	movs	r2, #2
 800edec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	68da      	ldr	r2, [r3, #12]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f042 0201 	orr.w	r2, r2, #1
 800edfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a26      	ldr	r2, [pc, #152]	; (800eea0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d022      	beq.n	800ee50 <HAL_TIM_Base_Start_IT+0x80>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee12:	d01d      	beq.n	800ee50 <HAL_TIM_Base_Start_IT+0x80>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a22      	ldr	r2, [pc, #136]	; (800eea4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d018      	beq.n	800ee50 <HAL_TIM_Base_Start_IT+0x80>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a21      	ldr	r2, [pc, #132]	; (800eea8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d013      	beq.n	800ee50 <HAL_TIM_Base_Start_IT+0x80>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a1f      	ldr	r2, [pc, #124]	; (800eeac <HAL_TIM_Base_Start_IT+0xdc>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d00e      	beq.n	800ee50 <HAL_TIM_Base_Start_IT+0x80>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a1e      	ldr	r2, [pc, #120]	; (800eeb0 <HAL_TIM_Base_Start_IT+0xe0>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d009      	beq.n	800ee50 <HAL_TIM_Base_Start_IT+0x80>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a1c      	ldr	r2, [pc, #112]	; (800eeb4 <HAL_TIM_Base_Start_IT+0xe4>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d004      	beq.n	800ee50 <HAL_TIM_Base_Start_IT+0x80>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a1b      	ldr	r2, [pc, #108]	; (800eeb8 <HAL_TIM_Base_Start_IT+0xe8>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d115      	bne.n	800ee7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	689a      	ldr	r2, [r3, #8]
 800ee56:	4b19      	ldr	r3, [pc, #100]	; (800eebc <HAL_TIM_Base_Start_IT+0xec>)
 800ee58:	4013      	ands	r3, r2
 800ee5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2b06      	cmp	r3, #6
 800ee60:	d015      	beq.n	800ee8e <HAL_TIM_Base_Start_IT+0xbe>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee68:	d011      	beq.n	800ee8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f042 0201 	orr.w	r2, r2, #1
 800ee78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee7a:	e008      	b.n	800ee8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f042 0201 	orr.w	r2, r2, #1
 800ee8a:	601a      	str	r2, [r3, #0]
 800ee8c:	e000      	b.n	800ee90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3714      	adds	r7, #20
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	40010000 	.word	0x40010000
 800eea4:	40000400 	.word	0x40000400
 800eea8:	40000800 	.word	0x40000800
 800eeac:	40000c00 	.word	0x40000c00
 800eeb0:	40010400 	.word	0x40010400
 800eeb4:	40014000 	.word	0x40014000
 800eeb8:	40001800 	.word	0x40001800
 800eebc:	00010007 	.word	0x00010007

0800eec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d101      	bne.n	800eed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eece:	2301      	movs	r3, #1
 800eed0:	e049      	b.n	800ef66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d106      	bne.n	800eeec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f7f4 fa90 	bl	800340c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2202      	movs	r2, #2
 800eef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	3304      	adds	r3, #4
 800eefc:	4619      	mov	r1, r3
 800eefe:	4610      	mov	r0, r2
 800ef00:	f000 fb52 	bl	800f5a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2201      	movs	r2, #1
 800ef18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2201      	movs	r2, #1
 800ef48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef64:	2300      	movs	r3, #0
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b082      	sub	sp, #8
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	f003 0302 	and.w	r3, r3, #2
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d122      	bne.n	800efca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	f003 0302 	and.w	r3, r3, #2
 800ef8e:	2b02      	cmp	r3, #2
 800ef90:	d11b      	bne.n	800efca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f06f 0202 	mvn.w	r2, #2
 800ef9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	699b      	ldr	r3, [r3, #24]
 800efa8:	f003 0303 	and.w	r3, r3, #3
 800efac:	2b00      	cmp	r3, #0
 800efae:	d003      	beq.n	800efb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fadb 	bl	800f56c <HAL_TIM_IC_CaptureCallback>
 800efb6:	e005      	b.n	800efc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 facd 	bl	800f558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 fade 	bl	800f580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	691b      	ldr	r3, [r3, #16]
 800efd0:	f003 0304 	and.w	r3, r3, #4
 800efd4:	2b04      	cmp	r3, #4
 800efd6:	d122      	bne.n	800f01e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	f003 0304 	and.w	r3, r3, #4
 800efe2:	2b04      	cmp	r3, #4
 800efe4:	d11b      	bne.n	800f01e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f06f 0204 	mvn.w	r2, #4
 800efee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2202      	movs	r2, #2
 800eff4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	699b      	ldr	r3, [r3, #24]
 800effc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f000:	2b00      	cmp	r3, #0
 800f002:	d003      	beq.n	800f00c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 fab1 	bl	800f56c <HAL_TIM_IC_CaptureCallback>
 800f00a:	e005      	b.n	800f018 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 faa3 	bl	800f558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 fab4 	bl	800f580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	f003 0308 	and.w	r3, r3, #8
 800f028:	2b08      	cmp	r3, #8
 800f02a:	d122      	bne.n	800f072 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	f003 0308 	and.w	r3, r3, #8
 800f036:	2b08      	cmp	r3, #8
 800f038:	d11b      	bne.n	800f072 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f06f 0208 	mvn.w	r2, #8
 800f042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2204      	movs	r2, #4
 800f048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	69db      	ldr	r3, [r3, #28]
 800f050:	f003 0303 	and.w	r3, r3, #3
 800f054:	2b00      	cmp	r3, #0
 800f056:	d003      	beq.n	800f060 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 fa87 	bl	800f56c <HAL_TIM_IC_CaptureCallback>
 800f05e:	e005      	b.n	800f06c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 fa79 	bl	800f558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 fa8a 	bl	800f580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	691b      	ldr	r3, [r3, #16]
 800f078:	f003 0310 	and.w	r3, r3, #16
 800f07c:	2b10      	cmp	r3, #16
 800f07e:	d122      	bne.n	800f0c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	f003 0310 	and.w	r3, r3, #16
 800f08a:	2b10      	cmp	r3, #16
 800f08c:	d11b      	bne.n	800f0c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f06f 0210 	mvn.w	r2, #16
 800f096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2208      	movs	r2, #8
 800f09c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	69db      	ldr	r3, [r3, #28]
 800f0a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d003      	beq.n	800f0b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 fa5d 	bl	800f56c <HAL_TIM_IC_CaptureCallback>
 800f0b2:	e005      	b.n	800f0c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 fa4f 	bl	800f558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 fa60 	bl	800f580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	f003 0301 	and.w	r3, r3, #1
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d10e      	bne.n	800f0f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	f003 0301 	and.w	r3, r3, #1
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d107      	bne.n	800f0f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f06f 0201 	mvn.w	r2, #1
 800f0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7f3 fb71 	bl	80027d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	691b      	ldr	r3, [r3, #16]
 800f0f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0fc:	2b80      	cmp	r3, #128	; 0x80
 800f0fe:	d10e      	bne.n	800f11e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f10a:	2b80      	cmp	r3, #128	; 0x80
 800f10c:	d107      	bne.n	800f11e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 fef3 	bl	800ff04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	691b      	ldr	r3, [r3, #16]
 800f124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f12c:	d10e      	bne.n	800f14c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f138:	2b80      	cmp	r3, #128	; 0x80
 800f13a:	d107      	bne.n	800f14c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 fee6 	bl	800ff18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	691b      	ldr	r3, [r3, #16]
 800f152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f156:	2b40      	cmp	r3, #64	; 0x40
 800f158:	d10e      	bne.n	800f178 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f164:	2b40      	cmp	r3, #64	; 0x40
 800f166:	d107      	bne.n	800f178 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 fa0e 	bl	800f594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	f003 0320 	and.w	r3, r3, #32
 800f182:	2b20      	cmp	r3, #32
 800f184:	d10e      	bne.n	800f1a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	68db      	ldr	r3, [r3, #12]
 800f18c:	f003 0320 	and.w	r3, r3, #32
 800f190:	2b20      	cmp	r3, #32
 800f192:	d107      	bne.n	800f1a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f06f 0220 	mvn.w	r2, #32
 800f19c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fea6 	bl	800fef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1a4:	bf00      	nop
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d101      	bne.n	800f1c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f1c2:	2302      	movs	r3, #2
 800f1c4:	e0fd      	b.n	800f3c2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b14      	cmp	r3, #20
 800f1d2:	f200 80f0 	bhi.w	800f3b6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f1d6:	a201      	add	r2, pc, #4	; (adr r2, 800f1dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1dc:	0800f231 	.word	0x0800f231
 800f1e0:	0800f3b7 	.word	0x0800f3b7
 800f1e4:	0800f3b7 	.word	0x0800f3b7
 800f1e8:	0800f3b7 	.word	0x0800f3b7
 800f1ec:	0800f271 	.word	0x0800f271
 800f1f0:	0800f3b7 	.word	0x0800f3b7
 800f1f4:	0800f3b7 	.word	0x0800f3b7
 800f1f8:	0800f3b7 	.word	0x0800f3b7
 800f1fc:	0800f2b3 	.word	0x0800f2b3
 800f200:	0800f3b7 	.word	0x0800f3b7
 800f204:	0800f3b7 	.word	0x0800f3b7
 800f208:	0800f3b7 	.word	0x0800f3b7
 800f20c:	0800f2f3 	.word	0x0800f2f3
 800f210:	0800f3b7 	.word	0x0800f3b7
 800f214:	0800f3b7 	.word	0x0800f3b7
 800f218:	0800f3b7 	.word	0x0800f3b7
 800f21c:	0800f335 	.word	0x0800f335
 800f220:	0800f3b7 	.word	0x0800f3b7
 800f224:	0800f3b7 	.word	0x0800f3b7
 800f228:	0800f3b7 	.word	0x0800f3b7
 800f22c:	0800f375 	.word	0x0800f375
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	68b9      	ldr	r1, [r7, #8]
 800f236:	4618      	mov	r0, r3
 800f238:	f000 fa56 	bl	800f6e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	699a      	ldr	r2, [r3, #24]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f042 0208 	orr.w	r2, r2, #8
 800f24a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	699a      	ldr	r2, [r3, #24]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f022 0204 	bic.w	r2, r2, #4
 800f25a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6999      	ldr	r1, [r3, #24]
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	691a      	ldr	r2, [r3, #16]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	430a      	orrs	r2, r1
 800f26c:	619a      	str	r2, [r3, #24]
      break;
 800f26e:	e0a3      	b.n	800f3b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	68b9      	ldr	r1, [r7, #8]
 800f276:	4618      	mov	r0, r3
 800f278:	f000 faa8 	bl	800f7cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	699a      	ldr	r2, [r3, #24]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f28a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	699a      	ldr	r2, [r3, #24]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f29a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	6999      	ldr	r1, [r3, #24]
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	021a      	lsls	r2, r3, #8
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	430a      	orrs	r2, r1
 800f2ae:	619a      	str	r2, [r3, #24]
      break;
 800f2b0:	e082      	b.n	800f3b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	68b9      	ldr	r1, [r7, #8]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f000 faff 	bl	800f8bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	69da      	ldr	r2, [r3, #28]
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f042 0208 	orr.w	r2, r2, #8
 800f2cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	69da      	ldr	r2, [r3, #28]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f022 0204 	bic.w	r2, r2, #4
 800f2dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	69d9      	ldr	r1, [r3, #28]
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	691a      	ldr	r2, [r3, #16]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	430a      	orrs	r2, r1
 800f2ee:	61da      	str	r2, [r3, #28]
      break;
 800f2f0:	e062      	b.n	800f3b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	68b9      	ldr	r1, [r7, #8]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f000 fb55 	bl	800f9a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	69da      	ldr	r2, [r3, #28]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f30c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	69da      	ldr	r2, [r3, #28]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f31c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	69d9      	ldr	r1, [r3, #28]
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	691b      	ldr	r3, [r3, #16]
 800f328:	021a      	lsls	r2, r3, #8
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	430a      	orrs	r2, r1
 800f330:	61da      	str	r2, [r3, #28]
      break;
 800f332:	e041      	b.n	800f3b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	68b9      	ldr	r1, [r7, #8]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f000 fb8c 	bl	800fa58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f042 0208 	orr.w	r2, r2, #8
 800f34e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f022 0204 	bic.w	r2, r2, #4
 800f35e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	691a      	ldr	r2, [r3, #16]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	430a      	orrs	r2, r1
 800f370:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f372:	e021      	b.n	800f3b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	68b9      	ldr	r1, [r7, #8]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f000 fbbe 	bl	800fafc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f38e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f39e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	021a      	lsls	r2, r3, #8
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	430a      	orrs	r2, r1
 800f3b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f3b4:	e000      	b.n	800f3b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f3b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop

0800f3cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d101      	bne.n	800f3e4 <HAL_TIM_ConfigClockSource+0x18>
 800f3e0:	2302      	movs	r3, #2
 800f3e2:	e0b3      	b.n	800f54c <HAL_TIM_ConfigClockSource+0x180>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2202      	movs	r2, #2
 800f3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	4b55      	ldr	r3, [pc, #340]	; (800f554 <HAL_TIM_ConfigClockSource+0x188>)
 800f400:	4013      	ands	r3, r2
 800f402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f40a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f41c:	d03e      	beq.n	800f49c <HAL_TIM_ConfigClockSource+0xd0>
 800f41e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f422:	f200 8087 	bhi.w	800f534 <HAL_TIM_ConfigClockSource+0x168>
 800f426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f42a:	f000 8085 	beq.w	800f538 <HAL_TIM_ConfigClockSource+0x16c>
 800f42e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f432:	d87f      	bhi.n	800f534 <HAL_TIM_ConfigClockSource+0x168>
 800f434:	2b70      	cmp	r3, #112	; 0x70
 800f436:	d01a      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0xa2>
 800f438:	2b70      	cmp	r3, #112	; 0x70
 800f43a:	d87b      	bhi.n	800f534 <HAL_TIM_ConfigClockSource+0x168>
 800f43c:	2b60      	cmp	r3, #96	; 0x60
 800f43e:	d050      	beq.n	800f4e2 <HAL_TIM_ConfigClockSource+0x116>
 800f440:	2b60      	cmp	r3, #96	; 0x60
 800f442:	d877      	bhi.n	800f534 <HAL_TIM_ConfigClockSource+0x168>
 800f444:	2b50      	cmp	r3, #80	; 0x50
 800f446:	d03c      	beq.n	800f4c2 <HAL_TIM_ConfigClockSource+0xf6>
 800f448:	2b50      	cmp	r3, #80	; 0x50
 800f44a:	d873      	bhi.n	800f534 <HAL_TIM_ConfigClockSource+0x168>
 800f44c:	2b40      	cmp	r3, #64	; 0x40
 800f44e:	d058      	beq.n	800f502 <HAL_TIM_ConfigClockSource+0x136>
 800f450:	2b40      	cmp	r3, #64	; 0x40
 800f452:	d86f      	bhi.n	800f534 <HAL_TIM_ConfigClockSource+0x168>
 800f454:	2b30      	cmp	r3, #48	; 0x30
 800f456:	d064      	beq.n	800f522 <HAL_TIM_ConfigClockSource+0x156>
 800f458:	2b30      	cmp	r3, #48	; 0x30
 800f45a:	d86b      	bhi.n	800f534 <HAL_TIM_ConfigClockSource+0x168>
 800f45c:	2b20      	cmp	r3, #32
 800f45e:	d060      	beq.n	800f522 <HAL_TIM_ConfigClockSource+0x156>
 800f460:	2b20      	cmp	r3, #32
 800f462:	d867      	bhi.n	800f534 <HAL_TIM_ConfigClockSource+0x168>
 800f464:	2b00      	cmp	r3, #0
 800f466:	d05c      	beq.n	800f522 <HAL_TIM_ConfigClockSource+0x156>
 800f468:	2b10      	cmp	r3, #16
 800f46a:	d05a      	beq.n	800f522 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f46c:	e062      	b.n	800f534 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6818      	ldr	r0, [r3, #0]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	6899      	ldr	r1, [r3, #8]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	685a      	ldr	r2, [r3, #4]
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	f000 fc0b 	bl	800fc98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f490:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	609a      	str	r2, [r3, #8]
      break;
 800f49a:	e04e      	b.n	800f53a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6818      	ldr	r0, [r3, #0]
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	6899      	ldr	r1, [r3, #8]
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	f000 fbf4 	bl	800fc98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	689a      	ldr	r2, [r3, #8]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f4be:	609a      	str	r2, [r3, #8]
      break;
 800f4c0:	e03b      	b.n	800f53a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6818      	ldr	r0, [r3, #0]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	6859      	ldr	r1, [r3, #4]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	f000 fb68 	bl	800fba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2150      	movs	r1, #80	; 0x50
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 fbc1 	bl	800fc62 <TIM_ITRx_SetConfig>
      break;
 800f4e0:	e02b      	b.n	800f53a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6818      	ldr	r0, [r3, #0]
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	6859      	ldr	r1, [r3, #4]
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	f000 fb87 	bl	800fc02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2160      	movs	r1, #96	; 0x60
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f000 fbb1 	bl	800fc62 <TIM_ITRx_SetConfig>
      break;
 800f500:	e01b      	b.n	800f53a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6818      	ldr	r0, [r3, #0]
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	6859      	ldr	r1, [r3, #4]
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	461a      	mov	r2, r3
 800f510:	f000 fb48 	bl	800fba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2140      	movs	r1, #64	; 0x40
 800f51a:	4618      	mov	r0, r3
 800f51c:	f000 fba1 	bl	800fc62 <TIM_ITRx_SetConfig>
      break;
 800f520:	e00b      	b.n	800f53a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4619      	mov	r1, r3
 800f52c:	4610      	mov	r0, r2
 800f52e:	f000 fb98 	bl	800fc62 <TIM_ITRx_SetConfig>
        break;
 800f532:	e002      	b.n	800f53a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f534:	bf00      	nop
 800f536:	e000      	b.n	800f53a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f538:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2201      	movs	r2, #1
 800f53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	fffeff88 	.word	0xfffeff88

0800f558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f558:	b480      	push	{r7}
 800f55a:	b083      	sub	sp, #12
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f560:	bf00      	nop
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f588:	bf00      	nop
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f59c:	bf00      	nop
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b085      	sub	sp, #20
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4a40      	ldr	r2, [pc, #256]	; (800f6bc <TIM_Base_SetConfig+0x114>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d013      	beq.n	800f5e8 <TIM_Base_SetConfig+0x40>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5c6:	d00f      	beq.n	800f5e8 <TIM_Base_SetConfig+0x40>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a3d      	ldr	r2, [pc, #244]	; (800f6c0 <TIM_Base_SetConfig+0x118>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d00b      	beq.n	800f5e8 <TIM_Base_SetConfig+0x40>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a3c      	ldr	r2, [pc, #240]	; (800f6c4 <TIM_Base_SetConfig+0x11c>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d007      	beq.n	800f5e8 <TIM_Base_SetConfig+0x40>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a3b      	ldr	r2, [pc, #236]	; (800f6c8 <TIM_Base_SetConfig+0x120>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d003      	beq.n	800f5e8 <TIM_Base_SetConfig+0x40>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a3a      	ldr	r2, [pc, #232]	; (800f6cc <TIM_Base_SetConfig+0x124>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d108      	bne.n	800f5fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a2f      	ldr	r2, [pc, #188]	; (800f6bc <TIM_Base_SetConfig+0x114>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d02b      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f608:	d027      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a2c      	ldr	r2, [pc, #176]	; (800f6c0 <TIM_Base_SetConfig+0x118>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d023      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4a2b      	ldr	r2, [pc, #172]	; (800f6c4 <TIM_Base_SetConfig+0x11c>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d01f      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	4a2a      	ldr	r2, [pc, #168]	; (800f6c8 <TIM_Base_SetConfig+0x120>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d01b      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a29      	ldr	r2, [pc, #164]	; (800f6cc <TIM_Base_SetConfig+0x124>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d017      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4a28      	ldr	r2, [pc, #160]	; (800f6d0 <TIM_Base_SetConfig+0x128>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d013      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4a27      	ldr	r2, [pc, #156]	; (800f6d4 <TIM_Base_SetConfig+0x12c>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d00f      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4a26      	ldr	r2, [pc, #152]	; (800f6d8 <TIM_Base_SetConfig+0x130>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d00b      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a25      	ldr	r2, [pc, #148]	; (800f6dc <TIM_Base_SetConfig+0x134>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d007      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a24      	ldr	r2, [pc, #144]	; (800f6e0 <TIM_Base_SetConfig+0x138>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d003      	beq.n	800f65a <TIM_Base_SetConfig+0xb2>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4a23      	ldr	r2, [pc, #140]	; (800f6e4 <TIM_Base_SetConfig+0x13c>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d108      	bne.n	800f66c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	4313      	orrs	r3, r2
 800f66a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	695b      	ldr	r3, [r3, #20]
 800f676:	4313      	orrs	r3, r2
 800f678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	68fa      	ldr	r2, [r7, #12]
 800f67e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	689a      	ldr	r2, [r3, #8]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a0a      	ldr	r2, [pc, #40]	; (800f6bc <TIM_Base_SetConfig+0x114>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d003      	beq.n	800f6a0 <TIM_Base_SetConfig+0xf8>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4a0c      	ldr	r2, [pc, #48]	; (800f6cc <TIM_Base_SetConfig+0x124>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d103      	bne.n	800f6a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	691a      	ldr	r2, [r3, #16]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	615a      	str	r2, [r3, #20]
}
 800f6ae:	bf00      	nop
 800f6b0:	3714      	adds	r7, #20
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	40010000 	.word	0x40010000
 800f6c0:	40000400 	.word	0x40000400
 800f6c4:	40000800 	.word	0x40000800
 800f6c8:	40000c00 	.word	0x40000c00
 800f6cc:	40010400 	.word	0x40010400
 800f6d0:	40014000 	.word	0x40014000
 800f6d4:	40014400 	.word	0x40014400
 800f6d8:	40014800 	.word	0x40014800
 800f6dc:	40001800 	.word	0x40001800
 800f6e0:	40001c00 	.word	0x40001c00
 800f6e4:	40002000 	.word	0x40002000

0800f6e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b087      	sub	sp, #28
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6a1b      	ldr	r3, [r3, #32]
 800f6f6:	f023 0201 	bic.w	r2, r3, #1
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	4b2b      	ldr	r3, [pc, #172]	; (800f7c0 <TIM_OC1_SetConfig+0xd8>)
 800f714:	4013      	ands	r3, r2
 800f716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f023 0303 	bic.w	r3, r3, #3
 800f71e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	4313      	orrs	r3, r2
 800f728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	f023 0302 	bic.w	r3, r3, #2
 800f730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	697a      	ldr	r2, [r7, #20]
 800f738:	4313      	orrs	r3, r2
 800f73a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4a21      	ldr	r2, [pc, #132]	; (800f7c4 <TIM_OC1_SetConfig+0xdc>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d003      	beq.n	800f74c <TIM_OC1_SetConfig+0x64>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	4a20      	ldr	r2, [pc, #128]	; (800f7c8 <TIM_OC1_SetConfig+0xe0>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d10c      	bne.n	800f766 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	f023 0308 	bic.w	r3, r3, #8
 800f752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	697a      	ldr	r2, [r7, #20]
 800f75a:	4313      	orrs	r3, r2
 800f75c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	f023 0304 	bic.w	r3, r3, #4
 800f764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4a16      	ldr	r2, [pc, #88]	; (800f7c4 <TIM_OC1_SetConfig+0xdc>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d003      	beq.n	800f776 <TIM_OC1_SetConfig+0x8e>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4a15      	ldr	r2, [pc, #84]	; (800f7c8 <TIM_OC1_SetConfig+0xe0>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d111      	bne.n	800f79a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f77c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	695b      	ldr	r3, [r3, #20]
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	699b      	ldr	r3, [r3, #24]
 800f794:	693a      	ldr	r2, [r7, #16]
 800f796:	4313      	orrs	r3, r2
 800f798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	693a      	ldr	r2, [r7, #16]
 800f79e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68fa      	ldr	r2, [r7, #12]
 800f7a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	685a      	ldr	r2, [r3, #4]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	697a      	ldr	r2, [r7, #20]
 800f7b2:	621a      	str	r2, [r3, #32]
}
 800f7b4:	bf00      	nop
 800f7b6:	371c      	adds	r7, #28
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	fffeff8f 	.word	0xfffeff8f
 800f7c4:	40010000 	.word	0x40010000
 800f7c8:	40010400 	.word	0x40010400

0800f7cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b087      	sub	sp, #28
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a1b      	ldr	r3, [r3, #32]
 800f7da:	f023 0210 	bic.w	r2, r3, #16
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6a1b      	ldr	r3, [r3, #32]
 800f7e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	699b      	ldr	r3, [r3, #24]
 800f7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	4b2e      	ldr	r3, [pc, #184]	; (800f8b0 <TIM_OC2_SetConfig+0xe4>)
 800f7f8:	4013      	ands	r3, r2
 800f7fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	021b      	lsls	r3, r3, #8
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	4313      	orrs	r3, r2
 800f80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	f023 0320 	bic.w	r3, r3, #32
 800f816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	011b      	lsls	r3, r3, #4
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	4313      	orrs	r3, r2
 800f822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a23      	ldr	r2, [pc, #140]	; (800f8b4 <TIM_OC2_SetConfig+0xe8>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d003      	beq.n	800f834 <TIM_OC2_SetConfig+0x68>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4a22      	ldr	r2, [pc, #136]	; (800f8b8 <TIM_OC2_SetConfig+0xec>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d10d      	bne.n	800f850 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f83a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	011b      	lsls	r3, r3, #4
 800f842:	697a      	ldr	r2, [r7, #20]
 800f844:	4313      	orrs	r3, r2
 800f846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f84e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4a18      	ldr	r2, [pc, #96]	; (800f8b4 <TIM_OC2_SetConfig+0xe8>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d003      	beq.n	800f860 <TIM_OC2_SetConfig+0x94>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4a17      	ldr	r2, [pc, #92]	; (800f8b8 <TIM_OC2_SetConfig+0xec>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d113      	bne.n	800f888 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f86e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	695b      	ldr	r3, [r3, #20]
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	693a      	ldr	r2, [r7, #16]
 800f878:	4313      	orrs	r3, r2
 800f87a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	699b      	ldr	r3, [r3, #24]
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	693a      	ldr	r2, [r7, #16]
 800f884:	4313      	orrs	r3, r2
 800f886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	693a      	ldr	r2, [r7, #16]
 800f88c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	685a      	ldr	r2, [r3, #4]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	697a      	ldr	r2, [r7, #20]
 800f8a0:	621a      	str	r2, [r3, #32]
}
 800f8a2:	bf00      	nop
 800f8a4:	371c      	adds	r7, #28
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop
 800f8b0:	feff8fff 	.word	0xfeff8fff
 800f8b4:	40010000 	.word	0x40010000
 800f8b8:	40010400 	.word	0x40010400

0800f8bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b087      	sub	sp, #28
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a1b      	ldr	r3, [r3, #32]
 800f8d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	69db      	ldr	r3, [r3, #28]
 800f8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f8e4:	68fa      	ldr	r2, [r7, #12]
 800f8e6:	4b2d      	ldr	r3, [pc, #180]	; (800f99c <TIM_OC3_SetConfig+0xe0>)
 800f8e8:	4013      	ands	r3, r2
 800f8ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f023 0303 	bic.w	r3, r3, #3
 800f8f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	689b      	ldr	r3, [r3, #8]
 800f90a:	021b      	lsls	r3, r3, #8
 800f90c:	697a      	ldr	r2, [r7, #20]
 800f90e:	4313      	orrs	r3, r2
 800f910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4a22      	ldr	r2, [pc, #136]	; (800f9a0 <TIM_OC3_SetConfig+0xe4>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d003      	beq.n	800f922 <TIM_OC3_SetConfig+0x66>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4a21      	ldr	r2, [pc, #132]	; (800f9a4 <TIM_OC3_SetConfig+0xe8>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d10d      	bne.n	800f93e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	021b      	lsls	r3, r3, #8
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	4313      	orrs	r3, r2
 800f934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f93c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4a17      	ldr	r2, [pc, #92]	; (800f9a0 <TIM_OC3_SetConfig+0xe4>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d003      	beq.n	800f94e <TIM_OC3_SetConfig+0x92>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4a16      	ldr	r2, [pc, #88]	; (800f9a4 <TIM_OC3_SetConfig+0xe8>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d113      	bne.n	800f976 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f95c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	695b      	ldr	r3, [r3, #20]
 800f962:	011b      	lsls	r3, r3, #4
 800f964:	693a      	ldr	r2, [r7, #16]
 800f966:	4313      	orrs	r3, r2
 800f968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	699b      	ldr	r3, [r3, #24]
 800f96e:	011b      	lsls	r3, r3, #4
 800f970:	693a      	ldr	r2, [r7, #16]
 800f972:	4313      	orrs	r3, r2
 800f974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	693a      	ldr	r2, [r7, #16]
 800f97a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	68fa      	ldr	r2, [r7, #12]
 800f980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	685a      	ldr	r2, [r3, #4]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	697a      	ldr	r2, [r7, #20]
 800f98e:	621a      	str	r2, [r3, #32]
}
 800f990:	bf00      	nop
 800f992:	371c      	adds	r7, #28
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr
 800f99c:	fffeff8f 	.word	0xfffeff8f
 800f9a0:	40010000 	.word	0x40010000
 800f9a4:	40010400 	.word	0x40010400

0800f9a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b087      	sub	sp, #28
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6a1b      	ldr	r3, [r3, #32]
 800f9b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	69db      	ldr	r3, [r3, #28]
 800f9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	4b1e      	ldr	r3, [pc, #120]	; (800fa4c <TIM_OC4_SetConfig+0xa4>)
 800f9d4:	4013      	ands	r3, r2
 800f9d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	021b      	lsls	r3, r3, #8
 800f9e6:	68fa      	ldr	r2, [r7, #12]
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	031b      	lsls	r3, r3, #12
 800f9fa:	693a      	ldr	r2, [r7, #16]
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4a13      	ldr	r2, [pc, #76]	; (800fa50 <TIM_OC4_SetConfig+0xa8>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d003      	beq.n	800fa10 <TIM_OC4_SetConfig+0x68>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4a12      	ldr	r2, [pc, #72]	; (800fa54 <TIM_OC4_SetConfig+0xac>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d109      	bne.n	800fa24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	695b      	ldr	r3, [r3, #20]
 800fa1c:	019b      	lsls	r3, r3, #6
 800fa1e:	697a      	ldr	r2, [r7, #20]
 800fa20:	4313      	orrs	r3, r2
 800fa22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	697a      	ldr	r2, [r7, #20]
 800fa28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	685a      	ldr	r2, [r3, #4]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	693a      	ldr	r2, [r7, #16]
 800fa3c:	621a      	str	r2, [r3, #32]
}
 800fa3e:	bf00      	nop
 800fa40:	371c      	adds	r7, #28
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
 800fa4a:	bf00      	nop
 800fa4c:	feff8fff 	.word	0xfeff8fff
 800fa50:	40010000 	.word	0x40010000
 800fa54:	40010400 	.word	0x40010400

0800fa58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b087      	sub	sp, #28
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6a1b      	ldr	r3, [r3, #32]
 800fa66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6a1b      	ldr	r3, [r3, #32]
 800fa72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	4b1b      	ldr	r3, [pc, #108]	; (800faf0 <TIM_OC5_SetConfig+0x98>)
 800fa84:	4013      	ands	r3, r2
 800fa86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	041b      	lsls	r3, r3, #16
 800faa0:	693a      	ldr	r2, [r7, #16]
 800faa2:	4313      	orrs	r3, r2
 800faa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4a12      	ldr	r2, [pc, #72]	; (800faf4 <TIM_OC5_SetConfig+0x9c>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d003      	beq.n	800fab6 <TIM_OC5_SetConfig+0x5e>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4a11      	ldr	r2, [pc, #68]	; (800faf8 <TIM_OC5_SetConfig+0xa0>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d109      	bne.n	800faca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fabc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	695b      	ldr	r3, [r3, #20]
 800fac2:	021b      	lsls	r3, r3, #8
 800fac4:	697a      	ldr	r2, [r7, #20]
 800fac6:	4313      	orrs	r3, r2
 800fac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	697a      	ldr	r2, [r7, #20]
 800face:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	685a      	ldr	r2, [r3, #4]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	693a      	ldr	r2, [r7, #16]
 800fae2:	621a      	str	r2, [r3, #32]
}
 800fae4:	bf00      	nop
 800fae6:	371c      	adds	r7, #28
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr
 800faf0:	fffeff8f 	.word	0xfffeff8f
 800faf4:	40010000 	.word	0x40010000
 800faf8:	40010400 	.word	0x40010400

0800fafc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b087      	sub	sp, #28
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6a1b      	ldr	r3, [r3, #32]
 800fb0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a1b      	ldr	r3, [r3, #32]
 800fb16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb24:	68fa      	ldr	r2, [r7, #12]
 800fb26:	4b1c      	ldr	r3, [pc, #112]	; (800fb98 <TIM_OC6_SetConfig+0x9c>)
 800fb28:	4013      	ands	r3, r2
 800fb2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	021b      	lsls	r3, r3, #8
 800fb32:	68fa      	ldr	r2, [r7, #12]
 800fb34:	4313      	orrs	r3, r2
 800fb36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	689b      	ldr	r3, [r3, #8]
 800fb44:	051b      	lsls	r3, r3, #20
 800fb46:	693a      	ldr	r2, [r7, #16]
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a13      	ldr	r2, [pc, #76]	; (800fb9c <TIM_OC6_SetConfig+0xa0>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d003      	beq.n	800fb5c <TIM_OC6_SetConfig+0x60>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a12      	ldr	r2, [pc, #72]	; (800fba0 <TIM_OC6_SetConfig+0xa4>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d109      	bne.n	800fb70 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	695b      	ldr	r3, [r3, #20]
 800fb68:	029b      	lsls	r3, r3, #10
 800fb6a:	697a      	ldr	r2, [r7, #20]
 800fb6c:	4313      	orrs	r3, r2
 800fb6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	685a      	ldr	r2, [r3, #4]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	693a      	ldr	r2, [r7, #16]
 800fb88:	621a      	str	r2, [r3, #32]
}
 800fb8a:	bf00      	nop
 800fb8c:	371c      	adds	r7, #28
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	feff8fff 	.word	0xfeff8fff
 800fb9c:	40010000 	.word	0x40010000
 800fba0:	40010400 	.word	0x40010400

0800fba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b087      	sub	sp, #28
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6a1b      	ldr	r3, [r3, #32]
 800fbb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	f023 0201 	bic.w	r2, r3, #1
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	699b      	ldr	r3, [r3, #24]
 800fbc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fbce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	011b      	lsls	r3, r3, #4
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	f023 030a 	bic.w	r3, r3, #10
 800fbe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fbe2:	697a      	ldr	r2, [r7, #20]
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	693a      	ldr	r2, [r7, #16]
 800fbee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	697a      	ldr	r2, [r7, #20]
 800fbf4:	621a      	str	r2, [r3, #32]
}
 800fbf6:	bf00      	nop
 800fbf8:	371c      	adds	r7, #28
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr

0800fc02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc02:	b480      	push	{r7}
 800fc04:	b087      	sub	sp, #28
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	60f8      	str	r0, [r7, #12]
 800fc0a:	60b9      	str	r1, [r7, #8]
 800fc0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	6a1b      	ldr	r3, [r3, #32]
 800fc12:	f023 0210 	bic.w	r2, r3, #16
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	699b      	ldr	r3, [r3, #24]
 800fc1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	6a1b      	ldr	r3, [r3, #32]
 800fc24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	031b      	lsls	r3, r3, #12
 800fc32:	697a      	ldr	r2, [r7, #20]
 800fc34:	4313      	orrs	r3, r2
 800fc36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fc3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	011b      	lsls	r3, r3, #4
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	697a      	ldr	r2, [r7, #20]
 800fc4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	693a      	ldr	r2, [r7, #16]
 800fc54:	621a      	str	r2, [r3, #32]
}
 800fc56:	bf00      	nop
 800fc58:	371c      	adds	r7, #28
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr

0800fc62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fc62:	b480      	push	{r7}
 800fc64:	b085      	sub	sp, #20
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
 800fc6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc7a:	683a      	ldr	r2, [r7, #0]
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	f043 0307 	orr.w	r3, r3, #7
 800fc84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	609a      	str	r2, [r3, #8]
}
 800fc8c:	bf00      	nop
 800fc8e:	3714      	adds	r7, #20
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b087      	sub	sp, #28
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
 800fca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fcb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	021a      	lsls	r2, r3, #8
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	431a      	orrs	r2, r3
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	697a      	ldr	r2, [r7, #20]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	609a      	str	r2, [r3, #8]
}
 800fccc:	bf00      	nop
 800fcce:	371c      	adds	r7, #28
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b085      	sub	sp, #20
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d101      	bne.n	800fcf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fcec:	2302      	movs	r3, #2
 800fcee:	e06d      	b.n	800fdcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2202      	movs	r2, #2
 800fcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a30      	ldr	r2, [pc, #192]	; (800fdd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d004      	beq.n	800fd24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a2f      	ldr	r2, [pc, #188]	; (800fddc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d108      	bne.n	800fd36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fd2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	4313      	orrs	r3, r2
 800fd34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	4313      	orrs	r3, r2
 800fd46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a20      	ldr	r2, [pc, #128]	; (800fdd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d022      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd62:	d01d      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a1d      	ldr	r2, [pc, #116]	; (800fde0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d018      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a1c      	ldr	r2, [pc, #112]	; (800fde4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d013      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a1a      	ldr	r2, [pc, #104]	; (800fde8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d00e      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	4a15      	ldr	r2, [pc, #84]	; (800fddc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d009      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4a16      	ldr	r2, [pc, #88]	; (800fdec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d004      	beq.n	800fda0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4a15      	ldr	r2, [pc, #84]	; (800fdf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d10c      	bne.n	800fdba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fda6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	68ba      	ldr	r2, [r7, #8]
 800fdb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fdca:	2300      	movs	r3, #0
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3714      	adds	r7, #20
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr
 800fdd8:	40010000 	.word	0x40010000
 800fddc:	40010400 	.word	0x40010400
 800fde0:	40000400 	.word	0x40000400
 800fde4:	40000800 	.word	0x40000800
 800fde8:	40000c00 	.word	0x40000c00
 800fdec:	40014000 	.word	0x40014000
 800fdf0:	40001800 	.word	0x40001800

0800fdf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b085      	sub	sp, #20
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d101      	bne.n	800fe10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe0c:	2302      	movs	r3, #2
 800fe0e:	e065      	b.n	800fedc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2201      	movs	r2, #1
 800fe14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	4313      	orrs	r3, r2
 800fe24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	695b      	ldr	r3, [r3, #20]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe76:	4313      	orrs	r3, r2
 800fe78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	041b      	lsls	r3, r3, #16
 800fe86:	4313      	orrs	r3, r2
 800fe88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a16      	ldr	r2, [pc, #88]	; (800fee8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d004      	beq.n	800fe9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a14      	ldr	r2, [pc, #80]	; (800feec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d115      	bne.n	800feca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea8:	051b      	lsls	r3, r3, #20
 800feaa:	4313      	orrs	r3, r2
 800feac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	69db      	ldr	r3, [r3, #28]
 800feb8:	4313      	orrs	r3, r2
 800feba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	6a1b      	ldr	r3, [r3, #32]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3714      	adds	r7, #20
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	40010000 	.word	0x40010000
 800feec:	40010400 	.word	0x40010400

0800fef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d101      	bne.n	800ff3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	e040      	b.n	800ffc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d106      	bne.n	800ff54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7f3 fb24 	bl	800359c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2224      	movs	r2, #36	; 0x24
 800ff58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f022 0201 	bic.w	r2, r2, #1
 800ff68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 fa38 	bl	80103e0 <UART_SetConfig>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d101      	bne.n	800ff7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ff76:	2301      	movs	r3, #1
 800ff78:	e022      	b.n	800ffc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d002      	beq.n	800ff88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f000 fc8e 	bl	80108a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	685a      	ldr	r2, [r3, #4]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	689a      	ldr	r2, [r3, #8]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f042 0201 	orr.w	r2, r2, #1
 800ffb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 fd15 	bl	80109e8 <UART_CheckIdleState>
 800ffbe:	4603      	mov	r3, r0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b088      	sub	sp, #32
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	69db      	ldr	r3, [r3, #28]
 800ffd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ffe8:	69fa      	ldr	r2, [r7, #28]
 800ffea:	f640 030f 	movw	r3, #2063	; 0x80f
 800ffee:	4013      	ands	r3, r2
 800fff0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d113      	bne.n	8010020 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	f003 0320 	and.w	r3, r3, #32
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00e      	beq.n	8010020 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	f003 0320 	and.w	r3, r3, #32
 8010008:	2b00      	cmp	r3, #0
 801000a:	d009      	beq.n	8010020 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010010:	2b00      	cmp	r3, #0
 8010012:	f000 81b9 	beq.w	8010388 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	4798      	blx	r3
      }
      return;
 801001e:	e1b3      	b.n	8010388 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	2b00      	cmp	r3, #0
 8010024:	f000 80e3 	beq.w	80101ee <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	f003 0301 	and.w	r3, r3, #1
 801002e:	2b00      	cmp	r3, #0
 8010030:	d105      	bne.n	801003e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010032:	69ba      	ldr	r2, [r7, #24]
 8010034:	4ba5      	ldr	r3, [pc, #660]	; (80102cc <HAL_UART_IRQHandler+0x304>)
 8010036:	4013      	ands	r3, r2
 8010038:	2b00      	cmp	r3, #0
 801003a:	f000 80d8 	beq.w	80101ee <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	f003 0301 	and.w	r3, r3, #1
 8010044:	2b00      	cmp	r3, #0
 8010046:	d010      	beq.n	801006a <HAL_UART_IRQHandler+0xa2>
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00b      	beq.n	801006a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2201      	movs	r2, #1
 8010058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010060:	f043 0201 	orr.w	r2, r3, #1
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	f003 0302 	and.w	r3, r3, #2
 8010070:	2b00      	cmp	r3, #0
 8010072:	d010      	beq.n	8010096 <HAL_UART_IRQHandler+0xce>
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00b      	beq.n	8010096 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2202      	movs	r2, #2
 8010084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801008c:	f043 0204 	orr.w	r2, r3, #4
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	f003 0304 	and.w	r3, r3, #4
 801009c:	2b00      	cmp	r3, #0
 801009e:	d010      	beq.n	80100c2 <HAL_UART_IRQHandler+0xfa>
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	f003 0301 	and.w	r3, r3, #1
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00b      	beq.n	80100c2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	2204      	movs	r2, #4
 80100b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100b8:	f043 0202 	orr.w	r2, r3, #2
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	f003 0308 	and.w	r3, r3, #8
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d015      	beq.n	80100f8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	f003 0320 	and.w	r3, r3, #32
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d104      	bne.n	80100e0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00b      	beq.n	80100f8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2208      	movs	r2, #8
 80100e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100ee:	f043 0208 	orr.w	r2, r3, #8
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d011      	beq.n	8010126 <HAL_UART_IRQHandler+0x15e>
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00c      	beq.n	8010126 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801011c:	f043 0220 	orr.w	r2, r3, #32
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801012c:	2b00      	cmp	r3, #0
 801012e:	f000 812d 	beq.w	801038c <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	f003 0320 	and.w	r3, r3, #32
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00c      	beq.n	8010156 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801013c:	69bb      	ldr	r3, [r7, #24]
 801013e:	f003 0320 	and.w	r3, r3, #32
 8010142:	2b00      	cmp	r3, #0
 8010144:	d007      	beq.n	8010156 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801014a:	2b00      	cmp	r3, #0
 801014c:	d003      	beq.n	8010156 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801015c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	689b      	ldr	r3, [r3, #8]
 8010164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010168:	2b40      	cmp	r3, #64	; 0x40
 801016a:	d004      	beq.n	8010176 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010172:	2b00      	cmp	r3, #0
 8010174:	d031      	beq.n	80101da <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 fce5 	bl	8010b46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	689b      	ldr	r3, [r3, #8]
 8010182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010186:	2b40      	cmp	r3, #64	; 0x40
 8010188:	d123      	bne.n	80101d2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	689a      	ldr	r2, [r3, #8]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010198:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d013      	beq.n	80101ca <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101a6:	4a4a      	ldr	r2, [pc, #296]	; (80102d0 <HAL_UART_IRQHandler+0x308>)
 80101a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7f6 fefe 	bl	8006fb0 <HAL_DMA_Abort_IT>
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d017      	beq.n	80101ea <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80101c4:	4610      	mov	r0, r2
 80101c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101c8:	e00f      	b.n	80101ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 f8f2 	bl	80103b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101d0:	e00b      	b.n	80101ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 f8ee 	bl	80103b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101d8:	e007      	b.n	80101ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 f8ea 	bl	80103b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80101e8:	e0d0      	b.n	801038c <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ea:	bf00      	nop
    return;
 80101ec:	e0ce      	b.n	801038c <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	f040 80a7 	bne.w	8010346 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	f003 0310 	and.w	r3, r3, #16
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f000 80a1 	beq.w	8010346 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	f003 0310 	and.w	r3, r3, #16
 801020a:	2b00      	cmp	r3, #0
 801020c:	f000 809b 	beq.w	8010346 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2210      	movs	r2, #16
 8010216:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010222:	2b40      	cmp	r3, #64	; 0x40
 8010224:	d156      	bne.n	80102d4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8010230:	893b      	ldrh	r3, [r7, #8]
 8010232:	2b00      	cmp	r3, #0
 8010234:	f000 80ac 	beq.w	8010390 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801023e:	893a      	ldrh	r2, [r7, #8]
 8010240:	429a      	cmp	r2, r3
 8010242:	f080 80a5 	bcs.w	8010390 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	893a      	ldrh	r2, [r7, #8]
 801024a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010252:	69db      	ldr	r3, [r3, #28]
 8010254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010258:	d02a      	beq.n	80102b0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010268:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	689a      	ldr	r2, [r3, #8]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f022 0201 	bic.w	r2, r2, #1
 8010278:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	689a      	ldr	r2, [r3, #8]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010288:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2220      	movs	r2, #32
 801028e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	f022 0210 	bic.w	r2, r2, #16
 80102a4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7f6 fe10 	bl	8006ed0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80102bc:	b29b      	uxth	r3, r3
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	4619      	mov	r1, r3
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 f87f 	bl	80103c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80102ca:	e061      	b.n	8010390 <HAL_UART_IRQHandler+0x3c8>
 80102cc:	04000120 	.word	0x04000120
 80102d0:	08010ba5 	.word	0x08010ba5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	1ad3      	subs	r3, r2, r3
 80102e4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d050      	beq.n	8010394 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 80102f2:	897b      	ldrh	r3, [r7, #10]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d04d      	beq.n	8010394 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010306:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	689a      	ldr	r2, [r3, #8]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f022 0201 	bic.w	r2, r2, #1
 8010316:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2220      	movs	r2, #32
 801031c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2200      	movs	r2, #0
 8010322:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f022 0210 	bic.w	r2, r2, #16
 8010338:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801033a:	897b      	ldrh	r3, [r7, #10]
 801033c:	4619      	mov	r1, r3
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 f842 	bl	80103c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010344:	e026      	b.n	8010394 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00d      	beq.n	801036c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010356:	2b00      	cmp	r3, #0
 8010358:	d008      	beq.n	801036c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801035e:	2b00      	cmp	r3, #0
 8010360:	d01a      	beq.n	8010398 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	4798      	blx	r3
    }
    return;
 801036a:	e015      	b.n	8010398 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010372:	2b00      	cmp	r3, #0
 8010374:	d011      	beq.n	801039a <HAL_UART_IRQHandler+0x3d2>
 8010376:	69bb      	ldr	r3, [r7, #24]
 8010378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801037c:	2b00      	cmp	r3, #0
 801037e:	d00c      	beq.n	801039a <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 fc25 	bl	8010bd0 <UART_EndTransmit_IT>
    return;
 8010386:	e008      	b.n	801039a <HAL_UART_IRQHandler+0x3d2>
      return;
 8010388:	bf00      	nop
 801038a:	e006      	b.n	801039a <HAL_UART_IRQHandler+0x3d2>
    return;
 801038c:	bf00      	nop
 801038e:	e004      	b.n	801039a <HAL_UART_IRQHandler+0x3d2>
      return;
 8010390:	bf00      	nop
 8010392:	e002      	b.n	801039a <HAL_UART_IRQHandler+0x3d2>
      return;
 8010394:	bf00      	nop
 8010396:	e000      	b.n	801039a <HAL_UART_IRQHandler+0x3d2>
    return;
 8010398:	bf00      	nop
  }

}
 801039a:	3720      	adds	r7, #32
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80103a8:	bf00      	nop
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80103bc:	bf00      	nop
 80103be:	370c      	adds	r7, #12
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	460b      	mov	r3, r1
 80103d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80103d4:	bf00      	nop
 80103d6:	370c      	adds	r7, #12
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr

080103e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b088      	sub	sp, #32
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80103e8:	2300      	movs	r3, #0
 80103ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	689a      	ldr	r2, [r3, #8]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	691b      	ldr	r3, [r3, #16]
 80103f4:	431a      	orrs	r2, r3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	695b      	ldr	r3, [r3, #20]
 80103fa:	431a      	orrs	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	69db      	ldr	r3, [r3, #28]
 8010400:	4313      	orrs	r3, r2
 8010402:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	4ba7      	ldr	r3, [pc, #668]	; (80106a8 <UART_SetConfig+0x2c8>)
 801040c:	4013      	ands	r3, r2
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	6812      	ldr	r2, [r2, #0]
 8010412:	6979      	ldr	r1, [r7, #20]
 8010414:	430b      	orrs	r3, r1
 8010416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	68da      	ldr	r2, [r3, #12]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	430a      	orrs	r2, r1
 801042c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	699b      	ldr	r3, [r3, #24]
 8010432:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a1b      	ldr	r3, [r3, #32]
 8010438:	697a      	ldr	r2, [r7, #20]
 801043a:	4313      	orrs	r3, r2
 801043c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	697a      	ldr	r2, [r7, #20]
 801044e:	430a      	orrs	r2, r1
 8010450:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a95      	ldr	r2, [pc, #596]	; (80106ac <UART_SetConfig+0x2cc>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d120      	bne.n	801049e <UART_SetConfig+0xbe>
 801045c:	4b94      	ldr	r3, [pc, #592]	; (80106b0 <UART_SetConfig+0x2d0>)
 801045e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010462:	f003 0303 	and.w	r3, r3, #3
 8010466:	2b03      	cmp	r3, #3
 8010468:	d816      	bhi.n	8010498 <UART_SetConfig+0xb8>
 801046a:	a201      	add	r2, pc, #4	; (adr r2, 8010470 <UART_SetConfig+0x90>)
 801046c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010470:	08010481 	.word	0x08010481
 8010474:	0801048d 	.word	0x0801048d
 8010478:	08010487 	.word	0x08010487
 801047c:	08010493 	.word	0x08010493
 8010480:	2301      	movs	r3, #1
 8010482:	77fb      	strb	r3, [r7, #31]
 8010484:	e14f      	b.n	8010726 <UART_SetConfig+0x346>
 8010486:	2302      	movs	r3, #2
 8010488:	77fb      	strb	r3, [r7, #31]
 801048a:	e14c      	b.n	8010726 <UART_SetConfig+0x346>
 801048c:	2304      	movs	r3, #4
 801048e:	77fb      	strb	r3, [r7, #31]
 8010490:	e149      	b.n	8010726 <UART_SetConfig+0x346>
 8010492:	2308      	movs	r3, #8
 8010494:	77fb      	strb	r3, [r7, #31]
 8010496:	e146      	b.n	8010726 <UART_SetConfig+0x346>
 8010498:	2310      	movs	r3, #16
 801049a:	77fb      	strb	r3, [r7, #31]
 801049c:	e143      	b.n	8010726 <UART_SetConfig+0x346>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	4a84      	ldr	r2, [pc, #528]	; (80106b4 <UART_SetConfig+0x2d4>)
 80104a4:	4293      	cmp	r3, r2
 80104a6:	d132      	bne.n	801050e <UART_SetConfig+0x12e>
 80104a8:	4b81      	ldr	r3, [pc, #516]	; (80106b0 <UART_SetConfig+0x2d0>)
 80104aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104ae:	f003 030c 	and.w	r3, r3, #12
 80104b2:	2b0c      	cmp	r3, #12
 80104b4:	d828      	bhi.n	8010508 <UART_SetConfig+0x128>
 80104b6:	a201      	add	r2, pc, #4	; (adr r2, 80104bc <UART_SetConfig+0xdc>)
 80104b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104bc:	080104f1 	.word	0x080104f1
 80104c0:	08010509 	.word	0x08010509
 80104c4:	08010509 	.word	0x08010509
 80104c8:	08010509 	.word	0x08010509
 80104cc:	080104fd 	.word	0x080104fd
 80104d0:	08010509 	.word	0x08010509
 80104d4:	08010509 	.word	0x08010509
 80104d8:	08010509 	.word	0x08010509
 80104dc:	080104f7 	.word	0x080104f7
 80104e0:	08010509 	.word	0x08010509
 80104e4:	08010509 	.word	0x08010509
 80104e8:	08010509 	.word	0x08010509
 80104ec:	08010503 	.word	0x08010503
 80104f0:	2300      	movs	r3, #0
 80104f2:	77fb      	strb	r3, [r7, #31]
 80104f4:	e117      	b.n	8010726 <UART_SetConfig+0x346>
 80104f6:	2302      	movs	r3, #2
 80104f8:	77fb      	strb	r3, [r7, #31]
 80104fa:	e114      	b.n	8010726 <UART_SetConfig+0x346>
 80104fc:	2304      	movs	r3, #4
 80104fe:	77fb      	strb	r3, [r7, #31]
 8010500:	e111      	b.n	8010726 <UART_SetConfig+0x346>
 8010502:	2308      	movs	r3, #8
 8010504:	77fb      	strb	r3, [r7, #31]
 8010506:	e10e      	b.n	8010726 <UART_SetConfig+0x346>
 8010508:	2310      	movs	r3, #16
 801050a:	77fb      	strb	r3, [r7, #31]
 801050c:	e10b      	b.n	8010726 <UART_SetConfig+0x346>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4a69      	ldr	r2, [pc, #420]	; (80106b8 <UART_SetConfig+0x2d8>)
 8010514:	4293      	cmp	r3, r2
 8010516:	d120      	bne.n	801055a <UART_SetConfig+0x17a>
 8010518:	4b65      	ldr	r3, [pc, #404]	; (80106b0 <UART_SetConfig+0x2d0>)
 801051a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801051e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010522:	2b30      	cmp	r3, #48	; 0x30
 8010524:	d013      	beq.n	801054e <UART_SetConfig+0x16e>
 8010526:	2b30      	cmp	r3, #48	; 0x30
 8010528:	d814      	bhi.n	8010554 <UART_SetConfig+0x174>
 801052a:	2b20      	cmp	r3, #32
 801052c:	d009      	beq.n	8010542 <UART_SetConfig+0x162>
 801052e:	2b20      	cmp	r3, #32
 8010530:	d810      	bhi.n	8010554 <UART_SetConfig+0x174>
 8010532:	2b00      	cmp	r3, #0
 8010534:	d002      	beq.n	801053c <UART_SetConfig+0x15c>
 8010536:	2b10      	cmp	r3, #16
 8010538:	d006      	beq.n	8010548 <UART_SetConfig+0x168>
 801053a:	e00b      	b.n	8010554 <UART_SetConfig+0x174>
 801053c:	2300      	movs	r3, #0
 801053e:	77fb      	strb	r3, [r7, #31]
 8010540:	e0f1      	b.n	8010726 <UART_SetConfig+0x346>
 8010542:	2302      	movs	r3, #2
 8010544:	77fb      	strb	r3, [r7, #31]
 8010546:	e0ee      	b.n	8010726 <UART_SetConfig+0x346>
 8010548:	2304      	movs	r3, #4
 801054a:	77fb      	strb	r3, [r7, #31]
 801054c:	e0eb      	b.n	8010726 <UART_SetConfig+0x346>
 801054e:	2308      	movs	r3, #8
 8010550:	77fb      	strb	r3, [r7, #31]
 8010552:	e0e8      	b.n	8010726 <UART_SetConfig+0x346>
 8010554:	2310      	movs	r3, #16
 8010556:	77fb      	strb	r3, [r7, #31]
 8010558:	e0e5      	b.n	8010726 <UART_SetConfig+0x346>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4a57      	ldr	r2, [pc, #348]	; (80106bc <UART_SetConfig+0x2dc>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d120      	bne.n	80105a6 <UART_SetConfig+0x1c6>
 8010564:	4b52      	ldr	r3, [pc, #328]	; (80106b0 <UART_SetConfig+0x2d0>)
 8010566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801056a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801056e:	2bc0      	cmp	r3, #192	; 0xc0
 8010570:	d013      	beq.n	801059a <UART_SetConfig+0x1ba>
 8010572:	2bc0      	cmp	r3, #192	; 0xc0
 8010574:	d814      	bhi.n	80105a0 <UART_SetConfig+0x1c0>
 8010576:	2b80      	cmp	r3, #128	; 0x80
 8010578:	d009      	beq.n	801058e <UART_SetConfig+0x1ae>
 801057a:	2b80      	cmp	r3, #128	; 0x80
 801057c:	d810      	bhi.n	80105a0 <UART_SetConfig+0x1c0>
 801057e:	2b00      	cmp	r3, #0
 8010580:	d002      	beq.n	8010588 <UART_SetConfig+0x1a8>
 8010582:	2b40      	cmp	r3, #64	; 0x40
 8010584:	d006      	beq.n	8010594 <UART_SetConfig+0x1b4>
 8010586:	e00b      	b.n	80105a0 <UART_SetConfig+0x1c0>
 8010588:	2300      	movs	r3, #0
 801058a:	77fb      	strb	r3, [r7, #31]
 801058c:	e0cb      	b.n	8010726 <UART_SetConfig+0x346>
 801058e:	2302      	movs	r3, #2
 8010590:	77fb      	strb	r3, [r7, #31]
 8010592:	e0c8      	b.n	8010726 <UART_SetConfig+0x346>
 8010594:	2304      	movs	r3, #4
 8010596:	77fb      	strb	r3, [r7, #31]
 8010598:	e0c5      	b.n	8010726 <UART_SetConfig+0x346>
 801059a:	2308      	movs	r3, #8
 801059c:	77fb      	strb	r3, [r7, #31]
 801059e:	e0c2      	b.n	8010726 <UART_SetConfig+0x346>
 80105a0:	2310      	movs	r3, #16
 80105a2:	77fb      	strb	r3, [r7, #31]
 80105a4:	e0bf      	b.n	8010726 <UART_SetConfig+0x346>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4a45      	ldr	r2, [pc, #276]	; (80106c0 <UART_SetConfig+0x2e0>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d125      	bne.n	80105fc <UART_SetConfig+0x21c>
 80105b0:	4b3f      	ldr	r3, [pc, #252]	; (80106b0 <UART_SetConfig+0x2d0>)
 80105b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80105ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80105be:	d017      	beq.n	80105f0 <UART_SetConfig+0x210>
 80105c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80105c4:	d817      	bhi.n	80105f6 <UART_SetConfig+0x216>
 80105c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105ca:	d00b      	beq.n	80105e4 <UART_SetConfig+0x204>
 80105cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105d0:	d811      	bhi.n	80105f6 <UART_SetConfig+0x216>
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d003      	beq.n	80105de <UART_SetConfig+0x1fe>
 80105d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105da:	d006      	beq.n	80105ea <UART_SetConfig+0x20a>
 80105dc:	e00b      	b.n	80105f6 <UART_SetConfig+0x216>
 80105de:	2300      	movs	r3, #0
 80105e0:	77fb      	strb	r3, [r7, #31]
 80105e2:	e0a0      	b.n	8010726 <UART_SetConfig+0x346>
 80105e4:	2302      	movs	r3, #2
 80105e6:	77fb      	strb	r3, [r7, #31]
 80105e8:	e09d      	b.n	8010726 <UART_SetConfig+0x346>
 80105ea:	2304      	movs	r3, #4
 80105ec:	77fb      	strb	r3, [r7, #31]
 80105ee:	e09a      	b.n	8010726 <UART_SetConfig+0x346>
 80105f0:	2308      	movs	r3, #8
 80105f2:	77fb      	strb	r3, [r7, #31]
 80105f4:	e097      	b.n	8010726 <UART_SetConfig+0x346>
 80105f6:	2310      	movs	r3, #16
 80105f8:	77fb      	strb	r3, [r7, #31]
 80105fa:	e094      	b.n	8010726 <UART_SetConfig+0x346>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	4a30      	ldr	r2, [pc, #192]	; (80106c4 <UART_SetConfig+0x2e4>)
 8010602:	4293      	cmp	r3, r2
 8010604:	d125      	bne.n	8010652 <UART_SetConfig+0x272>
 8010606:	4b2a      	ldr	r3, [pc, #168]	; (80106b0 <UART_SetConfig+0x2d0>)
 8010608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801060c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010614:	d017      	beq.n	8010646 <UART_SetConfig+0x266>
 8010616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801061a:	d817      	bhi.n	801064c <UART_SetConfig+0x26c>
 801061c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010620:	d00b      	beq.n	801063a <UART_SetConfig+0x25a>
 8010622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010626:	d811      	bhi.n	801064c <UART_SetConfig+0x26c>
 8010628:	2b00      	cmp	r3, #0
 801062a:	d003      	beq.n	8010634 <UART_SetConfig+0x254>
 801062c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010630:	d006      	beq.n	8010640 <UART_SetConfig+0x260>
 8010632:	e00b      	b.n	801064c <UART_SetConfig+0x26c>
 8010634:	2301      	movs	r3, #1
 8010636:	77fb      	strb	r3, [r7, #31]
 8010638:	e075      	b.n	8010726 <UART_SetConfig+0x346>
 801063a:	2302      	movs	r3, #2
 801063c:	77fb      	strb	r3, [r7, #31]
 801063e:	e072      	b.n	8010726 <UART_SetConfig+0x346>
 8010640:	2304      	movs	r3, #4
 8010642:	77fb      	strb	r3, [r7, #31]
 8010644:	e06f      	b.n	8010726 <UART_SetConfig+0x346>
 8010646:	2308      	movs	r3, #8
 8010648:	77fb      	strb	r3, [r7, #31]
 801064a:	e06c      	b.n	8010726 <UART_SetConfig+0x346>
 801064c:	2310      	movs	r3, #16
 801064e:	77fb      	strb	r3, [r7, #31]
 8010650:	e069      	b.n	8010726 <UART_SetConfig+0x346>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a1c      	ldr	r2, [pc, #112]	; (80106c8 <UART_SetConfig+0x2e8>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d137      	bne.n	80106cc <UART_SetConfig+0x2ec>
 801065c:	4b14      	ldr	r3, [pc, #80]	; (80106b0 <UART_SetConfig+0x2d0>)
 801065e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010662:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010666:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801066a:	d017      	beq.n	801069c <UART_SetConfig+0x2bc>
 801066c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010670:	d817      	bhi.n	80106a2 <UART_SetConfig+0x2c2>
 8010672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010676:	d00b      	beq.n	8010690 <UART_SetConfig+0x2b0>
 8010678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801067c:	d811      	bhi.n	80106a2 <UART_SetConfig+0x2c2>
 801067e:	2b00      	cmp	r3, #0
 8010680:	d003      	beq.n	801068a <UART_SetConfig+0x2aa>
 8010682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010686:	d006      	beq.n	8010696 <UART_SetConfig+0x2b6>
 8010688:	e00b      	b.n	80106a2 <UART_SetConfig+0x2c2>
 801068a:	2300      	movs	r3, #0
 801068c:	77fb      	strb	r3, [r7, #31]
 801068e:	e04a      	b.n	8010726 <UART_SetConfig+0x346>
 8010690:	2302      	movs	r3, #2
 8010692:	77fb      	strb	r3, [r7, #31]
 8010694:	e047      	b.n	8010726 <UART_SetConfig+0x346>
 8010696:	2304      	movs	r3, #4
 8010698:	77fb      	strb	r3, [r7, #31]
 801069a:	e044      	b.n	8010726 <UART_SetConfig+0x346>
 801069c:	2308      	movs	r3, #8
 801069e:	77fb      	strb	r3, [r7, #31]
 80106a0:	e041      	b.n	8010726 <UART_SetConfig+0x346>
 80106a2:	2310      	movs	r3, #16
 80106a4:	77fb      	strb	r3, [r7, #31]
 80106a6:	e03e      	b.n	8010726 <UART_SetConfig+0x346>
 80106a8:	efff69f3 	.word	0xefff69f3
 80106ac:	40011000 	.word	0x40011000
 80106b0:	40023800 	.word	0x40023800
 80106b4:	40004400 	.word	0x40004400
 80106b8:	40004800 	.word	0x40004800
 80106bc:	40004c00 	.word	0x40004c00
 80106c0:	40005000 	.word	0x40005000
 80106c4:	40011400 	.word	0x40011400
 80106c8:	40007800 	.word	0x40007800
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a71      	ldr	r2, [pc, #452]	; (8010898 <UART_SetConfig+0x4b8>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d125      	bne.n	8010722 <UART_SetConfig+0x342>
 80106d6:	4b71      	ldr	r3, [pc, #452]	; (801089c <UART_SetConfig+0x4bc>)
 80106d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80106e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80106e4:	d017      	beq.n	8010716 <UART_SetConfig+0x336>
 80106e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80106ea:	d817      	bhi.n	801071c <UART_SetConfig+0x33c>
 80106ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106f0:	d00b      	beq.n	801070a <UART_SetConfig+0x32a>
 80106f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106f6:	d811      	bhi.n	801071c <UART_SetConfig+0x33c>
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <UART_SetConfig+0x324>
 80106fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010700:	d006      	beq.n	8010710 <UART_SetConfig+0x330>
 8010702:	e00b      	b.n	801071c <UART_SetConfig+0x33c>
 8010704:	2300      	movs	r3, #0
 8010706:	77fb      	strb	r3, [r7, #31]
 8010708:	e00d      	b.n	8010726 <UART_SetConfig+0x346>
 801070a:	2302      	movs	r3, #2
 801070c:	77fb      	strb	r3, [r7, #31]
 801070e:	e00a      	b.n	8010726 <UART_SetConfig+0x346>
 8010710:	2304      	movs	r3, #4
 8010712:	77fb      	strb	r3, [r7, #31]
 8010714:	e007      	b.n	8010726 <UART_SetConfig+0x346>
 8010716:	2308      	movs	r3, #8
 8010718:	77fb      	strb	r3, [r7, #31]
 801071a:	e004      	b.n	8010726 <UART_SetConfig+0x346>
 801071c:	2310      	movs	r3, #16
 801071e:	77fb      	strb	r3, [r7, #31]
 8010720:	e001      	b.n	8010726 <UART_SetConfig+0x346>
 8010722:	2310      	movs	r3, #16
 8010724:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	69db      	ldr	r3, [r3, #28]
 801072a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801072e:	d15b      	bne.n	80107e8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8010730:	7ffb      	ldrb	r3, [r7, #31]
 8010732:	2b08      	cmp	r3, #8
 8010734:	d827      	bhi.n	8010786 <UART_SetConfig+0x3a6>
 8010736:	a201      	add	r2, pc, #4	; (adr r2, 801073c <UART_SetConfig+0x35c>)
 8010738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801073c:	08010761 	.word	0x08010761
 8010740:	08010769 	.word	0x08010769
 8010744:	08010771 	.word	0x08010771
 8010748:	08010787 	.word	0x08010787
 801074c:	08010777 	.word	0x08010777
 8010750:	08010787 	.word	0x08010787
 8010754:	08010787 	.word	0x08010787
 8010758:	08010787 	.word	0x08010787
 801075c:	0801077f 	.word	0x0801077f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010760:	f7fb faec 	bl	800bd3c <HAL_RCC_GetPCLK1Freq>
 8010764:	61b8      	str	r0, [r7, #24]
        break;
 8010766:	e013      	b.n	8010790 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010768:	f7fb fafc 	bl	800bd64 <HAL_RCC_GetPCLK2Freq>
 801076c:	61b8      	str	r0, [r7, #24]
        break;
 801076e:	e00f      	b.n	8010790 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010770:	4b4b      	ldr	r3, [pc, #300]	; (80108a0 <UART_SetConfig+0x4c0>)
 8010772:	61bb      	str	r3, [r7, #24]
        break;
 8010774:	e00c      	b.n	8010790 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010776:	f7fb fa1f 	bl	800bbb8 <HAL_RCC_GetSysClockFreq>
 801077a:	61b8      	str	r0, [r7, #24]
        break;
 801077c:	e008      	b.n	8010790 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801077e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010782:	61bb      	str	r3, [r7, #24]
        break;
 8010784:	e004      	b.n	8010790 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8010786:	2300      	movs	r3, #0
 8010788:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801078a:	2301      	movs	r3, #1
 801078c:	77bb      	strb	r3, [r7, #30]
        break;
 801078e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010790:	69bb      	ldr	r3, [r7, #24]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d074      	beq.n	8010880 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	005a      	lsls	r2, r3, #1
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	085b      	lsrs	r3, r3, #1
 80107a0:	441a      	add	r2, r3
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	2b0f      	cmp	r3, #15
 80107b2:	d916      	bls.n	80107e2 <UART_SetConfig+0x402>
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107ba:	d212      	bcs.n	80107e2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	b29b      	uxth	r3, r3
 80107c0:	f023 030f 	bic.w	r3, r3, #15
 80107c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	085b      	lsrs	r3, r3, #1
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	f003 0307 	and.w	r3, r3, #7
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	89fb      	ldrh	r3, [r7, #14]
 80107d4:	4313      	orrs	r3, r2
 80107d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	89fa      	ldrh	r2, [r7, #14]
 80107de:	60da      	str	r2, [r3, #12]
 80107e0:	e04e      	b.n	8010880 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	77bb      	strb	r3, [r7, #30]
 80107e6:	e04b      	b.n	8010880 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80107e8:	7ffb      	ldrb	r3, [r7, #31]
 80107ea:	2b08      	cmp	r3, #8
 80107ec:	d827      	bhi.n	801083e <UART_SetConfig+0x45e>
 80107ee:	a201      	add	r2, pc, #4	; (adr r2, 80107f4 <UART_SetConfig+0x414>)
 80107f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f4:	08010819 	.word	0x08010819
 80107f8:	08010821 	.word	0x08010821
 80107fc:	08010829 	.word	0x08010829
 8010800:	0801083f 	.word	0x0801083f
 8010804:	0801082f 	.word	0x0801082f
 8010808:	0801083f 	.word	0x0801083f
 801080c:	0801083f 	.word	0x0801083f
 8010810:	0801083f 	.word	0x0801083f
 8010814:	08010837 	.word	0x08010837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010818:	f7fb fa90 	bl	800bd3c <HAL_RCC_GetPCLK1Freq>
 801081c:	61b8      	str	r0, [r7, #24]
        break;
 801081e:	e013      	b.n	8010848 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010820:	f7fb faa0 	bl	800bd64 <HAL_RCC_GetPCLK2Freq>
 8010824:	61b8      	str	r0, [r7, #24]
        break;
 8010826:	e00f      	b.n	8010848 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010828:	4b1d      	ldr	r3, [pc, #116]	; (80108a0 <UART_SetConfig+0x4c0>)
 801082a:	61bb      	str	r3, [r7, #24]
        break;
 801082c:	e00c      	b.n	8010848 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801082e:	f7fb f9c3 	bl	800bbb8 <HAL_RCC_GetSysClockFreq>
 8010832:	61b8      	str	r0, [r7, #24]
        break;
 8010834:	e008      	b.n	8010848 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801083a:	61bb      	str	r3, [r7, #24]
        break;
 801083c:	e004      	b.n	8010848 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 801083e:	2300      	movs	r3, #0
 8010840:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010842:	2301      	movs	r3, #1
 8010844:	77bb      	strb	r3, [r7, #30]
        break;
 8010846:	bf00      	nop
    }

    if (pclk != 0U)
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d018      	beq.n	8010880 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	085a      	lsrs	r2, r3, #1
 8010854:	69bb      	ldr	r3, [r7, #24]
 8010856:	441a      	add	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010860:	b29b      	uxth	r3, r3
 8010862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	2b0f      	cmp	r3, #15
 8010868:	d908      	bls.n	801087c <UART_SetConfig+0x49c>
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010870:	d204      	bcs.n	801087c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	693a      	ldr	r2, [r7, #16]
 8010878:	60da      	str	r2, [r3, #12]
 801087a:	e001      	b.n	8010880 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 801087c:	2301      	movs	r3, #1
 801087e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801088c:	7fbb      	ldrb	r3, [r7, #30]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3720      	adds	r7, #32
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	40007c00 	.word	0x40007c00
 801089c:	40023800 	.word	0x40023800
 80108a0:	00f42400 	.word	0x00f42400

080108a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b0:	f003 0301 	and.w	r3, r3, #1
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00a      	beq.n	80108ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	430a      	orrs	r2, r1
 80108cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d2:	f003 0302 	and.w	r3, r3, #2
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00a      	beq.n	80108f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	430a      	orrs	r2, r1
 80108ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f4:	f003 0304 	and.w	r3, r3, #4
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00a      	beq.n	8010912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	430a      	orrs	r2, r1
 8010910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010916:	f003 0308 	and.w	r3, r3, #8
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00a      	beq.n	8010934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	430a      	orrs	r2, r1
 8010932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010938:	f003 0310 	and.w	r3, r3, #16
 801093c:	2b00      	cmp	r3, #0
 801093e:	d00a      	beq.n	8010956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	689b      	ldr	r3, [r3, #8]
 8010946:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	430a      	orrs	r2, r1
 8010954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095a:	f003 0320 	and.w	r3, r3, #32
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00a      	beq.n	8010978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	689b      	ldr	r3, [r3, #8]
 8010968:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	430a      	orrs	r2, r1
 8010976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801097c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010980:	2b00      	cmp	r3, #0
 8010982:	d01a      	beq.n	80109ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	430a      	orrs	r2, r1
 8010998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80109a2:	d10a      	bne.n	80109ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	430a      	orrs	r2, r1
 80109b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00a      	beq.n	80109dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	430a      	orrs	r2, r1
 80109da:	605a      	str	r2, [r3, #4]
  }
}
 80109dc:	bf00      	nop
 80109de:	370c      	adds	r7, #12
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr

080109e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af02      	add	r7, sp, #8
 80109ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80109f8:	f7f5 fc00 	bl	80061fc <HAL_GetTick>
 80109fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f003 0308 	and.w	r3, r3, #8
 8010a08:	2b08      	cmp	r3, #8
 8010a0a:	d10e      	bne.n	8010a2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a10:	9300      	str	r3, [sp, #0]
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2200      	movs	r2, #0
 8010a16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f817 	bl	8010a4e <UART_WaitOnFlagUntilTimeout>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d001      	beq.n	8010a2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a26:	2303      	movs	r3, #3
 8010a28:	e00d      	b.n	8010a46 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2220      	movs	r2, #32
 8010a2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2220      	movs	r2, #32
 8010a34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010a44:	2300      	movs	r3, #0
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3710      	adds	r7, #16
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a4e:	b580      	push	{r7, lr}
 8010a50:	b084      	sub	sp, #16
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	60f8      	str	r0, [r7, #12]
 8010a56:	60b9      	str	r1, [r7, #8]
 8010a58:	603b      	str	r3, [r7, #0]
 8010a5a:	4613      	mov	r3, r2
 8010a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a5e:	e05e      	b.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a60:	69bb      	ldr	r3, [r7, #24]
 8010a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a66:	d05a      	beq.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a68:	f7f5 fbc8 	bl	80061fc <HAL_GetTick>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	1ad3      	subs	r3, r2, r3
 8010a72:	69ba      	ldr	r2, [r7, #24]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d302      	bcc.n	8010a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d11b      	bne.n	8010ab6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	681a      	ldr	r2, [r3, #0]
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	689a      	ldr	r2, [r3, #8]
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f022 0201 	bic.w	r2, r2, #1
 8010a9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2220      	movs	r2, #32
 8010aa2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2220      	movs	r2, #32
 8010aa8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2200      	movs	r2, #0
 8010aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010ab2:	2303      	movs	r3, #3
 8010ab4:	e043      	b.n	8010b3e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f003 0304 	and.w	r3, r3, #4
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d02c      	beq.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	69db      	ldr	r3, [r3, #28]
 8010aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ad2:	d124      	bne.n	8010b1e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010adc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010aec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	689a      	ldr	r2, [r3, #8]
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f022 0201 	bic.w	r2, r2, #1
 8010afc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2220      	movs	r2, #32
 8010b02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2220      	movs	r2, #32
 8010b08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2220      	movs	r2, #32
 8010b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	2200      	movs	r2, #0
 8010b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010b1a:	2303      	movs	r3, #3
 8010b1c:	e00f      	b.n	8010b3e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	69da      	ldr	r2, [r3, #28]
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	4013      	ands	r3, r2
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	bf0c      	ite	eq
 8010b2e:	2301      	moveq	r3, #1
 8010b30:	2300      	movne	r3, #0
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	461a      	mov	r2, r3
 8010b36:	79fb      	ldrb	r3, [r7, #7]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d091      	beq.n	8010a60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}

08010b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b46:	b480      	push	{r7}
 8010b48:	b083      	sub	sp, #12
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b5c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	689a      	ldr	r2, [r3, #8]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f022 0201 	bic.w	r2, r2, #1
 8010b6c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d107      	bne.n	8010b86 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f022 0210 	bic.w	r2, r2, #16
 8010b84:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2220      	movs	r2, #32
 8010b8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010b98:	bf00      	nop
 8010b9a:	370c      	adds	r7, #12
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr

08010ba4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	f7ff fbf6 	bl	80103b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bc8:	bf00      	nop
 8010bca:	3710      	adds	r7, #16
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010be6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2220      	movs	r2, #32
 8010bec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7ff fbd3 	bl	80103a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010bfa:	bf00      	nop
 8010bfc:	3708      	adds	r7, #8
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
	...

08010c04 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8010c12:	2300      	movs	r3, #0
 8010c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d027      	beq.n	8010c6e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010c24:	68fa      	ldr	r2, [r7, #12]
 8010c26:	4b2f      	ldr	r3, [pc, #188]	; (8010ce4 <FMC_SDRAM_Init+0xe0>)
 8010c28:	4013      	ands	r3, r2
 8010c2a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c34:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8010c3a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8010c40:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8010c46:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8010c4c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8010c52:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8010c58:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010c5e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010c60:	68fa      	ldr	r2, [r7, #12]
 8010c62:	4313      	orrs	r3, r2
 8010c64:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	601a      	str	r2, [r3, #0]
 8010c6c:	e032      	b.n	8010cd4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010c7a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010c84:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010c8a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	4313      	orrs	r3, r2
 8010c90:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010c98:	68ba      	ldr	r2, [r7, #8]
 8010c9a:	4b12      	ldr	r3, [pc, #72]	; (8010ce4 <FMC_SDRAM_Init+0xe0>)
 8010c9c:	4013      	ands	r3, r2
 8010c9e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010ca8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8010cae:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8010cb4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8010cba:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8010cc0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010cc2:	68ba      	ldr	r2, [r7, #8]
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	68fa      	ldr	r2, [r7, #12]
 8010ccc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	68ba      	ldr	r2, [r7, #8]
 8010cd2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8010cd4:	2300      	movs	r3, #0
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3714      	adds	r7, #20
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce0:	4770      	bx	lr
 8010ce2:	bf00      	nop
 8010ce4:	ffff8000 	.word	0xffff8000

08010ce8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b087      	sub	sp, #28
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	60b9      	str	r1, [r7, #8]
 8010cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d02e      	beq.n	8010d60 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010d0e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	689b      	ldr	r3, [r3, #8]
 8010d24:	3b01      	subs	r3, #1
 8010d26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8010d28:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	3b01      	subs	r3, #1
 8010d30:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8010d32:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	691b      	ldr	r3, [r3, #16]
 8010d38:	3b01      	subs	r3, #1
 8010d3a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8010d3c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	695b      	ldr	r3, [r3, #20]
 8010d42:	3b01      	subs	r3, #1
 8010d44:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8010d46:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	699b      	ldr	r3, [r3, #24]
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d50:	4313      	orrs	r3, r2
 8010d52:	697a      	ldr	r2, [r7, #20]
 8010d54:	4313      	orrs	r3, r2
 8010d56:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	697a      	ldr	r2, [r7, #20]
 8010d5c:	609a      	str	r2, [r3, #8]
 8010d5e:	e039      	b.n	8010dd4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8010d66:	697a      	ldr	r2, [r7, #20]
 8010d68:	4b1e      	ldr	r3, [pc, #120]	; (8010de4 <FMC_SDRAM_Timing_Init+0xfc>)
 8010d6a:	4013      	ands	r3, r2
 8010d6c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	3b01      	subs	r3, #1
 8010d74:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	695b      	ldr	r3, [r3, #20]
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	697a      	ldr	r2, [r7, #20]
 8010d82:	4313      	orrs	r3, r2
 8010d84:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010d92:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	3b01      	subs	r3, #1
 8010da0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010da2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	3b01      	subs	r3, #1
 8010daa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8010dac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	3b01      	subs	r3, #1
 8010db4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010db6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	699b      	ldr	r3, [r3, #24]
 8010dbc:	3b01      	subs	r3, #1
 8010dbe:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	693a      	ldr	r2, [r7, #16]
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	697a      	ldr	r2, [r7, #20]
 8010dcc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	693a      	ldr	r2, [r7, #16]
 8010dd2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8010dd4:	2300      	movs	r3, #0
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	371c      	adds	r7, #28
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	ff0f0fff 	.word	0xff0f0fff

08010de8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8010de8:	b480      	push	{r7}
 8010dea:	b085      	sub	sp, #20
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	60f8      	str	r0, [r7, #12]
 8010df0:	60b9      	str	r1, [r7, #8]
 8010df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	691a      	ldr	r2, [r3, #16]
 8010df8:	4b0c      	ldr	r3, [pc, #48]	; (8010e2c <FMC_SDRAM_SendCommand+0x44>)
 8010dfa:	4013      	ands	r3, r2
 8010dfc:	68ba      	ldr	r2, [r7, #8]
 8010dfe:	6811      	ldr	r1, [r2, #0]
 8010e00:	68ba      	ldr	r2, [r7, #8]
 8010e02:	6852      	ldr	r2, [r2, #4]
 8010e04:	4311      	orrs	r1, r2
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	6892      	ldr	r2, [r2, #8]
 8010e0a:	3a01      	subs	r2, #1
 8010e0c:	0152      	lsls	r2, r2, #5
 8010e0e:	4311      	orrs	r1, r2
 8010e10:	68ba      	ldr	r2, [r7, #8]
 8010e12:	68d2      	ldr	r2, [r2, #12]
 8010e14:	0252      	lsls	r2, r2, #9
 8010e16:	430a      	orrs	r2, r1
 8010e18:	431a      	orrs	r2, r3
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8010e1e:	2300      	movs	r3, #0
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3714      	adds	r7, #20
 8010e24:	46bd      	mov	sp, r7
 8010e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2a:	4770      	bx	lr
 8010e2c:	ffc00000 	.word	0xffc00000

08010e30 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	695a      	ldr	r2, [r3, #20]
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	431a      	orrs	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8010e48:	2300      	movs	r3, #0
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	370c      	adds	r7, #12
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr
	...

08010e58 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010e58:	b084      	sub	sp, #16
 8010e5a:	b480      	push	{r7}
 8010e5c:	b085      	sub	sp, #20
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	f107 001c 	add.w	r0, r7, #28
 8010e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010e6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010e70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010e72:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010e76:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010e7a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010e7e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010e82:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010e84:	68fa      	ldr	r2, [r7, #12]
 8010e86:	4313      	orrs	r3, r2
 8010e88:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	685a      	ldr	r2, [r3, #4]
 8010e8e:	4b07      	ldr	r3, [pc, #28]	; (8010eac <SDMMC_Init+0x54>)
 8010e90:	4013      	ands	r3, r2
 8010e92:	68fa      	ldr	r2, [r7, #12]
 8010e94:	431a      	orrs	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010e9a:	2300      	movs	r3, #0
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3714      	adds	r7, #20
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	b004      	add	sp, #16
 8010ea8:	4770      	bx	lr
 8010eaa:	bf00      	nop
 8010eac:	ffff8100 	.word	0xffff8100

08010eb0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b083      	sub	sp, #12
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	370c      	adds	r7, #12
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr

08010eca <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010eca:	b480      	push	{r7}
 8010ecc:	b083      	sub	sp, #12
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2203      	movs	r2, #3
 8010ef8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010efa:	2002      	movs	r0, #2
 8010efc:	f7f5 f98a 	bl	8006214 <HAL_Delay>
  
  return HAL_OK;
 8010f00:	2300      	movs	r3, #0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}

08010f0a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010f0a:	b480      	push	{r7}
 8010f0c:	b083      	sub	sp, #12
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f003 0303 	and.w	r3, r3, #3
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	370c      	adds	r7, #12
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr
	...

08010f28 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b085      	sub	sp, #20
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010f32:	2300      	movs	r3, #0
 8010f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010f4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010f52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f54:	68fa      	ldr	r2, [r7, #12]
 8010f56:	4313      	orrs	r3, r2
 8010f58:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	68da      	ldr	r2, [r3, #12]
 8010f5e:	4b06      	ldr	r3, [pc, #24]	; (8010f78 <SDMMC_SendCommand+0x50>)
 8010f60:	4013      	ands	r3, r2
 8010f62:	68fa      	ldr	r2, [r7, #12]
 8010f64:	431a      	orrs	r2, r3
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010f6a:	2300      	movs	r3, #0
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3714      	adds	r7, #20
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr
 8010f78:	fffff000 	.word	0xfffff000

08010f7c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	691b      	ldr	r3, [r3, #16]
 8010f88:	b2db      	uxtb	r3, r3
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	370c      	adds	r7, #12
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr

08010f96 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010f96:	b480      	push	{r7}
 8010f98:	b085      	sub	sp, #20
 8010f9a:	af00      	add	r7, sp, #0
 8010f9c:	6078      	str	r0, [r7, #4]
 8010f9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	3314      	adds	r3, #20
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	4413      	add	r3, r2
 8010faa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
}  
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3714      	adds	r7, #20
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fba:	4770      	bx	lr

08010fbc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b085      	sub	sp, #20
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	681a      	ldr	r2, [r3, #0]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	685a      	ldr	r2, [r3, #4]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fe2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010fe8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010fee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ffa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	431a      	orrs	r2, r3
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011006:	2300      	movs	r3, #0

}
 8011008:	4618      	mov	r0, r3
 801100a:	3714      	adds	r7, #20
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr

08011014 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b088      	sub	sp, #32
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011022:	2310      	movs	r3, #16
 8011024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011026:	2340      	movs	r3, #64	; 0x40
 8011028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801102a:	2300      	movs	r3, #0
 801102c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801102e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011032:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011034:	f107 0308 	add.w	r3, r7, #8
 8011038:	4619      	mov	r1, r3
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7ff ff74 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011040:	f241 3288 	movw	r2, #5000	; 0x1388
 8011044:	2110      	movs	r1, #16
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 fa46 	bl	80114d8 <SDMMC_GetCmdResp1>
 801104c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801104e:	69fb      	ldr	r3, [r7, #28]
}
 8011050:	4618      	mov	r0, r3
 8011052:	3720      	adds	r7, #32
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b088      	sub	sp, #32
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011066:	2311      	movs	r3, #17
 8011068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801106a:	2340      	movs	r3, #64	; 0x40
 801106c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801106e:	2300      	movs	r3, #0
 8011070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011076:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011078:	f107 0308 	add.w	r3, r7, #8
 801107c:	4619      	mov	r1, r3
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7ff ff52 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011084:	f241 3288 	movw	r2, #5000	; 0x1388
 8011088:	2111      	movs	r1, #17
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f000 fa24 	bl	80114d8 <SDMMC_GetCmdResp1>
 8011090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011092:	69fb      	ldr	r3, [r7, #28]
}
 8011094:	4618      	mov	r0, r3
 8011096:	3720      	adds	r7, #32
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b088      	sub	sp, #32
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80110aa:	2312      	movs	r3, #18
 80110ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110ae:	2340      	movs	r3, #64	; 0x40
 80110b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110b2:	2300      	movs	r3, #0
 80110b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110bc:	f107 0308 	add.w	r3, r7, #8
 80110c0:	4619      	mov	r1, r3
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f7ff ff30 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80110c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80110cc:	2112      	movs	r1, #18
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f000 fa02 	bl	80114d8 <SDMMC_GetCmdResp1>
 80110d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110d6:	69fb      	ldr	r3, [r7, #28]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3720      	adds	r7, #32
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b088      	sub	sp, #32
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80110ee:	2318      	movs	r3, #24
 80110f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110f2:	2340      	movs	r3, #64	; 0x40
 80110f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110f6:	2300      	movs	r3, #0
 80110f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011100:	f107 0308 	add.w	r3, r7, #8
 8011104:	4619      	mov	r1, r3
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7ff ff0e 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011110:	2118      	movs	r1, #24
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 f9e0 	bl	80114d8 <SDMMC_GetCmdResp1>
 8011118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801111a:	69fb      	ldr	r3, [r7, #28]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3720      	adds	r7, #32
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b088      	sub	sp, #32
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011132:	2319      	movs	r3, #25
 8011134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011136:	2340      	movs	r3, #64	; 0x40
 8011138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801113a:	2300      	movs	r3, #0
 801113c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011142:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011144:	f107 0308 	add.w	r3, r7, #8
 8011148:	4619      	mov	r1, r3
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f7ff feec 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011150:	f241 3288 	movw	r2, #5000	; 0x1388
 8011154:	2119      	movs	r1, #25
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f000 f9be 	bl	80114d8 <SDMMC_GetCmdResp1>
 801115c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801115e:	69fb      	ldr	r3, [r7, #28]
}
 8011160:	4618      	mov	r0, r3
 8011162:	3720      	adds	r7, #32
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b088      	sub	sp, #32
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011170:	2300      	movs	r3, #0
 8011172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011174:	230c      	movs	r3, #12
 8011176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011178:	2340      	movs	r3, #64	; 0x40
 801117a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801117c:	2300      	movs	r3, #0
 801117e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011184:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011186:	f107 0308 	add.w	r3, r7, #8
 801118a:	4619      	mov	r1, r3
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f7ff fecb 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011192:	4a05      	ldr	r2, [pc, #20]	; (80111a8 <SDMMC_CmdStopTransfer+0x40>)
 8011194:	210c      	movs	r1, #12
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f99e 	bl	80114d8 <SDMMC_GetCmdResp1>
 801119c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801119e:	69fb      	ldr	r3, [r7, #28]
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3720      	adds	r7, #32
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	05f5e100 	.word	0x05f5e100

080111ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b08a      	sub	sp, #40	; 0x28
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80111bc:	2307      	movs	r3, #7
 80111be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111c0:	2340      	movs	r3, #64	; 0x40
 80111c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111c4:	2300      	movs	r3, #0
 80111c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111cc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111ce:	f107 0310 	add.w	r3, r7, #16
 80111d2:	4619      	mov	r1, r3
 80111d4:	68f8      	ldr	r0, [r7, #12]
 80111d6:	f7ff fea7 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80111da:	f241 3288 	movw	r2, #5000	; 0x1388
 80111de:	2107      	movs	r1, #7
 80111e0:	68f8      	ldr	r0, [r7, #12]
 80111e2:	f000 f979 	bl	80114d8 <SDMMC_GetCmdResp1>
 80111e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80111e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3728      	adds	r7, #40	; 0x28
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b088      	sub	sp, #32
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80111fa:	2300      	movs	r3, #0
 80111fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80111fe:	2300      	movs	r3, #0
 8011200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011202:	2300      	movs	r3, #0
 8011204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011206:	2300      	movs	r3, #0
 8011208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801120a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801120e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011210:	f107 0308 	add.w	r3, r7, #8
 8011214:	4619      	mov	r1, r3
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f7ff fe86 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f000 f92f 	bl	8011480 <SDMMC_GetCmdError>
 8011222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011224:	69fb      	ldr	r3, [r7, #28]
}
 8011226:	4618      	mov	r0, r3
 8011228:	3720      	adds	r7, #32
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801122e:	b580      	push	{r7, lr}
 8011230:	b088      	sub	sp, #32
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011236:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801123a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801123c:	2308      	movs	r3, #8
 801123e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011240:	2340      	movs	r3, #64	; 0x40
 8011242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011244:	2300      	movs	r3, #0
 8011246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801124c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801124e:	f107 0308 	add.w	r3, r7, #8
 8011252:	4619      	mov	r1, r3
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff fe67 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 fb26 	bl	80118ac <SDMMC_GetCmdResp7>
 8011260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011262:	69fb      	ldr	r3, [r7, #28]
}
 8011264:	4618      	mov	r0, r3
 8011266:	3720      	adds	r7, #32
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b088      	sub	sp, #32
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801127a:	2337      	movs	r3, #55	; 0x37
 801127c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801127e:	2340      	movs	r3, #64	; 0x40
 8011280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011282:	2300      	movs	r3, #0
 8011284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801128a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801128c:	f107 0308 	add.w	r3, r7, #8
 8011290:	4619      	mov	r1, r3
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7ff fe48 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011298:	f241 3288 	movw	r2, #5000	; 0x1388
 801129c:	2137      	movs	r1, #55	; 0x37
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 f91a 	bl	80114d8 <SDMMC_GetCmdResp1>
 80112a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112a6:	69fb      	ldr	r3, [r7, #28]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3720      	adds	r7, #32
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b088      	sub	sp, #32
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80112ba:	683a      	ldr	r2, [r7, #0]
 80112bc:	4b0d      	ldr	r3, [pc, #52]	; (80112f4 <SDMMC_CmdAppOperCommand+0x44>)
 80112be:	4313      	orrs	r3, r2
 80112c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80112c2:	2329      	movs	r3, #41	; 0x29
 80112c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112c6:	2340      	movs	r3, #64	; 0x40
 80112c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112ca:	2300      	movs	r3, #0
 80112cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112d4:	f107 0308 	add.w	r3, r7, #8
 80112d8:	4619      	mov	r1, r3
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f7ff fe24 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f000 fa2f 	bl	8011744 <SDMMC_GetCmdResp3>
 80112e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112e8:	69fb      	ldr	r3, [r7, #28]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3720      	adds	r7, #32
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	80100000 	.word	0x80100000

080112f8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b088      	sub	sp, #32
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011306:	2306      	movs	r3, #6
 8011308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801130a:	2340      	movs	r3, #64	; 0x40
 801130c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801130e:	2300      	movs	r3, #0
 8011310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011318:	f107 0308 	add.w	r3, r7, #8
 801131c:	4619      	mov	r1, r3
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7ff fe02 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011324:	f241 3288 	movw	r2, #5000	; 0x1388
 8011328:	2106      	movs	r1, #6
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 f8d4 	bl	80114d8 <SDMMC_GetCmdResp1>
 8011330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011332:	69fb      	ldr	r3, [r7, #28]
}
 8011334:	4618      	mov	r0, r3
 8011336:	3720      	adds	r7, #32
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b088      	sub	sp, #32
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011344:	2300      	movs	r3, #0
 8011346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011348:	2333      	movs	r3, #51	; 0x33
 801134a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801134c:	2340      	movs	r3, #64	; 0x40
 801134e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011350:	2300      	movs	r3, #0
 8011352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801135a:	f107 0308 	add.w	r3, r7, #8
 801135e:	4619      	mov	r1, r3
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f7ff fde1 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011366:	f241 3288 	movw	r2, #5000	; 0x1388
 801136a:	2133      	movs	r1, #51	; 0x33
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f000 f8b3 	bl	80114d8 <SDMMC_GetCmdResp1>
 8011372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011374:	69fb      	ldr	r3, [r7, #28]
}
 8011376:	4618      	mov	r0, r3
 8011378:	3720      	adds	r7, #32
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}

0801137e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801137e:	b580      	push	{r7, lr}
 8011380:	b088      	sub	sp, #32
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011386:	2300      	movs	r3, #0
 8011388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801138a:	2302      	movs	r3, #2
 801138c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801138e:	23c0      	movs	r3, #192	; 0xc0
 8011390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011392:	2300      	movs	r3, #0
 8011394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801139a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801139c:	f107 0308 	add.w	r3, r7, #8
 80113a0:	4619      	mov	r1, r3
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f7ff fdc0 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f000 f983 	bl	80116b4 <SDMMC_GetCmdResp2>
 80113ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113b0:	69fb      	ldr	r3, [r7, #28]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3720      	adds	r7, #32
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b088      	sub	sp, #32
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80113c8:	2309      	movs	r3, #9
 80113ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80113cc:	23c0      	movs	r3, #192	; 0xc0
 80113ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113d0:	2300      	movs	r3, #0
 80113d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113da:	f107 0308 	add.w	r3, r7, #8
 80113de:	4619      	mov	r1, r3
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f7ff fda1 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f000 f964 	bl	80116b4 <SDMMC_GetCmdResp2>
 80113ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113ee:	69fb      	ldr	r3, [r7, #28]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3720      	adds	r7, #32
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b088      	sub	sp, #32
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011402:	2300      	movs	r3, #0
 8011404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011406:	2303      	movs	r3, #3
 8011408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801140a:	2340      	movs	r3, #64	; 0x40
 801140c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801140e:	2300      	movs	r3, #0
 8011410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011416:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011418:	f107 0308 	add.w	r3, r7, #8
 801141c:	4619      	mov	r1, r3
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f7ff fd82 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011424:	683a      	ldr	r2, [r7, #0]
 8011426:	2103      	movs	r1, #3
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 f9c9 	bl	80117c0 <SDMMC_GetCmdResp6>
 801142e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011430:	69fb      	ldr	r3, [r7, #28]
}
 8011432:	4618      	mov	r0, r3
 8011434:	3720      	adds	r7, #32
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}

0801143a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801143a:	b580      	push	{r7, lr}
 801143c:	b088      	sub	sp, #32
 801143e:	af00      	add	r7, sp, #0
 8011440:	6078      	str	r0, [r7, #4]
 8011442:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011448:	230d      	movs	r3, #13
 801144a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801144c:	2340      	movs	r3, #64	; 0x40
 801144e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011450:	2300      	movs	r3, #0
 8011452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011458:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801145a:	f107 0308 	add.w	r3, r7, #8
 801145e:	4619      	mov	r1, r3
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7ff fd61 	bl	8010f28 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011466:	f241 3288 	movw	r2, #5000	; 0x1388
 801146a:	210d      	movs	r1, #13
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 f833 	bl	80114d8 <SDMMC_GetCmdResp1>
 8011472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011474:	69fb      	ldr	r3, [r7, #28]
}
 8011476:	4618      	mov	r0, r3
 8011478:	3720      	adds	r7, #32
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
	...

08011480 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011480:	b480      	push	{r7}
 8011482:	b085      	sub	sp, #20
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011488:	4b11      	ldr	r3, [pc, #68]	; (80114d0 <SDMMC_GetCmdError+0x50>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a11      	ldr	r2, [pc, #68]	; (80114d4 <SDMMC_GetCmdError+0x54>)
 801148e:	fba2 2303 	umull	r2, r3, r2, r3
 8011492:	0a5b      	lsrs	r3, r3, #9
 8011494:	f241 3288 	movw	r2, #5000	; 0x1388
 8011498:	fb02 f303 	mul.w	r3, r2, r3
 801149c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	1e5a      	subs	r2, r3, #1
 80114a2:	60fa      	str	r2, [r7, #12]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d102      	bne.n	80114ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80114ac:	e009      	b.n	80114c2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d0f1      	beq.n	801149e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	22c5      	movs	r2, #197	; 0xc5
 80114be:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80114c0:	2300      	movs	r3, #0
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3714      	adds	r7, #20
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop
 80114d0:	20000000 	.word	0x20000000
 80114d4:	10624dd3 	.word	0x10624dd3

080114d8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b088      	sub	sp, #32
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	460b      	mov	r3, r1
 80114e2:	607a      	str	r2, [r7, #4]
 80114e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80114e6:	4b70      	ldr	r3, [pc, #448]	; (80116a8 <SDMMC_GetCmdResp1+0x1d0>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	4a70      	ldr	r2, [pc, #448]	; (80116ac <SDMMC_GetCmdResp1+0x1d4>)
 80114ec:	fba2 2303 	umull	r2, r3, r2, r3
 80114f0:	0a5a      	lsrs	r2, r3, #9
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	fb02 f303 	mul.w	r3, r2, r3
 80114f8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	1e5a      	subs	r2, r3, #1
 80114fe:	61fa      	str	r2, [r7, #28]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d102      	bne.n	801150a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011504:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011508:	e0c9      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801150e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011516:	2b00      	cmp	r3, #0
 8011518:	d0ef      	beq.n	80114fa <SDMMC_GetCmdResp1+0x22>
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011520:	2b00      	cmp	r3, #0
 8011522:	d1ea      	bne.n	80114fa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011528:	f003 0304 	and.w	r3, r3, #4
 801152c:	2b00      	cmp	r3, #0
 801152e:	d004      	beq.n	801153a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2204      	movs	r2, #4
 8011534:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011536:	2304      	movs	r3, #4
 8011538:	e0b1      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801153e:	f003 0301 	and.w	r3, r3, #1
 8011542:	2b00      	cmp	r3, #0
 8011544:	d004      	beq.n	8011550 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2201      	movs	r2, #1
 801154a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801154c:	2301      	movs	r3, #1
 801154e:	e0a6      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	22c5      	movs	r2, #197	; 0xc5
 8011554:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f7ff fd10 	bl	8010f7c <SDMMC_GetCommandResponse>
 801155c:	4603      	mov	r3, r0
 801155e:	461a      	mov	r2, r3
 8011560:	7afb      	ldrb	r3, [r7, #11]
 8011562:	4293      	cmp	r3, r2
 8011564:	d001      	beq.n	801156a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011566:	2301      	movs	r3, #1
 8011568:	e099      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801156a:	2100      	movs	r1, #0
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f7ff fd12 	bl	8010f96 <SDMMC_GetResponse>
 8011572:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011574:	697a      	ldr	r2, [r7, #20]
 8011576:	4b4e      	ldr	r3, [pc, #312]	; (80116b0 <SDMMC_GetCmdResp1+0x1d8>)
 8011578:	4013      	ands	r3, r2
 801157a:	2b00      	cmp	r3, #0
 801157c:	d101      	bne.n	8011582 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801157e:	2300      	movs	r3, #0
 8011580:	e08d      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	2b00      	cmp	r3, #0
 8011586:	da02      	bge.n	801158e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801158c:	e087      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011594:	2b00      	cmp	r3, #0
 8011596:	d001      	beq.n	801159c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011598:	2340      	movs	r3, #64	; 0x40
 801159a:	e080      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d001      	beq.n	80115aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80115a6:	2380      	movs	r3, #128	; 0x80
 80115a8:	e079      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80115b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115b8:	e071      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d002      	beq.n	80115ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80115c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115c8:	e069      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d002      	beq.n	80115da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80115d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115d8:	e061      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d002      	beq.n	80115ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80115e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80115e8:	e059      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d002      	beq.n	80115fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80115f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115f8:	e051      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011608:	e049      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011610:	2b00      	cmp	r3, #0
 8011612:	d002      	beq.n	801161a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011614:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011618:	e041      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011620:	2b00      	cmp	r3, #0
 8011622:	d002      	beq.n	801162a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011624:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011628:	e039      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011630:	2b00      	cmp	r3, #0
 8011632:	d002      	beq.n	801163a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011638:	e031      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011640:	2b00      	cmp	r3, #0
 8011642:	d002      	beq.n	801164a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011644:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011648:	e029      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011650:	2b00      	cmp	r3, #0
 8011652:	d002      	beq.n	801165a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011654:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011658:	e021      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011660:	2b00      	cmp	r3, #0
 8011662:	d002      	beq.n	801166a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011664:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011668:	e019      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011670:	2b00      	cmp	r3, #0
 8011672:	d002      	beq.n	801167a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011674:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011678:	e011      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011680:	2b00      	cmp	r3, #0
 8011682:	d002      	beq.n	801168a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011684:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011688:	e009      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	f003 0308 	and.w	r3, r3, #8
 8011690:	2b00      	cmp	r3, #0
 8011692:	d002      	beq.n	801169a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011694:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011698:	e001      	b.n	801169e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3720      	adds	r7, #32
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	20000000 	.word	0x20000000
 80116ac:	10624dd3 	.word	0x10624dd3
 80116b0:	fdffe008 	.word	0xfdffe008

080116b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b085      	sub	sp, #20
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116bc:	4b1f      	ldr	r3, [pc, #124]	; (801173c <SDMMC_GetCmdResp2+0x88>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	4a1f      	ldr	r2, [pc, #124]	; (8011740 <SDMMC_GetCmdResp2+0x8c>)
 80116c2:	fba2 2303 	umull	r2, r3, r2, r3
 80116c6:	0a5b      	lsrs	r3, r3, #9
 80116c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80116cc:	fb02 f303 	mul.w	r3, r2, r3
 80116d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	1e5a      	subs	r2, r3, #1
 80116d6:	60fa      	str	r2, [r7, #12]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d102      	bne.n	80116e2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80116dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80116e0:	e026      	b.n	8011730 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d0ef      	beq.n	80116d2 <SDMMC_GetCmdResp2+0x1e>
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d1ea      	bne.n	80116d2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011700:	f003 0304 	and.w	r3, r3, #4
 8011704:	2b00      	cmp	r3, #0
 8011706:	d004      	beq.n	8011712 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2204      	movs	r2, #4
 801170c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801170e:	2304      	movs	r3, #4
 8011710:	e00e      	b.n	8011730 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011716:	f003 0301 	and.w	r3, r3, #1
 801171a:	2b00      	cmp	r3, #0
 801171c:	d004      	beq.n	8011728 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2201      	movs	r2, #1
 8011722:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011724:	2301      	movs	r3, #1
 8011726:	e003      	b.n	8011730 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	22c5      	movs	r2, #197	; 0xc5
 801172c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	3714      	adds	r7, #20
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr
 801173c:	20000000 	.word	0x20000000
 8011740:	10624dd3 	.word	0x10624dd3

08011744 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011744:	b480      	push	{r7}
 8011746:	b085      	sub	sp, #20
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801174c:	4b1a      	ldr	r3, [pc, #104]	; (80117b8 <SDMMC_GetCmdResp3+0x74>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4a1a      	ldr	r2, [pc, #104]	; (80117bc <SDMMC_GetCmdResp3+0x78>)
 8011752:	fba2 2303 	umull	r2, r3, r2, r3
 8011756:	0a5b      	lsrs	r3, r3, #9
 8011758:	f241 3288 	movw	r2, #5000	; 0x1388
 801175c:	fb02 f303 	mul.w	r3, r2, r3
 8011760:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	1e5a      	subs	r2, r3, #1
 8011766:	60fa      	str	r2, [r7, #12]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d102      	bne.n	8011772 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801176c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011770:	e01b      	b.n	80117aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011776:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801177e:	2b00      	cmp	r3, #0
 8011780:	d0ef      	beq.n	8011762 <SDMMC_GetCmdResp3+0x1e>
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011788:	2b00      	cmp	r3, #0
 801178a:	d1ea      	bne.n	8011762 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011790:	f003 0304 	and.w	r3, r3, #4
 8011794:	2b00      	cmp	r3, #0
 8011796:	d004      	beq.n	80117a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2204      	movs	r2, #4
 801179c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801179e:	2304      	movs	r3, #4
 80117a0:	e003      	b.n	80117aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	22c5      	movs	r2, #197	; 0xc5
 80117a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80117a8:	2300      	movs	r3, #0
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3714      	adds	r7, #20
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	20000000 	.word	0x20000000
 80117bc:	10624dd3 	.word	0x10624dd3

080117c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b088      	sub	sp, #32
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	460b      	mov	r3, r1
 80117ca:	607a      	str	r2, [r7, #4]
 80117cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80117ce:	4b35      	ldr	r3, [pc, #212]	; (80118a4 <SDMMC_GetCmdResp6+0xe4>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	4a35      	ldr	r2, [pc, #212]	; (80118a8 <SDMMC_GetCmdResp6+0xe8>)
 80117d4:	fba2 2303 	umull	r2, r3, r2, r3
 80117d8:	0a5b      	lsrs	r3, r3, #9
 80117da:	f241 3288 	movw	r2, #5000	; 0x1388
 80117de:	fb02 f303 	mul.w	r3, r2, r3
 80117e2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80117e4:	69fb      	ldr	r3, [r7, #28]
 80117e6:	1e5a      	subs	r2, r3, #1
 80117e8:	61fa      	str	r2, [r7, #28]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d102      	bne.n	80117f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80117ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80117f2:	e052      	b.n	801189a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011800:	2b00      	cmp	r3, #0
 8011802:	d0ef      	beq.n	80117e4 <SDMMC_GetCmdResp6+0x24>
 8011804:	69bb      	ldr	r3, [r7, #24]
 8011806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801180a:	2b00      	cmp	r3, #0
 801180c:	d1ea      	bne.n	80117e4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011812:	f003 0304 	and.w	r3, r3, #4
 8011816:	2b00      	cmp	r3, #0
 8011818:	d004      	beq.n	8011824 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	2204      	movs	r2, #4
 801181e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011820:	2304      	movs	r3, #4
 8011822:	e03a      	b.n	801189a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011828:	f003 0301 	and.w	r3, r3, #1
 801182c:	2b00      	cmp	r3, #0
 801182e:	d004      	beq.n	801183a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2201      	movs	r2, #1
 8011834:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011836:	2301      	movs	r3, #1
 8011838:	e02f      	b.n	801189a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f7ff fb9e 	bl	8010f7c <SDMMC_GetCommandResponse>
 8011840:	4603      	mov	r3, r0
 8011842:	461a      	mov	r2, r3
 8011844:	7afb      	ldrb	r3, [r7, #11]
 8011846:	4293      	cmp	r3, r2
 8011848:	d001      	beq.n	801184e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801184a:	2301      	movs	r3, #1
 801184c:	e025      	b.n	801189a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	22c5      	movs	r2, #197	; 0xc5
 8011852:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011854:	2100      	movs	r1, #0
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	f7ff fb9d 	bl	8010f96 <SDMMC_GetResponse>
 801185c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011864:	2b00      	cmp	r3, #0
 8011866:	d106      	bne.n	8011876 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	0c1b      	lsrs	r3, r3, #16
 801186c:	b29a      	uxth	r2, r3
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011872:	2300      	movs	r3, #0
 8011874:	e011      	b.n	801189a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011884:	e009      	b.n	801189a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801188c:	2b00      	cmp	r3, #0
 801188e:	d002      	beq.n	8011896 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011894:	e001      	b.n	801189a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801189a:	4618      	mov	r0, r3
 801189c:	3720      	adds	r7, #32
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	20000000 	.word	0x20000000
 80118a8:	10624dd3 	.word	0x10624dd3

080118ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b085      	sub	sp, #20
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118b4:	4b22      	ldr	r3, [pc, #136]	; (8011940 <SDMMC_GetCmdResp7+0x94>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	4a22      	ldr	r2, [pc, #136]	; (8011944 <SDMMC_GetCmdResp7+0x98>)
 80118ba:	fba2 2303 	umull	r2, r3, r2, r3
 80118be:	0a5b      	lsrs	r3, r3, #9
 80118c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80118c4:	fb02 f303 	mul.w	r3, r2, r3
 80118c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	1e5a      	subs	r2, r3, #1
 80118ce:	60fa      	str	r2, [r7, #12]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d102      	bne.n	80118da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118d8:	e02c      	b.n	8011934 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d0ef      	beq.n	80118ca <SDMMC_GetCmdResp7+0x1e>
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1ea      	bne.n	80118ca <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118f8:	f003 0304 	and.w	r3, r3, #4
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d004      	beq.n	801190a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2204      	movs	r2, #4
 8011904:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011906:	2304      	movs	r3, #4
 8011908:	e014      	b.n	8011934 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801190e:	f003 0301 	and.w	r3, r3, #1
 8011912:	2b00      	cmp	r3, #0
 8011914:	d004      	beq.n	8011920 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2201      	movs	r2, #1
 801191a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801191c:	2301      	movs	r3, #1
 801191e:	e009      	b.n	8011934 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011928:	2b00      	cmp	r3, #0
 801192a:	d002      	beq.n	8011932 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2240      	movs	r2, #64	; 0x40
 8011930:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011932:	2300      	movs	r3, #0
  
}
 8011934:	4618      	mov	r0, r3
 8011936:	3714      	adds	r7, #20
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr
 8011940:	20000000 	.word	0x20000000
 8011944:	10624dd3 	.word	0x10624dd3

08011948 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011948:	b084      	sub	sp, #16
 801194a:	b580      	push	{r7, lr}
 801194c:	b084      	sub	sp, #16
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	f107 001c 	add.w	r0, r7, #28
 8011956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195c:	2b01      	cmp	r3, #1
 801195e:	d120      	bne.n	80119a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	68da      	ldr	r2, [r3, #12]
 8011970:	4b20      	ldr	r3, [pc, #128]	; (80119f4 <USB_CoreInit+0xac>)
 8011972:	4013      	ands	r3, r2
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011986:	2b01      	cmp	r3, #1
 8011988:	d105      	bne.n	8011996 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	68db      	ldr	r3, [r3, #12]
 801198e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f000 f942 	bl	8011c20 <USB_CoreReset>
 801199c:	4603      	mov	r3, r0
 801199e:	73fb      	strb	r3, [r7, #15]
 80119a0:	e010      	b.n	80119c4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	68db      	ldr	r3, [r3, #12]
 80119a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f000 f936 	bl	8011c20 <USB_CoreReset>
 80119b4:	4603      	mov	r3, r0
 80119b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80119c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d10b      	bne.n	80119e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	689b      	ldr	r3, [r3, #8]
 80119ce:	f043 0206 	orr.w	r2, r3, #6
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	689b      	ldr	r3, [r3, #8]
 80119da:	f043 0220 	orr.w	r2, r3, #32
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80119e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3710      	adds	r7, #16
 80119e8:	46bd      	mov	sp, r7
 80119ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80119ee:	b004      	add	sp, #16
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	ffbdffbf 	.word	0xffbdffbf

080119f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	689b      	ldr	r3, [r3, #8]
 8011a04:	f043 0201 	orr.w	r2, r3, #1
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011a0c:	2300      	movs	r3, #0
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	370c      	adds	r7, #12
 8011a12:	46bd      	mov	sp, r7
 8011a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a18:	4770      	bx	lr

08011a1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011a1a:	b480      	push	{r7}
 8011a1c:	b083      	sub	sp, #12
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	689b      	ldr	r3, [r3, #8]
 8011a26:	f023 0201 	bic.w	r2, r3, #1
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011a2e:	2300      	movs	r3, #0
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	370c      	adds	r7, #12
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	460b      	mov	r3, r1
 8011a46:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	68db      	ldr	r3, [r3, #12]
 8011a4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011a54:	78fb      	ldrb	r3, [r7, #3]
 8011a56:	2b01      	cmp	r3, #1
 8011a58:	d106      	bne.n	8011a68 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	60da      	str	r2, [r3, #12]
 8011a66:	e00b      	b.n	8011a80 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011a68:	78fb      	ldrb	r3, [r7, #3]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	60da      	str	r2, [r3, #12]
 8011a7a:	e001      	b.n	8011a80 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	e003      	b.n	8011a88 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011a80:	2032      	movs	r0, #50	; 0x32
 8011a82:	f7f4 fbc7 	bl	8006214 <HAL_Delay>

  return HAL_OK;
 8011a86:	2300      	movs	r3, #0
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011a90:	b480      	push	{r7}
 8011a92:	b085      	sub	sp, #20
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	019b      	lsls	r3, r3, #6
 8011aa2:	f043 0220 	orr.w	r2, r3, #32
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	3301      	adds	r3, #1
 8011aae:	60fb      	str	r3, [r7, #12]
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	4a09      	ldr	r2, [pc, #36]	; (8011ad8 <USB_FlushTxFifo+0x48>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d901      	bls.n	8011abc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011ab8:	2303      	movs	r3, #3
 8011aba:	e006      	b.n	8011aca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	691b      	ldr	r3, [r3, #16]
 8011ac0:	f003 0320 	and.w	r3, r3, #32
 8011ac4:	2b20      	cmp	r3, #32
 8011ac6:	d0f0      	beq.n	8011aaa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011ac8:	2300      	movs	r3, #0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3714      	adds	r7, #20
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop
 8011ad8:	00030d40 	.word	0x00030d40

08011adc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b085      	sub	sp, #20
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2210      	movs	r2, #16
 8011aec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	3301      	adds	r3, #1
 8011af2:	60fb      	str	r3, [r7, #12]
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	4a09      	ldr	r2, [pc, #36]	; (8011b1c <USB_FlushRxFifo+0x40>)
 8011af8:	4293      	cmp	r3, r2
 8011afa:	d901      	bls.n	8011b00 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011afc:	2303      	movs	r3, #3
 8011afe:	e006      	b.n	8011b0e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	691b      	ldr	r3, [r3, #16]
 8011b04:	f003 0310 	and.w	r3, r3, #16
 8011b08:	2b10      	cmp	r3, #16
 8011b0a:	d0f0      	beq.n	8011aee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011b0c:	2300      	movs	r3, #0
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3714      	adds	r7, #20
 8011b12:	46bd      	mov	sp, r7
 8011b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	00030d40 	.word	0x00030d40

08011b20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b089      	sub	sp, #36	; 0x24
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	4611      	mov	r1, r2
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	460b      	mov	r3, r1
 8011b30:	71fb      	strb	r3, [r7, #7]
 8011b32:	4613      	mov	r3, r2
 8011b34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d11a      	bne.n	8011b7c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011b46:	88bb      	ldrh	r3, [r7, #4]
 8011b48:	3303      	adds	r3, #3
 8011b4a:	089b      	lsrs	r3, r3, #2
 8011b4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011b4e:	2300      	movs	r3, #0
 8011b50:	61bb      	str	r3, [r7, #24]
 8011b52:	e00f      	b.n	8011b74 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011b54:	79fb      	ldrb	r3, [r7, #7]
 8011b56:	031a      	lsls	r2, r3, #12
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	4413      	add	r3, r2
 8011b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b60:	461a      	mov	r2, r3
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011b68:	69fb      	ldr	r3, [r7, #28]
 8011b6a:	3304      	adds	r3, #4
 8011b6c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	3301      	adds	r3, #1
 8011b72:	61bb      	str	r3, [r7, #24]
 8011b74:	69ba      	ldr	r2, [r7, #24]
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d3eb      	bcc.n	8011b54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011b7c:	2300      	movs	r3, #0
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3724      	adds	r7, #36	; 0x24
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr

08011b8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011b8a:	b480      	push	{r7}
 8011b8c:	b089      	sub	sp, #36	; 0x24
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	60f8      	str	r0, [r7, #12]
 8011b92:	60b9      	str	r1, [r7, #8]
 8011b94:	4613      	mov	r3, r2
 8011b96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011ba0:	88fb      	ldrh	r3, [r7, #6]
 8011ba2:	3303      	adds	r3, #3
 8011ba4:	089b      	lsrs	r3, r3, #2
 8011ba6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011ba8:	2300      	movs	r3, #0
 8011baa:	61bb      	str	r3, [r7, #24]
 8011bac:	e00b      	b.n	8011bc6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8011bba:	69fb      	ldr	r3, [r7, #28]
 8011bbc:	3304      	adds	r3, #4
 8011bbe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	61bb      	str	r3, [r7, #24]
 8011bc6:	69ba      	ldr	r2, [r7, #24]
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d3ef      	bcc.n	8011bae <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011bce:	69fb      	ldr	r3, [r7, #28]
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3724      	adds	r7, #36	; 0x24
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	695b      	ldr	r3, [r3, #20]
 8011be8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	699b      	ldr	r3, [r3, #24]
 8011bee:	68fa      	ldr	r2, [r7, #12]
 8011bf0:	4013      	ands	r3, r2
 8011bf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3714      	adds	r7, #20
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr

08011c02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011c02:	b480      	push	{r7}
 8011c04:	b083      	sub	sp, #12
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	695b      	ldr	r3, [r3, #20]
 8011c0e:	f003 0301 	and.w	r3, r3, #1
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	370c      	adds	r7, #12
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr
	...

08011c20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b085      	sub	sp, #20
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	3301      	adds	r3, #1
 8011c30:	60fb      	str	r3, [r7, #12]
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	4a13      	ldr	r2, [pc, #76]	; (8011c84 <USB_CoreReset+0x64>)
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d901      	bls.n	8011c3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011c3a:	2303      	movs	r3, #3
 8011c3c:	e01b      	b.n	8011c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	691b      	ldr	r3, [r3, #16]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	daf2      	bge.n	8011c2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011c46:	2300      	movs	r3, #0
 8011c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	691b      	ldr	r3, [r3, #16]
 8011c4e:	f043 0201 	orr.w	r2, r3, #1
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	60fb      	str	r3, [r7, #12]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	4a09      	ldr	r2, [pc, #36]	; (8011c84 <USB_CoreReset+0x64>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d901      	bls.n	8011c68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011c64:	2303      	movs	r3, #3
 8011c66:	e006      	b.n	8011c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	691b      	ldr	r3, [r3, #16]
 8011c6c:	f003 0301 	and.w	r3, r3, #1
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d0f0      	beq.n	8011c56 <USB_CoreReset+0x36>

  return HAL_OK;
 8011c74:	2300      	movs	r3, #0
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3714      	adds	r7, #20
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop
 8011c84:	00030d40 	.word	0x00030d40

08011c88 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011c88:	b084      	sub	sp, #16
 8011c8a:	b580      	push	{r7, lr}
 8011c8c:	b084      	sub	sp, #16
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	6078      	str	r0, [r7, #4]
 8011c92:	f107 001c 	add.w	r0, r7, #28
 8011c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d018      	beq.n	8011cf4 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8011cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d10a      	bne.n	8011cde <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	68ba      	ldr	r2, [r7, #8]
 8011cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011cd6:	f043 0304 	orr.w	r3, r3, #4
 8011cda:	6013      	str	r3, [r2, #0]
 8011cdc:	e014      	b.n	8011d08 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	68ba      	ldr	r2, [r7, #8]
 8011ce8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011cec:	f023 0304 	bic.w	r3, r3, #4
 8011cf0:	6013      	str	r3, [r2, #0]
 8011cf2:	e009      	b.n	8011d08 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011d02:	f023 0304 	bic.w	r3, r3, #4
 8011d06:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8011d08:	2110      	movs	r1, #16
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f7ff fec0 	bl	8011a90 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff fee3 	bl	8011adc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011d16:	2300      	movs	r3, #0
 8011d18:	60fb      	str	r3, [r7, #12]
 8011d1a:	e015      	b.n	8011d48 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	015a      	lsls	r2, r3, #5
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	4413      	add	r3, r2
 8011d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d28:	461a      	mov	r2, r3
 8011d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d2e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	015a      	lsls	r2, r3, #5
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	4413      	add	r3, r2
 8011d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	2300      	movs	r3, #0
 8011d40:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	3301      	adds	r3, #1
 8011d46:	60fb      	str	r3, [r7, #12]
 8011d48:	6a3b      	ldr	r3, [r7, #32]
 8011d4a:	68fa      	ldr	r2, [r7, #12]
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d3e5      	bcc.n	8011d1c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8011d50:	2101      	movs	r1, #1
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 f8ac 	bl	8011eb0 <USB_DriveVbus>

  HAL_Delay(200U);
 8011d58:	20c8      	movs	r0, #200	; 0xc8
 8011d5a:	f7f4 fa5b 	bl	8006214 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2200      	movs	r2, #0
 8011d62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d6a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00b      	beq.n	8011d90 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	4a14      	ldr	r2, [pc, #80]	; (8011dd4 <USB_HostInit+0x14c>)
 8011d84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	4a13      	ldr	r2, [pc, #76]	; (8011dd8 <USB_HostInit+0x150>)
 8011d8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8011d8e:	e009      	b.n	8011da4 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2280      	movs	r2, #128	; 0x80
 8011d94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	4a10      	ldr	r2, [pc, #64]	; (8011ddc <USB_HostInit+0x154>)
 8011d9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	4a10      	ldr	r2, [pc, #64]	; (8011de0 <USB_HostInit+0x158>)
 8011da0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d105      	bne.n	8011db6 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	699b      	ldr	r3, [r3, #24]
 8011dae:	f043 0210 	orr.w	r2, r3, #16
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	699a      	ldr	r2, [r3, #24]
 8011dba:	4b0a      	ldr	r3, [pc, #40]	; (8011de4 <USB_HostInit+0x15c>)
 8011dbc:	4313      	orrs	r3, r2
 8011dbe:	687a      	ldr	r2, [r7, #4]
 8011dc0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011dce:	b004      	add	sp, #16
 8011dd0:	4770      	bx	lr
 8011dd2:	bf00      	nop
 8011dd4:	01000200 	.word	0x01000200
 8011dd8:	00e00300 	.word	0x00e00300
 8011ddc:	00600080 	.word	0x00600080
 8011de0:	004000e0 	.word	0x004000e0
 8011de4:	a3200008 	.word	0xa3200008

08011de8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b085      	sub	sp, #20
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	460b      	mov	r3, r1
 8011df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011e06:	f023 0303 	bic.w	r3, r3, #3
 8011e0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	78fb      	ldrb	r3, [r7, #3]
 8011e16:	f003 0303 	and.w	r3, r3, #3
 8011e1a:	68f9      	ldr	r1, [r7, #12]
 8011e1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011e20:	4313      	orrs	r3, r2
 8011e22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011e24:	78fb      	ldrb	r3, [r7, #3]
 8011e26:	2b01      	cmp	r3, #1
 8011e28:	d107      	bne.n	8011e3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e30:	461a      	mov	r2, r3
 8011e32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8011e36:	6053      	str	r3, [r2, #4]
 8011e38:	e009      	b.n	8011e4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8011e3a:	78fb      	ldrb	r3, [r7, #3]
 8011e3c:	2b02      	cmp	r3, #2
 8011e3e:	d106      	bne.n	8011e4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e46:	461a      	mov	r2, r3
 8011e48:	f241 7370 	movw	r3, #6000	; 0x1770
 8011e4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8011e4e:	2300      	movs	r3, #0
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3714      	adds	r7, #20
 8011e54:	46bd      	mov	sp, r7
 8011e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5a:	4770      	bx	lr

08011e5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b084      	sub	sp, #16
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011e7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8011e8c:	2064      	movs	r0, #100	; 0x64
 8011e8e:	f7f4 f9c1 	bl	8006214 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	68fa      	ldr	r2, [r7, #12]
 8011e96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8011ea0:	200a      	movs	r0, #10
 8011ea2:	f7f4 f9b7 	bl	8006214 <HAL_Delay>

  return HAL_OK;
 8011ea6:	2300      	movs	r3, #0
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	460b      	mov	r3, r1
 8011eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8011ed4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d109      	bne.n	8011ef4 <USB_DriveVbus+0x44>
 8011ee0:	78fb      	ldrb	r3, [r7, #3]
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	d106      	bne.n	8011ef4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	68fa      	ldr	r2, [r7, #12]
 8011eea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011ef2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011efe:	d109      	bne.n	8011f14 <USB_DriveVbus+0x64>
 8011f00:	78fb      	ldrb	r3, [r7, #3]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d106      	bne.n	8011f14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8011f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8011f14:	2300      	movs	r3, #0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3714      	adds	r7, #20
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr

08011f22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011f22:	b480      	push	{r7}
 8011f24:	b085      	sub	sp, #20
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	0c5b      	lsrs	r3, r3, #17
 8011f40:	f003 0303 	and.w	r3, r3, #3
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3714      	adds	r7, #20
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr

08011f50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8011f50:	b480      	push	{r7}
 8011f52:	b085      	sub	sp, #20
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	b29b      	uxth	r3, r3
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3714      	adds	r7, #20
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr
	...

08011f74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b088      	sub	sp, #32
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	4608      	mov	r0, r1
 8011f7e:	4611      	mov	r1, r2
 8011f80:	461a      	mov	r2, r3
 8011f82:	4603      	mov	r3, r0
 8011f84:	70fb      	strb	r3, [r7, #3]
 8011f86:	460b      	mov	r3, r1
 8011f88:	70bb      	strb	r3, [r7, #2]
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8011f96:	78fb      	ldrb	r3, [r7, #3]
 8011f98:	015a      	lsls	r2, r3, #5
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	4413      	add	r3, r2
 8011f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fa8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8011faa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011fae:	2b03      	cmp	r3, #3
 8011fb0:	d87e      	bhi.n	80120b0 <USB_HC_Init+0x13c>
 8011fb2:	a201      	add	r2, pc, #4	; (adr r2, 8011fb8 <USB_HC_Init+0x44>)
 8011fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fb8:	08011fc9 	.word	0x08011fc9
 8011fbc:	08012073 	.word	0x08012073
 8011fc0:	08011fc9 	.word	0x08011fc9
 8011fc4:	08012035 	.word	0x08012035
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011fc8:	78fb      	ldrb	r3, [r7, #3]
 8011fca:	015a      	lsls	r2, r3, #5
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	4413      	add	r3, r2
 8011fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	f240 439d 	movw	r3, #1181	; 0x49d
 8011fda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8011fdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	da10      	bge.n	8012006 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011fe4:	78fb      	ldrb	r3, [r7, #3]
 8011fe6:	015a      	lsls	r2, r3, #5
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	4413      	add	r3, r2
 8011fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	78fa      	ldrb	r2, [r7, #3]
 8011ff4:	0151      	lsls	r1, r2, #5
 8011ff6:	693a      	ldr	r2, [r7, #16]
 8011ff8:	440a      	add	r2, r1
 8011ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012002:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8012004:	e057      	b.n	80120b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801200e:	2b00      	cmp	r3, #0
 8012010:	d051      	beq.n	80120b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8012012:	78fb      	ldrb	r3, [r7, #3]
 8012014:	015a      	lsls	r2, r3, #5
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	4413      	add	r3, r2
 801201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	78fa      	ldrb	r2, [r7, #3]
 8012022:	0151      	lsls	r1, r2, #5
 8012024:	693a      	ldr	r2, [r7, #16]
 8012026:	440a      	add	r2, r1
 8012028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801202c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012030:	60d3      	str	r3, [r2, #12]
      break;
 8012032:	e040      	b.n	80120b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012034:	78fb      	ldrb	r3, [r7, #3]
 8012036:	015a      	lsls	r2, r3, #5
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	4413      	add	r3, r2
 801203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012040:	461a      	mov	r2, r3
 8012042:	f240 639d 	movw	r3, #1693	; 0x69d
 8012046:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012048:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801204c:	2b00      	cmp	r3, #0
 801204e:	da34      	bge.n	80120ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012050:	78fb      	ldrb	r3, [r7, #3]
 8012052:	015a      	lsls	r2, r3, #5
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	4413      	add	r3, r2
 8012058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	78fa      	ldrb	r2, [r7, #3]
 8012060:	0151      	lsls	r1, r2, #5
 8012062:	693a      	ldr	r2, [r7, #16]
 8012064:	440a      	add	r2, r1
 8012066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801206a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801206e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8012070:	e023      	b.n	80120ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012072:	78fb      	ldrb	r3, [r7, #3]
 8012074:	015a      	lsls	r2, r3, #5
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	4413      	add	r3, r2
 801207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801207e:	461a      	mov	r2, r3
 8012080:	f240 2325 	movw	r3, #549	; 0x225
 8012084:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012086:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801208a:	2b00      	cmp	r3, #0
 801208c:	da17      	bge.n	80120be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801208e:	78fb      	ldrb	r3, [r7, #3]
 8012090:	015a      	lsls	r2, r3, #5
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	4413      	add	r3, r2
 8012096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	78fa      	ldrb	r2, [r7, #3]
 801209e:	0151      	lsls	r1, r2, #5
 80120a0:	693a      	ldr	r2, [r7, #16]
 80120a2:	440a      	add	r2, r1
 80120a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80120a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80120ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80120ae:	e006      	b.n	80120be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80120b0:	2301      	movs	r3, #1
 80120b2:	77fb      	strb	r3, [r7, #31]
      break;
 80120b4:	e004      	b.n	80120c0 <USB_HC_Init+0x14c>
      break;
 80120b6:	bf00      	nop
 80120b8:	e002      	b.n	80120c0 <USB_HC_Init+0x14c>
      break;
 80120ba:	bf00      	nop
 80120bc:	e000      	b.n	80120c0 <USB_HC_Init+0x14c>
      break;
 80120be:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120c6:	699a      	ldr	r2, [r3, #24]
 80120c8:	78fb      	ldrb	r3, [r7, #3]
 80120ca:	f003 030f 	and.w	r3, r3, #15
 80120ce:	2101      	movs	r1, #1
 80120d0:	fa01 f303 	lsl.w	r3, r1, r3
 80120d4:	6939      	ldr	r1, [r7, #16]
 80120d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80120da:	4313      	orrs	r3, r2
 80120dc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	699b      	ldr	r3, [r3, #24]
 80120e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80120ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	da03      	bge.n	80120fa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80120f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120f6:	61bb      	str	r3, [r7, #24]
 80120f8:	e001      	b.n	80120fe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80120fa:	2300      	movs	r3, #0
 80120fc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f7ff ff0f 	bl	8011f22 <USB_GetHostSpeed>
 8012104:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8012106:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801210a:	2b02      	cmp	r3, #2
 801210c:	d106      	bne.n	801211c <USB_HC_Init+0x1a8>
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	2b02      	cmp	r3, #2
 8012112:	d003      	beq.n	801211c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8012114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012118:	617b      	str	r3, [r7, #20]
 801211a:	e001      	b.n	8012120 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801211c:	2300      	movs	r3, #0
 801211e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012120:	787b      	ldrb	r3, [r7, #1]
 8012122:	059b      	lsls	r3, r3, #22
 8012124:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012128:	78bb      	ldrb	r3, [r7, #2]
 801212a:	02db      	lsls	r3, r3, #11
 801212c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012130:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012132:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012136:	049b      	lsls	r3, r3, #18
 8012138:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801213c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801213e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012140:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012144:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801214a:	78fb      	ldrb	r3, [r7, #3]
 801214c:	0159      	lsls	r1, r3, #5
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	440b      	add	r3, r1
 8012152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012156:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801215c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 801215e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012162:	2b03      	cmp	r3, #3
 8012164:	d10f      	bne.n	8012186 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8012166:	78fb      	ldrb	r3, [r7, #3]
 8012168:	015a      	lsls	r2, r3, #5
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	4413      	add	r3, r2
 801216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	78fa      	ldrb	r2, [r7, #3]
 8012176:	0151      	lsls	r1, r2, #5
 8012178:	693a      	ldr	r2, [r7, #16]
 801217a:	440a      	add	r2, r1
 801217c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012184:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8012186:	7ffb      	ldrb	r3, [r7, #31]
}
 8012188:	4618      	mov	r0, r3
 801218a:	3720      	adds	r7, #32
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08c      	sub	sp, #48	; 0x30
 8012194:	af02      	add	r7, sp, #8
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	4613      	mov	r3, r2
 801219c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	785b      	ldrb	r3, [r3, #1]
 80121a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80121a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d02d      	beq.n	8012216 <USB_HC_StartXfer+0x86>
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	791b      	ldrb	r3, [r3, #4]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d129      	bne.n	8012216 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80121c2:	79fb      	ldrb	r3, [r7, #7]
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d117      	bne.n	80121f8 <USB_HC_StartXfer+0x68>
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	79db      	ldrb	r3, [r3, #7]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d003      	beq.n	80121d8 <USB_HC_StartXfer+0x48>
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	79db      	ldrb	r3, [r3, #7]
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	d10f      	bne.n	80121f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	015a      	lsls	r2, r3, #5
 80121dc:	6a3b      	ldr	r3, [r7, #32]
 80121de:	4413      	add	r3, r2
 80121e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	69fa      	ldr	r2, [r7, #28]
 80121e8:	0151      	lsls	r1, r2, #5
 80121ea:	6a3a      	ldr	r2, [r7, #32]
 80121ec:	440a      	add	r2, r1
 80121ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80121f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80121f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80121f8:	79fb      	ldrb	r3, [r7, #7]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d10b      	bne.n	8012216 <USB_HC_StartXfer+0x86>
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	795b      	ldrb	r3, [r3, #5]
 8012202:	2b01      	cmp	r3, #1
 8012204:	d107      	bne.n	8012216 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	785b      	ldrb	r3, [r3, #1]
 801220a:	4619      	mov	r1, r3
 801220c:	68f8      	ldr	r0, [r7, #12]
 801220e:	f000 fa2f 	bl	8012670 <USB_DoPing>
      return HAL_OK;
 8012212:	2300      	movs	r3, #0
 8012214:	e0f8      	b.n	8012408 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	695b      	ldr	r3, [r3, #20]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d018      	beq.n	8012250 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	695b      	ldr	r3, [r3, #20]
 8012222:	68ba      	ldr	r2, [r7, #8]
 8012224:	8912      	ldrh	r2, [r2, #8]
 8012226:	4413      	add	r3, r2
 8012228:	3b01      	subs	r3, #1
 801222a:	68ba      	ldr	r2, [r7, #8]
 801222c:	8912      	ldrh	r2, [r2, #8]
 801222e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012232:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8012234:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012236:	8b7b      	ldrh	r3, [r7, #26]
 8012238:	429a      	cmp	r2, r3
 801223a:	d90b      	bls.n	8012254 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 801223c:	8b7b      	ldrh	r3, [r7, #26]
 801223e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012240:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012242:	68ba      	ldr	r2, [r7, #8]
 8012244:	8912      	ldrh	r2, [r2, #8]
 8012246:	fb02 f203 	mul.w	r2, r2, r3
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	611a      	str	r2, [r3, #16]
 801224e:	e001      	b.n	8012254 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8012250:	2301      	movs	r3, #1
 8012252:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	78db      	ldrb	r3, [r3, #3]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d007      	beq.n	801226c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801225c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801225e:	68ba      	ldr	r2, [r7, #8]
 8012260:	8912      	ldrh	r2, [r2, #8]
 8012262:	fb02 f203 	mul.w	r2, r2, r3
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	611a      	str	r2, [r3, #16]
 801226a:	e003      	b.n	8012274 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	695a      	ldr	r2, [r3, #20]
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	691b      	ldr	r3, [r3, #16]
 8012278:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801227c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801227e:	04d9      	lsls	r1, r3, #19
 8012280:	4b63      	ldr	r3, [pc, #396]	; (8012410 <USB_HC_StartXfer+0x280>)
 8012282:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012284:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	7a9b      	ldrb	r3, [r3, #10]
 801228a:	075b      	lsls	r3, r3, #29
 801228c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012290:	69f9      	ldr	r1, [r7, #28]
 8012292:	0148      	lsls	r0, r1, #5
 8012294:	6a39      	ldr	r1, [r7, #32]
 8012296:	4401      	add	r1, r0
 8012298:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801229c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801229e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80122a0:	79fb      	ldrb	r3, [r7, #7]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d009      	beq.n	80122ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	68d9      	ldr	r1, [r3, #12]
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	015a      	lsls	r2, r3, #5
 80122ae:	6a3b      	ldr	r3, [r7, #32]
 80122b0:	4413      	add	r3, r2
 80122b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122b6:	460a      	mov	r2, r1
 80122b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80122ba:	6a3b      	ldr	r3, [r7, #32]
 80122bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80122c0:	689b      	ldr	r3, [r3, #8]
 80122c2:	f003 0301 	and.w	r3, r3, #1
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	bf0c      	ite	eq
 80122ca:	2301      	moveq	r3, #1
 80122cc:	2300      	movne	r3, #0
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	015a      	lsls	r2, r3, #5
 80122d6:	6a3b      	ldr	r3, [r7, #32]
 80122d8:	4413      	add	r3, r2
 80122da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	69fa      	ldr	r2, [r7, #28]
 80122e2:	0151      	lsls	r1, r2, #5
 80122e4:	6a3a      	ldr	r2, [r7, #32]
 80122e6:	440a      	add	r2, r1
 80122e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80122ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80122f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	015a      	lsls	r2, r3, #5
 80122f6:	6a3b      	ldr	r3, [r7, #32]
 80122f8:	4413      	add	r3, r2
 80122fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122fe:	681a      	ldr	r2, [r3, #0]
 8012300:	7e7b      	ldrb	r3, [r7, #25]
 8012302:	075b      	lsls	r3, r3, #29
 8012304:	69f9      	ldr	r1, [r7, #28]
 8012306:	0148      	lsls	r0, r1, #5
 8012308:	6a39      	ldr	r1, [r7, #32]
 801230a:	4401      	add	r1, r0
 801230c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8012310:	4313      	orrs	r3, r2
 8012312:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8012314:	69fb      	ldr	r3, [r7, #28]
 8012316:	015a      	lsls	r2, r3, #5
 8012318:	6a3b      	ldr	r3, [r7, #32]
 801231a:	4413      	add	r3, r2
 801231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801232a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	78db      	ldrb	r3, [r3, #3]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d004      	beq.n	801233e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8012334:	693b      	ldr	r3, [r7, #16]
 8012336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801233a:	613b      	str	r3, [r7, #16]
 801233c:	e003      	b.n	8012346 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012344:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801234c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801234e:	69fb      	ldr	r3, [r7, #28]
 8012350:	015a      	lsls	r2, r3, #5
 8012352:	6a3b      	ldr	r3, [r7, #32]
 8012354:	4413      	add	r3, r2
 8012356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801235a:	461a      	mov	r2, r3
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8012360:	79fb      	ldrb	r3, [r7, #7]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d001      	beq.n	801236a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8012366:	2300      	movs	r3, #0
 8012368:	e04e      	b.n	8012408 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	78db      	ldrb	r3, [r3, #3]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d149      	bne.n	8012406 <USB_HC_StartXfer+0x276>
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	695b      	ldr	r3, [r3, #20]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d045      	beq.n	8012406 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	79db      	ldrb	r3, [r3, #7]
 801237e:	2b03      	cmp	r3, #3
 8012380:	d830      	bhi.n	80123e4 <USB_HC_StartXfer+0x254>
 8012382:	a201      	add	r2, pc, #4	; (adr r2, 8012388 <USB_HC_StartXfer+0x1f8>)
 8012384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012388:	08012399 	.word	0x08012399
 801238c:	080123bd 	.word	0x080123bd
 8012390:	08012399 	.word	0x08012399
 8012394:	080123bd 	.word	0x080123bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	695b      	ldr	r3, [r3, #20]
 801239c:	3303      	adds	r3, #3
 801239e:	089b      	lsrs	r3, r3, #2
 80123a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80123a2:	8afa      	ldrh	r2, [r7, #22]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d91c      	bls.n	80123e8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	699b      	ldr	r3, [r3, #24]
 80123b2:	f043 0220 	orr.w	r2, r3, #32
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80123ba:	e015      	b.n	80123e8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	695b      	ldr	r3, [r3, #20]
 80123c0:	3303      	adds	r3, #3
 80123c2:	089b      	lsrs	r3, r3, #2
 80123c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80123c6:	8afa      	ldrh	r2, [r7, #22]
 80123c8:	6a3b      	ldr	r3, [r7, #32]
 80123ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80123ce:	691b      	ldr	r3, [r3, #16]
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d90a      	bls.n	80123ec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	699b      	ldr	r3, [r3, #24]
 80123da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80123e2:	e003      	b.n	80123ec <USB_HC_StartXfer+0x25c>

      default:
        break;
 80123e4:	bf00      	nop
 80123e6:	e002      	b.n	80123ee <USB_HC_StartXfer+0x25e>
        break;
 80123e8:	bf00      	nop
 80123ea:	e000      	b.n	80123ee <USB_HC_StartXfer+0x25e>
        break;
 80123ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	68d9      	ldr	r1, [r3, #12]
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	785a      	ldrb	r2, [r3, #1]
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	695b      	ldr	r3, [r3, #20]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	2000      	movs	r0, #0
 80123fe:	9000      	str	r0, [sp, #0]
 8012400:	68f8      	ldr	r0, [r7, #12]
 8012402:	f7ff fb8d 	bl	8011b20 <USB_WritePacket>
  }

  return HAL_OK;
 8012406:	2300      	movs	r3, #0
}
 8012408:	4618      	mov	r0, r3
 801240a:	3728      	adds	r7, #40	; 0x28
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	1ff80000 	.word	0x1ff80000

08012414 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012414:	b480      	push	{r7}
 8012416:	b085      	sub	sp, #20
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012426:	695b      	ldr	r3, [r3, #20]
 8012428:	b29b      	uxth	r3, r3
}
 801242a:	4618      	mov	r0, r3
 801242c:	3714      	adds	r7, #20
 801242e:	46bd      	mov	sp, r7
 8012430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012434:	4770      	bx	lr

08012436 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8012436:	b480      	push	{r7}
 8012438:	b089      	sub	sp, #36	; 0x24
 801243a:	af00      	add	r7, sp, #0
 801243c:	6078      	str	r0, [r7, #4]
 801243e:	460b      	mov	r3, r1
 8012440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8012446:	78fb      	ldrb	r3, [r7, #3]
 8012448:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 801244a:	2300      	movs	r3, #0
 801244c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	015a      	lsls	r2, r3, #5
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	4413      	add	r3, r2
 8012456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	0c9b      	lsrs	r3, r3, #18
 801245e:	f003 0303 	and.w	r3, r3, #3
 8012462:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	015a      	lsls	r2, r3, #5
 8012468:	69bb      	ldr	r3, [r7, #24]
 801246a:	4413      	add	r3, r2
 801246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	0fdb      	lsrs	r3, r3, #31
 8012474:	f003 0301 	and.w	r3, r3, #1
 8012478:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	689b      	ldr	r3, [r3, #8]
 801247e:	f003 0320 	and.w	r3, r3, #32
 8012482:	2b20      	cmp	r3, #32
 8012484:	d104      	bne.n	8012490 <USB_HC_Halt+0x5a>
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d101      	bne.n	8012490 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 801248c:	2300      	movs	r3, #0
 801248e:	e0e8      	b.n	8012662 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d002      	beq.n	801249c <USB_HC_Halt+0x66>
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	2b02      	cmp	r3, #2
 801249a:	d173      	bne.n	8012584 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	015a      	lsls	r2, r3, #5
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	4413      	add	r3, r2
 80124a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	697a      	ldr	r2, [r7, #20]
 80124ac:	0151      	lsls	r1, r2, #5
 80124ae:	69ba      	ldr	r2, [r7, #24]
 80124b0:	440a      	add	r2, r1
 80124b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80124b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80124ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	689b      	ldr	r3, [r3, #8]
 80124c0:	f003 0320 	and.w	r3, r3, #32
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	f040 80cb 	bne.w	8012660 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d143      	bne.n	801255e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	015a      	lsls	r2, r3, #5
 80124da:	69bb      	ldr	r3, [r7, #24]
 80124dc:	4413      	add	r3, r2
 80124de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	697a      	ldr	r2, [r7, #20]
 80124e6:	0151      	lsls	r1, r2, #5
 80124e8:	69ba      	ldr	r2, [r7, #24]
 80124ea:	440a      	add	r2, r1
 80124ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80124f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	015a      	lsls	r2, r3, #5
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	4413      	add	r3, r2
 80124fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	697a      	ldr	r2, [r7, #20]
 8012506:	0151      	lsls	r1, r2, #5
 8012508:	69ba      	ldr	r2, [r7, #24]
 801250a:	440a      	add	r2, r1
 801250c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012514:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	015a      	lsls	r2, r3, #5
 801251a:	69bb      	ldr	r3, [r7, #24]
 801251c:	4413      	add	r3, r2
 801251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	697a      	ldr	r2, [r7, #20]
 8012526:	0151      	lsls	r1, r2, #5
 8012528:	69ba      	ldr	r2, [r7, #24]
 801252a:	440a      	add	r2, r1
 801252c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012534:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	3301      	adds	r3, #1
 801253a:	61fb      	str	r3, [r7, #28]
 801253c:	69fb      	ldr	r3, [r7, #28]
 801253e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012542:	d81d      	bhi.n	8012580 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	015a      	lsls	r2, r3, #5
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	4413      	add	r3, r2
 801254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801255a:	d0ec      	beq.n	8012536 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801255c:	e080      	b.n	8012660 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	015a      	lsls	r2, r3, #5
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	4413      	add	r3, r2
 8012566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	697a      	ldr	r2, [r7, #20]
 801256e:	0151      	lsls	r1, r2, #5
 8012570:	69ba      	ldr	r2, [r7, #24]
 8012572:	440a      	add	r2, r1
 8012574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801257c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801257e:	e06f      	b.n	8012660 <USB_HC_Halt+0x22a>
            break;
 8012580:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012582:	e06d      	b.n	8012660 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	015a      	lsls	r2, r3, #5
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	4413      	add	r3, r2
 801258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	697a      	ldr	r2, [r7, #20]
 8012594:	0151      	lsls	r1, r2, #5
 8012596:	69ba      	ldr	r2, [r7, #24]
 8012598:	440a      	add	r2, r1
 801259a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801259e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80125a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80125a4:	69bb      	ldr	r3, [r7, #24]
 80125a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80125aa:	691b      	ldr	r3, [r3, #16]
 80125ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d143      	bne.n	801263c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	015a      	lsls	r2, r3, #5
 80125b8:	69bb      	ldr	r3, [r7, #24]
 80125ba:	4413      	add	r3, r2
 80125bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	697a      	ldr	r2, [r7, #20]
 80125c4:	0151      	lsls	r1, r2, #5
 80125c6:	69ba      	ldr	r2, [r7, #24]
 80125c8:	440a      	add	r2, r1
 80125ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80125ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80125d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	015a      	lsls	r2, r3, #5
 80125d8:	69bb      	ldr	r3, [r7, #24]
 80125da:	4413      	add	r3, r2
 80125dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	697a      	ldr	r2, [r7, #20]
 80125e4:	0151      	lsls	r1, r2, #5
 80125e6:	69ba      	ldr	r2, [r7, #24]
 80125e8:	440a      	add	r2, r1
 80125ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80125ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80125f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	015a      	lsls	r2, r3, #5
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	4413      	add	r3, r2
 80125fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	697a      	ldr	r2, [r7, #20]
 8012604:	0151      	lsls	r1, r2, #5
 8012606:	69ba      	ldr	r2, [r7, #24]
 8012608:	440a      	add	r2, r1
 801260a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801260e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012612:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	3301      	adds	r3, #1
 8012618:	61fb      	str	r3, [r7, #28]
 801261a:	69fb      	ldr	r3, [r7, #28]
 801261c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012620:	d81d      	bhi.n	801265e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	015a      	lsls	r2, r3, #5
 8012626:	69bb      	ldr	r3, [r7, #24]
 8012628:	4413      	add	r3, r2
 801262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012638:	d0ec      	beq.n	8012614 <USB_HC_Halt+0x1de>
 801263a:	e011      	b.n	8012660 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	015a      	lsls	r2, r3, #5
 8012640:	69bb      	ldr	r3, [r7, #24]
 8012642:	4413      	add	r3, r2
 8012644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	697a      	ldr	r2, [r7, #20]
 801264c:	0151      	lsls	r1, r2, #5
 801264e:	69ba      	ldr	r2, [r7, #24]
 8012650:	440a      	add	r2, r1
 8012652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801265a:	6013      	str	r3, [r2, #0]
 801265c:	e000      	b.n	8012660 <USB_HC_Halt+0x22a>
          break;
 801265e:	bf00      	nop
    }
  }

  return HAL_OK;
 8012660:	2300      	movs	r3, #0
}
 8012662:	4618      	mov	r0, r3
 8012664:	3724      	adds	r7, #36	; 0x24
 8012666:	46bd      	mov	sp, r7
 8012668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266c:	4770      	bx	lr
	...

08012670 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8012670:	b480      	push	{r7}
 8012672:	b087      	sub	sp, #28
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	460b      	mov	r3, r1
 801267a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8012680:	78fb      	ldrb	r3, [r7, #3]
 8012682:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012684:	2301      	movs	r3, #1
 8012686:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	04da      	lsls	r2, r3, #19
 801268c:	4b15      	ldr	r3, [pc, #84]	; (80126e4 <USB_DoPing+0x74>)
 801268e:	4013      	ands	r3, r2
 8012690:	693a      	ldr	r2, [r7, #16]
 8012692:	0151      	lsls	r1, r2, #5
 8012694:	697a      	ldr	r2, [r7, #20]
 8012696:	440a      	add	r2, r1
 8012698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801269c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80126a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	015a      	lsls	r2, r3, #5
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	4413      	add	r3, r2
 80126aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80126b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80126c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	015a      	lsls	r2, r3, #5
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	4413      	add	r3, r2
 80126ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126ce:	461a      	mov	r2, r3
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80126d4:	2300      	movs	r3, #0
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	371c      	adds	r7, #28
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr
 80126e2:	bf00      	nop
 80126e4:	1ff80000 	.word	0x1ff80000

080126e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b086      	sub	sp, #24
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80126f4:	2300      	movs	r3, #0
 80126f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f7ff f98e 	bl	8011a1a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80126fe:	2110      	movs	r1, #16
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f7ff f9c5 	bl	8011a90 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7ff f9e8 	bl	8011adc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 801270c:	2300      	movs	r3, #0
 801270e:	613b      	str	r3, [r7, #16]
 8012710:	e01f      	b.n	8012752 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	015a      	lsls	r2, r3, #5
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	4413      	add	r3, r2
 801271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012728:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012730:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012732:	68bb      	ldr	r3, [r7, #8]
 8012734:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012738:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	015a      	lsls	r2, r3, #5
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	4413      	add	r3, r2
 8012742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012746:	461a      	mov	r2, r3
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	3301      	adds	r3, #1
 8012750:	613b      	str	r3, [r7, #16]
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	2b0f      	cmp	r3, #15
 8012756:	d9dc      	bls.n	8012712 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012758:	2300      	movs	r3, #0
 801275a:	613b      	str	r3, [r7, #16]
 801275c:	e034      	b.n	80127c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	015a      	lsls	r2, r3, #5
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	4413      	add	r3, r2
 8012766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012774:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801277c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012784:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	015a      	lsls	r2, r3, #5
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	4413      	add	r3, r2
 801278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012792:	461a      	mov	r2, r3
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	3301      	adds	r3, #1
 801279c:	617b      	str	r3, [r7, #20]
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80127a4:	d80c      	bhi.n	80127c0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	015a      	lsls	r2, r3, #5
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	4413      	add	r3, r2
 80127ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127bc:	d0ec      	beq.n	8012798 <USB_StopHost+0xb0>
 80127be:	e000      	b.n	80127c2 <USB_StopHost+0xda>
        break;
 80127c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	3301      	adds	r3, #1
 80127c6:	613b      	str	r3, [r7, #16]
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	2b0f      	cmp	r3, #15
 80127cc:	d9c7      	bls.n	801275e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80127d4:	461a      	mov	r2, r3
 80127d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f7ff f907 	bl	80119f8 <USB_EnableGlobalInt>

  return HAL_OK;
 80127ea:	2300      	movs	r3, #0
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3718      	adds	r7, #24
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80127f8:	4907      	ldr	r1, [pc, #28]	; (8012818 <MX_FATFS_Init+0x24>)
 80127fa:	4808      	ldr	r0, [pc, #32]	; (801281c <MX_FATFS_Init+0x28>)
 80127fc:	f006 f93c 	bl	8018a78 <FATFS_LinkDriver>
 8012800:	4603      	mov	r3, r0
 8012802:	461a      	mov	r2, r3
 8012804:	4b06      	ldr	r3, [pc, #24]	; (8012820 <MX_FATFS_Init+0x2c>)
 8012806:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  f_mount(&SDFatFS, SDPath, 0);
 8012808:	2200      	movs	r2, #0
 801280a:	4903      	ldr	r1, [pc, #12]	; (8012818 <MX_FATFS_Init+0x24>)
 801280c:	4805      	ldr	r0, [pc, #20]	; (8012824 <MX_FATFS_Init+0x30>)
 801280e:	f005 fadf 	bl	8017dd0 <f_mount>
  /* USER CODE END Init */
}
 8012812:	bf00      	nop
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	20009198 	.word	0x20009198
 801281c:	0801fc1c 	.word	0x0801fc1c
 8012820:	20009194 	.word	0x20009194
 8012824:	200093cc 	.word	0x200093cc

08012828 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012828:	b480      	push	{r7}
 801282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801282c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801282e:	4618      	mov	r0, r3
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr

08012838 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801283e:	2300      	movs	r3, #0
 8012840:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012842:	f000 f896 	bl	8012972 <BSP_SD_IsDetected>
 8012846:	4603      	mov	r3, r0
 8012848:	2b01      	cmp	r3, #1
 801284a:	d001      	beq.n	8012850 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801284c:	2302      	movs	r3, #2
 801284e:	e012      	b.n	8012876 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012850:	480b      	ldr	r0, [pc, #44]	; (8012880 <BSP_SD_Init+0x48>)
 8012852:	f7fa fdb9 	bl	800d3c8 <HAL_SD_Init>
 8012856:	4603      	mov	r3, r0
 8012858:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801285a:	79fb      	ldrb	r3, [r7, #7]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d109      	bne.n	8012874 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012860:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012864:	4806      	ldr	r0, [pc, #24]	; (8012880 <BSP_SD_Init+0x48>)
 8012866:	f7fb fb7d 	bl	800df64 <HAL_SD_ConfigWideBusOperation>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d001      	beq.n	8012874 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012870:	2301      	movs	r3, #1
 8012872:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012874:	79fb      	ldrb	r3, [r7, #7]
}
 8012876:	4618      	mov	r0, r3
 8012878:	3708      	adds	r7, #8
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	200089d8 	.word	0x200089d8

08012884 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b086      	sub	sp, #24
 8012888:	af00      	add	r7, sp, #0
 801288a:	60f8      	str	r0, [r7, #12]
 801288c:	60b9      	str	r1, [r7, #8]
 801288e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012890:	2300      	movs	r3, #0
 8012892:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	68ba      	ldr	r2, [r7, #8]
 8012898:	68f9      	ldr	r1, [r7, #12]
 801289a:	4806      	ldr	r0, [pc, #24]	; (80128b4 <BSP_SD_ReadBlocks_DMA+0x30>)
 801289c:	f7fa fe4a 	bl	800d534 <HAL_SD_ReadBlocks_DMA>
 80128a0:	4603      	mov	r3, r0
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d001      	beq.n	80128aa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80128a6:	2301      	movs	r3, #1
 80128a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80128aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3718      	adds	r7, #24
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}
 80128b4:	200089d8 	.word	0x200089d8

080128b8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b086      	sub	sp, #24
 80128bc:	af00      	add	r7, sp, #0
 80128be:	60f8      	str	r0, [r7, #12]
 80128c0:	60b9      	str	r1, [r7, #8]
 80128c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80128c4:	2300      	movs	r3, #0
 80128c6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	68ba      	ldr	r2, [r7, #8]
 80128cc:	68f9      	ldr	r1, [r7, #12]
 80128ce:	4806      	ldr	r0, [pc, #24]	; (80128e8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80128d0:	f7fa ff12 	bl	800d6f8 <HAL_SD_WriteBlocks_DMA>
 80128d4:	4603      	mov	r3, r0
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d001      	beq.n	80128de <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80128da:	2301      	movs	r3, #1
 80128dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80128de:	7dfb      	ldrb	r3, [r7, #23]
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3718      	adds	r7, #24
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	200089d8 	.word	0x200089d8

080128ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80128f0:	4805      	ldr	r0, [pc, #20]	; (8012908 <BSP_SD_GetCardState+0x1c>)
 80128f2:	f7fb fbd1 	bl	800e098 <HAL_SD_GetCardState>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b04      	cmp	r3, #4
 80128fa:	bf14      	ite	ne
 80128fc:	2301      	movne	r3, #1
 80128fe:	2300      	moveq	r3, #0
 8012900:	b2db      	uxtb	r3, r3
}
 8012902:	4618      	mov	r0, r3
 8012904:	bd80      	pop	{r7, pc}
 8012906:	bf00      	nop
 8012908:	200089d8 	.word	0x200089d8

0801290c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012914:	6879      	ldr	r1, [r7, #4]
 8012916:	4803      	ldr	r0, [pc, #12]	; (8012924 <BSP_SD_GetCardInfo+0x18>)
 8012918:	f7fb faf8 	bl	800df0c <HAL_SD_GetCardInfo>
}
 801291c:	bf00      	nop
 801291e:	3708      	adds	r7, #8
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}
 8012924:	200089d8 	.word	0x200089d8

08012928 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012930:	f000 f818 	bl	8012964 <BSP_SD_AbortCallback>
}
 8012934:	bf00      	nop
 8012936:	3708      	adds	r7, #8
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012944:	f000 f9c4 	bl	8012cd0 <BSP_SD_WriteCpltCallback>
}
 8012948:	bf00      	nop
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012958:	f000 f9c8 	bl	8012cec <BSP_SD_ReadCpltCallback>
}
 801295c:	bf00      	nop
 801295e:	3708      	adds	r7, #8
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012964:	b480      	push	{r7}
 8012966:	af00      	add	r7, sp, #0

}
 8012968:	bf00      	nop
 801296a:	46bd      	mov	sp, r7
 801296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012970:	4770      	bx	lr

08012972 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b082      	sub	sp, #8
 8012976:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012978:	2301      	movs	r3, #1
 801297a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801297c:	f000 f80c 	bl	8012998 <BSP_PlatformIsDetected>
 8012980:	4603      	mov	r3, r0
 8012982:	2b00      	cmp	r3, #0
 8012984:	d101      	bne.n	801298a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012986:	2300      	movs	r3, #0
 8012988:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801298a:	79fb      	ldrb	r3, [r7, #7]
 801298c:	b2db      	uxtb	r3, r3
}
 801298e:	4618      	mov	r0, r3
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
	...

08012998 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801299e:	2301      	movs	r3, #1
 80129a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80129a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80129a6:	4806      	ldr	r0, [pc, #24]	; (80129c0 <BSP_PlatformIsDetected+0x28>)
 80129a8:	f7f5 fc6a 	bl	8008280 <HAL_GPIO_ReadPin>
 80129ac:	4603      	mov	r3, r0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d001      	beq.n	80129b6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80129b2:	2300      	movs	r3, #0
 80129b4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80129b6:	79fb      	ldrb	r3, [r7, #7]
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3708      	adds	r7, #8
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	40020800 	.word	0x40020800

080129c4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80129cc:	f006 f9ca 	bl	8018d64 <osKernelSysTick>
 80129d0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80129d2:	e006      	b.n	80129e2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80129d4:	f7ff ff8a 	bl	80128ec <BSP_SD_GetCardState>
 80129d8:	4603      	mov	r3, r0
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d101      	bne.n	80129e2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80129de:	2300      	movs	r3, #0
 80129e0:	e009      	b.n	80129f6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80129e2:	f006 f9bf 	bl	8018d64 <osKernelSysTick>
 80129e6:	4602      	mov	r2, r0
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	1ad3      	subs	r3, r2, r3
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d8f0      	bhi.n	80129d4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80129f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3710      	adds	r7, #16
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
	...

08012a00 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	4603      	mov	r3, r0
 8012a08:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012a0a:	4b0b      	ldr	r3, [pc, #44]	; (8012a38 <SD_CheckStatus+0x38>)
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012a10:	f7ff ff6c 	bl	80128ec <BSP_SD_GetCardState>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d107      	bne.n	8012a2a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012a1a:	4b07      	ldr	r3, [pc, #28]	; (8012a38 <SD_CheckStatus+0x38>)
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	b2db      	uxtb	r3, r3
 8012a20:	f023 0301 	bic.w	r3, r3, #1
 8012a24:	b2da      	uxtb	r2, r3
 8012a26:	4b04      	ldr	r3, [pc, #16]	; (8012a38 <SD_CheckStatus+0x38>)
 8012a28:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012a2a:	4b03      	ldr	r3, [pc, #12]	; (8012a38 <SD_CheckStatus+0x38>)
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	b2db      	uxtb	r3, r3
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3708      	adds	r7, #8
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	2000003d 	.word	0x2000003d

08012a3c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012a3c:	b590      	push	{r4, r7, lr}
 8012a3e:	b087      	sub	sp, #28
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	4603      	mov	r3, r0
 8012a44:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8012a46:	4b20      	ldr	r3, [pc, #128]	; (8012ac8 <SD_initialize+0x8c>)
 8012a48:	2201      	movs	r2, #1
 8012a4a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8012a4c:	f006 f97e 	bl	8018d4c <osKernelRunning>
 8012a50:	4603      	mov	r3, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d030      	beq.n	8012ab8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8012a56:	f7ff feef 	bl	8012838 <BSP_SD_Init>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d107      	bne.n	8012a70 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8012a60:	79fb      	ldrb	r3, [r7, #7]
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7ff ffcc 	bl	8012a00 <SD_CheckStatus>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	4b16      	ldr	r3, [pc, #88]	; (8012ac8 <SD_initialize+0x8c>)
 8012a6e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012a70:	4b15      	ldr	r3, [pc, #84]	; (8012ac8 <SD_initialize+0x8c>)
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	b2db      	uxtb	r3, r3
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d01e      	beq.n	8012ab8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8012a7a:	4b14      	ldr	r3, [pc, #80]	; (8012acc <SD_initialize+0x90>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d10e      	bne.n	8012aa0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8012a82:	4b13      	ldr	r3, [pc, #76]	; (8012ad0 <SD_initialize+0x94>)
 8012a84:	f107 0408 	add.w	r4, r7, #8
 8012a88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8012a8e:	f107 0308 	add.w	r3, r7, #8
 8012a92:	2100      	movs	r1, #0
 8012a94:	4618      	mov	r0, r3
 8012a96:	f006 fa98 	bl	8018fca <osMessageCreate>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	4a0b      	ldr	r2, [pc, #44]	; (8012acc <SD_initialize+0x90>)
 8012a9e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8012aa0:	4b0a      	ldr	r3, [pc, #40]	; (8012acc <SD_initialize+0x90>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d107      	bne.n	8012ab8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8012aa8:	4b07      	ldr	r3, [pc, #28]	; (8012ac8 <SD_initialize+0x8c>)
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	f043 0301 	orr.w	r3, r3, #1
 8012ab2:	b2da      	uxtb	r2, r3
 8012ab4:	4b04      	ldr	r3, [pc, #16]	; (8012ac8 <SD_initialize+0x8c>)
 8012ab6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8012ab8:	4b03      	ldr	r3, [pc, #12]	; (8012ac8 <SD_initialize+0x8c>)
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	b2db      	uxtb	r3, r3
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	371c      	adds	r7, #28
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd90      	pop	{r4, r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	2000003d 	.word	0x2000003d
 8012acc:	20000524 	.word	0x20000524
 8012ad0:	0801db24 	.word	0x0801db24

08012ad4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	4603      	mov	r3, r0
 8012adc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012ade:	79fb      	ldrb	r3, [r7, #7]
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f7ff ff8d 	bl	8012a00 <SD_CheckStatus>
 8012ae6:	4603      	mov	r3, r0
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3708      	adds	r7, #8
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b08a      	sub	sp, #40	; 0x28
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	60b9      	str	r1, [r7, #8]
 8012af8:	607a      	str	r2, [r7, #4]
 8012afa:	603b      	str	r3, [r7, #0]
 8012afc:	4603      	mov	r3, r0
 8012afe:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8012b00:	2301      	movs	r3, #1
 8012b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012b06:	f247 5030 	movw	r0, #30000	; 0x7530
 8012b0a:	f7ff ff5b 	bl	80129c4 <SD_CheckStatusWithTimeout>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	da02      	bge.n	8012b1a <SD_read+0x2a>
  {
    return res;
 8012b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b18:	e032      	b.n	8012b80 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8012b1a:	683a      	ldr	r2, [r7, #0]
 8012b1c:	6879      	ldr	r1, [r7, #4]
 8012b1e:	68b8      	ldr	r0, [r7, #8]
 8012b20:	f7ff feb0 	bl	8012884 <BSP_SD_ReadBlocks_DMA>
 8012b24:	4603      	mov	r3, r0
 8012b26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8012b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d124      	bne.n	8012b7c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012b32:	4b15      	ldr	r3, [pc, #84]	; (8012b88 <SD_read+0x98>)
 8012b34:	6819      	ldr	r1, [r3, #0]
 8012b36:	f107 0314 	add.w	r3, r7, #20
 8012b3a:	f247 5230 	movw	r2, #30000	; 0x7530
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f006 faac 	bl	801909c <osMessageGet>

    if (event.status == osEventMessage)
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	2b10      	cmp	r3, #16
 8012b48:	d118      	bne.n	8012b7c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d115      	bne.n	8012b7c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8012b50:	f006 f908 	bl	8018d64 <osKernelSysTick>
 8012b54:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012b56:	e008      	b.n	8012b6a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012b58:	f7ff fec8 	bl	80128ec <BSP_SD_GetCardState>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d103      	bne.n	8012b6a <SD_read+0x7a>
              {
                res = RES_OK;
 8012b62:	2300      	movs	r3, #0
 8012b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8012b68:	e008      	b.n	8012b7c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012b6a:	f006 f8fb 	bl	8018d64 <osKernelSysTick>
 8012b6e:	4602      	mov	r2, r0
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	1ad3      	subs	r3, r2, r3
 8012b74:	f247 522f 	movw	r2, #29999	; 0x752f
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	d9ed      	bls.n	8012b58 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3728      	adds	r7, #40	; 0x28
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	20000524 	.word	0x20000524

08012b8c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b08a      	sub	sp, #40	; 0x28
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60b9      	str	r1, [r7, #8]
 8012b94:	607a      	str	r2, [r7, #4]
 8012b96:	603b      	str	r3, [r7, #0]
 8012b98:	4603      	mov	r3, r0
 8012b9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012ba2:	f247 5030 	movw	r0, #30000	; 0x7530
 8012ba6:	f7ff ff0d 	bl	80129c4 <SD_CheckStatusWithTimeout>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	da02      	bge.n	8012bb6 <SD_write+0x2a>
  {
    return res;
 8012bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bb4:	e02e      	b.n	8012c14 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012bb6:	683a      	ldr	r2, [r7, #0]
 8012bb8:	6879      	ldr	r1, [r7, #4]
 8012bba:	68b8      	ldr	r0, [r7, #8]
 8012bbc:	f7ff fe7c 	bl	80128b8 <BSP_SD_WriteBlocks_DMA>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d124      	bne.n	8012c10 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012bc6:	4b15      	ldr	r3, [pc, #84]	; (8012c1c <SD_write+0x90>)
 8012bc8:	6819      	ldr	r1, [r3, #0]
 8012bca:	f107 0314 	add.w	r3, r7, #20
 8012bce:	f247 5230 	movw	r2, #30000	; 0x7530
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f006 fa62 	bl	801909c <osMessageGet>

    if (event.status == osEventMessage)
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	2b10      	cmp	r3, #16
 8012bdc:	d118      	bne.n	8012c10 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8012bde:	69bb      	ldr	r3, [r7, #24]
 8012be0:	2b02      	cmp	r3, #2
 8012be2:	d115      	bne.n	8012c10 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8012be4:	f006 f8be 	bl	8018d64 <osKernelSysTick>
 8012be8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012bea:	e008      	b.n	8012bfe <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012bec:	f7ff fe7e 	bl	80128ec <BSP_SD_GetCardState>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d103      	bne.n	8012bfe <SD_write+0x72>
          {
            res = RES_OK;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012bfc:	e008      	b.n	8012c10 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012bfe:	f006 f8b1 	bl	8018d64 <osKernelSysTick>
 8012c02:	4602      	mov	r2, r0
 8012c04:	6a3b      	ldr	r3, [r7, #32]
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	f247 522f 	movw	r2, #29999	; 0x752f
 8012c0c:	4293      	cmp	r3, r2
 8012c0e:	d9ed      	bls.n	8012bec <SD_write+0x60>
    }

  }
#endif

  return res;
 8012c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3728      	adds	r7, #40	; 0x28
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	20000524 	.word	0x20000524

08012c20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b08c      	sub	sp, #48	; 0x30
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	4603      	mov	r3, r0
 8012c28:	603a      	str	r2, [r7, #0]
 8012c2a:	71fb      	strb	r3, [r7, #7]
 8012c2c:	460b      	mov	r3, r1
 8012c2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012c30:	2301      	movs	r3, #1
 8012c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012c36:	4b25      	ldr	r3, [pc, #148]	; (8012ccc <SD_ioctl+0xac>)
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	b2db      	uxtb	r3, r3
 8012c3c:	f003 0301 	and.w	r3, r3, #1
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d001      	beq.n	8012c48 <SD_ioctl+0x28>
 8012c44:	2303      	movs	r3, #3
 8012c46:	e03c      	b.n	8012cc2 <SD_ioctl+0xa2>

  switch (cmd)
 8012c48:	79bb      	ldrb	r3, [r7, #6]
 8012c4a:	2b03      	cmp	r3, #3
 8012c4c:	d834      	bhi.n	8012cb8 <SD_ioctl+0x98>
 8012c4e:	a201      	add	r2, pc, #4	; (adr r2, 8012c54 <SD_ioctl+0x34>)
 8012c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c54:	08012c65 	.word	0x08012c65
 8012c58:	08012c6d 	.word	0x08012c6d
 8012c5c:	08012c85 	.word	0x08012c85
 8012c60:	08012c9f 	.word	0x08012c9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012c64:	2300      	movs	r3, #0
 8012c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c6a:	e028      	b.n	8012cbe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c6c:	f107 030c 	add.w	r3, r7, #12
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7ff fe4b 	bl	801290c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c82:	e01c      	b.n	8012cbe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c84:	f107 030c 	add.w	r3, r7, #12
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7ff fe3f 	bl	801290c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c90:	b29a      	uxth	r2, r3
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012c96:	2300      	movs	r3, #0
 8012c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c9c:	e00f      	b.n	8012cbe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c9e:	f107 030c 	add.w	r3, r7, #12
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7ff fe32 	bl	801290c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012caa:	0a5a      	lsrs	r2, r3, #9
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012cb6:	e002      	b.n	8012cbe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012cb8:	2304      	movs	r3, #4
 8012cba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3730      	adds	r7, #48	; 0x30
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	2000003d 	.word	0x2000003d

08012cd0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8012cd4:	4b04      	ldr	r3, [pc, #16]	; (8012ce8 <BSP_SD_WriteCpltCallback+0x18>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	2102      	movs	r1, #2
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f006 f99d 	bl	801901c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8012ce2:	bf00      	nop
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	20000524 	.word	0x20000524

08012cec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8012cf0:	4b04      	ldr	r3, [pc, #16]	; (8012d04 <BSP_SD_ReadCpltCallback+0x18>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	2101      	movs	r1, #1
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f006 f98f 	bl	801901c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8012cfe:	bf00      	nop
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	20000524 	.word	0x20000524

08012d08 <MX_LWIP_Init>:
  dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */
#else
void MX_LWIP_Init(void)
{
 8012d08:	b480      	push	{r7}
 8012d0a:	af00      	add	r7, sp, #0
#endif
/* USER CODE END 3 */
}
 8012d0c:	bf00      	nop
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
	...

08012d18 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8012d20:	4b04      	ldr	r3, [pc, #16]	; (8012d34 <HAL_ETH_RxCpltCallback+0x1c>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	4618      	mov	r0, r3
 8012d26:	f006 f907 	bl	8018f38 <osSemaphoreRelease>
}
 8012d2a:	bf00      	nop
 8012d2c:	3708      	adds	r7, #8
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	bf00      	nop
 8012d34:	20000528 	.word	0x20000528

08012d38 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8012d38:	b590      	push	{r4, r7, lr}
 8012d3a:	b08b      	sub	sp, #44	; 0x2c
 8012d3c:	af04      	add	r7, sp, #16
 8012d3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8012d40:	2300      	movs	r3, #0
 8012d42:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012d4a:	7919      	ldrb	r1, [r3, #4]
 8012d4c:	23ff      	movs	r3, #255	; 0xff
 8012d4e:	2201      	movs	r2, #1
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f001 f90f 	bl	8013f74 <USBH_FindInterface>
 8012d56:	4603      	mov	r3, r0
 8012d58:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012d5a:	7dbb      	ldrb	r3, [r7, #22]
 8012d5c:	2bff      	cmp	r3, #255	; 0xff
 8012d5e:	d002      	beq.n	8012d66 <USBH_HID_InterfaceInit+0x2e>
 8012d60:	7dbb      	ldrb	r3, [r7, #22]
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	d90f      	bls.n	8012d86 <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8012d66:	489c      	ldr	r0, [pc, #624]	; (8012fd8 <USBH_HID_InterfaceInit+0x2a0>)
 8012d68:	f009 fc7c 	bl	801c664 <iprintf>
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	4619      	mov	r1, r3
 8012d76:	4899      	ldr	r0, [pc, #612]	; (8012fdc <USBH_HID_InterfaceInit+0x2a4>)
 8012d78:	f009 fc74 	bl	801c664 <iprintf>
 8012d7c:	200a      	movs	r0, #10
 8012d7e:	f009 fc89 	bl	801c694 <putchar>
    return USBH_FAIL;
 8012d82:	2302      	movs	r3, #2
 8012d84:	e123      	b.n	8012fce <USBH_HID_InterfaceInit+0x296>
  }

  status = USBH_SelectInterface(phost, interface);
 8012d86:	7dbb      	ldrb	r3, [r7, #22]
 8012d88:	4619      	mov	r1, r3
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f001 f88a 	bl	8013ea4 <USBH_SelectInterface>
 8012d90:	4603      	mov	r3, r0
 8012d92:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8012d94:	7d7b      	ldrb	r3, [r7, #21]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d001      	beq.n	8012d9e <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 8012d9a:	2302      	movs	r3, #2
 8012d9c:	e117      	b.n	8012fce <USBH_HID_InterfaceInit+0x296>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8012da4:	2034      	movs	r0, #52	; 0x34
 8012da6:	f009 fb73 	bl	801c490 <malloc>
 8012daa:	4603      	mov	r3, r0
 8012dac:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012db4:	69db      	ldr	r3, [r3, #28]
 8012db6:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d10a      	bne.n	8012dd4 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8012dbe:	4886      	ldr	r0, [pc, #536]	; (8012fd8 <USBH_HID_InterfaceInit+0x2a0>)
 8012dc0:	f009 fc50 	bl	801c664 <iprintf>
 8012dc4:	4886      	ldr	r0, [pc, #536]	; (8012fe0 <USBH_HID_InterfaceInit+0x2a8>)
 8012dc6:	f009 fc4d 	bl	801c664 <iprintf>
 8012dca:	200a      	movs	r0, #10
 8012dcc:	f009 fc62 	bl	801c694 <putchar>
    return USBH_FAIL;
 8012dd0:	2302      	movs	r3, #2
 8012dd2:	e0fc      	b.n	8012fce <USBH_HID_InterfaceInit+0x296>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8012dd4:	2234      	movs	r2, #52	; 0x34
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	6938      	ldr	r0, [r7, #16]
 8012dda:	f009 fb91 	bl	801c500 <memset>

  HID_Handle->state = HID_ERROR;
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	2207      	movs	r2, #7
 8012de2:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8012de4:	7dbb      	ldrb	r3, [r7, #22]
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	211a      	movs	r1, #26
 8012dea:	fb01 f303 	mul.w	r3, r1, r3
 8012dee:	4413      	add	r3, r2
 8012df0:	f203 3349 	addw	r3, r3, #841	; 0x349
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	d109      	bne.n	8012e0e <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 8012dfa:	487a      	ldr	r0, [pc, #488]	; (8012fe4 <USBH_HID_InterfaceInit+0x2ac>)
 8012dfc:	f009 fc32 	bl	801c664 <iprintf>
 8012e00:	200a      	movs	r0, #10
 8012e02:	f009 fc47 	bl	801c694 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	4a77      	ldr	r2, [pc, #476]	; (8012fe8 <USBH_HID_InterfaceInit+0x2b0>)
 8012e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8012e0c:	e01c      	b.n	8012e48 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8012e0e:	7dbb      	ldrb	r3, [r7, #22]
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	211a      	movs	r1, #26
 8012e14:	fb01 f303 	mul.w	r3, r1, r3
 8012e18:	4413      	add	r3, r2
 8012e1a:	f203 3349 	addw	r3, r3, #841	; 0x349
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	2b02      	cmp	r3, #2
 8012e22:	d109      	bne.n	8012e38 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 8012e24:	4871      	ldr	r0, [pc, #452]	; (8012fec <USBH_HID_InterfaceInit+0x2b4>)
 8012e26:	f009 fc1d 	bl	801c664 <iprintf>
 8012e2a:	200a      	movs	r0, #10
 8012e2c:	f009 fc32 	bl	801c694 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	4a6f      	ldr	r2, [pc, #444]	; (8012ff0 <USBH_HID_InterfaceInit+0x2b8>)
 8012e34:	631a      	str	r2, [r3, #48]	; 0x30
 8012e36:	e007      	b.n	8012e48 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 8012e38:	486e      	ldr	r0, [pc, #440]	; (8012ff4 <USBH_HID_InterfaceInit+0x2bc>)
 8012e3a:	f009 fc13 	bl	801c664 <iprintf>
 8012e3e:	200a      	movs	r0, #10
 8012e40:	f009 fc28 	bl	801c694 <putchar>
    return USBH_FAIL;
 8012e44:	2302      	movs	r3, #2
 8012e46:	e0c2      	b.n	8012fce <USBH_HID_InterfaceInit+0x296>
  }

  HID_Handle->state     = HID_INIT;
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	2200      	movs	r2, #0
 8012e52:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012e54:	7dbb      	ldrb	r3, [r7, #22]
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	211a      	movs	r1, #26
 8012e5a:	fb01 f303 	mul.w	r3, r1, r3
 8012e5e:	4413      	add	r3, r2
 8012e60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012e64:	781a      	ldrb	r2, [r3, #0]
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012e6a:	7dbb      	ldrb	r3, [r7, #22]
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	211a      	movs	r1, #26
 8012e70:	fb01 f303 	mul.w	r3, r1, r3
 8012e74:	4413      	add	r3, r2
 8012e76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012e7a:	881a      	ldrh	r2, [r3, #0]
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8012e80:	7dbb      	ldrb	r3, [r7, #22]
 8012e82:	687a      	ldr	r2, [r7, #4]
 8012e84:	211a      	movs	r1, #26
 8012e86:	fb01 f303 	mul.w	r3, r1, r3
 8012e8a:	4413      	add	r3, r2
 8012e8c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	8b9b      	ldrh	r3, [r3, #28]
 8012e9c:	2b09      	cmp	r3, #9
 8012e9e:	d802      	bhi.n	8012ea6 <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	220a      	movs	r2, #10
 8012ea4:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8012ea6:	7dbb      	ldrb	r3, [r7, #22]
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	211a      	movs	r1, #26
 8012eac:	fb01 f303 	mul.w	r3, r1, r3
 8012eb0:	4413      	add	r3, r2
 8012eb2:	f203 3346 	addw	r3, r3, #838	; 0x346
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	2b02      	cmp	r3, #2
 8012eba:	bf28      	it	cs
 8012ebc:	2302      	movcs	r3, #2
 8012ebe:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	75fb      	strb	r3, [r7, #23]
 8012ec4:	e07d      	b.n	8012fc2 <USBH_HID_InterfaceInit+0x28a>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8012ec6:	7dbb      	ldrb	r3, [r7, #22]
 8012ec8:	7df9      	ldrb	r1, [r7, #23]
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	3101      	adds	r1, #1
 8012ece:	00c9      	lsls	r1, r1, #3
 8012ed0:	201a      	movs	r0, #26
 8012ed2:	fb00 f303 	mul.w	r3, r0, r3
 8012ed6:	440b      	add	r3, r1
 8012ed8:	4413      	add	r3, r2
 8012eda:	f203 3346 	addw	r3, r3, #838	; 0x346
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	b25b      	sxtb	r3, r3
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	da35      	bge.n	8012f52 <USBH_HID_InterfaceInit+0x21a>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8012ee6:	7dbb      	ldrb	r3, [r7, #22]
 8012ee8:	7df9      	ldrb	r1, [r7, #23]
 8012eea:	687a      	ldr	r2, [r7, #4]
 8012eec:	3101      	adds	r1, #1
 8012eee:	00c9      	lsls	r1, r1, #3
 8012ef0:	201a      	movs	r0, #26
 8012ef2:	fb00 f303 	mul.w	r3, r0, r3
 8012ef6:	440b      	add	r3, r1
 8012ef8:	4413      	add	r3, r2
 8012efa:	f203 3346 	addw	r3, r3, #838	; 0x346
 8012efe:	781a      	ldrb	r2, [r3, #0]
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	791b      	ldrb	r3, [r3, #4]
 8012f08:	4619      	mov	r1, r3
 8012f0a:	6878      	ldr	r0, [r7, #4]
 8012f0c:	f002 fd95 	bl	8015a3a <USBH_AllocPipe>
 8012f10:	4603      	mov	r3, r0
 8012f12:	461a      	mov	r2, r3
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	7859      	ldrb	r1, [r3, #1]
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	7918      	ldrb	r0, [r3, #4]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012f2c:	693a      	ldr	r2, [r7, #16]
 8012f2e:	8b12      	ldrh	r2, [r2, #24]
 8012f30:	9202      	str	r2, [sp, #8]
 8012f32:	2203      	movs	r2, #3
 8012f34:	9201      	str	r2, [sp, #4]
 8012f36:	9300      	str	r3, [sp, #0]
 8012f38:	4623      	mov	r3, r4
 8012f3a:	4602      	mov	r2, r0
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f002 fd4d 	bl	80159dc <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	785b      	ldrb	r3, [r3, #1]
 8012f46:	2200      	movs	r2, #0
 8012f48:	4619      	mov	r1, r3
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f009 f8fe 	bl	801c14c <USBH_LL_SetToggle>
 8012f50:	e034      	b.n	8012fbc <USBH_HID_InterfaceInit+0x284>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8012f52:	7dbb      	ldrb	r3, [r7, #22]
 8012f54:	7df9      	ldrb	r1, [r7, #23]
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	3101      	adds	r1, #1
 8012f5a:	00c9      	lsls	r1, r1, #3
 8012f5c:	201a      	movs	r0, #26
 8012f5e:	fb00 f303 	mul.w	r3, r0, r3
 8012f62:	440b      	add	r3, r1
 8012f64:	4413      	add	r3, r2
 8012f66:	f203 3346 	addw	r3, r3, #838	; 0x346
 8012f6a:	781a      	ldrb	r2, [r3, #0]
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	78db      	ldrb	r3, [r3, #3]
 8012f74:	4619      	mov	r1, r3
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f002 fd5f 	bl	8015a3a <USBH_AllocPipe>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	461a      	mov	r2, r3
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	7819      	ldrb	r1, [r3, #0]
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	78d8      	ldrb	r0, [r3, #3]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012f98:	693a      	ldr	r2, [r7, #16]
 8012f9a:	8b12      	ldrh	r2, [r2, #24]
 8012f9c:	9202      	str	r2, [sp, #8]
 8012f9e:	2203      	movs	r2, #3
 8012fa0:	9201      	str	r2, [sp, #4]
 8012fa2:	9300      	str	r3, [sp, #0]
 8012fa4:	4623      	mov	r3, r4
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f002 fd17 	bl	80159dc <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f009 f8c8 	bl	801c14c <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8012fbc:	7dfb      	ldrb	r3, [r7, #23]
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	75fb      	strb	r3, [r7, #23]
 8012fc2:	7dfa      	ldrb	r2, [r7, #23]
 8012fc4:	7bfb      	ldrb	r3, [r7, #15]
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	f4ff af7d 	bcc.w	8012ec6 <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 8012fcc:	2300      	movs	r3, #0
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	371c      	adds	r7, #28
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd90      	pop	{r4, r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	0801db38 	.word	0x0801db38
 8012fdc:	0801db44 	.word	0x0801db44
 8012fe0:	0801db6c 	.word	0x0801db6c
 8012fe4:	0801db94 	.word	0x0801db94
 8012fe8:	080137a9 	.word	0x080137a9
 8012fec:	0801dbac 	.word	0x0801dbac
 8012ff0:	080139f9 	.word	0x080139f9
 8012ff4:	0801dbc0 	.word	0x0801dbc0

08012ff8 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b084      	sub	sp, #16
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013006:	69db      	ldr	r3, [r3, #28]
 8013008:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	785b      	ldrb	r3, [r3, #1]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d00e      	beq.n	8013030 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	785b      	ldrb	r3, [r3, #1]
 8013016:	4619      	mov	r1, r3
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f002 fcfe 	bl	8015a1a <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	785b      	ldrb	r3, [r3, #1]
 8013022:	4619      	mov	r1, r3
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f002 fd29 	bl	8015a7c <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	2200      	movs	r2, #0
 801302e:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d00e      	beq.n	8013056 <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	4619      	mov	r1, r3
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f002 fceb 	bl	8015a1a <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	4619      	mov	r1, r3
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f002 fd16 	bl	8015a7c <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2200      	movs	r2, #0
 8013054:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801305c:	69db      	ldr	r3, [r3, #28]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d00b      	beq.n	801307a <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013068:	69db      	ldr	r3, [r3, #28]
 801306a:	4618      	mov	r0, r3
 801306c:	f009 fa18 	bl	801c4a0 <free>
    phost->pActiveClass->pData = 0U;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013076:	2200      	movs	r2, #0
 8013078:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 801307a:	2300      	movs	r3, #0
}
 801307c:	4618      	mov	r0, r3
 801307e:	3710      	adds	r7, #16
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 801308c:	2301      	movs	r3, #1
 801308e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8013090:	2301      	movs	r3, #1
 8013092:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801309a:	69db      	ldr	r3, [r3, #28]
 801309c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	795b      	ldrb	r3, [r3, #5]
 80130a2:	2b05      	cmp	r3, #5
 80130a4:	d872      	bhi.n	801318c <USBH_HID_ClassRequest+0x108>
 80130a6:	a201      	add	r2, pc, #4	; (adr r2, 80130ac <USBH_HID_ClassRequest+0x28>)
 80130a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130ac:	080130c5 	.word	0x080130c5
 80130b0:	0801318d 	.word	0x0801318d
 80130b4:	080130df 	.word	0x080130df
 80130b8:	080130c5 	.word	0x080130c5
 80130bc:	0801311b 	.word	0x0801311b
 80130c0:	08013145 	.word	0x08013145
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	331c      	adds	r3, #28
 80130ce:	4619      	mov	r1, r3
 80130d0:	4610      	mov	r0, r2
 80130d2:	f000 fa27 	bl	8013524 <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	2202      	movs	r2, #2
 80130da:	715a      	strb	r2, [r3, #5]

    break;
 80130dc:	e05d      	b.n	801319a <USBH_HID_ClassRequest+0x116>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80130e2:	4619      	mov	r1, r3
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 f98a 	bl	80133fe <USBH_HID_GetHIDReportDescriptor>
 80130ea:	4603      	mov	r3, r0
 80130ec:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 80130ee:	7bbb      	ldrb	r3, [r7, #14]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d103      	bne.n	80130fc <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	2204      	movs	r2, #4
 80130f8:	715a      	strb	r2, [r3, #5]
    else
    {
      /* .. */
    }

    break;
 80130fa:	e049      	b.n	8013190 <USBH_HID_ClassRequest+0x10c>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 80130fc:	7bbb      	ldrb	r3, [r7, #14]
 80130fe:	2b03      	cmp	r3, #3
 8013100:	d146      	bne.n	8013190 <USBH_HID_ClassRequest+0x10c>
      USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 8013102:	4828      	ldr	r0, [pc, #160]	; (80131a4 <USBH_HID_ClassRequest+0x120>)
 8013104:	f009 faae 	bl	801c664 <iprintf>
 8013108:	4827      	ldr	r0, [pc, #156]	; (80131a8 <USBH_HID_ClassRequest+0x124>)
 801310a:	f009 faab 	bl	801c664 <iprintf>
 801310e:	200a      	movs	r0, #10
 8013110:	f009 fac0 	bl	801c694 <putchar>
      status = USBH_FAIL;
 8013114:	2302      	movs	r3, #2
 8013116:	73fb      	strb	r3, [r7, #15]
    break;
 8013118:	e03a      	b.n	8013190 <USBH_HID_ClassRequest+0x10c>

  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 801311a:	2200      	movs	r2, #0
 801311c:	2100      	movs	r1, #0
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f000 f986 	bl	8013430 <USBH_HID_SetIdle>
 8013124:	4603      	mov	r3, r0
 8013126:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 8013128:	7bbb      	ldrb	r3, [r7, #14]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d103      	bne.n	8013136 <USBH_HID_ClassRequest+0xb2>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	2205      	movs	r2, #5
 8013132:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 8013134:	e02e      	b.n	8013194 <USBH_HID_ClassRequest+0x110>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 8013136:	7bbb      	ldrb	r3, [r7, #14]
 8013138:	2b03      	cmp	r3, #3
 801313a:	d12b      	bne.n	8013194 <USBH_HID_ClassRequest+0x110>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	2205      	movs	r2, #5
 8013140:	715a      	strb	r2, [r3, #5]
    break;
 8013142:	e027      	b.n	8013194 <USBH_HID_ClassRequest+0x110>

  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8013144:	2100      	movs	r1, #0
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f000 f9c6 	bl	80134d8 <USBH_HID_SetProtocol>
 801314c:	4603      	mov	r3, r0
 801314e:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8013150:	7bbb      	ldrb	r3, [r7, #14]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d10b      	bne.n	801316e <USBH_HID_ClassRequest+0xea>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	2201      	movs	r2, #1
 801315a:	715a      	strb	r2, [r3, #5]

      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013162:	2102      	movs	r1, #2
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	4798      	blx	r3
      status = USBH_OK;
 8013168:	2300      	movs	r3, #0
 801316a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      /* .. */
    }
    break;
 801316c:	e014      	b.n	8013198 <USBH_HID_ClassRequest+0x114>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 801316e:	7bbb      	ldrb	r3, [r7, #14]
 8013170:	2b03      	cmp	r3, #3
 8013172:	d111      	bne.n	8013198 <USBH_HID_ClassRequest+0x114>
      USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 8013174:	480b      	ldr	r0, [pc, #44]	; (80131a4 <USBH_HID_ClassRequest+0x120>)
 8013176:	f009 fa75 	bl	801c664 <iprintf>
 801317a:	480c      	ldr	r0, [pc, #48]	; (80131ac <USBH_HID_ClassRequest+0x128>)
 801317c:	f009 fa72 	bl	801c664 <iprintf>
 8013180:	200a      	movs	r0, #10
 8013182:	f009 fa87 	bl	801c694 <putchar>
      status = USBH_FAIL;
 8013186:	2302      	movs	r3, #2
 8013188:	73fb      	strb	r3, [r7, #15]
    break;
 801318a:	e005      	b.n	8013198 <USBH_HID_ClassRequest+0x114>

  case HID_REQ_IDLE:
  default:
    break;
 801318c:	bf00      	nop
 801318e:	e004      	b.n	801319a <USBH_HID_ClassRequest+0x116>
    break;
 8013190:	bf00      	nop
 8013192:	e002      	b.n	801319a <USBH_HID_ClassRequest+0x116>
    break;
 8013194:	bf00      	nop
 8013196:	e000      	b.n	801319a <USBH_HID_ClassRequest+0x116>
    break;
 8013198:	bf00      	nop
  }

  return status;
 801319a:	7bfb      	ldrb	r3, [r7, #15]
}
 801319c:	4618      	mov	r0, r3
 801319e:	3710      	adds	r7, #16
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	0801dbd8 	.word	0x0801dbd8
 80131a8:	0801dbe0 	.word	0x0801dbe0
 80131ac:	0801dc20 	.word	0x0801dc20

080131b0 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b088      	sub	sp, #32
 80131b4:	af02      	add	r7, sp, #8
 80131b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80131b8:	2300      	movs	r3, #0
 80131ba:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131c2:	69db      	ldr	r3, [r3, #28]
 80131c4:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	789b      	ldrb	r3, [r3, #2]
 80131ca:	2b06      	cmp	r3, #6
 80131cc:	f200 80e1 	bhi.w	8013392 <USBH_HID_Process+0x1e2>
 80131d0:	a201      	add	r2, pc, #4	; (adr r2, 80131d8 <USBH_HID_Process+0x28>)
 80131d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131d6:	bf00      	nop
 80131d8:	080131f5 	.word	0x080131f5
 80131dc:	08013221 	.word	0x08013221
 80131e0:	08013393 	.word	0x08013393
 80131e4:	08013393 	.word	0x08013393
 80131e8:	080132c9 	.word	0x080132c9
 80131ec:	08013297 	.word	0x08013297
 80131f0:	080132f7 	.word	0x080132f7
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	2201      	movs	r2, #1
 8013200:	709a      	strb	r2, [r3, #2]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2202      	movs	r2, #2
 8013206:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013216:	2200      	movs	r2, #0
 8013218:	4619      	mov	r1, r3
 801321a:	f005 feff 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801321e:	e0bb      	b.n	8013398 <USBH_HID_Process+0x1e8>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	695a      	ldr	r2, [r3, #20]
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	8b1b      	ldrh	r3, [r3, #24]
 8013228:	b2db      	uxtb	r3, r3
 801322a:	9300      	str	r3, [sp, #0]
 801322c:	4613      	mov	r3, r2
 801322e:	2200      	movs	r2, #0
 8013230:	2101      	movs	r1, #1
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f000 f924 	bl	8013480 <USBH_HID_GetReport>
 8013238:	4603      	mov	r3, r0
 801323a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 801323c:	7dfb      	ldrb	r3, [r7, #23]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d103      	bne.n	801324a <USBH_HID_Process+0x9a>
      {
        HID_Handle->state = HID_SYNC;
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	2205      	movs	r2, #5
 8013246:	709a      	strb	r2, [r3, #2]
 8013248:	e016      	b.n	8013278 <USBH_HID_Process+0xc8>
      }
      else if (status == USBH_BUSY)
 801324a:	7dfb      	ldrb	r3, [r7, #23]
 801324c:	2b01      	cmp	r3, #1
 801324e:	d105      	bne.n	801325c <USBH_HID_Process+0xac>
      {
        HID_Handle->state = HID_IDLE;
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	2201      	movs	r2, #1
 8013254:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8013256:	2300      	movs	r3, #0
 8013258:	75fb      	strb	r3, [r7, #23]
 801325a:	e00d      	b.n	8013278 <USBH_HID_Process+0xc8>
      }
      else if (status == USBH_NOT_SUPPORTED)
 801325c:	7dfb      	ldrb	r3, [r7, #23]
 801325e:	2b03      	cmp	r3, #3
 8013260:	d105      	bne.n	801326e <USBH_HID_Process+0xbe>
      {
        HID_Handle->state = HID_SYNC;
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	2205      	movs	r2, #5
 8013266:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8013268:	2300      	movs	r3, #0
 801326a:	75fb      	strb	r3, [r7, #23]
 801326c:	e004      	b.n	8013278 <USBH_HID_Process+0xc8>
      }
      else
      {
        HID_Handle->state = HID_ERROR;
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	2207      	movs	r2, #7
 8013272:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8013274:	2302      	movs	r3, #2
 8013276:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2202      	movs	r2, #2
 801327c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801328c:	2200      	movs	r2, #0
 801328e:	4619      	mov	r1, r3
 8013290:	f005 fec4 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013294:	e080      	b.n	8013398 <USBH_HID_Process+0x1e8>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801329c:	f003 0301 	and.w	r3, r3, #1
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d002      	beq.n	80132aa <USBH_HID_Process+0xfa>
      {
        HID_Handle->state = HID_GET_DATA;
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	2204      	movs	r2, #4
 80132a8:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2202      	movs	r2, #2
 80132ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80132be:	2200      	movs	r2, #0
 80132c0:	4619      	mov	r1, r3
 80132c2:	f005 feab 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80132c6:	e067      	b.n	8013398 <USBH_HID_Process+0x1e8>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80132d0:	b2da      	uxtb	r2, r3
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	785b      	ldrb	r3, [r3, #1]
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f002 fb61 	bl	801599e <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	2206      	movs	r2, #6
 80132e0:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	2200      	movs	r2, #0
 80132f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 80132f4:	e050      	b.n	8013398 <USBH_HID_Process+0x1e8>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	785b      	ldrb	r3, [r3, #1]
 80132fa:	4619      	mov	r1, r3
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f008 fefb 	bl	801c0f8 <USBH_LL_GetURBState>
 8013302:	4603      	mov	r3, r0
 8013304:	2b01      	cmp	r3, #1
 8013306:	d12e      	bne.n	8013366 <USBH_HID_Process+0x1b6>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	785b      	ldrb	r3, [r3, #1]
 801330c:	4619      	mov	r1, r3
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f008 fe60 	bl	801bfd4 <USBH_LL_GetLastXferSize>
 8013314:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801331c:	2b00      	cmp	r3, #0
 801331e:	d13a      	bne.n	8013396 <USBH_HID_Process+0x1e6>
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d037      	beq.n	8013396 <USBH_HID_Process+0x1e6>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	f103 0008 	add.w	r0, r3, #8
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	6959      	ldr	r1, [r3, #20]
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	8b1b      	ldrh	r3, [r3, #24]
 8013334:	461a      	mov	r2, r3
 8013336:	f000 f9e2 	bl	80136fe <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	2201      	movs	r2, #1
 801333e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f7ed fae0 	bl	8000908 <USBH_HID_EventCallback>

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2202      	movs	r2, #2
 801334c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801335c:	2200      	movs	r2, #0
 801335e:	4619      	mov	r1, r3
 8013360:	f005 fe5c 	bl	801901c <osMessagePut>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8013364:	e017      	b.n	8013396 <USBH_HID_Process+0x1e6>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	785b      	ldrb	r3, [r3, #1]
 801336a:	4619      	mov	r1, r3
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f008 fec3 	bl	801c0f8 <USBH_LL_GetURBState>
 8013372:	4603      	mov	r3, r0
 8013374:	2b05      	cmp	r3, #5
 8013376:	d10e      	bne.n	8013396 <USBH_HID_Process+0x1e6>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	7e9b      	ldrb	r3, [r3, #26]
 801337c:	4619      	mov	r1, r3
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f001 fe23 	bl	8014fca <USBH_ClrFeature>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d105      	bne.n	8013396 <USBH_HID_Process+0x1e6>
            HID_Handle->state = HID_GET_DATA;
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	2204      	movs	r2, #4
 801338e:	709a      	strb	r2, [r3, #2]
      break;
 8013390:	e001      	b.n	8013396 <USBH_HID_Process+0x1e6>

    default:
      break;
 8013392:	bf00      	nop
 8013394:	e000      	b.n	8013398 <USBH_HID_Process+0x1e8>
      break;
 8013396:	bf00      	nop
  }

  return status;
 8013398:	7dfb      	ldrb	r3, [r7, #23]
}
 801339a:	4618      	mov	r0, r3
 801339c:	3718      	adds	r7, #24
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop

080133a4 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80133b2:	69db      	ldr	r3, [r3, #28]
 80133b4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	789b      	ldrb	r3, [r3, #2]
 80133ba:	2b06      	cmp	r3, #6
 80133bc:	d11a      	bne.n	80133f4 <USBH_HID_SOFProcess+0x50>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	6a1b      	ldr	r3, [r3, #32]
 80133c8:	1ad3      	subs	r3, r2, r3
 80133ca:	68fa      	ldr	r2, [r7, #12]
 80133cc:	8b92      	ldrh	r2, [r2, #28]
 80133ce:	4293      	cmp	r3, r2
 80133d0:	d310      	bcc.n	80133f4 <USBH_HID_SOFProcess+0x50>
    {
      HID_Handle->state = HID_GET_DATA;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2204      	movs	r2, #4
 80133d6:	709a      	strb	r2, [r3, #2]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2202      	movs	r2, #2
 80133dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80133ec:	2200      	movs	r2, #0
 80133ee:	4619      	mov	r1, r3
 80133f0:	f005 fe14 	bl	801901c <osMessagePut>
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 80133f4:	2300      	movs	r3, #0
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3710      	adds	r7, #16
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd80      	pop	{r7, pc}

080133fe <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 80133fe:	b580      	push	{r7, lr}
 8013400:	b086      	sub	sp, #24
 8013402:	af02      	add	r7, sp, #8
 8013404:	6078      	str	r0, [r7, #4]
 8013406:	460b      	mov	r3, r1
 8013408:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8013410:	887b      	ldrh	r3, [r7, #2]
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	4613      	mov	r3, r2
 8013416:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 801341a:	2101      	movs	r1, #1
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f001 fd34 	bl	8014e8a <USBH_GetDescriptor>
 8013422:	4603      	mov	r3, r0
 8013424:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8013426:	7bfb      	ldrb	r3, [r7, #15]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3710      	adds	r7, #16
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	460b      	mov	r3, r1
 801343a:	70fb      	strb	r3, [r7, #3]
 801343c:	4613      	mov	r3, r2
 801343e:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2221      	movs	r2, #33	; 0x21
 8013444:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	220a      	movs	r2, #10
 801344a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 801344c:	78fb      	ldrb	r3, [r7, #3]
 801344e:	b29b      	uxth	r3, r3
 8013450:	021b      	lsls	r3, r3, #8
 8013452:	b29a      	uxth	r2, r3
 8013454:	78bb      	ldrb	r3, [r7, #2]
 8013456:	b29b      	uxth	r3, r3
 8013458:	4313      	orrs	r3, r2
 801345a:	b29a      	uxth	r2, r3
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2200      	movs	r2, #0
 8013464:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2200      	movs	r2, #0
 801346a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 801346c:	2200      	movs	r2, #0
 801346e:	2100      	movs	r1, #0
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f001 ff8a 	bl	801538a <USBH_CtlReq>
 8013476:	4603      	mov	r3, r0
}
 8013478:	4618      	mov	r0, r3
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	607b      	str	r3, [r7, #4]
 801348a:	460b      	mov	r3, r1
 801348c:	72fb      	strb	r3, [r7, #11]
 801348e:	4613      	mov	r3, r2
 8013490:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	22a1      	movs	r2, #161	; 0xa1
 8013496:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	2201      	movs	r2, #1
 801349c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 801349e:	7afb      	ldrb	r3, [r7, #11]
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	021b      	lsls	r3, r3, #8
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	7abb      	ldrb	r3, [r7, #10]
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	4313      	orrs	r3, r2
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	2200      	movs	r2, #0
 80134b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80134b8:	7e3b      	ldrb	r3, [r7, #24]
 80134ba:	b29a      	uxth	r2, r3
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80134c0:	7e3b      	ldrb	r3, [r7, #24]
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	461a      	mov	r2, r3
 80134c6:	6879      	ldr	r1, [r7, #4]
 80134c8:	68f8      	ldr	r0, [r7, #12]
 80134ca:	f001 ff5e 	bl	801538a <USBH_CtlReq>
 80134ce:	4603      	mov	r3, r0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3710      	adds	r7, #16
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	460b      	mov	r3, r1
 80134e2:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2221      	movs	r2, #33	; 0x21
 80134e8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	220b      	movs	r2, #11
 80134ee:	745a      	strb	r2, [r3, #17]
  if (protocol)
 80134f0:	78fb      	ldrb	r3, [r7, #3]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d003      	beq.n	80134fe <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2200      	movs	r2, #0
 80134fa:	825a      	strh	r2, [r3, #18]
 80134fc:	e002      	b.n	8013504 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	2201      	movs	r2, #1
 8013502:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2200      	movs	r2, #0
 8013508:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	2200      	movs	r2, #0
 801350e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8013510:	2200      	movs	r2, #0
 8013512:	2100      	movs	r1, #0
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f001 ff38 	bl	801538a <USBH_CtlReq>
 801351a:	4603      	mov	r3, r0

}
 801351c:	4618      	mov	r0, r3
 801351e:	3708      	adds	r7, #8
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	3302      	adds	r3, #2
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	b29a      	uxth	r2, r3
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	3303      	adds	r3, #3
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	b29b      	uxth	r3, r3
 8013542:	021b      	lsls	r3, r3, #8
 8013544:	b29b      	uxth	r3, r3
 8013546:	4313      	orrs	r3, r2
 8013548:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 801354a:	897b      	ldrh	r3, [r7, #10]
 801354c:	2b09      	cmp	r3, #9
 801354e:	d943      	bls.n	80135d8 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8013550:	2309      	movs	r3, #9
 8013552:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8013554:	e03c      	b.n	80135d0 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013556:	f107 0308 	add.w	r3, r7, #8
 801355a:	4619      	mov	r1, r3
 801355c:	68f8      	ldr	r0, [r7, #12]
 801355e:	f001 fef9 	bl	8015354 <USBH_GetNextDesc>
 8013562:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	785b      	ldrb	r3, [r3, #1]
 8013568:	2b21      	cmp	r3, #33	; 0x21
 801356a:	d131      	bne.n	80135d0 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	781a      	ldrb	r2, [r3, #0]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	785a      	ldrb	r2, [r3, #1]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	3302      	adds	r3, #2
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	b29a      	uxth	r2, r3
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	3303      	adds	r3, #3
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	b29b      	uxth	r3, r3
 801358c:	021b      	lsls	r3, r3, #8
 801358e:	b29b      	uxth	r3, r3
 8013590:	4313      	orrs	r3, r2
 8013592:	b29a      	uxth	r2, r3
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	791a      	ldrb	r2, [r3, #4]
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	795a      	ldrb	r2, [r3, #5]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	799a      	ldrb	r2, [r3, #6]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	3307      	adds	r3, #7
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	b29a      	uxth	r2, r3
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	3308      	adds	r3, #8
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	b29b      	uxth	r3, r3
 80135c0:	021b      	lsls	r3, r3, #8
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	4313      	orrs	r3, r2
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	811a      	strh	r2, [r3, #8]
        break;
 80135cc:	bf00      	nop
      }
    }
  }
}
 80135ce:	e003      	b.n	80135d8 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 80135d0:	893b      	ldrh	r3, [r7, #8]
 80135d2:	897a      	ldrh	r2, [r7, #10]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d8be      	bhi.n	8013556 <USBH_HID_ParseHIDDesc+0x32>
}
 80135d8:	bf00      	nop
 80135da:	3710      	adds	r7, #16
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 80135e0:	b480      	push	{r7}
 80135e2:	b085      	sub	sp, #20
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 80135e8:	23ff      	movs	r3, #255	; 0xff
 80135ea:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	2b0b      	cmp	r3, #11
 80135f4:	d117      	bne.n	8013626 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80135fc:	4619      	mov	r1, r3
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	231a      	movs	r3, #26
 8013602:	fb03 f301 	mul.w	r3, r3, r1
 8013606:	4413      	add	r3, r2
 8013608:	f203 3349 	addw	r3, r3, #841	; 0x349
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8013610:	7bbb      	ldrb	r3, [r7, #14]
 8013612:	2b01      	cmp	r3, #1
 8013614:	d102      	bne.n	801361c <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8013616:	2302      	movs	r3, #2
 8013618:	73fb      	strb	r3, [r7, #15]
 801361a:	e004      	b.n	8013626 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 801361c:	7bbb      	ldrb	r3, [r7, #14]
 801361e:	2b02      	cmp	r3, #2
 8013620:	d101      	bne.n	8013626 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 8013622:	2301      	movs	r3, #1
 8013624:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 8013626:	7bfb      	ldrb	r3, [r7, #15]
}
 8013628:	4618      	mov	r0, r3
 801362a:	3714      	adds	r7, #20
 801362c:	46bd      	mov	sp, r7
 801362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013632:	4770      	bx	lr

08013634 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8013634:	b480      	push	{r7}
 8013636:	b085      	sub	sp, #20
 8013638:	af00      	add	r7, sp, #0
 801363a:	60f8      	str	r0, [r7, #12]
 801363c:	60b9      	str	r1, [r7, #8]
 801363e:	4613      	mov	r3, r2
 8013640:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	2200      	movs	r2, #0
 8013646:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2200      	movs	r2, #0
 801364c:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	2200      	movs	r2, #0
 8013652:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	88fa      	ldrh	r2, [r7, #6]
 8013658:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	68ba      	ldr	r2, [r7, #8]
 801365e:	601a      	str	r2, [r3, #0]
}
 8013660:	bf00      	nop
 8013662:	3714      	adds	r7, #20
 8013664:	46bd      	mov	sp, r7
 8013666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366a:	4770      	bx	lr

0801366c <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 801366c:	b480      	push	{r7}
 801366e:	b087      	sub	sp, #28
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	4613      	mov	r3, r2
 8013678:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	7a9b      	ldrb	r3, [r3, #10]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d131      	bne.n	80136ea <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	2201      	movs	r2, #1
 801368a:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 801368c:	2300      	movs	r3, #0
 801368e:	82fb      	strh	r3, [r7, #22]
 8013690:	e027      	b.n	80136e2 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	88da      	ldrh	r2, [r3, #6]
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	889b      	ldrh	r3, [r3, #4]
 801369a:	429a      	cmp	r2, r3
 801369c:	d019      	beq.n	80136d2 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	68fa      	ldr	r2, [r7, #12]
 80136a4:	88d2      	ldrh	r2, [r2, #6]
 80136a6:	441a      	add	r2, r3
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	1c59      	adds	r1, r3, #1
 80136ac:	6139      	str	r1, [r7, #16]
 80136ae:	7812      	ldrb	r2, [r2, #0]
 80136b0:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	88db      	ldrh	r3, [r3, #6]
 80136b6:	3301      	adds	r3, #1
 80136b8:	b29a      	uxth	r2, r3
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	88da      	ldrh	r2, [r3, #6]
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	891b      	ldrh	r3, [r3, #8]
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d108      	bne.n	80136dc <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	2200      	movs	r2, #0
 80136ce:	80da      	strh	r2, [r3, #6]
 80136d0:	e004      	b.n	80136dc <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2200      	movs	r2, #0
 80136d6:	729a      	strb	r2, [r3, #10]
        return i;
 80136d8:	8afb      	ldrh	r3, [r7, #22]
 80136da:	e00a      	b.n	80136f2 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 80136dc:	8afb      	ldrh	r3, [r7, #22]
 80136de:	3301      	adds	r3, #1
 80136e0:	82fb      	strh	r3, [r7, #22]
 80136e2:	8afa      	ldrh	r2, [r7, #22]
 80136e4:	88fb      	ldrh	r3, [r7, #6]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d3d3      	bcc.n	8013692 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	2200      	movs	r2, #0
 80136ee:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80136f0:	88fb      	ldrh	r3, [r7, #6]
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	371c      	adds	r7, #28
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr

080136fe <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 80136fe:	b480      	push	{r7}
 8013700:	b087      	sub	sp, #28
 8013702:	af00      	add	r7, sp, #0
 8013704:	60f8      	str	r0, [r7, #12]
 8013706:	60b9      	str	r1, [r7, #8]
 8013708:	4613      	mov	r3, r2
 801370a:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	7a9b      	ldrb	r3, [r3, #10]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d13c      	bne.n	8013792 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	2201      	movs	r2, #1
 801371c:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 801371e:	2300      	movs	r3, #0
 8013720:	82fb      	strh	r3, [r7, #22]
 8013722:	e032      	b.n	801378a <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	889b      	ldrh	r3, [r3, #4]
 8013728:	3301      	adds	r3, #1
 801372a:	68fa      	ldr	r2, [r7, #12]
 801372c:	88d2      	ldrh	r2, [r2, #6]
 801372e:	4293      	cmp	r3, r2
 8013730:	d00a      	beq.n	8013748 <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	889b      	ldrh	r3, [r3, #4]
 8013736:	3301      	adds	r3, #1
 8013738:	68fa      	ldr	r2, [r7, #12]
 801373a:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 801373c:	4293      	cmp	r3, r2
 801373e:	d108      	bne.n	8013752 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	88db      	ldrh	r3, [r3, #6]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d104      	bne.n	8013752 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2200      	movs	r2, #0
 801374c:	729a      	strb	r2, [r3, #10]
        return i;
 801374e:	8afb      	ldrh	r3, [r7, #22]
 8013750:	e023      	b.n	801379a <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8013752:	693b      	ldr	r3, [r7, #16]
 8013754:	1c5a      	adds	r2, r3, #1
 8013756:	613a      	str	r2, [r7, #16]
 8013758:	68fa      	ldr	r2, [r7, #12]
 801375a:	6812      	ldr	r2, [r2, #0]
 801375c:	68f9      	ldr	r1, [r7, #12]
 801375e:	8889      	ldrh	r1, [r1, #4]
 8013760:	440a      	add	r2, r1
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	7013      	strb	r3, [r2, #0]
        f->head++;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	889b      	ldrh	r3, [r3, #4]
 801376a:	3301      	adds	r3, #1
 801376c:	b29a      	uxth	r2, r3
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	889a      	ldrh	r2, [r3, #4]
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	891b      	ldrh	r3, [r3, #8]
 801377a:	429a      	cmp	r2, r3
 801377c:	d102      	bne.n	8013784 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	2200      	movs	r2, #0
 8013782:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8013784:	8afb      	ldrh	r3, [r7, #22]
 8013786:	3301      	adds	r3, #1
 8013788:	82fb      	strh	r3, [r7, #22]
 801378a:	8afa      	ldrh	r2, [r7, #22]
 801378c:	88fb      	ldrh	r3, [r7, #6]
 801378e:	429a      	cmp	r2, r3
 8013790:	d3c8      	bcc.n	8013724 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	2200      	movs	r2, #0
 8013796:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8013798:	88fb      	ldrh	r3, [r7, #6]
}
 801379a:	4618      	mov	r0, r3
 801379c:	371c      	adds	r7, #28
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr
	...

080137a8 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b084      	sub	sp, #16
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80137b6:	69db      	ldr	r3, [r3, #28]
 80137b8:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 80137ba:	4b24      	ldr	r3, [pc, #144]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137bc:	2200      	movs	r2, #0
 80137be:	709a      	strb	r2, [r3, #2]
 80137c0:	4b22      	ldr	r3, [pc, #136]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137c2:	789a      	ldrb	r2, [r3, #2]
 80137c4:	4b21      	ldr	r3, [pc, #132]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137c6:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 80137c8:	4b20      	ldr	r3, [pc, #128]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137ca:	2200      	movs	r2, #0
 80137cc:	711a      	strb	r2, [r3, #4]
 80137ce:	4b1f      	ldr	r3, [pc, #124]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137d0:	791a      	ldrb	r2, [r3, #4]
 80137d2:	4b1e      	ldr	r3, [pc, #120]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137d4:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 80137d6:	4b1d      	ldr	r3, [pc, #116]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137d8:	2200      	movs	r2, #0
 80137da:	719a      	strb	r2, [r3, #6]
 80137dc:	4b1b      	ldr	r3, [pc, #108]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137de:	799a      	ldrb	r2, [r3, #6]
 80137e0:	4b1a      	ldr	r3, [pc, #104]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137e2:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 80137e4:	4b19      	ldr	r3, [pc, #100]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137e6:	2200      	movs	r2, #0
 80137e8:	721a      	strb	r2, [r3, #8]
 80137ea:	4b18      	ldr	r3, [pc, #96]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137ec:	7a1a      	ldrb	r2, [r3, #8]
 80137ee:	4b17      	ldr	r3, [pc, #92]	; (801384c <USBH_HID_KeybdInit+0xa4>)
 80137f0:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 80137f2:	2300      	movs	r3, #0
 80137f4:	60fb      	str	r3, [r7, #12]
 80137f6:	e00c      	b.n	8013812 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 80137f8:	4a15      	ldr	r2, [pc, #84]	; (8013850 <USBH_HID_KeybdInit+0xa8>)
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2100      	movs	r1, #0
 80137fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8013802:	4a14      	ldr	r2, [pc, #80]	; (8013854 <USBH_HID_KeybdInit+0xac>)
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2100      	movs	r1, #0
 8013808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	3301      	adds	r3, #1
 8013810:	60fb      	str	r3, [r7, #12]
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2b01      	cmp	r3, #1
 8013816:	d9ef      	bls.n	80137f8 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	8b1b      	ldrh	r3, [r3, #24]
 801381c:	2b08      	cmp	r3, #8
 801381e:	d902      	bls.n	8013826 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	2208      	movs	r2, #8
 8013824:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	4a0a      	ldr	r2, [pc, #40]	; (8013854 <USBH_HID_KeybdInit+0xac>)
 801382a:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	f103 0008 	add.w	r0, r3, #8
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013838:	2250      	movs	r2, #80	; 0x50
 801383a:	4619      	mov	r1, r3
 801383c:	f7ff fefa 	bl	8013634 <USBH_HID_FifoInit>

  return USBH_OK;
 8013840:	2300      	movs	r3, #0
}
 8013842:	4618      	mov	r0, r3
 8013844:	3710      	adds	r7, #16
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}
 801384a:	bf00      	nop
 801384c:	2000c6fc 	.word	0x2000c6fc
 8013850:	2000c6ec 	.word	0x2000c6ec
 8013854:	2000c6f4 	.word	0x2000c6f4

08013858 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 f80d 	bl	8013880 <USBH_HID_KeybdDecode>
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	d101      	bne.n	8013870 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 801386c:	4b03      	ldr	r3, [pc, #12]	; (801387c <USBH_HID_GetKeybdInfo+0x24>)
 801386e:	e000      	b.n	8013872 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8013870:	2300      	movs	r3, #0
  }
}
 8013872:	4618      	mov	r0, r3
 8013874:	3708      	adds	r7, #8
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}
 801387a:	bf00      	nop
 801387c:	2000c6fc 	.word	0x2000c6fc

08013880 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b084      	sub	sp, #16
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801388e:	69db      	ldr	r3, [r3, #28]
 8013890:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	8b1b      	ldrh	r3, [r3, #24]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d101      	bne.n	801389e <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 801389a:	2302      	movs	r3, #2
 801389c:	e066      	b.n	801396c <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	f103 0008 	add.w	r0, r3, #8
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	8b1b      	ldrh	r3, [r3, #24]
 80138a8:	461a      	mov	r2, r3
 80138aa:	4932      	ldr	r1, [pc, #200]	; (8013974 <USBH_HID_KeybdDecode+0xf4>)
 80138ac:	f7ff fede 	bl	801366c <USBH_HID_FifoRead>
 80138b0:	4603      	mov	r3, r0
 80138b2:	461a      	mov	r2, r3
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	8b1b      	ldrh	r3, [r3, #24]
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d156      	bne.n	801396a <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 80138bc:	2100      	movs	r1, #0
 80138be:	482e      	ldr	r0, [pc, #184]	; (8013978 <USBH_HID_KeybdDecode+0xf8>)
 80138c0:	f000 f954 	bl	8013b6c <HID_ReadItem>
 80138c4:	4603      	mov	r3, r0
 80138c6:	b2da      	uxtb	r2, r3
 80138c8:	4b2c      	ldr	r3, [pc, #176]	; (801397c <USBH_HID_KeybdDecode+0xfc>)
 80138ca:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 80138cc:	2100      	movs	r1, #0
 80138ce:	482c      	ldr	r0, [pc, #176]	; (8013980 <USBH_HID_KeybdDecode+0x100>)
 80138d0:	f000 f94c 	bl	8013b6c <HID_ReadItem>
 80138d4:	4603      	mov	r3, r0
 80138d6:	b2da      	uxtb	r2, r3
 80138d8:	4b28      	ldr	r3, [pc, #160]	; (801397c <USBH_HID_KeybdDecode+0xfc>)
 80138da:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 80138dc:	2100      	movs	r1, #0
 80138de:	4829      	ldr	r0, [pc, #164]	; (8013984 <USBH_HID_KeybdDecode+0x104>)
 80138e0:	f000 f944 	bl	8013b6c <HID_ReadItem>
 80138e4:	4603      	mov	r3, r0
 80138e6:	b2da      	uxtb	r2, r3
 80138e8:	4b24      	ldr	r3, [pc, #144]	; (801397c <USBH_HID_KeybdDecode+0xfc>)
 80138ea:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 80138ec:	2100      	movs	r1, #0
 80138ee:	4826      	ldr	r0, [pc, #152]	; (8013988 <USBH_HID_KeybdDecode+0x108>)
 80138f0:	f000 f93c 	bl	8013b6c <HID_ReadItem>
 80138f4:	4603      	mov	r3, r0
 80138f6:	b2da      	uxtb	r2, r3
 80138f8:	4b20      	ldr	r3, [pc, #128]	; (801397c <USBH_HID_KeybdDecode+0xfc>)
 80138fa:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 80138fc:	2100      	movs	r1, #0
 80138fe:	4823      	ldr	r0, [pc, #140]	; (801398c <USBH_HID_KeybdDecode+0x10c>)
 8013900:	f000 f934 	bl	8013b6c <HID_ReadItem>
 8013904:	4603      	mov	r3, r0
 8013906:	b2da      	uxtb	r2, r3
 8013908:	4b1c      	ldr	r3, [pc, #112]	; (801397c <USBH_HID_KeybdDecode+0xfc>)
 801390a:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 801390c:	2100      	movs	r1, #0
 801390e:	4820      	ldr	r0, [pc, #128]	; (8013990 <USBH_HID_KeybdDecode+0x110>)
 8013910:	f000 f92c 	bl	8013b6c <HID_ReadItem>
 8013914:	4603      	mov	r3, r0
 8013916:	b2da      	uxtb	r2, r3
 8013918:	4b18      	ldr	r3, [pc, #96]	; (801397c <USBH_HID_KeybdDecode+0xfc>)
 801391a:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 801391c:	2100      	movs	r1, #0
 801391e:	481d      	ldr	r0, [pc, #116]	; (8013994 <USBH_HID_KeybdDecode+0x114>)
 8013920:	f000 f924 	bl	8013b6c <HID_ReadItem>
 8013924:	4603      	mov	r3, r0
 8013926:	b2da      	uxtb	r2, r3
 8013928:	4b14      	ldr	r3, [pc, #80]	; (801397c <USBH_HID_KeybdDecode+0xfc>)
 801392a:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 801392c:	2100      	movs	r1, #0
 801392e:	481a      	ldr	r0, [pc, #104]	; (8013998 <USBH_HID_KeybdDecode+0x118>)
 8013930:	f000 f91c 	bl	8013b6c <HID_ReadItem>
 8013934:	4603      	mov	r3, r0
 8013936:	b2da      	uxtb	r2, r3
 8013938:	4b10      	ldr	r3, [pc, #64]	; (801397c <USBH_HID_KeybdDecode+0xfc>)
 801393a:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 801393c:	2300      	movs	r3, #0
 801393e:	73fb      	strb	r3, [r7, #15]
 8013940:	e00e      	b.n	8013960 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8013942:	7bfb      	ldrb	r3, [r7, #15]
 8013944:	4619      	mov	r1, r3
 8013946:	4815      	ldr	r0, [pc, #84]	; (801399c <USBH_HID_KeybdDecode+0x11c>)
 8013948:	f000 f910 	bl	8013b6c <HID_ReadItem>
 801394c:	4602      	mov	r2, r0
 801394e:	7bfb      	ldrb	r3, [r7, #15]
 8013950:	b2d1      	uxtb	r1, r2
 8013952:	4a0a      	ldr	r2, [pc, #40]	; (801397c <USBH_HID_KeybdDecode+0xfc>)
 8013954:	4413      	add	r3, r2
 8013956:	460a      	mov	r2, r1
 8013958:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 801395a:	7bfb      	ldrb	r3, [r7, #15]
 801395c:	3301      	adds	r3, #1
 801395e:	73fb      	strb	r3, [r7, #15]
 8013960:	7bfb      	ldrb	r3, [r7, #15]
 8013962:	2b05      	cmp	r3, #5
 8013964:	d9ed      	bls.n	8013942 <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 8013966:	2300      	movs	r3, #0
 8013968:	e000      	b.n	801396c <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 801396a:	2302      	movs	r3, #2
}
 801396c:	4618      	mov	r0, r3
 801396e:	3710      	adds	r7, #16
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}
 8013974:	2000c6ec 	.word	0x2000c6ec
 8013978:	0801fc30 	.word	0x0801fc30
 801397c:	2000c6fc 	.word	0x2000c6fc
 8013980:	0801fc50 	.word	0x0801fc50
 8013984:	0801fc70 	.word	0x0801fc70
 8013988:	0801fc90 	.word	0x0801fc90
 801398c:	0801fcb0 	.word	0x0801fcb0
 8013990:	0801fcd0 	.word	0x0801fcd0
 8013994:	0801fcf0 	.word	0x0801fcf0
 8013998:	0801fd10 	.word	0x0801fd10
 801399c:	0801fd30 	.word	0x0801fd30

080139a0 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 80139a0:	b480      	push	{r7}
 80139a2:	b085      	sub	sp, #20
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift == 1U) || (info->rshift))
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	789b      	ldrb	r3, [r3, #2]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d003      	beq.n	80139b8 <USBH_HID_GetASCIICode+0x18>
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	799b      	ldrb	r3, [r3, #6]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d009      	beq.n	80139cc <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	7a5b      	ldrb	r3, [r3, #9]
 80139bc:	461a      	mov	r2, r3
 80139be:	4b0b      	ldr	r3, [pc, #44]	; (80139ec <USBH_HID_GetASCIICode+0x4c>)
 80139c0:	5c9b      	ldrb	r3, [r3, r2]
 80139c2:	461a      	mov	r2, r3
 80139c4:	4b0a      	ldr	r3, [pc, #40]	; (80139f0 <USBH_HID_GetASCIICode+0x50>)
 80139c6:	5c9b      	ldrb	r3, [r3, r2]
 80139c8:	73fb      	strb	r3, [r7, #15]
 80139ca:	e008      	b.n	80139de <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	7a5b      	ldrb	r3, [r3, #9]
 80139d0:	461a      	mov	r2, r3
 80139d2:	4b06      	ldr	r3, [pc, #24]	; (80139ec <USBH_HID_GetASCIICode+0x4c>)
 80139d4:	5c9b      	ldrb	r3, [r3, r2]
 80139d6:	461a      	mov	r2, r3
 80139d8:	4b06      	ldr	r3, [pc, #24]	; (80139f4 <USBH_HID_GetASCIICode+0x54>)
 80139da:	5c9b      	ldrb	r3, [r3, r2]
 80139dc:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 80139de:	7bfb      	ldrb	r3, [r7, #15]
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3714      	adds	r7, #20
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr
 80139ec:	0801fe58 	.word	0x0801fe58
 80139f0:	0801fdd4 	.word	0x0801fdd4
 80139f4:	0801fd50 	.word	0x0801fd50

080139f8 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013a06:	69db      	ldr	r3, [r3, #28]
 8013a08:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8013a0a:	4b1d      	ldr	r3, [pc, #116]	; (8013a80 <USBH_HID_MouseInit+0x88>)
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8013a10:	4b1b      	ldr	r3, [pc, #108]	; (8013a80 <USBH_HID_MouseInit+0x88>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8013a16:	4b1a      	ldr	r3, [pc, #104]	; (8013a80 <USBH_HID_MouseInit+0x88>)
 8013a18:	2200      	movs	r2, #0
 8013a1a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8013a1c:	4b18      	ldr	r3, [pc, #96]	; (8013a80 <USBH_HID_MouseInit+0x88>)
 8013a1e:	2200      	movs	r2, #0
 8013a20:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8013a22:	4b17      	ldr	r3, [pc, #92]	; (8013a80 <USBH_HID_MouseInit+0x88>)
 8013a24:	2200      	movs	r2, #0
 8013a26:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8013a28:	2300      	movs	r3, #0
 8013a2a:	60fb      	str	r3, [r7, #12]
 8013a2c:	e00c      	b.n	8013a48 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8013a2e:	4a15      	ldr	r2, [pc, #84]	; (8013a84 <USBH_HID_MouseInit+0x8c>)
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2100      	movs	r1, #0
 8013a34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8013a38:	4a13      	ldr	r2, [pc, #76]	; (8013a88 <USBH_HID_MouseInit+0x90>)
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	3301      	adds	r3, #1
 8013a46:	60fb      	str	r3, [r7, #12]
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d9ef      	bls.n	8013a2e <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	8b1b      	ldrh	r3, [r3, #24]
 8013a52:	2b08      	cmp	r3, #8
 8013a54:	d902      	bls.n	8013a5c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	2208      	movs	r2, #8
 8013a5a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	4a0a      	ldr	r2, [pc, #40]	; (8013a88 <USBH_HID_MouseInit+0x90>)
 8013a60:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	f103 0008 	add.w	r0, r3, #8
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013a6e:	2250      	movs	r2, #80	; 0x50
 8013a70:	4619      	mov	r1, r3
 8013a72:	f7ff fddf 	bl	8013634 <USBH_HID_FifoInit>

  return USBH_OK;
 8013a76:	2300      	movs	r3, #0
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3710      	adds	r7, #16
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	2000c70c 	.word	0x2000c70c
 8013a84:	2000c714 	.word	0x2000c714
 8013a88:	2000c71c 	.word	0x2000c71c

08013a8c <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f000 f80d 	bl	8013ab4 <USBH_HID_MouseDecode>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d101      	bne.n	8013aa4 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8013aa0:	4b03      	ldr	r3, [pc, #12]	; (8013ab0 <USBH_HID_GetMouseInfo+0x24>)
 8013aa2:	e000      	b.n	8013aa6 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8013aa4:	2300      	movs	r3, #0
  }
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3708      	adds	r7, #8
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
 8013aae:	bf00      	nop
 8013ab0:	2000c70c 	.word	0x2000c70c

08013ab4 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b084      	sub	sp, #16
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013ac2:	69db      	ldr	r3, [r3, #28]
 8013ac4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	8b1b      	ldrh	r3, [r3, #24]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d101      	bne.n	8013ad2 <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 8013ace:	2302      	movs	r3, #2
 8013ad0:	e039      	b.n	8013b46 <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	f103 0008 	add.w	r0, r3, #8
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	8b1b      	ldrh	r3, [r3, #24]
 8013adc:	461a      	mov	r2, r3
 8013ade:	491c      	ldr	r1, [pc, #112]	; (8013b50 <USBH_HID_MouseDecode+0x9c>)
 8013ae0:	f7ff fdc4 	bl	801366c <USBH_HID_FifoRead>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	8b1b      	ldrh	r3, [r3, #24]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d129      	bne.n	8013b44 <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 8013af0:	2100      	movs	r1, #0
 8013af2:	4818      	ldr	r0, [pc, #96]	; (8013b54 <USBH_HID_MouseDecode+0xa0>)
 8013af4:	f000 f83a 	bl	8013b6c <HID_ReadItem>
 8013af8:	4603      	mov	r3, r0
 8013afa:	b2da      	uxtb	r2, r3
 8013afc:	4b16      	ldr	r3, [pc, #88]	; (8013b58 <USBH_HID_MouseDecode+0xa4>)
 8013afe:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 8013b00:	2100      	movs	r1, #0
 8013b02:	4816      	ldr	r0, [pc, #88]	; (8013b5c <USBH_HID_MouseDecode+0xa8>)
 8013b04:	f000 f832 	bl	8013b6c <HID_ReadItem>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	b2da      	uxtb	r2, r3
 8013b0c:	4b12      	ldr	r3, [pc, #72]	; (8013b58 <USBH_HID_MouseDecode+0xa4>)
 8013b0e:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 8013b10:	2100      	movs	r1, #0
 8013b12:	4813      	ldr	r0, [pc, #76]	; (8013b60 <USBH_HID_MouseDecode+0xac>)
 8013b14:	f000 f82a 	bl	8013b6c <HID_ReadItem>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	b2da      	uxtb	r2, r3
 8013b1c:	4b0e      	ldr	r3, [pc, #56]	; (8013b58 <USBH_HID_MouseDecode+0xa4>)
 8013b1e:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 8013b20:	2100      	movs	r1, #0
 8013b22:	4810      	ldr	r0, [pc, #64]	; (8013b64 <USBH_HID_MouseDecode+0xb0>)
 8013b24:	f000 f822 	bl	8013b6c <HID_ReadItem>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	b2da      	uxtb	r2, r3
 8013b2c:	4b0a      	ldr	r3, [pc, #40]	; (8013b58 <USBH_HID_MouseDecode+0xa4>)
 8013b2e:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 8013b30:	2100      	movs	r1, #0
 8013b32:	480d      	ldr	r0, [pc, #52]	; (8013b68 <USBH_HID_MouseDecode+0xb4>)
 8013b34:	f000 f81a 	bl	8013b6c <HID_ReadItem>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	b2da      	uxtb	r2, r3
 8013b3c:	4b06      	ldr	r3, [pc, #24]	; (8013b58 <USBH_HID_MouseDecode+0xa4>)
 8013b3e:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 8013b40:	2300      	movs	r3, #0
 8013b42:	e000      	b.n	8013b46 <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 8013b44:	2302      	movs	r3, #2
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3710      	adds	r7, #16
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	2000c714 	.word	0x2000c714
 8013b54:	0801ffa0 	.word	0x0801ffa0
 8013b58:	2000c70c 	.word	0x2000c70c
 8013b5c:	0801ffc0 	.word	0x0801ffc0
 8013b60:	0801ff40 	.word	0x0801ff40
 8013b64:	0801ff60 	.word	0x0801ff60
 8013b68:	0801ff80 	.word	0x0801ff80

08013b6c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b089      	sub	sp, #36	; 0x24
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	460b      	mov	r3, r1
 8013b76:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	7a1b      	ldrb	r3, [r3, #8]
 8013b8a:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	7a5b      	ldrb	r3, [r3, #9]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d01a      	beq.n	8013bca <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	7a5b      	ldrb	r3, [r3, #9]
 8013b98:	78fa      	ldrb	r2, [r7, #3]
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d301      	bcc.n	8013ba2 <HID_ReadItem+0x36>
    {
      return (0U);
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	e076      	b.n	8013c90 <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8013ba2:	78fb      	ldrb	r3, [r7, #3]
 8013ba4:	687a      	ldr	r2, [r7, #4]
 8013ba6:	6852      	ldr	r2, [r2, #4]
 8013ba8:	fb02 f303 	mul.w	r3, r2, r3
 8013bac:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8013bae:	7cfb      	ldrb	r3, [r7, #19]
 8013bb0:	68fa      	ldr	r2, [r7, #12]
 8013bb2:	4413      	add	r3, r2
 8013bb4:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	08db      	lsrs	r3, r3, #3
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	4413      	add	r3, r2
 8013bbe:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	b2db      	uxtb	r3, r3
 8013bc4:	f003 0307 	and.w	r3, r3, #7
 8013bc8:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8013bca:	2300      	movs	r3, #0
 8013bcc:	61bb      	str	r3, [r7, #24]
 8013bce:	e00a      	b.n	8013be6 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	461a      	mov	r2, r3
 8013bd6:	69bb      	ldr	r3, [r7, #24]
 8013bd8:	00db      	lsls	r3, r3, #3
 8013bda:	fa02 f303 	lsl.w	r3, r2, r3
 8013bde:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8013be0:	69bb      	ldr	r3, [r7, #24]
 8013be2:	3301      	adds	r3, #1
 8013be4:	61bb      	str	r3, [r7, #24]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	f003 0307 	and.w	r3, r3, #7
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d004      	beq.n	8013bfc <HID_ReadItem+0x90>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	08db      	lsrs	r3, r3, #3
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	e002      	b.n	8013c02 <HID_ReadItem+0x96>
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	08db      	lsrs	r3, r3, #3
 8013c02:	69ba      	ldr	r2, [r7, #24]
 8013c04:	4293      	cmp	r3, r2
 8013c06:	d8e3      	bhi.n	8013bd0 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 8013c08:	7cfb      	ldrb	r3, [r7, #19]
 8013c0a:	69fa      	ldr	r2, [r7, #28]
 8013c0c:	40da      	lsrs	r2, r3
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	2101      	movs	r1, #1
 8013c14:	fa01 f303 	lsl.w	r3, r1, r3
 8013c18:	3b01      	subs	r3, #1
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	68db      	ldr	r3, [r3, #12]
 8013c22:	69fa      	ldr	r2, [r7, #28]
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d304      	bcc.n	8013c32 <HID_ReadItem+0xc6>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	691b      	ldr	r3, [r3, #16]
 8013c2c:	69fa      	ldr	r2, [r7, #28]
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d901      	bls.n	8013c36 <HID_ReadItem+0xca>
  {
    return (0U);
 8013c32:	2300      	movs	r3, #0
 8013c34:	e02c      	b.n	8013c90 <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	7a9b      	ldrb	r3, [r3, #10]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d01d      	beq.n	8013c7a <HID_ReadItem+0x10e>
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	685b      	ldr	r3, [r3, #4]
 8013c42:	3b01      	subs	r3, #1
 8013c44:	2201      	movs	r2, #1
 8013c46:	409a      	lsls	r2, r3
 8013c48:	69fb      	ldr	r3, [r7, #28]
 8013c4a:	4013      	ands	r3, r2
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d014      	beq.n	8013c7a <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	2201      	movs	r2, #1
 8013c56:	fa02 f303 	lsl.w	r3, r2, r3
 8013c5a:	425b      	negs	r3, r3
 8013c5c:	69fa      	ldr	r2, [r7, #28]
 8013c5e:	4313      	orrs	r3, r2
 8013c60:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	69db      	ldr	r3, [r3, #28]
 8013c66:	2b01      	cmp	r3, #1
 8013c68:	d101      	bne.n	8013c6e <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	e010      	b.n	8013c90 <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	69db      	ldr	r3, [r3, #28]
 8013c72:	68ba      	ldr	r2, [r7, #8]
 8013c74:	fb02 f303 	mul.w	r3, r2, r3
 8013c78:	e00a      	b.n	8013c90 <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	69db      	ldr	r3, [r3, #28]
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	d101      	bne.n	8013c86 <HID_ReadItem+0x11a>
    {
      return (val);
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	e004      	b.n	8013c90 <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	69db      	ldr	r3, [r3, #28]
 8013c8a:	69fa      	ldr	r2, [r7, #28]
 8013c8c:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3724      	adds	r7, #36	; 0x24
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr

08013c9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8013c9c:	b5b0      	push	{r4, r5, r7, lr}
 8013c9e:	b090      	sub	sp, #64	; 0x40
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	60f8      	str	r0, [r7, #12]
 8013ca4:	60b9      	str	r1, [r7, #8]
 8013ca6:	4613      	mov	r3, r2
 8013ca8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d10a      	bne.n	8013cc6 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8013cb0:	482e      	ldr	r0, [pc, #184]	; (8013d6c <USBH_Init+0xd0>)
 8013cb2:	f008 fcd7 	bl	801c664 <iprintf>
 8013cb6:	482e      	ldr	r0, [pc, #184]	; (8013d70 <USBH_Init+0xd4>)
 8013cb8:	f008 fcd4 	bl	801c664 <iprintf>
 8013cbc:	200a      	movs	r0, #10
 8013cbe:	f008 fce9 	bl	801c694 <putchar>
    return USBH_FAIL;
 8013cc2:	2302      	movs	r3, #2
 8013cc4:	e04d      	b.n	8013d62 <USBH_Init+0xc6>
  }

  /* Set DRiver ID */
  phost->id = id;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	79fa      	ldrb	r2, [r7, #7]
 8013cca:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8013cde:	68f8      	ldr	r0, [r7, #12]
 8013ce0:	f000 f84c 	bl	8013d7c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d003      	beq.n	8013d12 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	68ba      	ldr	r2, [r7, #8]
 8013d0e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8013d12:	4b18      	ldr	r3, [pc, #96]	; (8013d74 <USBH_Init+0xd8>)
 8013d14:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8013d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8013d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013d22:	2100      	movs	r1, #0
 8013d24:	4618      	mov	r0, r3
 8013d26:	f005 f950 	bl	8018fca <osMessageCreate>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8013d32:	4b11      	ldr	r3, [pc, #68]	; (8013d78 <USBH_Init+0xdc>)
 8013d34:	f107 0414 	add.w	r4, r7, #20
 8013d38:	461d      	mov	r5, r3
 8013d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8013d46:	f107 0314 	add.w	r3, r7, #20
 8013d4a:	68f9      	ldr	r1, [r7, #12]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f005 f819 	bl	8018d84 <osThreadCreate>
 8013d52:	4602      	mov	r2, r0
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8013d5a:	68f8      	ldr	r0, [r7, #12]
 8013d5c:	f008 f886 	bl	801be6c <USBH_LL_Init>

  return USBH_OK;
 8013d60:	2300      	movs	r3, #0
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3740      	adds	r7, #64	; 0x40
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bdb0      	pop	{r4, r5, r7, pc}
 8013d6a:	bf00      	nop
 8013d6c:	0801dc64 	.word	0x0801dc64
 8013d70:	0801dc6c 	.word	0x0801dc6c
 8013d74:	0801dc80 	.word	0x0801dc80
 8013d78:	0801dc90 	.word	0x0801dc90

08013d7c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b085      	sub	sp, #20
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8013d84:	2300      	movs	r3, #0
 8013d86:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013d88:	2300      	movs	r3, #0
 8013d8a:	60fb      	str	r3, [r7, #12]
 8013d8c:	e009      	b.n	8013da2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	33e0      	adds	r3, #224	; 0xe0
 8013d94:	009b      	lsls	r3, r3, #2
 8013d96:	4413      	add	r3, r2
 8013d98:	2200      	movs	r2, #0
 8013d9a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	3301      	adds	r3, #1
 8013da0:	60fb      	str	r3, [r7, #12]
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	2b0e      	cmp	r3, #14
 8013da6:	d9f2      	bls.n	8013d8e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013da8:	2300      	movs	r3, #0
 8013daa:	60fb      	str	r3, [r7, #12]
 8013dac:	e009      	b.n	8013dc2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	4413      	add	r3, r2
 8013db4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013db8:	2200      	movs	r2, #0
 8013dba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	60fb      	str	r3, [r7, #12]
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013dc8:	d3f1      	bcc.n	8013dae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2201      	movs	r2, #1
 8013dda:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2201      	movs	r2, #1
 8013de8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2240      	movs	r2, #64	; 0x40
 8013dee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2200      	movs	r2, #0
 8013df4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2201      	movs	r2, #1
 8013e02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2200      	movs	r2, #0
 8013e12:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8013e16:	2300      	movs	r3, #0
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3714      	adds	r7, #20
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	4770      	bx	lr

08013e24 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d01f      	beq.n	8013e78 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d10e      	bne.n	8013e60 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8013e48:	1c59      	adds	r1, r3, #1
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	33de      	adds	r3, #222	; 0xde
 8013e54:	6839      	ldr	r1, [r7, #0]
 8013e56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	73fb      	strb	r3, [r7, #15]
 8013e5e:	e016      	b.n	8013e8e <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8013e60:	480d      	ldr	r0, [pc, #52]	; (8013e98 <USBH_RegisterClass+0x74>)
 8013e62:	f008 fbff 	bl	801c664 <iprintf>
 8013e66:	480d      	ldr	r0, [pc, #52]	; (8013e9c <USBH_RegisterClass+0x78>)
 8013e68:	f008 fbfc 	bl	801c664 <iprintf>
 8013e6c:	200a      	movs	r0, #10
 8013e6e:	f008 fc11 	bl	801c694 <putchar>
      status = USBH_FAIL;
 8013e72:	2302      	movs	r3, #2
 8013e74:	73fb      	strb	r3, [r7, #15]
 8013e76:	e00a      	b.n	8013e8e <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8013e78:	4807      	ldr	r0, [pc, #28]	; (8013e98 <USBH_RegisterClass+0x74>)
 8013e7a:	f008 fbf3 	bl	801c664 <iprintf>
 8013e7e:	4808      	ldr	r0, [pc, #32]	; (8013ea0 <USBH_RegisterClass+0x7c>)
 8013e80:	f008 fbf0 	bl	801c664 <iprintf>
 8013e84:	200a      	movs	r0, #10
 8013e86:	f008 fc05 	bl	801c694 <putchar>
    status = USBH_FAIL;
 8013e8a:	2302      	movs	r3, #2
 8013e8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3710      	adds	r7, #16
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	0801dc64 	.word	0x0801dc64
 8013e9c:	0801dcac 	.word	0x0801dcac
 8013ea0:	0801dcc8 	.word	0x0801dcc8

08013ea4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b084      	sub	sp, #16
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
 8013eac:	460b      	mov	r3, r1
 8013eae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8013eba:	78fa      	ldrb	r2, [r7, #3]
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d23c      	bcs.n	8013f3a <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	78fa      	ldrb	r2, [r7, #3]
 8013ec4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8013ec8:	78fb      	ldrb	r3, [r7, #3]
 8013eca:	4619      	mov	r1, r3
 8013ecc:	4823      	ldr	r0, [pc, #140]	; (8013f5c <USBH_SelectInterface+0xb8>)
 8013ece:	f008 fbc9 	bl	801c664 <iprintf>
 8013ed2:	200a      	movs	r0, #10
 8013ed4:	f008 fbde 	bl	801c694 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8013ed8:	78fb      	ldrb	r3, [r7, #3]
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	211a      	movs	r1, #26
 8013ede:	fb01 f303 	mul.w	r3, r1, r3
 8013ee2:	4413      	add	r3, r2
 8013ee4:	f203 3347 	addw	r3, r3, #839	; 0x347
 8013ee8:	781b      	ldrb	r3, [r3, #0]
 8013eea:	4619      	mov	r1, r3
 8013eec:	481c      	ldr	r0, [pc, #112]	; (8013f60 <USBH_SelectInterface+0xbc>)
 8013eee:	f008 fbb9 	bl	801c664 <iprintf>
 8013ef2:	200a      	movs	r0, #10
 8013ef4:	f008 fbce 	bl	801c694 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8013ef8:	78fb      	ldrb	r3, [r7, #3]
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	211a      	movs	r1, #26
 8013efe:	fb01 f303 	mul.w	r3, r1, r3
 8013f02:	4413      	add	r3, r2
 8013f04:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	4815      	ldr	r0, [pc, #84]	; (8013f64 <USBH_SelectInterface+0xc0>)
 8013f0e:	f008 fba9 	bl	801c664 <iprintf>
 8013f12:	200a      	movs	r0, #10
 8013f14:	f008 fbbe 	bl	801c694 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8013f18:	78fb      	ldrb	r3, [r7, #3]
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	211a      	movs	r1, #26
 8013f1e:	fb01 f303 	mul.w	r3, r1, r3
 8013f22:	4413      	add	r3, r2
 8013f24:	f203 3349 	addw	r3, r3, #841	; 0x349
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	480e      	ldr	r0, [pc, #56]	; (8013f68 <USBH_SelectInterface+0xc4>)
 8013f2e:	f008 fb99 	bl	801c664 <iprintf>
 8013f32:	200a      	movs	r0, #10
 8013f34:	f008 fbae 	bl	801c694 <putchar>
 8013f38:	e00a      	b.n	8013f50 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8013f3a:	480c      	ldr	r0, [pc, #48]	; (8013f6c <USBH_SelectInterface+0xc8>)
 8013f3c:	f008 fb92 	bl	801c664 <iprintf>
 8013f40:	480b      	ldr	r0, [pc, #44]	; (8013f70 <USBH_SelectInterface+0xcc>)
 8013f42:	f008 fb8f 	bl	801c664 <iprintf>
 8013f46:	200a      	movs	r0, #10
 8013f48:	f008 fba4 	bl	801c694 <putchar>
    status = USBH_FAIL;
 8013f4c:	2302      	movs	r3, #2
 8013f4e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3710      	adds	r7, #16
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
 8013f5a:	bf00      	nop
 8013f5c:	0801dce0 	.word	0x0801dce0
 8013f60:	0801dd00 	.word	0x0801dd00
 8013f64:	0801dd10 	.word	0x0801dd10
 8013f68:	0801dd20 	.word	0x0801dd20
 8013f6c:	0801dc64 	.word	0x0801dc64
 8013f70:	0801dd30 	.word	0x0801dd30

08013f74 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013f74:	b480      	push	{r7}
 8013f76:	b087      	sub	sp, #28
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	4608      	mov	r0, r1
 8013f7e:	4611      	mov	r1, r2
 8013f80:	461a      	mov	r2, r3
 8013f82:	4603      	mov	r3, r0
 8013f84:	70fb      	strb	r3, [r7, #3]
 8013f86:	460b      	mov	r3, r1
 8013f88:	70bb      	strb	r3, [r7, #2]
 8013f8a:	4613      	mov	r3, r2
 8013f8c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8013f92:	2300      	movs	r3, #0
 8013f94:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8013f9c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013f9e:	e025      	b.n	8013fec <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8013fa0:	7dfb      	ldrb	r3, [r7, #23]
 8013fa2:	221a      	movs	r2, #26
 8013fa4:	fb02 f303 	mul.w	r3, r2, r3
 8013fa8:	3308      	adds	r3, #8
 8013faa:	68fa      	ldr	r2, [r7, #12]
 8013fac:	4413      	add	r3, r2
 8013fae:	3302      	adds	r3, #2
 8013fb0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	795b      	ldrb	r3, [r3, #5]
 8013fb6:	78fa      	ldrb	r2, [r7, #3]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d002      	beq.n	8013fc2 <USBH_FindInterface+0x4e>
 8013fbc:	78fb      	ldrb	r3, [r7, #3]
 8013fbe:	2bff      	cmp	r3, #255	; 0xff
 8013fc0:	d111      	bne.n	8013fe6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013fc6:	78ba      	ldrb	r2, [r7, #2]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d002      	beq.n	8013fd2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013fcc:	78bb      	ldrb	r3, [r7, #2]
 8013fce:	2bff      	cmp	r3, #255	; 0xff
 8013fd0:	d109      	bne.n	8013fe6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013fd6:	787a      	ldrb	r2, [r7, #1]
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d002      	beq.n	8013fe2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013fdc:	787b      	ldrb	r3, [r7, #1]
 8013fde:	2bff      	cmp	r3, #255	; 0xff
 8013fe0:	d101      	bne.n	8013fe6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8013fe2:	7dfb      	ldrb	r3, [r7, #23]
 8013fe4:	e006      	b.n	8013ff4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8013fe6:	7dfb      	ldrb	r3, [r7, #23]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013fec:	7dfb      	ldrb	r3, [r7, #23]
 8013fee:	2b01      	cmp	r3, #1
 8013ff0:	d9d6      	bls.n	8013fa0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8013ff2:	23ff      	movs	r3, #255	; 0xff
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	371c      	adds	r7, #28
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffe:	4770      	bx	lr

08014000 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f007 ff6b 	bl	801bee4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 801400e:	2101      	movs	r1, #1
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f008 f884 	bl	801c11e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8014016:	2300      	movs	r3, #0
}
 8014018:	4618      	mov	r0, r3
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b088      	sub	sp, #32
 8014024:	af04      	add	r7, sp, #16
 8014026:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8014028:	2302      	movs	r3, #2
 801402a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 801402c:	2300      	movs	r3, #0
 801402e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8014036:	b2db      	uxtb	r3, r3
 8014038:	2b01      	cmp	r3, #1
 801403a:	d102      	bne.n	8014042 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	2203      	movs	r2, #3
 8014040:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	b2db      	uxtb	r3, r3
 8014048:	2b0b      	cmp	r3, #11
 801404a:	f200 82b2 	bhi.w	80145b2 <USBH_Process+0x592>
 801404e:	a201      	add	r2, pc, #4	; (adr r2, 8014054 <USBH_Process+0x34>)
 8014050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014054:	08014085 	.word	0x08014085
 8014058:	080140df 	.word	0x080140df
 801405c:	0801417b 	.word	0x0801417b
 8014060:	08014525 	.word	0x08014525
 8014064:	080145b3 	.word	0x080145b3
 8014068:	0801423b 	.word	0x0801423b
 801406c:	0801448b 	.word	0x0801448b
 8014070:	080142a5 	.word	0x080142a5
 8014074:	080142e1 	.word	0x080142e1
 8014078:	08014327 	.word	0x08014327
 801407c:	0801437b 	.word	0x0801437b
 8014080:	0801450d 	.word	0x0801450d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 801408a:	b2db      	uxtb	r3, r3
 801408c:	2b00      	cmp	r3, #0
 801408e:	f000 8292 	beq.w	80145b6 <USBH_Process+0x596>
      {
        USBH_UsrLog("USB Device Connected");
 8014092:	48c0      	ldr	r0, [pc, #768]	; (8014394 <USBH_Process+0x374>)
 8014094:	f008 fae6 	bl	801c664 <iprintf>
 8014098:	200a      	movs	r0, #10
 801409a:	f008 fafb 	bl	801c694 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2201      	movs	r2, #1
 80140a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80140a4:	20c8      	movs	r0, #200	; 0xc8
 80140a6:	f008 f881 	bl	801c1ac <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	f007 ff77 	bl	801bf9e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2200      	movs	r2, #0
 80140b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2200      	movs	r2, #0
 80140bc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2201      	movs	r2, #1
 80140c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80140d4:	2200      	movs	r2, #0
 80140d6:	4619      	mov	r1, r3
 80140d8:	f004 ffa0 	bl	801901c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80140dc:	e26b      	b.n	80145b6 <USBH_Process+0x596>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d10d      	bne.n	8014104 <USBH_Process+0xe4>
      {
        USBH_UsrLog("USB Device Reset Completed");
 80140e8:	48ab      	ldr	r0, [pc, #684]	; (8014398 <USBH_Process+0x378>)
 80140ea:	f008 fabb 	bl	801c664 <iprintf>
 80140ee:	200a      	movs	r0, #10
 80140f0:	f008 fad0 	bl	801c694 <putchar>
        phost->device.RstCnt = 0U;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2200      	movs	r2, #0
 80140f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2202      	movs	r2, #2
 8014100:	701a      	strb	r2, [r3, #0]
 8014102:	e02b      	b.n	801415c <USBH_Process+0x13c>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801410a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801410e:	d91a      	bls.n	8014146 <USBH_Process+0x126>
        {
          phost->device.RstCnt++;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8014116:	3301      	adds	r3, #1
 8014118:	b2da      	uxtb	r2, r3
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8014126:	2b03      	cmp	r3, #3
 8014128:	d909      	bls.n	801413e <USBH_Process+0x11e>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 801412a:	489c      	ldr	r0, [pc, #624]	; (801439c <USBH_Process+0x37c>)
 801412c:	f008 fa9a 	bl	801c664 <iprintf>
 8014130:	200a      	movs	r0, #10
 8014132:	f008 faaf 	bl	801c694 <putchar>
            phost->gState = HOST_ABORT_STATE;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	220d      	movs	r2, #13
 801413a:	701a      	strb	r2, [r3, #0]
 801413c:	e00e      	b.n	801415c <USBH_Process+0x13c>
          }
          else
          {
            phost->gState = HOST_IDLE;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	2200      	movs	r2, #0
 8014142:	701a      	strb	r2, [r3, #0]
 8014144:	e00a      	b.n	801415c <USBH_Process+0x13c>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801414c:	f103 020a 	add.w	r2, r3, #10
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8014156:	200a      	movs	r0, #10
 8014158:	f008 f828 	bl	801c1ac <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2201      	movs	r2, #1
 8014160:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014170:	2200      	movs	r2, #0
 8014172:	4619      	mov	r1, r3
 8014174:	f004 ff52 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014178:	e224      	b.n	80145c4 <USBH_Process+0x5a4>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014180:	2b00      	cmp	r3, #0
 8014182:	d005      	beq.n	8014190 <USBH_Process+0x170>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801418a:	2104      	movs	r1, #4
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8014190:	2064      	movs	r0, #100	; 0x64
 8014192:	f008 f80b 	bl	801c1ac <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f007 feda 	bl	801bf50 <USBH_LL_GetSpeed>
 801419c:	4603      	mov	r3, r0
 801419e:	461a      	mov	r2, r3
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	2205      	movs	r2, #5
 80141aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80141ac:	2100      	movs	r1, #0
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f001 fc43 	bl	8015a3a <USBH_AllocPipe>
 80141b4:	4603      	mov	r3, r0
 80141b6:	461a      	mov	r2, r3
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80141bc:	2180      	movs	r1, #128	; 0x80
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f001 fc3b 	bl	8015a3a <USBH_AllocPipe>
 80141c4:	4603      	mov	r3, r0
 80141c6:	461a      	mov	r2, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	7919      	ldrb	r1, [r3, #4]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80141dc:	687a      	ldr	r2, [r7, #4]
 80141de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80141e0:	b292      	uxth	r2, r2
 80141e2:	9202      	str	r2, [sp, #8]
 80141e4:	2200      	movs	r2, #0
 80141e6:	9201      	str	r2, [sp, #4]
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	4603      	mov	r3, r0
 80141ec:	2280      	movs	r2, #128	; 0x80
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f001 fbf4 	bl	80159dc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	7959      	ldrb	r1, [r3, #5]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014204:	687a      	ldr	r2, [r7, #4]
 8014206:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014208:	b292      	uxth	r2, r2
 801420a:	9202      	str	r2, [sp, #8]
 801420c:	2200      	movs	r2, #0
 801420e:	9201      	str	r2, [sp, #4]
 8014210:	9300      	str	r3, [sp, #0]
 8014212:	4603      	mov	r3, r0
 8014214:	2200      	movs	r2, #0
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f001 fbe0 	bl	80159dc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2201      	movs	r2, #1
 8014220:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014230:	2200      	movs	r2, #0
 8014232:	4619      	mov	r1, r3
 8014234:	f004 fef2 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014238:	e1c4      	b.n	80145c4 <USBH_Process+0x5a4>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f000 f9d6 	bl	80145ec <USBH_HandleEnum>
 8014240:	4603      	mov	r3, r0
 8014242:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8014244:	7bbb      	ldrb	r3, [r7, #14]
 8014246:	b2db      	uxtb	r3, r3
 8014248:	2b00      	cmp	r3, #0
 801424a:	f040 81b6 	bne.w	80145ba <USBH_Process+0x59a>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 801424e:	4854      	ldr	r0, [pc, #336]	; (80143a0 <USBH_Process+0x380>)
 8014250:	f008 fa08 	bl	801c664 <iprintf>
 8014254:	200a      	movs	r0, #10
 8014256:	f008 fa1d 	bl	801c694 <putchar>

        phost->device.current_interface = 0U;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2200      	movs	r2, #0
 801425e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8014268:	2b01      	cmp	r3, #1
 801426a:	d109      	bne.n	8014280 <USBH_Process+0x260>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 801426c:	484d      	ldr	r0, [pc, #308]	; (80143a4 <USBH_Process+0x384>)
 801426e:	f008 f9f9 	bl	801c664 <iprintf>
 8014272:	200a      	movs	r0, #10
 8014274:	f008 fa0e 	bl	801c694 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2208      	movs	r2, #8
 801427c:	701a      	strb	r2, [r3, #0]
 801427e:	e002      	b.n	8014286 <USBH_Process+0x266>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2207      	movs	r2, #7
 8014284:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2205      	movs	r2, #5
 801428a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801429a:	2200      	movs	r2, #0
 801429c:	4619      	mov	r1, r3
 801429e:	f004 febd 	bl	801901c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80142a2:	e18a      	b.n	80145ba <USBH_Process+0x59a>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	f000 8187 	beq.w	80145be <USBH_Process+0x59e>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80142b6:	2101      	movs	r1, #1
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2208      	movs	r2, #8
 80142c0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2205      	movs	r2, #5
 80142c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142d6:	2200      	movs	r2, #0
 80142d8:	4619      	mov	r1, r3
 80142da:	f004 fe9f 	bl	801901c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80142de:	e16e      	b.n	80145be <USBH_Process+0x59e>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	4619      	mov	r1, r3
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f000 fe26 	bl	8014f3c <USBH_SetCfg>
 80142f0:	4603      	mov	r3, r0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d108      	bne.n	8014308 <USBH_Process+0x2e8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2209      	movs	r2, #9
 80142fa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 80142fc:	482a      	ldr	r0, [pc, #168]	; (80143a8 <USBH_Process+0x388>)
 80142fe:	f008 f9b1 	bl	801c664 <iprintf>
 8014302:	200a      	movs	r0, #10
 8014304:	f008 f9c6 	bl	801c694 <putchar>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2201      	movs	r2, #1
 801430c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801431c:	2200      	movs	r2, #0
 801431e:	4619      	mov	r1, r3
 8014320:	f004 fe7c 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014324:	e14e      	b.n	80145c4 <USBH_Process+0x5a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 801432c:	f003 0320 	and.w	r3, r3, #32
 8014330:	2b00      	cmp	r3, #0
 8014332:	d010      	beq.n	8014356 <USBH_Process+0x336>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8014334:	2101      	movs	r1, #1
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f000 fe23 	bl	8014f82 <USBH_SetFeature>
 801433c:	4603      	mov	r3, r0
 801433e:	2b00      	cmp	r3, #0
 8014340:	d10c      	bne.n	801435c <USBH_Process+0x33c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8014342:	481a      	ldr	r0, [pc, #104]	; (80143ac <USBH_Process+0x38c>)
 8014344:	f008 f98e 	bl	801c664 <iprintf>
 8014348:	200a      	movs	r0, #10
 801434a:	f008 f9a3 	bl	801c694 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	220a      	movs	r2, #10
 8014352:	701a      	strb	r2, [r3, #0]
 8014354:	e002      	b.n	801435c <USBH_Process+0x33c>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	220a      	movs	r2, #10
 801435a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2201      	movs	r2, #1
 8014360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014370:	2200      	movs	r2, #0
 8014372:	4619      	mov	r1, r3
 8014374:	f004 fe52 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014378:	e124      	b.n	80145c4 <USBH_Process+0x5a4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014380:	2b00      	cmp	r3, #0
 8014382:	d117      	bne.n	80143b4 <USBH_Process+0x394>
      {
        USBH_UsrLog("No Class has been registered.");
 8014384:	480a      	ldr	r0, [pc, #40]	; (80143b0 <USBH_Process+0x390>)
 8014386:	f008 f96d 	bl	801c664 <iprintf>
 801438a:	200a      	movs	r0, #10
 801438c:	f008 f982 	bl	801c694 <putchar>
 8014390:	e06c      	b.n	801446c <USBH_Process+0x44c>
 8014392:	bf00      	nop
 8014394:	0801dd50 	.word	0x0801dd50
 8014398:	0801dd68 	.word	0x0801dd68
 801439c:	0801dd84 	.word	0x0801dd84
 80143a0:	0801ddb0 	.word	0x0801ddb0
 80143a4:	0801ddc4 	.word	0x0801ddc4
 80143a8:	0801ddec 	.word	0x0801ddec
 80143ac:	0801de08 	.word	0x0801de08
 80143b0:	0801de28 	.word	0x0801de28
      }
      else
      {
        phost->pActiveClass = NULL;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2200      	movs	r2, #0
 80143b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80143bc:	2300      	movs	r3, #0
 80143be:	73fb      	strb	r3, [r7, #15]
 80143c0:	e016      	b.n	80143f0 <USBH_Process+0x3d0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80143c2:	7bfa      	ldrb	r2, [r7, #15]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	32de      	adds	r2, #222	; 0xde
 80143c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143cc:	791a      	ldrb	r2, [r3, #4]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d108      	bne.n	80143ea <USBH_Process+0x3ca>
          {
            phost->pActiveClass = phost->pClass[idx];
 80143d8:	7bfa      	ldrb	r2, [r7, #15]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	32de      	adds	r2, #222	; 0xde
 80143de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80143e8:	e005      	b.n	80143f6 <USBH_Process+0x3d6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80143ea:	7bfb      	ldrb	r3, [r7, #15]
 80143ec:	3301      	adds	r3, #1
 80143ee:	73fb      	strb	r3, [r7, #15]
 80143f0:	7bfb      	ldrb	r3, [r7, #15]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d0e5      	beq.n	80143c2 <USBH_Process+0x3a2>
          }
        }

        if (phost->pActiveClass != NULL)
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d02c      	beq.n	801445a <USBH_Process+0x43a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014406:	689b      	ldr	r3, [r3, #8]
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	4798      	blx	r3
 801440c:	4603      	mov	r3, r0
 801440e:	2b00      	cmp	r3, #0
 8014410:	d114      	bne.n	801443c <USBH_Process+0x41c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	2206      	movs	r2, #6
 8014416:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	4619      	mov	r1, r3
 8014422:	486b      	ldr	r0, [pc, #428]	; (80145d0 <USBH_Process+0x5b0>)
 8014424:	f008 f91e 	bl	801c664 <iprintf>
 8014428:	200a      	movs	r0, #10
 801442a:	f008 f933 	bl	801c694 <putchar>

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014434:	2103      	movs	r1, #3
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	4798      	blx	r3
 801443a:	e017      	b.n	801446c <USBH_Process+0x44c>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	220d      	movs	r2, #13
 8014440:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	4619      	mov	r1, r3
 801444c:	4861      	ldr	r0, [pc, #388]	; (80145d4 <USBH_Process+0x5b4>)
 801444e:	f008 f909 	bl	801c664 <iprintf>
 8014452:	200a      	movs	r0, #10
 8014454:	f008 f91e 	bl	801c694 <putchar>
 8014458:	e008      	b.n	801446c <USBH_Process+0x44c>
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	220d      	movs	r2, #13
 801445e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8014460:	485d      	ldr	r0, [pc, #372]	; (80145d8 <USBH_Process+0x5b8>)
 8014462:	f008 f8ff 	bl	801c664 <iprintf>
 8014466:	200a      	movs	r0, #10
 8014468:	f008 f914 	bl	801c694 <putchar>
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2205      	movs	r2, #5
 8014470:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014480:	2200      	movs	r2, #0
 8014482:	4619      	mov	r1, r3
 8014484:	f004 fdca 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8014488:	e09c      	b.n	80145c4 <USBH_Process+0x5a4>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014490:	2b00      	cmp	r3, #0
 8014492:	d020      	beq.n	80144d6 <USBH_Process+0x4b6>
      {
        status = phost->pActiveClass->Requests(phost);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801449a:	691b      	ldr	r3, [r3, #16]
 801449c:	6878      	ldr	r0, [r7, #4]
 801449e:	4798      	blx	r3
 80144a0:	4603      	mov	r3, r0
 80144a2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80144a4:	7bbb      	ldrb	r3, [r7, #14]
 80144a6:	b2db      	uxtb	r3, r3
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d103      	bne.n	80144b4 <USBH_Process+0x494>
        {
          phost->gState = HOST_CLASS;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	220b      	movs	r2, #11
 80144b0:	701a      	strb	r2, [r3, #0]
 80144b2:	e01c      	b.n	80144ee <USBH_Process+0x4ce>
        }
        else if (status == USBH_FAIL)
 80144b4:	7bbb      	ldrb	r3, [r7, #14]
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	2b02      	cmp	r3, #2
 80144ba:	d118      	bne.n	80144ee <USBH_Process+0x4ce>
        {
          phost->gState = HOST_ABORT_STATE;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	220d      	movs	r2, #13
 80144c0:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80144c2:	4846      	ldr	r0, [pc, #280]	; (80145dc <USBH_Process+0x5bc>)
 80144c4:	f008 f8ce 	bl	801c664 <iprintf>
 80144c8:	4845      	ldr	r0, [pc, #276]	; (80145e0 <USBH_Process+0x5c0>)
 80144ca:	f008 f8cb 	bl	801c664 <iprintf>
 80144ce:	200a      	movs	r0, #10
 80144d0:	f008 f8e0 	bl	801c694 <putchar>
 80144d4:	e00b      	b.n	80144ee <USBH_Process+0x4ce>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	220d      	movs	r2, #13
 80144da:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 80144dc:	483f      	ldr	r0, [pc, #252]	; (80145dc <USBH_Process+0x5bc>)
 80144de:	f008 f8c1 	bl	801c664 <iprintf>
 80144e2:	4840      	ldr	r0, [pc, #256]	; (80145e4 <USBH_Process+0x5c4>)
 80144e4:	f008 f8be 	bl	801c664 <iprintf>
 80144e8:	200a      	movs	r0, #10
 80144ea:	f008 f8d3 	bl	801c694 <putchar>
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2205      	movs	r2, #5
 80144f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014502:	2200      	movs	r2, #0
 8014504:	4619      	mov	r1, r3
 8014506:	f004 fd89 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801450a:	e05b      	b.n	80145c4 <USBH_Process+0x5a4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014512:	2b00      	cmp	r3, #0
 8014514:	d055      	beq.n	80145c2 <USBH_Process+0x5a2>
      {
        phost->pActiveClass->BgndProcess(phost);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801451c:	695b      	ldr	r3, [r3, #20]
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	4798      	blx	r3
      }
      break;
 8014522:	e04e      	b.n	80145c2 <USBH_Process+0x5a2>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2200      	movs	r2, #0
 8014528:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f7ff fc25 	bl	8013d7c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014538:	2b00      	cmp	r3, #0
 801453a:	d009      	beq.n	8014550 <USBH_Process+0x530>
      {
        phost->pActiveClass->DeInit(phost);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014542:	68db      	ldr	r3, [r3, #12]
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2200      	movs	r2, #0
 801454c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014556:	2b00      	cmp	r3, #0
 8014558:	d005      	beq.n	8014566 <USBH_Process+0x546>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014560:	2105      	movs	r1, #5
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8014566:	4820      	ldr	r0, [pc, #128]	; (80145e8 <USBH_Process+0x5c8>)
 8014568:	f008 f87c 	bl	801c664 <iprintf>
 801456c:	200a      	movs	r0, #10
 801456e:	f008 f891 	bl	801c694 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8014578:	b2db      	uxtb	r3, r3
 801457a:	2b01      	cmp	r3, #1
 801457c:	d107      	bne.n	801458e <USBH_Process+0x56e>
      {
        phost->device.is_ReEnumerated = 0U;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2200      	movs	r2, #0
 8014582:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f7ff fd3a 	bl	8014000 <USBH_Start>
 801458c:	e002      	b.n	8014594 <USBH_Process+0x574>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f007 fca8 	bl	801bee4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2201      	movs	r2, #1
 8014598:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80145a8:	2200      	movs	r2, #0
 80145aa:	4619      	mov	r1, r3
 80145ac:	f004 fd36 	bl	801901c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80145b0:	e008      	b.n	80145c4 <USBH_Process+0x5a4>

    case HOST_ABORT_STATE:
    default :
      break;
 80145b2:	bf00      	nop
 80145b4:	e006      	b.n	80145c4 <USBH_Process+0x5a4>
      break;
 80145b6:	bf00      	nop
 80145b8:	e004      	b.n	80145c4 <USBH_Process+0x5a4>
      break;
 80145ba:	bf00      	nop
 80145bc:	e002      	b.n	80145c4 <USBH_Process+0x5a4>
    break;
 80145be:	bf00      	nop
 80145c0:	e000      	b.n	80145c4 <USBH_Process+0x5a4>
      break;
 80145c2:	bf00      	nop
  }
  return USBH_OK;
 80145c4:	2300      	movs	r3, #0
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3710      	adds	r7, #16
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	0801de48 	.word	0x0801de48
 80145d4:	0801de5c 	.word	0x0801de5c
 80145d8:	0801de7c 	.word	0x0801de7c
 80145dc:	0801dc64 	.word	0x0801dc64
 80145e0:	0801dea4 	.word	0x0801dea4
 80145e4:	0801decc 	.word	0x0801decc
 80145e8:	0801dee4 	.word	0x0801dee4

080145ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b088      	sub	sp, #32
 80145f0:	af04      	add	r7, sp, #16
 80145f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80145f4:	2301      	movs	r3, #1
 80145f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80145f8:	2301      	movs	r3, #1
 80145fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	785b      	ldrb	r3, [r3, #1]
 8014600:	2b07      	cmp	r3, #7
 8014602:	f200 82c6 	bhi.w	8014b92 <USBH_HandleEnum+0x5a6>
 8014606:	a201      	add	r2, pc, #4	; (adr r2, 801460c <USBH_HandleEnum+0x20>)
 8014608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801460c:	0801462d 	.word	0x0801462d
 8014610:	08014709 	.word	0x08014709
 8014614:	080147b9 	.word	0x080147b9
 8014618:	08014879 	.word	0x08014879
 801461c:	08014901 	.word	0x08014901
 8014620:	080149b5 	.word	0x080149b5
 8014624:	08014a7d 	.word	0x08014a7d
 8014628:	08014b27 	.word	0x08014b27
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 801462c:	2108      	movs	r1, #8
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f000 fbb4 	bl	8014d9c <USBH_Get_DevDesc>
 8014634:	4603      	mov	r3, r0
 8014636:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014638:	7bbb      	ldrb	r3, [r7, #14]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d130      	bne.n	80146a0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2201      	movs	r2, #1
 801464c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	7919      	ldrb	r1, [r3, #4]
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801465e:	687a      	ldr	r2, [r7, #4]
 8014660:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8014662:	b292      	uxth	r2, r2
 8014664:	9202      	str	r2, [sp, #8]
 8014666:	2200      	movs	r2, #0
 8014668:	9201      	str	r2, [sp, #4]
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	4603      	mov	r3, r0
 801466e:	2280      	movs	r2, #128	; 0x80
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f001 f9b3 	bl	80159dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	7959      	ldrb	r1, [r3, #5]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801468a:	b292      	uxth	r2, r2
 801468c:	9202      	str	r2, [sp, #8]
 801468e:	2200      	movs	r2, #0
 8014690:	9201      	str	r2, [sp, #4]
 8014692:	9300      	str	r3, [sp, #0]
 8014694:	4603      	mov	r3, r0
 8014696:	2200      	movs	r2, #0
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f001 f99f 	bl	80159dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801469e:	e27a      	b.n	8014b96 <USBH_HandleEnum+0x5aa>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80146a0:	7bbb      	ldrb	r3, [r7, #14]
 80146a2:	2b03      	cmp	r3, #3
 80146a4:	f040 8277 	bne.w	8014b96 <USBH_HandleEnum+0x5aa>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 80146a8:	48b9      	ldr	r0, [pc, #740]	; (8014990 <USBH_HandleEnum+0x3a4>)
 80146aa:	f007 ffdb 	bl	801c664 <iprintf>
 80146ae:	48b9      	ldr	r0, [pc, #740]	; (8014994 <USBH_HandleEnum+0x3a8>)
 80146b0:	f007 ffd8 	bl	801c664 <iprintf>
 80146b4:	200a      	movs	r0, #10
 80146b6:	f007 ffed 	bl	801c694 <putchar>
        phost->device.EnumCnt++;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80146c0:	3301      	adds	r3, #1
 80146c2:	b2da      	uxtb	r2, r3
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80146d0:	2b03      	cmp	r3, #3
 80146d2:	d909      	bls.n	80146e8 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80146d4:	48b0      	ldr	r0, [pc, #704]	; (8014998 <USBH_HandleEnum+0x3ac>)
 80146d6:	f007 ffc5 	bl	801c664 <iprintf>
 80146da:	200a      	movs	r0, #10
 80146dc:	f007 ffda 	bl	801c694 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	220d      	movs	r2, #13
 80146e4:	701a      	strb	r2, [r3, #0]
      break;
 80146e6:	e256      	b.n	8014b96 <USBH_HandleEnum+0x5aa>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	795b      	ldrb	r3, [r3, #5]
 80146ec:	4619      	mov	r1, r3
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f001 f9c4 	bl	8015a7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	791b      	ldrb	r3, [r3, #4]
 80146f8:	4619      	mov	r1, r3
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f001 f9be 	bl	8015a7c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	2200      	movs	r2, #0
 8014704:	701a      	strb	r2, [r3, #0]
      break;
 8014706:	e246      	b.n	8014b96 <USBH_HandleEnum+0x5aa>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8014708:	2112      	movs	r1, #18
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f000 fb46 	bl	8014d9c <USBH_Get_DevDesc>
 8014710:	4603      	mov	r3, r0
 8014712:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014714:	7bbb      	ldrb	r3, [r7, #14]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d117      	bne.n	801474a <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8014720:	4619      	mov	r1, r3
 8014722:	489e      	ldr	r0, [pc, #632]	; (801499c <USBH_HandleEnum+0x3b0>)
 8014724:	f007 ff9e 	bl	801c664 <iprintf>
 8014728:	200a      	movs	r0, #10
 801472a:	f007 ffb3 	bl	801c694 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 8014734:	4619      	mov	r1, r3
 8014736:	489a      	ldr	r0, [pc, #616]	; (80149a0 <USBH_HandleEnum+0x3b4>)
 8014738:	f007 ff94 	bl	801c664 <iprintf>
 801473c:	200a      	movs	r0, #10
 801473e:	f007 ffa9 	bl	801c694 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2202      	movs	r2, #2
 8014746:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8014748:	e227      	b.n	8014b9a <USBH_HandleEnum+0x5ae>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801474a:	7bbb      	ldrb	r3, [r7, #14]
 801474c:	2b03      	cmp	r3, #3
 801474e:	f040 8224 	bne.w	8014b9a <USBH_HandleEnum+0x5ae>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 8014752:	488f      	ldr	r0, [pc, #572]	; (8014990 <USBH_HandleEnum+0x3a4>)
 8014754:	f007 ff86 	bl	801c664 <iprintf>
 8014758:	4892      	ldr	r0, [pc, #584]	; (80149a4 <USBH_HandleEnum+0x3b8>)
 801475a:	f007 ff83 	bl	801c664 <iprintf>
 801475e:	200a      	movs	r0, #10
 8014760:	f007 ff98 	bl	801c694 <putchar>
        phost->device.EnumCnt++;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801476a:	3301      	adds	r3, #1
 801476c:	b2da      	uxtb	r2, r3
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801477a:	2b03      	cmp	r3, #3
 801477c:	d909      	bls.n	8014792 <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 801477e:	4886      	ldr	r0, [pc, #536]	; (8014998 <USBH_HandleEnum+0x3ac>)
 8014780:	f007 ff70 	bl	801c664 <iprintf>
 8014784:	200a      	movs	r0, #10
 8014786:	f007 ff85 	bl	801c694 <putchar>
          phost->gState = HOST_ABORT_STATE;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	220d      	movs	r2, #13
 801478e:	701a      	strb	r2, [r3, #0]
      break;
 8014790:	e203      	b.n	8014b9a <USBH_HandleEnum+0x5ae>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	795b      	ldrb	r3, [r3, #5]
 8014796:	4619      	mov	r1, r3
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f001 f96f 	bl	8015a7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	791b      	ldrb	r3, [r3, #4]
 80147a2:	4619      	mov	r1, r3
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f001 f969 	bl	8015a7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2200      	movs	r2, #0
 80147ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2200      	movs	r2, #0
 80147b4:	701a      	strb	r2, [r3, #0]
      break;
 80147b6:	e1f0      	b.n	8014b9a <USBH_HandleEnum+0x5ae>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80147b8:	2101      	movs	r1, #1
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f000 fb9a 	bl	8014ef4 <USBH_SetAddress>
 80147c0:	4603      	mov	r3, r0
 80147c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80147c4:	7bbb      	ldrb	r3, [r7, #14]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d13c      	bne.n	8014844 <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 80147ca:	2002      	movs	r0, #2
 80147cc:	f007 fcee 	bl	801c1ac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2201      	movs	r2, #1
 80147d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 80147de:	4619      	mov	r1, r3
 80147e0:	4871      	ldr	r0, [pc, #452]	; (80149a8 <USBH_HandleEnum+0x3bc>)
 80147e2:	f007 ff3f 	bl	801c664 <iprintf>
 80147e6:	200a      	movs	r0, #10
 80147e8:	f007 ff54 	bl	801c694 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2203      	movs	r2, #3
 80147f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	7919      	ldrb	r1, [r3, #4]
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8014806:	b292      	uxth	r2, r2
 8014808:	9202      	str	r2, [sp, #8]
 801480a:	2200      	movs	r2, #0
 801480c:	9201      	str	r2, [sp, #4]
 801480e:	9300      	str	r3, [sp, #0]
 8014810:	4603      	mov	r3, r0
 8014812:	2280      	movs	r2, #128	; 0x80
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f001 f8e1 	bl	80159dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	7959      	ldrb	r1, [r3, #5]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801482a:	687a      	ldr	r2, [r7, #4]
 801482c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801482e:	b292      	uxth	r2, r2
 8014830:	9202      	str	r2, [sp, #8]
 8014832:	2200      	movs	r2, #0
 8014834:	9201      	str	r2, [sp, #4]
 8014836:	9300      	str	r3, [sp, #0]
 8014838:	4603      	mov	r3, r0
 801483a:	2200      	movs	r2, #0
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f001 f8cd 	bl	80159dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8014842:	e1ac      	b.n	8014b9e <USBH_HandleEnum+0x5b2>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014844:	7bbb      	ldrb	r3, [r7, #14]
 8014846:	2b03      	cmp	r3, #3
 8014848:	f040 81a9 	bne.w	8014b9e <USBH_HandleEnum+0x5b2>
        USBH_ErrLog("Control error: Device Set Address request failed");
 801484c:	4850      	ldr	r0, [pc, #320]	; (8014990 <USBH_HandleEnum+0x3a4>)
 801484e:	f007 ff09 	bl	801c664 <iprintf>
 8014852:	4856      	ldr	r0, [pc, #344]	; (80149ac <USBH_HandleEnum+0x3c0>)
 8014854:	f007 ff06 	bl	801c664 <iprintf>
 8014858:	200a      	movs	r0, #10
 801485a:	f007 ff1b 	bl	801c694 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 801485e:	484e      	ldr	r0, [pc, #312]	; (8014998 <USBH_HandleEnum+0x3ac>)
 8014860:	f007 ff00 	bl	801c664 <iprintf>
 8014864:	200a      	movs	r0, #10
 8014866:	f007 ff15 	bl	801c694 <putchar>
        phost->gState = HOST_ABORT_STATE;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	220d      	movs	r2, #13
 801486e:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2200      	movs	r2, #0
 8014874:	705a      	strb	r2, [r3, #1]
      break;
 8014876:	e192      	b.n	8014b9e <USBH_HandleEnum+0x5b2>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8014878:	2109      	movs	r1, #9
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f000 fab6 	bl	8014dec <USBH_Get_CfgDesc>
 8014880:	4603      	mov	r3, r0
 8014882:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014884:	7bbb      	ldrb	r3, [r7, #14]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d103      	bne.n	8014892 <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2204      	movs	r2, #4
 801488e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8014890:	e187      	b.n	8014ba2 <USBH_HandleEnum+0x5b6>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014892:	7bbb      	ldrb	r3, [r7, #14]
 8014894:	2b03      	cmp	r3, #3
 8014896:	f040 8184 	bne.w	8014ba2 <USBH_HandleEnum+0x5b6>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 801489a:	483d      	ldr	r0, [pc, #244]	; (8014990 <USBH_HandleEnum+0x3a4>)
 801489c:	f007 fee2 	bl	801c664 <iprintf>
 80148a0:	4843      	ldr	r0, [pc, #268]	; (80149b0 <USBH_HandleEnum+0x3c4>)
 80148a2:	f007 fedf 	bl	801c664 <iprintf>
 80148a6:	200a      	movs	r0, #10
 80148a8:	f007 fef4 	bl	801c694 <putchar>
        phost->device.EnumCnt++;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80148b2:	3301      	adds	r3, #1
 80148b4:	b2da      	uxtb	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80148c2:	2b03      	cmp	r3, #3
 80148c4:	d909      	bls.n	80148da <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80148c6:	4834      	ldr	r0, [pc, #208]	; (8014998 <USBH_HandleEnum+0x3ac>)
 80148c8:	f007 fecc 	bl	801c664 <iprintf>
 80148cc:	200a      	movs	r0, #10
 80148ce:	f007 fee1 	bl	801c694 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	220d      	movs	r2, #13
 80148d6:	701a      	strb	r2, [r3, #0]
      break;
 80148d8:	e163      	b.n	8014ba2 <USBH_HandleEnum+0x5b6>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	795b      	ldrb	r3, [r3, #5]
 80148de:	4619      	mov	r1, r3
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f001 f8cb 	bl	8015a7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	791b      	ldrb	r3, [r3, #4]
 80148ea:	4619      	mov	r1, r3
 80148ec:	6878      	ldr	r0, [r7, #4]
 80148ee:	f001 f8c5 	bl	8015a7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2200      	movs	r2, #0
 80148f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2200      	movs	r2, #0
 80148fc:	701a      	strb	r2, [r3, #0]
      break;
 80148fe:	e150      	b.n	8014ba2 <USBH_HandleEnum+0x5b6>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8014906:	4619      	mov	r1, r3
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f000 fa6f 	bl	8014dec <USBH_Get_CfgDesc>
 801490e:	4603      	mov	r3, r0
 8014910:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014912:	7bbb      	ldrb	r3, [r7, #14]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d103      	bne.n	8014920 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2205      	movs	r2, #5
 801491c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801491e:	e142      	b.n	8014ba6 <USBH_HandleEnum+0x5ba>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014920:	7bbb      	ldrb	r3, [r7, #14]
 8014922:	2b03      	cmp	r3, #3
 8014924:	f040 813f 	bne.w	8014ba6 <USBH_HandleEnum+0x5ba>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8014928:	4819      	ldr	r0, [pc, #100]	; (8014990 <USBH_HandleEnum+0x3a4>)
 801492a:	f007 fe9b 	bl	801c664 <iprintf>
 801492e:	4820      	ldr	r0, [pc, #128]	; (80149b0 <USBH_HandleEnum+0x3c4>)
 8014930:	f007 fe98 	bl	801c664 <iprintf>
 8014934:	200a      	movs	r0, #10
 8014936:	f007 fead 	bl	801c694 <putchar>
        phost->device.EnumCnt++;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014940:	3301      	adds	r3, #1
 8014942:	b2da      	uxtb	r2, r3
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014950:	2b03      	cmp	r3, #3
 8014952:	d909      	bls.n	8014968 <USBH_HandleEnum+0x37c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8014954:	4810      	ldr	r0, [pc, #64]	; (8014998 <USBH_HandleEnum+0x3ac>)
 8014956:	f007 fe85 	bl	801c664 <iprintf>
 801495a:	200a      	movs	r0, #10
 801495c:	f007 fe9a 	bl	801c694 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	220d      	movs	r2, #13
 8014964:	701a      	strb	r2, [r3, #0]
      break;
 8014966:	e11e      	b.n	8014ba6 <USBH_HandleEnum+0x5ba>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	795b      	ldrb	r3, [r3, #5]
 801496c:	4619      	mov	r1, r3
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f001 f884 	bl	8015a7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	791b      	ldrb	r3, [r3, #4]
 8014978:	4619      	mov	r1, r3
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f001 f87e 	bl	8015a7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2200      	movs	r2, #0
 8014984:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2200      	movs	r2, #0
 801498a:	701a      	strb	r2, [r3, #0]
      break;
 801498c:	e10b      	b.n	8014ba6 <USBH_HandleEnum+0x5ba>
 801498e:	bf00      	nop
 8014990:	0801dc64 	.word	0x0801dc64
 8014994:	0801defc 	.word	0x0801defc
 8014998:	0801df30 	.word	0x0801df30
 801499c:	0801df70 	.word	0x0801df70
 80149a0:	0801df7c 	.word	0x0801df7c
 80149a4:	0801df88 	.word	0x0801df88
 80149a8:	0801dfc4 	.word	0x0801dfc4
 80149ac:	0801dfdc 	.word	0x0801dfdc
 80149b0:	0801e010 	.word	0x0801e010

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d046      	beq.n	8014a4c <USBH_HandleEnum+0x460>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80149ca:	23ff      	movs	r3, #255	; 0xff
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f000 fa31 	bl	8014e34 <USBH_Get_StringDesc>
 80149d2:	4603      	mov	r3, r0
 80149d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80149d6:	7bbb      	ldrb	r3, [r7, #14]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d11b      	bne.n	8014a14 <USBH_HandleEnum+0x428>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80149e2:	4619      	mov	r1, r3
 80149e4:	4876      	ldr	r0, [pc, #472]	; (8014bc0 <USBH_HandleEnum+0x5d4>)
 80149e6:	f007 fe3d 	bl	801c664 <iprintf>
 80149ea:	200a      	movs	r0, #10
 80149ec:	f007 fe52 	bl	801c694 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2206      	movs	r2, #6
 80149f4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2205      	movs	r2, #5
 80149fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	f004 fb05 	bl	801901c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014a12:	e0ca      	b.n	8014baa <USBH_HandleEnum+0x5be>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014a14:	7bbb      	ldrb	r3, [r7, #14]
 8014a16:	2b03      	cmp	r3, #3
 8014a18:	f040 80c7 	bne.w	8014baa <USBH_HandleEnum+0x5be>
          USBH_UsrLog("Manufacturer : N/A");
 8014a1c:	4869      	ldr	r0, [pc, #420]	; (8014bc4 <USBH_HandleEnum+0x5d8>)
 8014a1e:	f007 fe21 	bl	801c664 <iprintf>
 8014a22:	200a      	movs	r0, #10
 8014a24:	f007 fe36 	bl	801c694 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2206      	movs	r2, #6
 8014a2c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2205      	movs	r2, #5
 8014a32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014a42:	2200      	movs	r2, #0
 8014a44:	4619      	mov	r1, r3
 8014a46:	f004 fae9 	bl	801901c <osMessagePut>
      break;
 8014a4a:	e0ae      	b.n	8014baa <USBH_HandleEnum+0x5be>
        USBH_UsrLog("Manufacturer : N/A");
 8014a4c:	485d      	ldr	r0, [pc, #372]	; (8014bc4 <USBH_HandleEnum+0x5d8>)
 8014a4e:	f007 fe09 	bl	801c664 <iprintf>
 8014a52:	200a      	movs	r0, #10
 8014a54:	f007 fe1e 	bl	801c694 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	2206      	movs	r2, #6
 8014a5c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	2205      	movs	r2, #5
 8014a62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014a72:	2200      	movs	r2, #0
 8014a74:	4619      	mov	r1, r3
 8014a76:	f004 fad1 	bl	801901c <osMessagePut>
      break;
 8014a7a:	e096      	b.n	8014baa <USBH_HandleEnum+0x5be>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d037      	beq.n	8014af6 <USBH_HandleEnum+0x50a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8014a92:	23ff      	movs	r3, #255	; 0xff
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f000 f9cd 	bl	8014e34 <USBH_Get_StringDesc>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8014a9e:	7bbb      	ldrb	r3, [r7, #14]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d10d      	bne.n	8014ac0 <USBH_HandleEnum+0x4d4>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014aaa:	4619      	mov	r1, r3
 8014aac:	4846      	ldr	r0, [pc, #280]	; (8014bc8 <USBH_HandleEnum+0x5dc>)
 8014aae:	f007 fdd9 	bl	801c664 <iprintf>
 8014ab2:	200a      	movs	r0, #10
 8014ab4:	f007 fdee 	bl	801c694 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2207      	movs	r2, #7
 8014abc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014abe:	e076      	b.n	8014bae <USBH_HandleEnum+0x5c2>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014ac0:	7bbb      	ldrb	r3, [r7, #14]
 8014ac2:	2b03      	cmp	r3, #3
 8014ac4:	d173      	bne.n	8014bae <USBH_HandleEnum+0x5c2>
          USBH_UsrLog("Product : N/A");
 8014ac6:	4841      	ldr	r0, [pc, #260]	; (8014bcc <USBH_HandleEnum+0x5e0>)
 8014ac8:	f007 fdcc 	bl	801c664 <iprintf>
 8014acc:	200a      	movs	r0, #10
 8014ace:	f007 fde1 	bl	801c694 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2207      	movs	r2, #7
 8014ad6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2205      	movs	r2, #5
 8014adc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014aec:	2200      	movs	r2, #0
 8014aee:	4619      	mov	r1, r3
 8014af0:	f004 fa94 	bl	801901c <osMessagePut>
      break;
 8014af4:	e05b      	b.n	8014bae <USBH_HandleEnum+0x5c2>
        USBH_UsrLog("Product : N/A");
 8014af6:	4835      	ldr	r0, [pc, #212]	; (8014bcc <USBH_HandleEnum+0x5e0>)
 8014af8:	f007 fdb4 	bl	801c664 <iprintf>
 8014afc:	200a      	movs	r0, #10
 8014afe:	f007 fdc9 	bl	801c694 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2207      	movs	r2, #7
 8014b06:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	2205      	movs	r2, #5
 8014b0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	4619      	mov	r1, r3
 8014b20:	f004 fa7c 	bl	801901c <osMessagePut>
      break;
 8014b24:	e043      	b.n	8014bae <USBH_HandleEnum+0x5c2>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d027      	beq.n	8014b80 <USBH_HandleEnum+0x594>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8014b3c:	23ff      	movs	r3, #255	; 0xff
 8014b3e:	6878      	ldr	r0, [r7, #4]
 8014b40:	f000 f978 	bl	8014e34 <USBH_Get_StringDesc>
 8014b44:	4603      	mov	r3, r0
 8014b46:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8014b48:	7bbb      	ldrb	r3, [r7, #14]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d10c      	bne.n	8014b68 <USBH_HandleEnum+0x57c>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014b54:	4619      	mov	r1, r3
 8014b56:	481e      	ldr	r0, [pc, #120]	; (8014bd0 <USBH_HandleEnum+0x5e4>)
 8014b58:	f007 fd84 	bl	801c664 <iprintf>
 8014b5c:	200a      	movs	r0, #10
 8014b5e:	f007 fd99 	bl	801c694 <putchar>
          Status = USBH_OK;
 8014b62:	2300      	movs	r3, #0
 8014b64:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8014b66:	e024      	b.n	8014bb2 <USBH_HandleEnum+0x5c6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014b68:	7bbb      	ldrb	r3, [r7, #14]
 8014b6a:	2b03      	cmp	r3, #3
 8014b6c:	d121      	bne.n	8014bb2 <USBH_HandleEnum+0x5c6>
          USBH_UsrLog("Serial Number : N/A");
 8014b6e:	4819      	ldr	r0, [pc, #100]	; (8014bd4 <USBH_HandleEnum+0x5e8>)
 8014b70:	f007 fd78 	bl	801c664 <iprintf>
 8014b74:	200a      	movs	r0, #10
 8014b76:	f007 fd8d 	bl	801c694 <putchar>
          Status = USBH_OK;
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8014b7e:	e018      	b.n	8014bb2 <USBH_HandleEnum+0x5c6>
        USBH_UsrLog("Serial Number : N/A");
 8014b80:	4814      	ldr	r0, [pc, #80]	; (8014bd4 <USBH_HandleEnum+0x5e8>)
 8014b82:	f007 fd6f 	bl	801c664 <iprintf>
 8014b86:	200a      	movs	r0, #10
 8014b88:	f007 fd84 	bl	801c694 <putchar>
        Status = USBH_OK;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8014b90:	e00f      	b.n	8014bb2 <USBH_HandleEnum+0x5c6>

    default:
      break;
 8014b92:	bf00      	nop
 8014b94:	e00e      	b.n	8014bb4 <USBH_HandleEnum+0x5c8>
      break;
 8014b96:	bf00      	nop
 8014b98:	e00c      	b.n	8014bb4 <USBH_HandleEnum+0x5c8>
      break;
 8014b9a:	bf00      	nop
 8014b9c:	e00a      	b.n	8014bb4 <USBH_HandleEnum+0x5c8>
      break;
 8014b9e:	bf00      	nop
 8014ba0:	e008      	b.n	8014bb4 <USBH_HandleEnum+0x5c8>
      break;
 8014ba2:	bf00      	nop
 8014ba4:	e006      	b.n	8014bb4 <USBH_HandleEnum+0x5c8>
      break;
 8014ba6:	bf00      	nop
 8014ba8:	e004      	b.n	8014bb4 <USBH_HandleEnum+0x5c8>
      break;
 8014baa:	bf00      	nop
 8014bac:	e002      	b.n	8014bb4 <USBH_HandleEnum+0x5c8>
      break;
 8014bae:	bf00      	nop
 8014bb0:	e000      	b.n	8014bb4 <USBH_HandleEnum+0x5c8>
      break;
 8014bb2:	bf00      	nop
  }
  return Status;
 8014bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3710      	adds	r7, #16
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	0801e054 	.word	0x0801e054
 8014bc4:	0801e068 	.word	0x0801e068
 8014bc8:	0801e07c 	.word	0x0801e07c
 8014bcc:	0801e08c 	.word	0x0801e08c
 8014bd0:	0801e09c 	.word	0x0801e09c
 8014bd4:	0801e0b0 	.word	0x0801e0b0

08014bd8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8014bd8:	b480      	push	{r7}
 8014bda:	b083      	sub	sp, #12
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	683a      	ldr	r2, [r7, #0]
 8014be6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8014bea:	bf00      	nop
 8014bec:	370c      	adds	r7, #12
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf4:	4770      	bx	lr

08014bf6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8014bf6:	b580      	push	{r7, lr}
 8014bf8:	b082      	sub	sp, #8
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014c04:	1c5a      	adds	r2, r3, #1
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f000 f804 	bl	8014c1a <USBH_HandleSof>
}
 8014c12:	bf00      	nop
 8014c14:	3708      	adds	r7, #8
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}

08014c1a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8014c1a:	b580      	push	{r7, lr}
 8014c1c:	b082      	sub	sp, #8
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	781b      	ldrb	r3, [r3, #0]
 8014c26:	b2db      	uxtb	r3, r3
 8014c28:	2b0b      	cmp	r3, #11
 8014c2a:	d10a      	bne.n	8014c42 <USBH_HandleSof+0x28>
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d005      	beq.n	8014c42 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014c3c:	699b      	ldr	r3, [r3, #24]
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	4798      	blx	r3
  }
}
 8014c42:	bf00      	nop
 8014c44:	3708      	adds	r7, #8
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}

08014c4a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8014c4a:	b580      	push	{r7, lr}
 8014c4c:	b082      	sub	sp, #8
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2201      	movs	r2, #1
 8014c56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2201      	movs	r2, #1
 8014c5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c6e:	2200      	movs	r2, #0
 8014c70:	4619      	mov	r1, r3
 8014c72:	f004 f9d3 	bl	801901c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8014c76:	bf00      	nop
}
 8014c78:	3708      	adds	r7, #8
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8014c7e:	b480      	push	{r7}
 8014c80:	b083      	sub	sp, #12
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2200      	movs	r2, #0
 8014c8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8014c8e:	bf00      	nop
}
 8014c90:	370c      	adds	r7, #12
 8014c92:	46bd      	mov	sp, r7
 8014c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c98:	4770      	bx	lr

08014c9a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8014c9a:	b580      	push	{r7, lr}
 8014c9c:	b082      	sub	sp, #8
 8014c9e:	af00      	add	r7, sp, #0
 8014ca0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2201      	movs	r2, #1
 8014ca6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	2200      	movs	r2, #0
 8014cae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014cce:	2200      	movs	r2, #0
 8014cd0:	4619      	mov	r1, r3
 8014cd2:	f004 f9a3 	bl	801901c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8014cd6:	2300      	movs	r3, #0
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	3708      	adds	r7, #8
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}

08014ce0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b082      	sub	sp, #8
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2201      	movs	r2, #1
 8014cec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f007 f90a 	bl	801bf1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	791b      	ldrb	r3, [r3, #4]
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f000 feb5 	bl	8015a7c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	795b      	ldrb	r3, [r3, #5]
 8014d16:	4619      	mov	r1, r3
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f000 feaf 	bl	8015a7c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2201      	movs	r2, #1
 8014d22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d32:	2200      	movs	r2, #0
 8014d34:	4619      	mov	r1, r3
 8014d36:	f004 f971 	bl	801901c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8014d3a:	2300      	movs	r3, #0
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3708      	adds	r7, #8
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b086      	sub	sp, #24
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8014d52:	f107 030c 	add.w	r3, r7, #12
 8014d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f004 f99e 	bl	801909c <osMessageGet>
    if (event.status == osEventMessage)
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2b10      	cmp	r3, #16
 8014d64:	d1f2      	bne.n	8014d4c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f7ff f95a 	bl	8014020 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014d6c:	e7ee      	b.n	8014d4c <USBH_Process_OS+0x8>

08014d6e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8014d6e:	b580      	push	{r7, lr}
 8014d70:	b082      	sub	sp, #8
 8014d72:	af00      	add	r7, sp, #0
 8014d74:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2201      	movs	r2, #1
 8014d7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	f004 f945 	bl	801901c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8014d92:	2300      	movs	r3, #0
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b086      	sub	sp, #24
 8014da0:	af02      	add	r7, sp, #8
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	460b      	mov	r3, r1
 8014da6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8014dae:	78fb      	ldrb	r3, [r7, #3]
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	9300      	str	r3, [sp, #0]
 8014db4:	4613      	mov	r3, r2
 8014db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014dba:	2100      	movs	r1, #0
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f000 f864 	bl	8014e8a <USBH_GetDescriptor>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	73fb      	strb	r3, [r7, #15]
 8014dc6:	7bfb      	ldrb	r3, [r7, #15]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d10a      	bne.n	8014de2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f203 3026 	addw	r0, r3, #806	; 0x326
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014dd8:	78fa      	ldrb	r2, [r7, #3]
 8014dda:	b292      	uxth	r2, r2
 8014ddc:	4619      	mov	r1, r3
 8014dde:	f000 f918 	bl	8015012 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8014de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3710      	adds	r7, #16
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}

08014dec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b086      	sub	sp, #24
 8014df0:	af02      	add	r7, sp, #8
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	460b      	mov	r3, r1
 8014df6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	331c      	adds	r3, #28
 8014dfc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8014dfe:	887b      	ldrh	r3, [r7, #2]
 8014e00:	9300      	str	r3, [sp, #0]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014e08:	2100      	movs	r1, #0
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f000 f83d 	bl	8014e8a <USBH_GetDescriptor>
 8014e10:	4603      	mov	r3, r0
 8014e12:	72fb      	strb	r3, [r7, #11]
 8014e14:	7afb      	ldrb	r3, [r7, #11]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d107      	bne.n	8014e2a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014e20:	887a      	ldrh	r2, [r7, #2]
 8014e22:	68f9      	ldr	r1, [r7, #12]
 8014e24:	4618      	mov	r0, r3
 8014e26:	f000 f964 	bl	80150f2 <USBH_ParseCfgDesc>
  }

  return status;
 8014e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3710      	adds	r7, #16
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b088      	sub	sp, #32
 8014e38:	af02      	add	r7, sp, #8
 8014e3a:	60f8      	str	r0, [r7, #12]
 8014e3c:	607a      	str	r2, [r7, #4]
 8014e3e:	461a      	mov	r2, r3
 8014e40:	460b      	mov	r3, r1
 8014e42:	72fb      	strb	r3, [r7, #11]
 8014e44:	4613      	mov	r3, r2
 8014e46:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8014e48:	7afb      	ldrb	r3, [r7, #11]
 8014e4a:	b29b      	uxth	r3, r3
 8014e4c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8014e50:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8014e58:	893b      	ldrh	r3, [r7, #8]
 8014e5a:	9300      	str	r3, [sp, #0]
 8014e5c:	460b      	mov	r3, r1
 8014e5e:	2100      	movs	r1, #0
 8014e60:	68f8      	ldr	r0, [r7, #12]
 8014e62:	f000 f812 	bl	8014e8a <USBH_GetDescriptor>
 8014e66:	4603      	mov	r3, r0
 8014e68:	75fb      	strb	r3, [r7, #23]
 8014e6a:	7dfb      	ldrb	r3, [r7, #23]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d107      	bne.n	8014e80 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014e76:	893a      	ldrh	r2, [r7, #8]
 8014e78:	6879      	ldr	r1, [r7, #4]
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f000 fa37 	bl	80152ee <USBH_ParseStringDesc>
  }

  return status;
 8014e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	3718      	adds	r7, #24
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}

08014e8a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8014e8a:	b580      	push	{r7, lr}
 8014e8c:	b084      	sub	sp, #16
 8014e8e:	af00      	add	r7, sp, #0
 8014e90:	60f8      	str	r0, [r7, #12]
 8014e92:	607b      	str	r3, [r7, #4]
 8014e94:	460b      	mov	r3, r1
 8014e96:	72fb      	strb	r3, [r7, #11]
 8014e98:	4613      	mov	r3, r2
 8014e9a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	789b      	ldrb	r3, [r3, #2]
 8014ea0:	2b01      	cmp	r3, #1
 8014ea2:	d11c      	bne.n	8014ede <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8014ea4:	7afb      	ldrb	r3, [r7, #11]
 8014ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014eaa:	b2da      	uxtb	r2, r3
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	2206      	movs	r2, #6
 8014eb4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	893a      	ldrh	r2, [r7, #8]
 8014eba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8014ebc:	893b      	ldrh	r3, [r7, #8]
 8014ebe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014ec6:	d104      	bne.n	8014ed2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	f240 4209 	movw	r2, #1033	; 0x409
 8014ece:	829a      	strh	r2, [r3, #20]
 8014ed0:	e002      	b.n	8014ed8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	8b3a      	ldrh	r2, [r7, #24]
 8014edc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8014ede:	8b3b      	ldrh	r3, [r7, #24]
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	6879      	ldr	r1, [r7, #4]
 8014ee4:	68f8      	ldr	r0, [r7, #12]
 8014ee6:	f000 fa50 	bl	801538a <USBH_CtlReq>
 8014eea:	4603      	mov	r3, r0
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3710      	adds	r7, #16
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}

08014ef4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	460b      	mov	r3, r1
 8014efe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	789b      	ldrb	r3, [r3, #2]
 8014f04:	2b01      	cmp	r3, #1
 8014f06:	d10f      	bne.n	8014f28 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	2205      	movs	r2, #5
 8014f12:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8014f14:	78fb      	ldrb	r3, [r7, #3]
 8014f16:	b29a      	uxth	r2, r3
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2200      	movs	r2, #0
 8014f20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	2200      	movs	r2, #0
 8014f26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8014f28:	2200      	movs	r2, #0
 8014f2a:	2100      	movs	r1, #0
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f000 fa2c 	bl	801538a <USBH_CtlReq>
 8014f32:	4603      	mov	r3, r0
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	3708      	adds	r7, #8
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	460b      	mov	r3, r1
 8014f46:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	789b      	ldrb	r3, [r3, #2]
 8014f4c:	2b01      	cmp	r3, #1
 8014f4e:	d10e      	bne.n	8014f6e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	2209      	movs	r2, #9
 8014f5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	887a      	ldrh	r2, [r7, #2]
 8014f60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2200      	movs	r2, #0
 8014f66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8014f6e:	2200      	movs	r2, #0
 8014f70:	2100      	movs	r1, #0
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f000 fa09 	bl	801538a <USBH_CtlReq>
 8014f78:	4603      	mov	r3, r0
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3708      	adds	r7, #8
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}

08014f82 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8014f82:	b580      	push	{r7, lr}
 8014f84:	b082      	sub	sp, #8
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	6078      	str	r0, [r7, #4]
 8014f8a:	460b      	mov	r3, r1
 8014f8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	789b      	ldrb	r3, [r3, #2]
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	d10f      	bne.n	8014fb6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2200      	movs	r2, #0
 8014f9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2203      	movs	r2, #3
 8014fa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8014fa2:	78fb      	ldrb	r3, [r7, #3]
 8014fa4:	b29a      	uxth	r2, r3
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2200      	movs	r2, #0
 8014fae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	2100      	movs	r1, #0
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 f9e5 	bl	801538a <USBH_CtlReq>
 8014fc0:	4603      	mov	r3, r0
}
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	3708      	adds	r7, #8
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}

08014fca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8014fca:	b580      	push	{r7, lr}
 8014fcc:	b082      	sub	sp, #8
 8014fce:	af00      	add	r7, sp, #0
 8014fd0:	6078      	str	r0, [r7, #4]
 8014fd2:	460b      	mov	r3, r1
 8014fd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	789b      	ldrb	r3, [r3, #2]
 8014fda:	2b01      	cmp	r3, #1
 8014fdc:	d10f      	bne.n	8014ffe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2202      	movs	r2, #2
 8014fe2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2200      	movs	r2, #0
 8014fee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8014ff0:	78fb      	ldrb	r3, [r7, #3]
 8014ff2:	b29a      	uxth	r2, r3
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8014ffe:	2200      	movs	r2, #0
 8015000:	2100      	movs	r1, #0
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f000 f9c1 	bl	801538a <USBH_CtlReq>
 8015008:	4603      	mov	r3, r0
}
 801500a:	4618      	mov	r0, r3
 801500c:	3708      	adds	r7, #8
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}

08015012 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8015012:	b480      	push	{r7}
 8015014:	b085      	sub	sp, #20
 8015016:	af00      	add	r7, sp, #0
 8015018:	60f8      	str	r0, [r7, #12]
 801501a:	60b9      	str	r1, [r7, #8]
 801501c:	4613      	mov	r3, r2
 801501e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	781a      	ldrb	r2, [r3, #0]
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	785a      	ldrb	r2, [r3, #1]
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	3302      	adds	r3, #2
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	b29a      	uxth	r2, r3
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	3303      	adds	r3, #3
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	b29b      	uxth	r3, r3
 8015040:	021b      	lsls	r3, r3, #8
 8015042:	b29b      	uxth	r3, r3
 8015044:	4313      	orrs	r3, r2
 8015046:	b29a      	uxth	r2, r3
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	791a      	ldrb	r2, [r3, #4]
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	795a      	ldrb	r2, [r3, #5]
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801505c:	68bb      	ldr	r3, [r7, #8]
 801505e:	799a      	ldrb	r2, [r3, #6]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	79da      	ldrb	r2, [r3, #7]
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 801506c:	88fb      	ldrh	r3, [r7, #6]
 801506e:	2b08      	cmp	r3, #8
 8015070:	d939      	bls.n	80150e6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	3308      	adds	r3, #8
 8015076:	781b      	ldrb	r3, [r3, #0]
 8015078:	b29a      	uxth	r2, r3
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	3309      	adds	r3, #9
 801507e:	781b      	ldrb	r3, [r3, #0]
 8015080:	b29b      	uxth	r3, r3
 8015082:	021b      	lsls	r3, r3, #8
 8015084:	b29b      	uxth	r3, r3
 8015086:	4313      	orrs	r3, r2
 8015088:	b29a      	uxth	r2, r3
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	330a      	adds	r3, #10
 8015092:	781b      	ldrb	r3, [r3, #0]
 8015094:	b29a      	uxth	r2, r3
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	330b      	adds	r3, #11
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	b29b      	uxth	r3, r3
 801509e:	021b      	lsls	r3, r3, #8
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	4313      	orrs	r3, r2
 80150a4:	b29a      	uxth	r2, r3
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	330c      	adds	r3, #12
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	b29a      	uxth	r2, r3
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	330d      	adds	r3, #13
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	021b      	lsls	r3, r3, #8
 80150bc:	b29b      	uxth	r3, r3
 80150be:	4313      	orrs	r3, r2
 80150c0:	b29a      	uxth	r2, r3
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80150c6:	68bb      	ldr	r3, [r7, #8]
 80150c8:	7b9a      	ldrb	r2, [r3, #14]
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	7bda      	ldrb	r2, [r3, #15]
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	7c1a      	ldrb	r2, [r3, #16]
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	7c5a      	ldrb	r2, [r3, #17]
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	745a      	strb	r2, [r3, #17]
  }
}
 80150e6:	bf00      	nop
 80150e8:	3714      	adds	r7, #20
 80150ea:	46bd      	mov	sp, r7
 80150ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f0:	4770      	bx	lr

080150f2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80150f2:	b580      	push	{r7, lr}
 80150f4:	b08a      	sub	sp, #40	; 0x28
 80150f6:	af00      	add	r7, sp, #0
 80150f8:	60f8      	str	r0, [r7, #12]
 80150fa:	60b9      	str	r1, [r7, #8]
 80150fc:	4613      	mov	r3, r2
 80150fe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8015104:	2300      	movs	r3, #0
 8015106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 801510a:	2300      	movs	r3, #0
 801510c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	781a      	ldrb	r2, [r3, #0]
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	785a      	ldrb	r2, [r3, #1]
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	3302      	adds	r3, #2
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	b29a      	uxth	r2, r3
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	3303      	adds	r3, #3
 8015130:	781b      	ldrb	r3, [r3, #0]
 8015132:	b29b      	uxth	r3, r3
 8015134:	021b      	lsls	r3, r3, #8
 8015136:	b29b      	uxth	r3, r3
 8015138:	4313      	orrs	r3, r2
 801513a:	b29a      	uxth	r2, r3
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	791a      	ldrb	r2, [r3, #4]
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	795a      	ldrb	r2, [r3, #5]
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	799a      	ldrb	r2, [r3, #6]
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	79da      	ldrb	r2, [r3, #7]
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	7a1a      	ldrb	r2, [r3, #8]
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8015168:	88fb      	ldrh	r3, [r7, #6]
 801516a:	2b09      	cmp	r3, #9
 801516c:	d95f      	bls.n	801522e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 801516e:	2309      	movs	r3, #9
 8015170:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8015172:	2300      	movs	r3, #0
 8015174:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8015176:	e051      	b.n	801521c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8015178:	f107 0316 	add.w	r3, r7, #22
 801517c:	4619      	mov	r1, r3
 801517e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015180:	f000 f8e8 	bl	8015354 <USBH_GetNextDesc>
 8015184:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8015186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015188:	785b      	ldrb	r3, [r3, #1]
 801518a:	2b04      	cmp	r3, #4
 801518c:	d146      	bne.n	801521c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801518e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015192:	221a      	movs	r2, #26
 8015194:	fb02 f303 	mul.w	r3, r2, r3
 8015198:	3308      	adds	r3, #8
 801519a:	68fa      	ldr	r2, [r7, #12]
 801519c:	4413      	add	r3, r2
 801519e:	3302      	adds	r3, #2
 80151a0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80151a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151a4:	69f8      	ldr	r0, [r7, #28]
 80151a6:	f000 f846 	bl	8015236 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80151aa:	2300      	movs	r3, #0
 80151ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80151b0:	2300      	movs	r3, #0
 80151b2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80151b4:	e022      	b.n	80151fc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80151b6:	f107 0316 	add.w	r3, r7, #22
 80151ba:	4619      	mov	r1, r3
 80151bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151be:	f000 f8c9 	bl	8015354 <USBH_GetNextDesc>
 80151c2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c6:	785b      	ldrb	r3, [r3, #1]
 80151c8:	2b05      	cmp	r3, #5
 80151ca:	d117      	bne.n	80151fc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80151cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80151d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80151d4:	3201      	adds	r2, #1
 80151d6:	00d2      	lsls	r2, r2, #3
 80151d8:	211a      	movs	r1, #26
 80151da:	fb01 f303 	mul.w	r3, r1, r3
 80151de:	4413      	add	r3, r2
 80151e0:	3308      	adds	r3, #8
 80151e2:	68fa      	ldr	r2, [r7, #12]
 80151e4:	4413      	add	r3, r2
 80151e6:	3304      	adds	r3, #4
 80151e8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80151ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151ec:	69b8      	ldr	r0, [r7, #24]
 80151ee:	f000 f851 	bl	8015294 <USBH_ParseEPDesc>
            ep_ix++;
 80151f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80151f6:	3301      	adds	r3, #1
 80151f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80151fc:	69fb      	ldr	r3, [r7, #28]
 80151fe:	791b      	ldrb	r3, [r3, #4]
 8015200:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015204:	429a      	cmp	r2, r3
 8015206:	d204      	bcs.n	8015212 <USBH_ParseCfgDesc+0x120>
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	885a      	ldrh	r2, [r3, #2]
 801520c:	8afb      	ldrh	r3, [r7, #22]
 801520e:	429a      	cmp	r2, r3
 8015210:	d8d1      	bhi.n	80151b6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8015212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015216:	3301      	adds	r3, #1
 8015218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801521c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015220:	2b01      	cmp	r3, #1
 8015222:	d804      	bhi.n	801522e <USBH_ParseCfgDesc+0x13c>
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	885a      	ldrh	r2, [r3, #2]
 8015228:	8afb      	ldrh	r3, [r7, #22]
 801522a:	429a      	cmp	r2, r3
 801522c:	d8a4      	bhi.n	8015178 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 801522e:	bf00      	nop
 8015230:	3728      	adds	r7, #40	; 0x28
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}

08015236 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8015236:	b480      	push	{r7}
 8015238:	b083      	sub	sp, #12
 801523a:	af00      	add	r7, sp, #0
 801523c:	6078      	str	r0, [r7, #4]
 801523e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	781a      	ldrb	r2, [r3, #0]
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	785a      	ldrb	r2, [r3, #1]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	789a      	ldrb	r2, [r3, #2]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	78da      	ldrb	r2, [r3, #3]
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	791a      	ldrb	r2, [r3, #4]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	795a      	ldrb	r2, [r3, #5]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8015270:	683b      	ldr	r3, [r7, #0]
 8015272:	799a      	ldrb	r2, [r3, #6]
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	79da      	ldrb	r2, [r3, #7]
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	7a1a      	ldrb	r2, [r3, #8]
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	721a      	strb	r2, [r3, #8]
}
 8015288:	bf00      	nop
 801528a:	370c      	adds	r7, #12
 801528c:	46bd      	mov	sp, r7
 801528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015292:	4770      	bx	lr

08015294 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	781a      	ldrb	r2, [r3, #0]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	785a      	ldrb	r2, [r3, #1]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	789a      	ldrb	r2, [r3, #2]
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	78da      	ldrb	r2, [r3, #3]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	3304      	adds	r3, #4
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	b29a      	uxth	r2, r3
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	3305      	adds	r3, #5
 80152ca:	781b      	ldrb	r3, [r3, #0]
 80152cc:	b29b      	uxth	r3, r3
 80152ce:	021b      	lsls	r3, r3, #8
 80152d0:	b29b      	uxth	r3, r3
 80152d2:	4313      	orrs	r3, r2
 80152d4:	b29a      	uxth	r2, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	799a      	ldrb	r2, [r3, #6]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	719a      	strb	r2, [r3, #6]
}
 80152e2:	bf00      	nop
 80152e4:	370c      	adds	r7, #12
 80152e6:	46bd      	mov	sp, r7
 80152e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ec:	4770      	bx	lr

080152ee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80152ee:	b480      	push	{r7}
 80152f0:	b087      	sub	sp, #28
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	60f8      	str	r0, [r7, #12]
 80152f6:	60b9      	str	r1, [r7, #8]
 80152f8:	4613      	mov	r3, r2
 80152fa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	3301      	adds	r3, #1
 8015300:	781b      	ldrb	r3, [r3, #0]
 8015302:	2b03      	cmp	r3, #3
 8015304:	d120      	bne.n	8015348 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	781b      	ldrb	r3, [r3, #0]
 801530a:	1e9a      	subs	r2, r3, #2
 801530c:	88fb      	ldrh	r3, [r7, #6]
 801530e:	4293      	cmp	r3, r2
 8015310:	bf28      	it	cs
 8015312:	4613      	movcs	r3, r2
 8015314:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	3302      	adds	r3, #2
 801531a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801531c:	2300      	movs	r3, #0
 801531e:	82fb      	strh	r3, [r7, #22]
 8015320:	e00b      	b.n	801533a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8015322:	8afb      	ldrh	r3, [r7, #22]
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	4413      	add	r3, r2
 8015328:	781a      	ldrb	r2, [r3, #0]
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	701a      	strb	r2, [r3, #0]
      pdest++;
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	3301      	adds	r3, #1
 8015332:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8015334:	8afb      	ldrh	r3, [r7, #22]
 8015336:	3302      	adds	r3, #2
 8015338:	82fb      	strh	r3, [r7, #22]
 801533a:	8afa      	ldrh	r2, [r7, #22]
 801533c:	8abb      	ldrh	r3, [r7, #20]
 801533e:	429a      	cmp	r2, r3
 8015340:	d3ef      	bcc.n	8015322 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	2200      	movs	r2, #0
 8015346:	701a      	strb	r2, [r3, #0]
  }
}
 8015348:	bf00      	nop
 801534a:	371c      	adds	r7, #28
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr

08015354 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8015354:	b480      	push	{r7}
 8015356:	b085      	sub	sp, #20
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801535e:	683b      	ldr	r3, [r7, #0]
 8015360:	881a      	ldrh	r2, [r3, #0]
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	781b      	ldrb	r3, [r3, #0]
 8015366:	b29b      	uxth	r3, r3
 8015368:	4413      	add	r3, r2
 801536a:	b29a      	uxth	r2, r3
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	781b      	ldrb	r3, [r3, #0]
 8015374:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	4413      	add	r3, r2
 801537a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801537c:	68fb      	ldr	r3, [r7, #12]
}
 801537e:	4618      	mov	r0, r3
 8015380:	3714      	adds	r7, #20
 8015382:	46bd      	mov	sp, r7
 8015384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015388:	4770      	bx	lr

0801538a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801538a:	b580      	push	{r7, lr}
 801538c:	b086      	sub	sp, #24
 801538e:	af00      	add	r7, sp, #0
 8015390:	60f8      	str	r0, [r7, #12]
 8015392:	60b9      	str	r1, [r7, #8]
 8015394:	4613      	mov	r3, r2
 8015396:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8015398:	2301      	movs	r3, #1
 801539a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	789b      	ldrb	r3, [r3, #2]
 80153a0:	2b01      	cmp	r3, #1
 80153a2:	d002      	beq.n	80153aa <USBH_CtlReq+0x20>
 80153a4:	2b02      	cmp	r3, #2
 80153a6:	d01d      	beq.n	80153e4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80153a8:	e043      	b.n	8015432 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	68ba      	ldr	r2, [r7, #8]
 80153ae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	88fa      	ldrh	r2, [r7, #6]
 80153b4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	2201      	movs	r2, #1
 80153ba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2202      	movs	r2, #2
 80153c0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80153c2:	2301      	movs	r3, #1
 80153c4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	2203      	movs	r2, #3
 80153ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80153da:	2200      	movs	r2, #0
 80153dc:	4619      	mov	r1, r3
 80153de:	f003 fe1d 	bl	801901c <osMessagePut>
      break;
 80153e2:	e026      	b.n	8015432 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80153e4:	68f8      	ldr	r0, [r7, #12]
 80153e6:	f000 f829 	bl	801543c <USBH_HandleControl>
 80153ea:	4603      	mov	r3, r0
 80153ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80153ee:	7dfb      	ldrb	r3, [r7, #23]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d002      	beq.n	80153fa <USBH_CtlReq+0x70>
 80153f4:	7dfb      	ldrb	r3, [r7, #23]
 80153f6:	2b03      	cmp	r3, #3
 80153f8:	d106      	bne.n	8015408 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	2201      	movs	r2, #1
 80153fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	2200      	movs	r2, #0
 8015404:	761a      	strb	r2, [r3, #24]
 8015406:	e005      	b.n	8015414 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8015408:	7dfb      	ldrb	r3, [r7, #23]
 801540a:	2b02      	cmp	r3, #2
 801540c:	d102      	bne.n	8015414 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	2201      	movs	r2, #1
 8015412:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2203      	movs	r2, #3
 8015418:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015428:	2200      	movs	r2, #0
 801542a:	4619      	mov	r1, r3
 801542c:	f003 fdf6 	bl	801901c <osMessagePut>
      break;
 8015430:	bf00      	nop
  }
  return status;
 8015432:	7dfb      	ldrb	r3, [r7, #23]
}
 8015434:	4618      	mov	r0, r3
 8015436:	3718      	adds	r7, #24
 8015438:	46bd      	mov	sp, r7
 801543a:	bd80      	pop	{r7, pc}

0801543c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af02      	add	r7, sp, #8
 8015442:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8015444:	2301      	movs	r3, #1
 8015446:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015448:	2300      	movs	r3, #0
 801544a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	7e1b      	ldrb	r3, [r3, #24]
 8015450:	3b01      	subs	r3, #1
 8015452:	2b0a      	cmp	r3, #10
 8015454:	f200 8232 	bhi.w	80158bc <USBH_HandleControl+0x480>
 8015458:	a201      	add	r2, pc, #4	; (adr r2, 8015460 <USBH_HandleControl+0x24>)
 801545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801545e:	bf00      	nop
 8015460:	0801548d 	.word	0x0801548d
 8015464:	080154a7 	.word	0x080154a7
 8015468:	08015549 	.word	0x08015549
 801546c:	0801556f 	.word	0x0801556f
 8015470:	080155fb 	.word	0x080155fb
 8015474:	08015625 	.word	0x08015625
 8015478:	080156e7 	.word	0x080156e7
 801547c:	08015709 	.word	0x08015709
 8015480:	0801579b 	.word	0x0801579b
 8015484:	080157c1 	.word	0x080157c1
 8015488:	08015853 	.word	0x08015853
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f103 0110 	add.w	r1, r3, #16
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	795b      	ldrb	r3, [r3, #5]
 8015496:	461a      	mov	r2, r3
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f000 fa23 	bl	80158e4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2202      	movs	r2, #2
 80154a2:	761a      	strb	r2, [r3, #24]
      break;
 80154a4:	e215      	b.n	80158d2 <USBH_HandleControl+0x496>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	795b      	ldrb	r3, [r3, #5]
 80154aa:	4619      	mov	r1, r3
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f006 fe23 	bl	801c0f8 <USBH_LL_GetURBState>
 80154b2:	4603      	mov	r3, r0
 80154b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80154b6:	7bbb      	ldrb	r3, [r7, #14]
 80154b8:	2b01      	cmp	r3, #1
 80154ba:	d12c      	bne.n	8015516 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	7c1b      	ldrb	r3, [r3, #16]
 80154c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80154c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	8adb      	ldrh	r3, [r3, #22]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d00a      	beq.n	80154e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80154ce:	7b7b      	ldrb	r3, [r7, #13]
 80154d0:	2b80      	cmp	r3, #128	; 0x80
 80154d2:	d103      	bne.n	80154dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2203      	movs	r2, #3
 80154d8:	761a      	strb	r2, [r3, #24]
 80154da:	e00d      	b.n	80154f8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2205      	movs	r2, #5
 80154e0:	761a      	strb	r2, [r3, #24]
 80154e2:	e009      	b.n	80154f8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80154e4:	7b7b      	ldrb	r3, [r7, #13]
 80154e6:	2b80      	cmp	r3, #128	; 0x80
 80154e8:	d103      	bne.n	80154f2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2209      	movs	r2, #9
 80154ee:	761a      	strb	r2, [r3, #24]
 80154f0:	e002      	b.n	80154f8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2207      	movs	r2, #7
 80154f6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2203      	movs	r2, #3
 80154fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801550c:	2200      	movs	r2, #0
 801550e:	4619      	mov	r1, r3
 8015510:	f003 fd84 	bl	801901c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015514:	e1d4      	b.n	80158c0 <USBH_HandleControl+0x484>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8015516:	7bbb      	ldrb	r3, [r7, #14]
 8015518:	2b04      	cmp	r3, #4
 801551a:	d003      	beq.n	8015524 <USBH_HandleControl+0xe8>
 801551c:	7bbb      	ldrb	r3, [r7, #14]
 801551e:	2b02      	cmp	r3, #2
 8015520:	f040 81ce 	bne.w	80158c0 <USBH_HandleControl+0x484>
          phost->Control.state = CTRL_ERROR;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	220b      	movs	r2, #11
 8015528:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2203      	movs	r2, #3
 801552e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801553e:	2200      	movs	r2, #0
 8015540:	4619      	mov	r1, r3
 8015542:	f003 fd6b 	bl	801901c <osMessagePut>
      break;
 8015546:	e1bb      	b.n	80158c0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801554e:	b29a      	uxth	r2, r3
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6899      	ldr	r1, [r3, #8]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	899a      	ldrh	r2, [r3, #12]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	791b      	ldrb	r3, [r3, #4]
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f000 f9fe 	bl	8015962 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2204      	movs	r2, #4
 801556a:	761a      	strb	r2, [r3, #24]
      break;
 801556c:	e1b1      	b.n	80158d2 <USBH_HandleControl+0x496>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	791b      	ldrb	r3, [r3, #4]
 8015572:	4619      	mov	r1, r3
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f006 fdbf 	bl	801c0f8 <USBH_LL_GetURBState>
 801557a:	4603      	mov	r3, r0
 801557c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801557e:	7bbb      	ldrb	r3, [r7, #14]
 8015580:	2b01      	cmp	r3, #1
 8015582:	d110      	bne.n	80155a6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	2209      	movs	r2, #9
 8015588:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2203      	movs	r2, #3
 801558e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801559e:	2200      	movs	r2, #0
 80155a0:	4619      	mov	r1, r3
 80155a2:	f003 fd3b 	bl	801901c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80155a6:	7bbb      	ldrb	r3, [r7, #14]
 80155a8:	2b05      	cmp	r3, #5
 80155aa:	d110      	bne.n	80155ce <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80155ac:	2303      	movs	r3, #3
 80155ae:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2203      	movs	r2, #3
 80155b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80155c4:	2200      	movs	r2, #0
 80155c6:	4619      	mov	r1, r3
 80155c8:	f003 fd28 	bl	801901c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80155cc:	e17a      	b.n	80158c4 <USBH_HandleControl+0x488>
        if (URB_Status == USBH_URB_ERROR)
 80155ce:	7bbb      	ldrb	r3, [r7, #14]
 80155d0:	2b04      	cmp	r3, #4
 80155d2:	f040 8177 	bne.w	80158c4 <USBH_HandleControl+0x488>
          phost->Control.state = CTRL_ERROR;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	220b      	movs	r2, #11
 80155da:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2203      	movs	r2, #3
 80155e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80155f0:	2200      	movs	r2, #0
 80155f2:	4619      	mov	r1, r3
 80155f4:	f003 fd12 	bl	801901c <osMessagePut>
      break;
 80155f8:	e164      	b.n	80158c4 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	6899      	ldr	r1, [r3, #8]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	899a      	ldrh	r2, [r3, #12]
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	795b      	ldrb	r3, [r3, #5]
 8015606:	2001      	movs	r0, #1
 8015608:	9000      	str	r0, [sp, #0]
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f000 f984 	bl	8015918 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015616:	b29a      	uxth	r2, r3
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2206      	movs	r2, #6
 8015620:	761a      	strb	r2, [r3, #24]
      break;
 8015622:	e156      	b.n	80158d2 <USBH_HandleControl+0x496>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	795b      	ldrb	r3, [r3, #5]
 8015628:	4619      	mov	r1, r3
 801562a:	6878      	ldr	r0, [r7, #4]
 801562c:	f006 fd64 	bl	801c0f8 <USBH_LL_GetURBState>
 8015630:	4603      	mov	r3, r0
 8015632:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015634:	7bbb      	ldrb	r3, [r7, #14]
 8015636:	2b01      	cmp	r3, #1
 8015638:	d111      	bne.n	801565e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2207      	movs	r2, #7
 801563e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2203      	movs	r2, #3
 8015644:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015654:	2200      	movs	r2, #0
 8015656:	4619      	mov	r1, r3
 8015658:	f003 fce0 	bl	801901c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801565c:	e134      	b.n	80158c8 <USBH_HandleControl+0x48c>
      else if (URB_Status == USBH_URB_STALL)
 801565e:	7bbb      	ldrb	r3, [r7, #14]
 8015660:	2b05      	cmp	r3, #5
 8015662:	d113      	bne.n	801568c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	220c      	movs	r2, #12
 8015668:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801566a:	2303      	movs	r3, #3
 801566c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2203      	movs	r2, #3
 8015672:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015682:	2200      	movs	r2, #0
 8015684:	4619      	mov	r1, r3
 8015686:	f003 fcc9 	bl	801901c <osMessagePut>
      break;
 801568a:	e11d      	b.n	80158c8 <USBH_HandleControl+0x48c>
      else if (URB_Status == USBH_URB_NOTREADY)
 801568c:	7bbb      	ldrb	r3, [r7, #14]
 801568e:	2b02      	cmp	r3, #2
 8015690:	d111      	bne.n	80156b6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2205      	movs	r2, #5
 8015696:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2203      	movs	r2, #3
 801569c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80156ac:	2200      	movs	r2, #0
 80156ae:	4619      	mov	r1, r3
 80156b0:	f003 fcb4 	bl	801901c <osMessagePut>
      break;
 80156b4:	e108      	b.n	80158c8 <USBH_HandleControl+0x48c>
        if (URB_Status == USBH_URB_ERROR)
 80156b6:	7bbb      	ldrb	r3, [r7, #14]
 80156b8:	2b04      	cmp	r3, #4
 80156ba:	f040 8105 	bne.w	80158c8 <USBH_HandleControl+0x48c>
          phost->Control.state = CTRL_ERROR;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	220b      	movs	r2, #11
 80156c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80156c4:	2302      	movs	r3, #2
 80156c6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2203      	movs	r2, #3
 80156cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80156dc:	2200      	movs	r2, #0
 80156de:	4619      	mov	r1, r3
 80156e0:	f003 fc9c 	bl	801901c <osMessagePut>
      break;
 80156e4:	e0f0      	b.n	80158c8 <USBH_HandleControl+0x48c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	791b      	ldrb	r3, [r3, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	2100      	movs	r1, #0
 80156ee:	6878      	ldr	r0, [r7, #4]
 80156f0:	f000 f937 	bl	8015962 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80156fa:	b29a      	uxth	r2, r3
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2208      	movs	r2, #8
 8015704:	761a      	strb	r2, [r3, #24]

      break;
 8015706:	e0e4      	b.n	80158d2 <USBH_HandleControl+0x496>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	791b      	ldrb	r3, [r3, #4]
 801570c:	4619      	mov	r1, r3
 801570e:	6878      	ldr	r0, [r7, #4]
 8015710:	f006 fcf2 	bl	801c0f8 <USBH_LL_GetURBState>
 8015714:	4603      	mov	r3, r0
 8015716:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015718:	7bbb      	ldrb	r3, [r7, #14]
 801571a:	2b01      	cmp	r3, #1
 801571c:	d113      	bne.n	8015746 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	220d      	movs	r2, #13
 8015722:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8015724:	2300      	movs	r3, #0
 8015726:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2203      	movs	r2, #3
 801572c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801573c:	2200      	movs	r2, #0
 801573e:	4619      	mov	r1, r3
 8015740:	f003 fc6c 	bl	801901c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015744:	e0c2      	b.n	80158cc <USBH_HandleControl+0x490>
      else if (URB_Status == USBH_URB_ERROR)
 8015746:	7bbb      	ldrb	r3, [r7, #14]
 8015748:	2b04      	cmp	r3, #4
 801574a:	d111      	bne.n	8015770 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	220b      	movs	r2, #11
 8015750:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	2203      	movs	r2, #3
 8015756:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015766:	2200      	movs	r2, #0
 8015768:	4619      	mov	r1, r3
 801576a:	f003 fc57 	bl	801901c <osMessagePut>
      break;
 801576e:	e0ad      	b.n	80158cc <USBH_HandleControl+0x490>
        if (URB_Status == USBH_URB_STALL)
 8015770:	7bbb      	ldrb	r3, [r7, #14]
 8015772:	2b05      	cmp	r3, #5
 8015774:	f040 80aa 	bne.w	80158cc <USBH_HandleControl+0x490>
          status = USBH_NOT_SUPPORTED;
 8015778:	2303      	movs	r3, #3
 801577a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2203      	movs	r2, #3
 8015780:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015790:	2200      	movs	r2, #0
 8015792:	4619      	mov	r1, r3
 8015794:	f003 fc42 	bl	801901c <osMessagePut>
      break;
 8015798:	e098      	b.n	80158cc <USBH_HandleControl+0x490>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	795b      	ldrb	r3, [r3, #5]
 801579e:	2201      	movs	r2, #1
 80157a0:	9200      	str	r2, [sp, #0]
 80157a2:	2200      	movs	r2, #0
 80157a4:	2100      	movs	r1, #0
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f000 f8b6 	bl	8015918 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80157b2:	b29a      	uxth	r2, r3
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	220a      	movs	r2, #10
 80157bc:	761a      	strb	r2, [r3, #24]
      break;
 80157be:	e088      	b.n	80158d2 <USBH_HandleControl+0x496>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	795b      	ldrb	r3, [r3, #5]
 80157c4:	4619      	mov	r1, r3
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f006 fc96 	bl	801c0f8 <USBH_LL_GetURBState>
 80157cc:	4603      	mov	r3, r0
 80157ce:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80157d0:	7bbb      	ldrb	r3, [r7, #14]
 80157d2:	2b01      	cmp	r3, #1
 80157d4:	d113      	bne.n	80157fe <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80157d6:	2300      	movs	r3, #0
 80157d8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	220d      	movs	r2, #13
 80157de:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2203      	movs	r2, #3
 80157e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80157f4:	2200      	movs	r2, #0
 80157f6:	4619      	mov	r1, r3
 80157f8:	f003 fc10 	bl	801901c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80157fc:	e068      	b.n	80158d0 <USBH_HandleControl+0x494>
      else if (URB_Status == USBH_URB_NOTREADY)
 80157fe:	7bbb      	ldrb	r3, [r7, #14]
 8015800:	2b02      	cmp	r3, #2
 8015802:	d111      	bne.n	8015828 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2209      	movs	r2, #9
 8015808:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	2203      	movs	r2, #3
 801580e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801581e:	2200      	movs	r2, #0
 8015820:	4619      	mov	r1, r3
 8015822:	f003 fbfb 	bl	801901c <osMessagePut>
      break;
 8015826:	e053      	b.n	80158d0 <USBH_HandleControl+0x494>
        if (URB_Status == USBH_URB_ERROR)
 8015828:	7bbb      	ldrb	r3, [r7, #14]
 801582a:	2b04      	cmp	r3, #4
 801582c:	d150      	bne.n	80158d0 <USBH_HandleControl+0x494>
          phost->Control.state = CTRL_ERROR;
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	220b      	movs	r2, #11
 8015832:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2203      	movs	r2, #3
 8015838:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015848:	2200      	movs	r2, #0
 801584a:	4619      	mov	r1, r3
 801584c:	f003 fbe6 	bl	801901c <osMessagePut>
      break;
 8015850:	e03e      	b.n	80158d0 <USBH_HandleControl+0x494>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	7e5b      	ldrb	r3, [r3, #25]
 8015856:	3301      	adds	r3, #1
 8015858:	b2da      	uxtb	r2, r3
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	765a      	strb	r2, [r3, #25]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	7e5b      	ldrb	r3, [r3, #25]
 8015862:	2b02      	cmp	r3, #2
 8015864:	d806      	bhi.n	8015874 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2201      	movs	r2, #1
 801586a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	2201      	movs	r2, #1
 8015870:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8015872:	e02e      	b.n	80158d2 <USBH_HandleControl+0x496>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801587a:	2106      	movs	r1, #6
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2200      	movs	r2, #0
 8015884:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8015886:	4815      	ldr	r0, [pc, #84]	; (80158dc <USBH_HandleControl+0x4a0>)
 8015888:	f006 feec 	bl	801c664 <iprintf>
 801588c:	4814      	ldr	r0, [pc, #80]	; (80158e0 <USBH_HandleControl+0x4a4>)
 801588e:	f006 fee9 	bl	801c664 <iprintf>
 8015892:	200a      	movs	r0, #10
 8015894:	f006 fefe 	bl	801c694 <putchar>
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	795b      	ldrb	r3, [r3, #5]
 801589c:	4619      	mov	r1, r3
 801589e:	6878      	ldr	r0, [r7, #4]
 80158a0:	f000 f8ec 	bl	8015a7c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	791b      	ldrb	r3, [r3, #4]
 80158a8:	4619      	mov	r1, r3
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f000 f8e6 	bl	8015a7c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	2200      	movs	r2, #0
 80158b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80158b6:	2302      	movs	r3, #2
 80158b8:	73fb      	strb	r3, [r7, #15]
      break;
 80158ba:	e00a      	b.n	80158d2 <USBH_HandleControl+0x496>

    default:
      break;
 80158bc:	bf00      	nop
 80158be:	e008      	b.n	80158d2 <USBH_HandleControl+0x496>
      break;
 80158c0:	bf00      	nop
 80158c2:	e006      	b.n	80158d2 <USBH_HandleControl+0x496>
      break;
 80158c4:	bf00      	nop
 80158c6:	e004      	b.n	80158d2 <USBH_HandleControl+0x496>
      break;
 80158c8:	bf00      	nop
 80158ca:	e002      	b.n	80158d2 <USBH_HandleControl+0x496>
      break;
 80158cc:	bf00      	nop
 80158ce:	e000      	b.n	80158d2 <USBH_HandleControl+0x496>
      break;
 80158d0:	bf00      	nop
  }

  return status;
 80158d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	3710      	adds	r7, #16
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}
 80158dc:	0801e0c4 	.word	0x0801e0c4
 80158e0:	0801e0cc 	.word	0x0801e0cc

080158e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b088      	sub	sp, #32
 80158e8:	af04      	add	r7, sp, #16
 80158ea:	60f8      	str	r0, [r7, #12]
 80158ec:	60b9      	str	r1, [r7, #8]
 80158ee:	4613      	mov	r3, r2
 80158f0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80158f2:	79f9      	ldrb	r1, [r7, #7]
 80158f4:	2300      	movs	r3, #0
 80158f6:	9303      	str	r3, [sp, #12]
 80158f8:	2308      	movs	r3, #8
 80158fa:	9302      	str	r3, [sp, #8]
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	9301      	str	r3, [sp, #4]
 8015900:	2300      	movs	r3, #0
 8015902:	9300      	str	r3, [sp, #0]
 8015904:	2300      	movs	r3, #0
 8015906:	2200      	movs	r2, #0
 8015908:	68f8      	ldr	r0, [r7, #12]
 801590a:	f006 fbc4 	bl	801c096 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801590e:	2300      	movs	r3, #0
}
 8015910:	4618      	mov	r0, r3
 8015912:	3710      	adds	r7, #16
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}

08015918 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b088      	sub	sp, #32
 801591c:	af04      	add	r7, sp, #16
 801591e:	60f8      	str	r0, [r7, #12]
 8015920:	60b9      	str	r1, [r7, #8]
 8015922:	4611      	mov	r1, r2
 8015924:	461a      	mov	r2, r3
 8015926:	460b      	mov	r3, r1
 8015928:	80fb      	strh	r3, [r7, #6]
 801592a:	4613      	mov	r3, r2
 801592c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015934:	2b00      	cmp	r3, #0
 8015936:	d001      	beq.n	801593c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8015938:	2300      	movs	r3, #0
 801593a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801593c:	7979      	ldrb	r1, [r7, #5]
 801593e:	7e3b      	ldrb	r3, [r7, #24]
 8015940:	9303      	str	r3, [sp, #12]
 8015942:	88fb      	ldrh	r3, [r7, #6]
 8015944:	9302      	str	r3, [sp, #8]
 8015946:	68bb      	ldr	r3, [r7, #8]
 8015948:	9301      	str	r3, [sp, #4]
 801594a:	2301      	movs	r3, #1
 801594c:	9300      	str	r3, [sp, #0]
 801594e:	2300      	movs	r3, #0
 8015950:	2200      	movs	r2, #0
 8015952:	68f8      	ldr	r0, [r7, #12]
 8015954:	f006 fb9f 	bl	801c096 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8015958:	2300      	movs	r3, #0
}
 801595a:	4618      	mov	r0, r3
 801595c:	3710      	adds	r7, #16
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}

08015962 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8015962:	b580      	push	{r7, lr}
 8015964:	b088      	sub	sp, #32
 8015966:	af04      	add	r7, sp, #16
 8015968:	60f8      	str	r0, [r7, #12]
 801596a:	60b9      	str	r1, [r7, #8]
 801596c:	4611      	mov	r1, r2
 801596e:	461a      	mov	r2, r3
 8015970:	460b      	mov	r3, r1
 8015972:	80fb      	strh	r3, [r7, #6]
 8015974:	4613      	mov	r3, r2
 8015976:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015978:	7979      	ldrb	r1, [r7, #5]
 801597a:	2300      	movs	r3, #0
 801597c:	9303      	str	r3, [sp, #12]
 801597e:	88fb      	ldrh	r3, [r7, #6]
 8015980:	9302      	str	r3, [sp, #8]
 8015982:	68bb      	ldr	r3, [r7, #8]
 8015984:	9301      	str	r3, [sp, #4]
 8015986:	2301      	movs	r3, #1
 8015988:	9300      	str	r3, [sp, #0]
 801598a:	2300      	movs	r3, #0
 801598c:	2201      	movs	r2, #1
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	f006 fb81 	bl	801c096 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8015994:	2300      	movs	r3, #0

}
 8015996:	4618      	mov	r0, r3
 8015998:	3710      	adds	r7, #16
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}

0801599e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 801599e:	b580      	push	{r7, lr}
 80159a0:	b088      	sub	sp, #32
 80159a2:	af04      	add	r7, sp, #16
 80159a4:	60f8      	str	r0, [r7, #12]
 80159a6:	60b9      	str	r1, [r7, #8]
 80159a8:	4611      	mov	r1, r2
 80159aa:	461a      	mov	r2, r3
 80159ac:	460b      	mov	r3, r1
 80159ae:	71fb      	strb	r3, [r7, #7]
 80159b0:	4613      	mov	r3, r2
 80159b2:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80159b4:	79fb      	ldrb	r3, [r7, #7]
 80159b6:	b29b      	uxth	r3, r3
 80159b8:	79b9      	ldrb	r1, [r7, #6]
 80159ba:	2200      	movs	r2, #0
 80159bc:	9203      	str	r2, [sp, #12]
 80159be:	9302      	str	r3, [sp, #8]
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	9301      	str	r3, [sp, #4]
 80159c4:	2301      	movs	r3, #1
 80159c6:	9300      	str	r3, [sp, #0]
 80159c8:	2303      	movs	r3, #3
 80159ca:	2201      	movs	r2, #1
 80159cc:	68f8      	ldr	r0, [r7, #12]
 80159ce:	f006 fb62 	bl	801c096 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 80159d2:	2300      	movs	r3, #0
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3710      	adds	r7, #16
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}

080159dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b086      	sub	sp, #24
 80159e0:	af04      	add	r7, sp, #16
 80159e2:	6078      	str	r0, [r7, #4]
 80159e4:	4608      	mov	r0, r1
 80159e6:	4611      	mov	r1, r2
 80159e8:	461a      	mov	r2, r3
 80159ea:	4603      	mov	r3, r0
 80159ec:	70fb      	strb	r3, [r7, #3]
 80159ee:	460b      	mov	r3, r1
 80159f0:	70bb      	strb	r3, [r7, #2]
 80159f2:	4613      	mov	r3, r2
 80159f4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80159f6:	7878      	ldrb	r0, [r7, #1]
 80159f8:	78ba      	ldrb	r2, [r7, #2]
 80159fa:	78f9      	ldrb	r1, [r7, #3]
 80159fc:	8b3b      	ldrh	r3, [r7, #24]
 80159fe:	9302      	str	r3, [sp, #8]
 8015a00:	7d3b      	ldrb	r3, [r7, #20]
 8015a02:	9301      	str	r3, [sp, #4]
 8015a04:	7c3b      	ldrb	r3, [r7, #16]
 8015a06:	9300      	str	r3, [sp, #0]
 8015a08:	4603      	mov	r3, r0
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f006 faf5 	bl	801bffa <USBH_LL_OpenPipe>

  return USBH_OK;
 8015a10:	2300      	movs	r3, #0
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	3708      	adds	r7, #8
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}

08015a1a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8015a1a:	b580      	push	{r7, lr}
 8015a1c:	b082      	sub	sp, #8
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	6078      	str	r0, [r7, #4]
 8015a22:	460b      	mov	r3, r1
 8015a24:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8015a26:	78fb      	ldrb	r3, [r7, #3]
 8015a28:	4619      	mov	r1, r3
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f006 fb14 	bl	801c058 <USBH_LL_ClosePipe>

  return USBH_OK;
 8015a30:	2300      	movs	r3, #0
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	3708      	adds	r7, #8
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}

08015a3a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b084      	sub	sp, #16
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
 8015a42:	460b      	mov	r3, r1
 8015a44:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f000 f836 	bl	8015ab8 <USBH_GetFreePipe>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8015a50:	89fb      	ldrh	r3, [r7, #14]
 8015a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a56:	4293      	cmp	r3, r2
 8015a58:	d00a      	beq.n	8015a70 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8015a5a:	78fa      	ldrb	r2, [r7, #3]
 8015a5c:	89fb      	ldrh	r3, [r7, #14]
 8015a5e:	f003 030f 	and.w	r3, r3, #15
 8015a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015a66:	6879      	ldr	r1, [r7, #4]
 8015a68:	33e0      	adds	r3, #224	; 0xe0
 8015a6a:	009b      	lsls	r3, r3, #2
 8015a6c:	440b      	add	r3, r1
 8015a6e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8015a70:	89fb      	ldrh	r3, [r7, #14]
 8015a72:	b2db      	uxtb	r3, r3
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3710      	adds	r7, #16
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}

08015a7c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b083      	sub	sp, #12
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	460b      	mov	r3, r1
 8015a86:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8015a88:	78fb      	ldrb	r3, [r7, #3]
 8015a8a:	2b0a      	cmp	r3, #10
 8015a8c:	d80d      	bhi.n	8015aaa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8015a8e:	78fb      	ldrb	r3, [r7, #3]
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	33e0      	adds	r3, #224	; 0xe0
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	4413      	add	r3, r2
 8015a98:	685a      	ldr	r2, [r3, #4]
 8015a9a:	78fb      	ldrb	r3, [r7, #3]
 8015a9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8015aa0:	6879      	ldr	r1, [r7, #4]
 8015aa2:	33e0      	adds	r3, #224	; 0xe0
 8015aa4:	009b      	lsls	r3, r3, #2
 8015aa6:	440b      	add	r3, r1
 8015aa8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8015aaa:	2300      	movs	r3, #0
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	370c      	adds	r7, #12
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab6:	4770      	bx	lr

08015ab8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8015ab8:	b480      	push	{r7}
 8015aba:	b085      	sub	sp, #20
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	73fb      	strb	r3, [r7, #15]
 8015ac8:	e00f      	b.n	8015aea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8015aca:	7bfb      	ldrb	r3, [r7, #15]
 8015acc:	687a      	ldr	r2, [r7, #4]
 8015ace:	33e0      	adds	r3, #224	; 0xe0
 8015ad0:	009b      	lsls	r3, r3, #2
 8015ad2:	4413      	add	r3, r2
 8015ad4:	685b      	ldr	r3, [r3, #4]
 8015ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d102      	bne.n	8015ae4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8015ade:	7bfb      	ldrb	r3, [r7, #15]
 8015ae0:	b29b      	uxth	r3, r3
 8015ae2:	e007      	b.n	8015af4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8015ae4:	7bfb      	ldrb	r3, [r7, #15]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	73fb      	strb	r3, [r7, #15]
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
 8015aec:	2b0a      	cmp	r3, #10
 8015aee:	d9ec      	bls.n	8015aca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8015af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3714      	adds	r7, #20
 8015af8:	46bd      	mov	sp, r7
 8015afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afe:	4770      	bx	lr

08015b00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	4603      	mov	r3, r0
 8015b08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8015b0a:	79fb      	ldrb	r3, [r7, #7]
 8015b0c:	4a08      	ldr	r2, [pc, #32]	; (8015b30 <disk_status+0x30>)
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	4413      	add	r3, r2
 8015b12:	685b      	ldr	r3, [r3, #4]
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	79fa      	ldrb	r2, [r7, #7]
 8015b18:	4905      	ldr	r1, [pc, #20]	; (8015b30 <disk_status+0x30>)
 8015b1a:	440a      	add	r2, r1
 8015b1c:	7a12      	ldrb	r2, [r2, #8]
 8015b1e:	4610      	mov	r0, r2
 8015b20:	4798      	blx	r3
 8015b22:	4603      	mov	r3, r0
 8015b24:	73fb      	strb	r3, [r7, #15]
  return stat;
 8015b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b28:	4618      	mov	r0, r3
 8015b2a:	3710      	adds	r7, #16
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}
 8015b30:	20000554 	.word	0x20000554

08015b34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b084      	sub	sp, #16
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015b42:	79fb      	ldrb	r3, [r7, #7]
 8015b44:	4a0d      	ldr	r2, [pc, #52]	; (8015b7c <disk_initialize+0x48>)
 8015b46:	5cd3      	ldrb	r3, [r2, r3]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d111      	bne.n	8015b70 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8015b4c:	79fb      	ldrb	r3, [r7, #7]
 8015b4e:	4a0b      	ldr	r2, [pc, #44]	; (8015b7c <disk_initialize+0x48>)
 8015b50:	2101      	movs	r1, #1
 8015b52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015b54:	79fb      	ldrb	r3, [r7, #7]
 8015b56:	4a09      	ldr	r2, [pc, #36]	; (8015b7c <disk_initialize+0x48>)
 8015b58:	009b      	lsls	r3, r3, #2
 8015b5a:	4413      	add	r3, r2
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	79fa      	ldrb	r2, [r7, #7]
 8015b62:	4906      	ldr	r1, [pc, #24]	; (8015b7c <disk_initialize+0x48>)
 8015b64:	440a      	add	r2, r1
 8015b66:	7a12      	ldrb	r2, [r2, #8]
 8015b68:	4610      	mov	r0, r2
 8015b6a:	4798      	blx	r3
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8015b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	3710      	adds	r7, #16
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}
 8015b7a:	bf00      	nop
 8015b7c:	20000554 	.word	0x20000554

08015b80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015b80:	b590      	push	{r4, r7, lr}
 8015b82:	b087      	sub	sp, #28
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	60b9      	str	r1, [r7, #8]
 8015b88:	607a      	str	r2, [r7, #4]
 8015b8a:	603b      	str	r3, [r7, #0]
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015b90:	7bfb      	ldrb	r3, [r7, #15]
 8015b92:	4a0a      	ldr	r2, [pc, #40]	; (8015bbc <disk_read+0x3c>)
 8015b94:	009b      	lsls	r3, r3, #2
 8015b96:	4413      	add	r3, r2
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	689c      	ldr	r4, [r3, #8]
 8015b9c:	7bfb      	ldrb	r3, [r7, #15]
 8015b9e:	4a07      	ldr	r2, [pc, #28]	; (8015bbc <disk_read+0x3c>)
 8015ba0:	4413      	add	r3, r2
 8015ba2:	7a18      	ldrb	r0, [r3, #8]
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	687a      	ldr	r2, [r7, #4]
 8015ba8:	68b9      	ldr	r1, [r7, #8]
 8015baa:	47a0      	blx	r4
 8015bac:	4603      	mov	r3, r0
 8015bae:	75fb      	strb	r3, [r7, #23]
  return res;
 8015bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	371c      	adds	r7, #28
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd90      	pop	{r4, r7, pc}
 8015bba:	bf00      	nop
 8015bbc:	20000554 	.word	0x20000554

08015bc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015bc0:	b590      	push	{r4, r7, lr}
 8015bc2:	b087      	sub	sp, #28
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	60b9      	str	r1, [r7, #8]
 8015bc8:	607a      	str	r2, [r7, #4]
 8015bca:	603b      	str	r3, [r7, #0]
 8015bcc:	4603      	mov	r3, r0
 8015bce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015bd0:	7bfb      	ldrb	r3, [r7, #15]
 8015bd2:	4a0a      	ldr	r2, [pc, #40]	; (8015bfc <disk_write+0x3c>)
 8015bd4:	009b      	lsls	r3, r3, #2
 8015bd6:	4413      	add	r3, r2
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	68dc      	ldr	r4, [r3, #12]
 8015bdc:	7bfb      	ldrb	r3, [r7, #15]
 8015bde:	4a07      	ldr	r2, [pc, #28]	; (8015bfc <disk_write+0x3c>)
 8015be0:	4413      	add	r3, r2
 8015be2:	7a18      	ldrb	r0, [r3, #8]
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	687a      	ldr	r2, [r7, #4]
 8015be8:	68b9      	ldr	r1, [r7, #8]
 8015bea:	47a0      	blx	r4
 8015bec:	4603      	mov	r3, r0
 8015bee:	75fb      	strb	r3, [r7, #23]
  return res;
 8015bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	371c      	adds	r7, #28
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd90      	pop	{r4, r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	20000554 	.word	0x20000554

08015c00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	4603      	mov	r3, r0
 8015c08:	603a      	str	r2, [r7, #0]
 8015c0a:	71fb      	strb	r3, [r7, #7]
 8015c0c:	460b      	mov	r3, r1
 8015c0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015c10:	79fb      	ldrb	r3, [r7, #7]
 8015c12:	4a09      	ldr	r2, [pc, #36]	; (8015c38 <disk_ioctl+0x38>)
 8015c14:	009b      	lsls	r3, r3, #2
 8015c16:	4413      	add	r3, r2
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	691b      	ldr	r3, [r3, #16]
 8015c1c:	79fa      	ldrb	r2, [r7, #7]
 8015c1e:	4906      	ldr	r1, [pc, #24]	; (8015c38 <disk_ioctl+0x38>)
 8015c20:	440a      	add	r2, r1
 8015c22:	7a10      	ldrb	r0, [r2, #8]
 8015c24:	79b9      	ldrb	r1, [r7, #6]
 8015c26:	683a      	ldr	r2, [r7, #0]
 8015c28:	4798      	blx	r3
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	73fb      	strb	r3, [r7, #15]
  return res;
 8015c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	3710      	adds	r7, #16
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	20000554 	.word	0x20000554

08015c3c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b085      	sub	sp, #20
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	3301      	adds	r3, #1
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015c4c:	89fb      	ldrh	r3, [r7, #14]
 8015c4e:	021b      	lsls	r3, r3, #8
 8015c50:	b21a      	sxth	r2, r3
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	781b      	ldrb	r3, [r3, #0]
 8015c56:	b21b      	sxth	r3, r3
 8015c58:	4313      	orrs	r3, r2
 8015c5a:	b21b      	sxth	r3, r3
 8015c5c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8015c5e:	89fb      	ldrh	r3, [r7, #14]
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3714      	adds	r7, #20
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr

08015c6c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015c6c:	b480      	push	{r7}
 8015c6e:	b085      	sub	sp, #20
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	3303      	adds	r3, #3
 8015c78:	781b      	ldrb	r3, [r3, #0]
 8015c7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	021b      	lsls	r3, r3, #8
 8015c80:	687a      	ldr	r2, [r7, #4]
 8015c82:	3202      	adds	r2, #2
 8015c84:	7812      	ldrb	r2, [r2, #0]
 8015c86:	4313      	orrs	r3, r2
 8015c88:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	021b      	lsls	r3, r3, #8
 8015c8e:	687a      	ldr	r2, [r7, #4]
 8015c90:	3201      	adds	r2, #1
 8015c92:	7812      	ldrb	r2, [r2, #0]
 8015c94:	4313      	orrs	r3, r2
 8015c96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	021b      	lsls	r3, r3, #8
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	7812      	ldrb	r2, [r2, #0]
 8015ca0:	4313      	orrs	r3, r2
 8015ca2:	60fb      	str	r3, [r7, #12]
	return rv;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3714      	adds	r7, #20
 8015caa:	46bd      	mov	sp, r7
 8015cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb0:	4770      	bx	lr

08015cb2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8015cb2:	b480      	push	{r7}
 8015cb4:	b083      	sub	sp, #12
 8015cb6:	af00      	add	r7, sp, #0
 8015cb8:	6078      	str	r0, [r7, #4]
 8015cba:	460b      	mov	r3, r1
 8015cbc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	1c5a      	adds	r2, r3, #1
 8015cc2:	607a      	str	r2, [r7, #4]
 8015cc4:	887a      	ldrh	r2, [r7, #2]
 8015cc6:	b2d2      	uxtb	r2, r2
 8015cc8:	701a      	strb	r2, [r3, #0]
 8015cca:	887b      	ldrh	r3, [r7, #2]
 8015ccc:	0a1b      	lsrs	r3, r3, #8
 8015cce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	1c5a      	adds	r2, r3, #1
 8015cd4:	607a      	str	r2, [r7, #4]
 8015cd6:	887a      	ldrh	r2, [r7, #2]
 8015cd8:	b2d2      	uxtb	r2, r2
 8015cda:	701a      	strb	r2, [r3, #0]
}
 8015cdc:	bf00      	nop
 8015cde:	370c      	adds	r7, #12
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce6:	4770      	bx	lr

08015ce8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015ce8:	b480      	push	{r7}
 8015cea:	b083      	sub	sp, #12
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
 8015cf0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	1c5a      	adds	r2, r3, #1
 8015cf6:	607a      	str	r2, [r7, #4]
 8015cf8:	683a      	ldr	r2, [r7, #0]
 8015cfa:	b2d2      	uxtb	r2, r2
 8015cfc:	701a      	strb	r2, [r3, #0]
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	0a1b      	lsrs	r3, r3, #8
 8015d02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	1c5a      	adds	r2, r3, #1
 8015d08:	607a      	str	r2, [r7, #4]
 8015d0a:	683a      	ldr	r2, [r7, #0]
 8015d0c:	b2d2      	uxtb	r2, r2
 8015d0e:	701a      	strb	r2, [r3, #0]
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	0a1b      	lsrs	r3, r3, #8
 8015d14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	1c5a      	adds	r2, r3, #1
 8015d1a:	607a      	str	r2, [r7, #4]
 8015d1c:	683a      	ldr	r2, [r7, #0]
 8015d1e:	b2d2      	uxtb	r2, r2
 8015d20:	701a      	strb	r2, [r3, #0]
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	0a1b      	lsrs	r3, r3, #8
 8015d26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	1c5a      	adds	r2, r3, #1
 8015d2c:	607a      	str	r2, [r7, #4]
 8015d2e:	683a      	ldr	r2, [r7, #0]
 8015d30:	b2d2      	uxtb	r2, r2
 8015d32:	701a      	strb	r2, [r3, #0]
}
 8015d34:	bf00      	nop
 8015d36:	370c      	adds	r7, #12
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3e:	4770      	bx	lr

08015d40 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015d40:	b480      	push	{r7}
 8015d42:	b087      	sub	sp, #28
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	60f8      	str	r0, [r7, #12]
 8015d48:	60b9      	str	r1, [r7, #8]
 8015d4a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d00d      	beq.n	8015d76 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015d5a:	693a      	ldr	r2, [r7, #16]
 8015d5c:	1c53      	adds	r3, r2, #1
 8015d5e:	613b      	str	r3, [r7, #16]
 8015d60:	697b      	ldr	r3, [r7, #20]
 8015d62:	1c59      	adds	r1, r3, #1
 8015d64:	6179      	str	r1, [r7, #20]
 8015d66:	7812      	ldrb	r2, [r2, #0]
 8015d68:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	3b01      	subs	r3, #1
 8015d6e:	607b      	str	r3, [r7, #4]
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d1f1      	bne.n	8015d5a <mem_cpy+0x1a>
	}
}
 8015d76:	bf00      	nop
 8015d78:	371c      	adds	r7, #28
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d80:	4770      	bx	lr

08015d82 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8015d82:	b480      	push	{r7}
 8015d84:	b087      	sub	sp, #28
 8015d86:	af00      	add	r7, sp, #0
 8015d88:	60f8      	str	r0, [r7, #12]
 8015d8a:	60b9      	str	r1, [r7, #8]
 8015d8c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	1c5a      	adds	r2, r3, #1
 8015d96:	617a      	str	r2, [r7, #20]
 8015d98:	68ba      	ldr	r2, [r7, #8]
 8015d9a:	b2d2      	uxtb	r2, r2
 8015d9c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	3b01      	subs	r3, #1
 8015da2:	607b      	str	r3, [r7, #4]
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d1f3      	bne.n	8015d92 <mem_set+0x10>
}
 8015daa:	bf00      	nop
 8015dac:	bf00      	nop
 8015dae:	371c      	adds	r7, #28
 8015db0:	46bd      	mov	sp, r7
 8015db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db6:	4770      	bx	lr

08015db8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015db8:	b480      	push	{r7}
 8015dba:	b089      	sub	sp, #36	; 0x24
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	60f8      	str	r0, [r7, #12]
 8015dc0:	60b9      	str	r1, [r7, #8]
 8015dc2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	61fb      	str	r3, [r7, #28]
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015dd0:	69fb      	ldr	r3, [r7, #28]
 8015dd2:	1c5a      	adds	r2, r3, #1
 8015dd4:	61fa      	str	r2, [r7, #28]
 8015dd6:	781b      	ldrb	r3, [r3, #0]
 8015dd8:	4619      	mov	r1, r3
 8015dda:	69bb      	ldr	r3, [r7, #24]
 8015ddc:	1c5a      	adds	r2, r3, #1
 8015dde:	61ba      	str	r2, [r7, #24]
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	1acb      	subs	r3, r1, r3
 8015de4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	3b01      	subs	r3, #1
 8015dea:	607b      	str	r3, [r7, #4]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d002      	beq.n	8015df8 <mem_cmp+0x40>
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d0eb      	beq.n	8015dd0 <mem_cmp+0x18>

	return r;
 8015df8:	697b      	ldr	r3, [r7, #20]
}
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3724      	adds	r7, #36	; 0x24
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e04:	4770      	bx	lr

08015e06 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015e06:	b480      	push	{r7}
 8015e08:	b083      	sub	sp, #12
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	6078      	str	r0, [r7, #4]
 8015e0e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015e10:	e002      	b.n	8015e18 <chk_chr+0x12>
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	3301      	adds	r3, #1
 8015e16:	607b      	str	r3, [r7, #4]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	781b      	ldrb	r3, [r3, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d005      	beq.n	8015e2c <chk_chr+0x26>
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	781b      	ldrb	r3, [r3, #0]
 8015e24:	461a      	mov	r2, r3
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d1f2      	bne.n	8015e12 <chk_chr+0xc>
	return *str;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	781b      	ldrb	r3, [r3, #0]
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	370c      	adds	r7, #12
 8015e34:	46bd      	mov	sp, r7
 8015e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3a:	4770      	bx	lr

08015e3c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b082      	sub	sp, #8
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d009      	beq.n	8015e5e <lock_fs+0x22>
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	691b      	ldr	r3, [r3, #16]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f002 ff14 	bl	8018c7c <ff_req_grant>
 8015e54:	4603      	mov	r3, r0
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d001      	beq.n	8015e5e <lock_fs+0x22>
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	e000      	b.n	8015e60 <lock_fs+0x24>
 8015e5e:	2300      	movs	r3, #0
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3708      	adds	r7, #8
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}

08015e68 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	460b      	mov	r3, r1
 8015e72:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d00d      	beq.n	8015e96 <unlock_fs+0x2e>
 8015e7a:	78fb      	ldrb	r3, [r7, #3]
 8015e7c:	2b0c      	cmp	r3, #12
 8015e7e:	d00a      	beq.n	8015e96 <unlock_fs+0x2e>
 8015e80:	78fb      	ldrb	r3, [r7, #3]
 8015e82:	2b0b      	cmp	r3, #11
 8015e84:	d007      	beq.n	8015e96 <unlock_fs+0x2e>
 8015e86:	78fb      	ldrb	r3, [r7, #3]
 8015e88:	2b0f      	cmp	r3, #15
 8015e8a:	d004      	beq.n	8015e96 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	691b      	ldr	r3, [r3, #16]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f002 ff08 	bl	8018ca6 <ff_rel_grant>
	}
}
 8015e96:	bf00      	nop
 8015e98:	3708      	adds	r7, #8
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
	...

08015ea0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015ea0:	b480      	push	{r7}
 8015ea2:	b085      	sub	sp, #20
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
 8015ea8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015eaa:	2300      	movs	r3, #0
 8015eac:	60bb      	str	r3, [r7, #8]
 8015eae:	68bb      	ldr	r3, [r7, #8]
 8015eb0:	60fb      	str	r3, [r7, #12]
 8015eb2:	e029      	b.n	8015f08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8015eb4:	4a27      	ldr	r2, [pc, #156]	; (8015f54 <chk_lock+0xb4>)
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	011b      	lsls	r3, r3, #4
 8015eba:	4413      	add	r3, r2
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d01d      	beq.n	8015efe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015ec2:	4a24      	ldr	r2, [pc, #144]	; (8015f54 <chk_lock+0xb4>)
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	011b      	lsls	r3, r3, #4
 8015ec8:	4413      	add	r3, r2
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d116      	bne.n	8015f02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8015ed4:	4a1f      	ldr	r2, [pc, #124]	; (8015f54 <chk_lock+0xb4>)
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	011b      	lsls	r3, r3, #4
 8015eda:	4413      	add	r3, r2
 8015edc:	3304      	adds	r3, #4
 8015ede:	681a      	ldr	r2, [r3, #0]
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d10c      	bne.n	8015f02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015ee8:	4a1a      	ldr	r2, [pc, #104]	; (8015f54 <chk_lock+0xb4>)
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	011b      	lsls	r3, r3, #4
 8015eee:	4413      	add	r3, r2
 8015ef0:	3308      	adds	r3, #8
 8015ef2:	681a      	ldr	r2, [r3, #0]
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8015ef8:	429a      	cmp	r2, r3
 8015efa:	d102      	bne.n	8015f02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015efc:	e007      	b.n	8015f0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8015efe:	2301      	movs	r3, #1
 8015f00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	3301      	adds	r3, #1
 8015f06:	60fb      	str	r3, [r7, #12]
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	2b01      	cmp	r3, #1
 8015f0c:	d9d2      	bls.n	8015eb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2b02      	cmp	r3, #2
 8015f12:	d109      	bne.n	8015f28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d102      	bne.n	8015f20 <chk_lock+0x80>
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	2b02      	cmp	r3, #2
 8015f1e:	d101      	bne.n	8015f24 <chk_lock+0x84>
 8015f20:	2300      	movs	r3, #0
 8015f22:	e010      	b.n	8015f46 <chk_lock+0xa6>
 8015f24:	2312      	movs	r3, #18
 8015f26:	e00e      	b.n	8015f46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d108      	bne.n	8015f40 <chk_lock+0xa0>
 8015f2e:	4a09      	ldr	r2, [pc, #36]	; (8015f54 <chk_lock+0xb4>)
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	011b      	lsls	r3, r3, #4
 8015f34:	4413      	add	r3, r2
 8015f36:	330c      	adds	r3, #12
 8015f38:	881b      	ldrh	r3, [r3, #0]
 8015f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f3e:	d101      	bne.n	8015f44 <chk_lock+0xa4>
 8015f40:	2310      	movs	r3, #16
 8015f42:	e000      	b.n	8015f46 <chk_lock+0xa6>
 8015f44:	2300      	movs	r3, #0
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3714      	adds	r7, #20
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f50:	4770      	bx	lr
 8015f52:	bf00      	nop
 8015f54:	20000534 	.word	0x20000534

08015f58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b083      	sub	sp, #12
 8015f5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	607b      	str	r3, [r7, #4]
 8015f62:	e002      	b.n	8015f6a <enq_lock+0x12>
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	3301      	adds	r3, #1
 8015f68:	607b      	str	r3, [r7, #4]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2b01      	cmp	r3, #1
 8015f6e:	d806      	bhi.n	8015f7e <enq_lock+0x26>
 8015f70:	4a09      	ldr	r2, [pc, #36]	; (8015f98 <enq_lock+0x40>)
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	011b      	lsls	r3, r3, #4
 8015f76:	4413      	add	r3, r2
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d1f2      	bne.n	8015f64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2b02      	cmp	r3, #2
 8015f82:	bf14      	ite	ne
 8015f84:	2301      	movne	r3, #1
 8015f86:	2300      	moveq	r3, #0
 8015f88:	b2db      	uxtb	r3, r3
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	370c      	adds	r7, #12
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f94:	4770      	bx	lr
 8015f96:	bf00      	nop
 8015f98:	20000534 	.word	0x20000534

08015f9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b085      	sub	sp, #20
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
 8015fa4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	60fb      	str	r3, [r7, #12]
 8015faa:	e01f      	b.n	8015fec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015fac:	4a41      	ldr	r2, [pc, #260]	; (80160b4 <inc_lock+0x118>)
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	011b      	lsls	r3, r3, #4
 8015fb2:	4413      	add	r3, r2
 8015fb4:	681a      	ldr	r2, [r3, #0]
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d113      	bne.n	8015fe6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8015fbe:	4a3d      	ldr	r2, [pc, #244]	; (80160b4 <inc_lock+0x118>)
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	011b      	lsls	r3, r3, #4
 8015fc4:	4413      	add	r3, r2
 8015fc6:	3304      	adds	r3, #4
 8015fc8:	681a      	ldr	r2, [r3, #0]
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d109      	bne.n	8015fe6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8015fd2:	4a38      	ldr	r2, [pc, #224]	; (80160b4 <inc_lock+0x118>)
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	011b      	lsls	r3, r3, #4
 8015fd8:	4413      	add	r3, r2
 8015fda:	3308      	adds	r3, #8
 8015fdc:	681a      	ldr	r2, [r3, #0]
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d006      	beq.n	8015ff4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	3301      	adds	r3, #1
 8015fea:	60fb      	str	r3, [r7, #12]
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	2b01      	cmp	r3, #1
 8015ff0:	d9dc      	bls.n	8015fac <inc_lock+0x10>
 8015ff2:	e000      	b.n	8015ff6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015ff4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	2b02      	cmp	r3, #2
 8015ffa:	d132      	bne.n	8016062 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	60fb      	str	r3, [r7, #12]
 8016000:	e002      	b.n	8016008 <inc_lock+0x6c>
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	3301      	adds	r3, #1
 8016006:	60fb      	str	r3, [r7, #12]
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	2b01      	cmp	r3, #1
 801600c:	d806      	bhi.n	801601c <inc_lock+0x80>
 801600e:	4a29      	ldr	r2, [pc, #164]	; (80160b4 <inc_lock+0x118>)
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	011b      	lsls	r3, r3, #4
 8016014:	4413      	add	r3, r2
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d1f2      	bne.n	8016002 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	2b02      	cmp	r3, #2
 8016020:	d101      	bne.n	8016026 <inc_lock+0x8a>
 8016022:	2300      	movs	r3, #0
 8016024:	e040      	b.n	80160a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	4922      	ldr	r1, [pc, #136]	; (80160b4 <inc_lock+0x118>)
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	011b      	lsls	r3, r3, #4
 8016030:	440b      	add	r3, r1
 8016032:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	689a      	ldr	r2, [r3, #8]
 8016038:	491e      	ldr	r1, [pc, #120]	; (80160b4 <inc_lock+0x118>)
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	011b      	lsls	r3, r3, #4
 801603e:	440b      	add	r3, r1
 8016040:	3304      	adds	r3, #4
 8016042:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	695a      	ldr	r2, [r3, #20]
 8016048:	491a      	ldr	r1, [pc, #104]	; (80160b4 <inc_lock+0x118>)
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	011b      	lsls	r3, r3, #4
 801604e:	440b      	add	r3, r1
 8016050:	3308      	adds	r3, #8
 8016052:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016054:	4a17      	ldr	r2, [pc, #92]	; (80160b4 <inc_lock+0x118>)
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	011b      	lsls	r3, r3, #4
 801605a:	4413      	add	r3, r2
 801605c:	330c      	adds	r3, #12
 801605e:	2200      	movs	r2, #0
 8016060:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d009      	beq.n	801607c <inc_lock+0xe0>
 8016068:	4a12      	ldr	r2, [pc, #72]	; (80160b4 <inc_lock+0x118>)
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	011b      	lsls	r3, r3, #4
 801606e:	4413      	add	r3, r2
 8016070:	330c      	adds	r3, #12
 8016072:	881b      	ldrh	r3, [r3, #0]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d001      	beq.n	801607c <inc_lock+0xe0>
 8016078:	2300      	movs	r3, #0
 801607a:	e015      	b.n	80160a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801607c:	683b      	ldr	r3, [r7, #0]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d108      	bne.n	8016094 <inc_lock+0xf8>
 8016082:	4a0c      	ldr	r2, [pc, #48]	; (80160b4 <inc_lock+0x118>)
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	011b      	lsls	r3, r3, #4
 8016088:	4413      	add	r3, r2
 801608a:	330c      	adds	r3, #12
 801608c:	881b      	ldrh	r3, [r3, #0]
 801608e:	3301      	adds	r3, #1
 8016090:	b29a      	uxth	r2, r3
 8016092:	e001      	b.n	8016098 <inc_lock+0xfc>
 8016094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016098:	4906      	ldr	r1, [pc, #24]	; (80160b4 <inc_lock+0x118>)
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	011b      	lsls	r3, r3, #4
 801609e:	440b      	add	r3, r1
 80160a0:	330c      	adds	r3, #12
 80160a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	3301      	adds	r3, #1
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3714      	adds	r7, #20
 80160ac:	46bd      	mov	sp, r7
 80160ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b2:	4770      	bx	lr
 80160b4:	20000534 	.word	0x20000534

080160b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80160b8:	b480      	push	{r7}
 80160ba:	b085      	sub	sp, #20
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	3b01      	subs	r3, #1
 80160c4:	607b      	str	r3, [r7, #4]
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2b01      	cmp	r3, #1
 80160ca:	d825      	bhi.n	8016118 <dec_lock+0x60>
		n = Files[i].ctr;
 80160cc:	4a17      	ldr	r2, [pc, #92]	; (801612c <dec_lock+0x74>)
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	011b      	lsls	r3, r3, #4
 80160d2:	4413      	add	r3, r2
 80160d4:	330c      	adds	r3, #12
 80160d6:	881b      	ldrh	r3, [r3, #0]
 80160d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80160da:	89fb      	ldrh	r3, [r7, #14]
 80160dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160e0:	d101      	bne.n	80160e6 <dec_lock+0x2e>
 80160e2:	2300      	movs	r3, #0
 80160e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80160e6:	89fb      	ldrh	r3, [r7, #14]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d002      	beq.n	80160f2 <dec_lock+0x3a>
 80160ec:	89fb      	ldrh	r3, [r7, #14]
 80160ee:	3b01      	subs	r3, #1
 80160f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80160f2:	4a0e      	ldr	r2, [pc, #56]	; (801612c <dec_lock+0x74>)
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	011b      	lsls	r3, r3, #4
 80160f8:	4413      	add	r3, r2
 80160fa:	330c      	adds	r3, #12
 80160fc:	89fa      	ldrh	r2, [r7, #14]
 80160fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016100:	89fb      	ldrh	r3, [r7, #14]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d105      	bne.n	8016112 <dec_lock+0x5a>
 8016106:	4a09      	ldr	r2, [pc, #36]	; (801612c <dec_lock+0x74>)
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	011b      	lsls	r3, r3, #4
 801610c:	4413      	add	r3, r2
 801610e:	2200      	movs	r2, #0
 8016110:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8016112:	2300      	movs	r3, #0
 8016114:	737b      	strb	r3, [r7, #13]
 8016116:	e001      	b.n	801611c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016118:	2302      	movs	r3, #2
 801611a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801611c:	7b7b      	ldrb	r3, [r7, #13]
}
 801611e:	4618      	mov	r0, r3
 8016120:	3714      	adds	r7, #20
 8016122:	46bd      	mov	sp, r7
 8016124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop
 801612c:	20000534 	.word	0x20000534

08016130 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016130:	b480      	push	{r7}
 8016132:	b085      	sub	sp, #20
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016138:	2300      	movs	r3, #0
 801613a:	60fb      	str	r3, [r7, #12]
 801613c:	e010      	b.n	8016160 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801613e:	4a0d      	ldr	r2, [pc, #52]	; (8016174 <clear_lock+0x44>)
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	011b      	lsls	r3, r3, #4
 8016144:	4413      	add	r3, r2
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	687a      	ldr	r2, [r7, #4]
 801614a:	429a      	cmp	r2, r3
 801614c:	d105      	bne.n	801615a <clear_lock+0x2a>
 801614e:	4a09      	ldr	r2, [pc, #36]	; (8016174 <clear_lock+0x44>)
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	011b      	lsls	r3, r3, #4
 8016154:	4413      	add	r3, r2
 8016156:	2200      	movs	r2, #0
 8016158:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	3301      	adds	r3, #1
 801615e:	60fb      	str	r3, [r7, #12]
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	2b01      	cmp	r3, #1
 8016164:	d9eb      	bls.n	801613e <clear_lock+0xe>
	}
}
 8016166:	bf00      	nop
 8016168:	bf00      	nop
 801616a:	3714      	adds	r7, #20
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr
 8016174:	20000534 	.word	0x20000534

08016178 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b086      	sub	sp, #24
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016180:	2300      	movs	r3, #0
 8016182:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	78db      	ldrb	r3, [r3, #3]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d034      	beq.n	80161f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016190:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	7858      	ldrb	r0, [r3, #1]
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801619c:	2301      	movs	r3, #1
 801619e:	697a      	ldr	r2, [r7, #20]
 80161a0:	f7ff fd0e 	bl	8015bc0 <disk_write>
 80161a4:	4603      	mov	r3, r0
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d002      	beq.n	80161b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80161aa:	2301      	movs	r3, #1
 80161ac:	73fb      	strb	r3, [r7, #15]
 80161ae:	e022      	b.n	80161f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	2200      	movs	r2, #0
 80161b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161ba:	697a      	ldr	r2, [r7, #20]
 80161bc:	1ad2      	subs	r2, r2, r3
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	6a1b      	ldr	r3, [r3, #32]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d217      	bcs.n	80161f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	789b      	ldrb	r3, [r3, #2]
 80161ca:	613b      	str	r3, [r7, #16]
 80161cc:	e010      	b.n	80161f0 <sync_window+0x78>
					wsect += fs->fsize;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	6a1b      	ldr	r3, [r3, #32]
 80161d2:	697a      	ldr	r2, [r7, #20]
 80161d4:	4413      	add	r3, r2
 80161d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	7858      	ldrb	r0, [r3, #1]
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80161e2:	2301      	movs	r3, #1
 80161e4:	697a      	ldr	r2, [r7, #20]
 80161e6:	f7ff fceb 	bl	8015bc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	3b01      	subs	r3, #1
 80161ee:	613b      	str	r3, [r7, #16]
 80161f0:	693b      	ldr	r3, [r7, #16]
 80161f2:	2b01      	cmp	r3, #1
 80161f4:	d8eb      	bhi.n	80161ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80161f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80161f8:	4618      	mov	r0, r3
 80161fa:	3718      	adds	r7, #24
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}

08016200 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801620a:	2300      	movs	r3, #0
 801620c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016212:	683a      	ldr	r2, [r7, #0]
 8016214:	429a      	cmp	r2, r3
 8016216:	d01b      	beq.n	8016250 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f7ff ffad 	bl	8016178 <sync_window>
 801621e:	4603      	mov	r3, r0
 8016220:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016222:	7bfb      	ldrb	r3, [r7, #15]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d113      	bne.n	8016250 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	7858      	ldrb	r0, [r3, #1]
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016232:	2301      	movs	r3, #1
 8016234:	683a      	ldr	r2, [r7, #0]
 8016236:	f7ff fca3 	bl	8015b80 <disk_read>
 801623a:	4603      	mov	r3, r0
 801623c:	2b00      	cmp	r3, #0
 801623e:	d004      	beq.n	801624a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016244:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016246:	2301      	movs	r3, #1
 8016248:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	683a      	ldr	r2, [r7, #0]
 801624e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8016250:	7bfb      	ldrb	r3, [r7, #15]
}
 8016252:	4618      	mov	r0, r3
 8016254:	3710      	adds	r7, #16
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}
	...

0801625c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b084      	sub	sp, #16
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f7ff ff87 	bl	8016178 <sync_window>
 801626a:	4603      	mov	r3, r0
 801626c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801626e:	7bfb      	ldrb	r3, [r7, #15]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d158      	bne.n	8016326 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	2b03      	cmp	r3, #3
 801627a:	d148      	bne.n	801630e <sync_fs+0xb2>
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	791b      	ldrb	r3, [r3, #4]
 8016280:	2b01      	cmp	r3, #1
 8016282:	d144      	bne.n	801630e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	3338      	adds	r3, #56	; 0x38
 8016288:	f44f 7200 	mov.w	r2, #512	; 0x200
 801628c:	2100      	movs	r1, #0
 801628e:	4618      	mov	r0, r3
 8016290:	f7ff fd77 	bl	8015d82 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	3338      	adds	r3, #56	; 0x38
 8016298:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801629c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7ff fd06 	bl	8015cb2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	3338      	adds	r3, #56	; 0x38
 80162aa:	4921      	ldr	r1, [pc, #132]	; (8016330 <sync_fs+0xd4>)
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7ff fd1b 	bl	8015ce8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	3338      	adds	r3, #56	; 0x38
 80162b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80162ba:	491e      	ldr	r1, [pc, #120]	; (8016334 <sync_fs+0xd8>)
 80162bc:	4618      	mov	r0, r3
 80162be:	f7ff fd13 	bl	8015ce8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	3338      	adds	r3, #56	; 0x38
 80162c6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	699b      	ldr	r3, [r3, #24]
 80162ce:	4619      	mov	r1, r3
 80162d0:	4610      	mov	r0, r2
 80162d2:	f7ff fd09 	bl	8015ce8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	3338      	adds	r3, #56	; 0x38
 80162da:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	695b      	ldr	r3, [r3, #20]
 80162e2:	4619      	mov	r1, r3
 80162e4:	4610      	mov	r0, r2
 80162e6:	f7ff fcff 	bl	8015ce8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162ee:	1c5a      	adds	r2, r3, #1
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	7858      	ldrb	r0, [r3, #1]
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016302:	2301      	movs	r3, #1
 8016304:	f7ff fc5c 	bl	8015bc0 <disk_write>
			fs->fsi_flag = 0;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2200      	movs	r2, #0
 801630c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	785b      	ldrb	r3, [r3, #1]
 8016312:	2200      	movs	r2, #0
 8016314:	2100      	movs	r1, #0
 8016316:	4618      	mov	r0, r3
 8016318:	f7ff fc72 	bl	8015c00 <disk_ioctl>
 801631c:	4603      	mov	r3, r0
 801631e:	2b00      	cmp	r3, #0
 8016320:	d001      	beq.n	8016326 <sync_fs+0xca>
 8016322:	2301      	movs	r3, #1
 8016324:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016326:	7bfb      	ldrb	r3, [r7, #15]
}
 8016328:	4618      	mov	r0, r3
 801632a:	3710      	adds	r7, #16
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}
 8016330:	41615252 	.word	0x41615252
 8016334:	61417272 	.word	0x61417272

08016338 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016338:	b480      	push	{r7}
 801633a:	b083      	sub	sp, #12
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
 8016340:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	3b02      	subs	r3, #2
 8016346:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	69db      	ldr	r3, [r3, #28]
 801634c:	3b02      	subs	r3, #2
 801634e:	683a      	ldr	r2, [r7, #0]
 8016350:	429a      	cmp	r2, r3
 8016352:	d301      	bcc.n	8016358 <clust2sect+0x20>
 8016354:	2300      	movs	r3, #0
 8016356:	e008      	b.n	801636a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	895b      	ldrh	r3, [r3, #10]
 801635c:	461a      	mov	r2, r3
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	fb03 f202 	mul.w	r2, r3, r2
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016368:	4413      	add	r3, r2
}
 801636a:	4618      	mov	r0, r3
 801636c:	370c      	adds	r7, #12
 801636e:	46bd      	mov	sp, r7
 8016370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016374:	4770      	bx	lr

08016376 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016376:	b580      	push	{r7, lr}
 8016378:	b086      	sub	sp, #24
 801637a:	af00      	add	r7, sp, #0
 801637c:	6078      	str	r0, [r7, #4]
 801637e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016386:	683b      	ldr	r3, [r7, #0]
 8016388:	2b01      	cmp	r3, #1
 801638a:	d904      	bls.n	8016396 <get_fat+0x20>
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	69db      	ldr	r3, [r3, #28]
 8016390:	683a      	ldr	r2, [r7, #0]
 8016392:	429a      	cmp	r2, r3
 8016394:	d302      	bcc.n	801639c <get_fat+0x26>
		val = 1;	/* Internal error */
 8016396:	2301      	movs	r3, #1
 8016398:	617b      	str	r3, [r7, #20]
 801639a:	e08f      	b.n	80164bc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801639c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	2b03      	cmp	r3, #3
 80163a8:	d062      	beq.n	8016470 <get_fat+0xfa>
 80163aa:	2b03      	cmp	r3, #3
 80163ac:	dc7c      	bgt.n	80164a8 <get_fat+0x132>
 80163ae:	2b01      	cmp	r3, #1
 80163b0:	d002      	beq.n	80163b8 <get_fat+0x42>
 80163b2:	2b02      	cmp	r3, #2
 80163b4:	d042      	beq.n	801643c <get_fat+0xc6>
 80163b6:	e077      	b.n	80164a8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	60fb      	str	r3, [r7, #12]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	085b      	lsrs	r3, r3, #1
 80163c0:	68fa      	ldr	r2, [r7, #12]
 80163c2:	4413      	add	r3, r2
 80163c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80163c6:	693b      	ldr	r3, [r7, #16]
 80163c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	0a5b      	lsrs	r3, r3, #9
 80163ce:	4413      	add	r3, r2
 80163d0:	4619      	mov	r1, r3
 80163d2:	6938      	ldr	r0, [r7, #16]
 80163d4:	f7ff ff14 	bl	8016200 <move_window>
 80163d8:	4603      	mov	r3, r0
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d167      	bne.n	80164ae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	1c5a      	adds	r2, r3, #1
 80163e2:	60fa      	str	r2, [r7, #12]
 80163e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80163e8:	693a      	ldr	r2, [r7, #16]
 80163ea:	4413      	add	r3, r2
 80163ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80163f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80163f2:	693b      	ldr	r3, [r7, #16]
 80163f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	0a5b      	lsrs	r3, r3, #9
 80163fa:	4413      	add	r3, r2
 80163fc:	4619      	mov	r1, r3
 80163fe:	6938      	ldr	r0, [r7, #16]
 8016400:	f7ff fefe 	bl	8016200 <move_window>
 8016404:	4603      	mov	r3, r0
 8016406:	2b00      	cmp	r3, #0
 8016408:	d153      	bne.n	80164b2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016410:	693a      	ldr	r2, [r7, #16]
 8016412:	4413      	add	r3, r2
 8016414:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016418:	021b      	lsls	r3, r3, #8
 801641a:	461a      	mov	r2, r3
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	4313      	orrs	r3, r2
 8016420:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	f003 0301 	and.w	r3, r3, #1
 8016428:	2b00      	cmp	r3, #0
 801642a:	d002      	beq.n	8016432 <get_fat+0xbc>
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	091b      	lsrs	r3, r3, #4
 8016430:	e002      	b.n	8016438 <get_fat+0xc2>
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016438:	617b      	str	r3, [r7, #20]
			break;
 801643a:	e03f      	b.n	80164bc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801643c:	693b      	ldr	r3, [r7, #16]
 801643e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016440:	683b      	ldr	r3, [r7, #0]
 8016442:	0a1b      	lsrs	r3, r3, #8
 8016444:	4413      	add	r3, r2
 8016446:	4619      	mov	r1, r3
 8016448:	6938      	ldr	r0, [r7, #16]
 801644a:	f7ff fed9 	bl	8016200 <move_window>
 801644e:	4603      	mov	r3, r0
 8016450:	2b00      	cmp	r3, #0
 8016452:	d130      	bne.n	80164b6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801645a:	683b      	ldr	r3, [r7, #0]
 801645c:	005b      	lsls	r3, r3, #1
 801645e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016462:	4413      	add	r3, r2
 8016464:	4618      	mov	r0, r3
 8016466:	f7ff fbe9 	bl	8015c3c <ld_word>
 801646a:	4603      	mov	r3, r0
 801646c:	617b      	str	r3, [r7, #20]
			break;
 801646e:	e025      	b.n	80164bc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016470:	693b      	ldr	r3, [r7, #16]
 8016472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016474:	683b      	ldr	r3, [r7, #0]
 8016476:	09db      	lsrs	r3, r3, #7
 8016478:	4413      	add	r3, r2
 801647a:	4619      	mov	r1, r3
 801647c:	6938      	ldr	r0, [r7, #16]
 801647e:	f7ff febf 	bl	8016200 <move_window>
 8016482:	4603      	mov	r3, r0
 8016484:	2b00      	cmp	r3, #0
 8016486:	d118      	bne.n	80164ba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	009b      	lsls	r3, r3, #2
 8016492:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016496:	4413      	add	r3, r2
 8016498:	4618      	mov	r0, r3
 801649a:	f7ff fbe7 	bl	8015c6c <ld_dword>
 801649e:	4603      	mov	r3, r0
 80164a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80164a4:	617b      	str	r3, [r7, #20]
			break;
 80164a6:	e009      	b.n	80164bc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80164a8:	2301      	movs	r3, #1
 80164aa:	617b      	str	r3, [r7, #20]
 80164ac:	e006      	b.n	80164bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80164ae:	bf00      	nop
 80164b0:	e004      	b.n	80164bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80164b2:	bf00      	nop
 80164b4:	e002      	b.n	80164bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80164b6:	bf00      	nop
 80164b8:	e000      	b.n	80164bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80164ba:	bf00      	nop
		}
	}

	return val;
 80164bc:	697b      	ldr	r3, [r7, #20]
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3718      	adds	r7, #24
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}

080164c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80164c6:	b590      	push	{r4, r7, lr}
 80164c8:	b089      	sub	sp, #36	; 0x24
 80164ca:	af00      	add	r7, sp, #0
 80164cc:	60f8      	str	r0, [r7, #12]
 80164ce:	60b9      	str	r1, [r7, #8]
 80164d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80164d2:	2302      	movs	r3, #2
 80164d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	2b01      	cmp	r3, #1
 80164da:	f240 80d2 	bls.w	8016682 <put_fat+0x1bc>
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	69db      	ldr	r3, [r3, #28]
 80164e2:	68ba      	ldr	r2, [r7, #8]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	f080 80cc 	bcs.w	8016682 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	2b03      	cmp	r3, #3
 80164f0:	f000 8096 	beq.w	8016620 <put_fat+0x15a>
 80164f4:	2b03      	cmp	r3, #3
 80164f6:	f300 80cd 	bgt.w	8016694 <put_fat+0x1ce>
 80164fa:	2b01      	cmp	r3, #1
 80164fc:	d002      	beq.n	8016504 <put_fat+0x3e>
 80164fe:	2b02      	cmp	r3, #2
 8016500:	d06e      	beq.n	80165e0 <put_fat+0x11a>
 8016502:	e0c7      	b.n	8016694 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	61bb      	str	r3, [r7, #24]
 8016508:	69bb      	ldr	r3, [r7, #24]
 801650a:	085b      	lsrs	r3, r3, #1
 801650c:	69ba      	ldr	r2, [r7, #24]
 801650e:	4413      	add	r3, r2
 8016510:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016516:	69bb      	ldr	r3, [r7, #24]
 8016518:	0a5b      	lsrs	r3, r3, #9
 801651a:	4413      	add	r3, r2
 801651c:	4619      	mov	r1, r3
 801651e:	68f8      	ldr	r0, [r7, #12]
 8016520:	f7ff fe6e 	bl	8016200 <move_window>
 8016524:	4603      	mov	r3, r0
 8016526:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016528:	7ffb      	ldrb	r3, [r7, #31]
 801652a:	2b00      	cmp	r3, #0
 801652c:	f040 80ab 	bne.w	8016686 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016536:	69bb      	ldr	r3, [r7, #24]
 8016538:	1c59      	adds	r1, r3, #1
 801653a:	61b9      	str	r1, [r7, #24]
 801653c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016540:	4413      	add	r3, r2
 8016542:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	f003 0301 	and.w	r3, r3, #1
 801654a:	2b00      	cmp	r3, #0
 801654c:	d00d      	beq.n	801656a <put_fat+0xa4>
 801654e:	697b      	ldr	r3, [r7, #20]
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	b25b      	sxtb	r3, r3
 8016554:	f003 030f 	and.w	r3, r3, #15
 8016558:	b25a      	sxtb	r2, r3
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	b2db      	uxtb	r3, r3
 801655e:	011b      	lsls	r3, r3, #4
 8016560:	b25b      	sxtb	r3, r3
 8016562:	4313      	orrs	r3, r2
 8016564:	b25b      	sxtb	r3, r3
 8016566:	b2db      	uxtb	r3, r3
 8016568:	e001      	b.n	801656e <put_fat+0xa8>
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	b2db      	uxtb	r3, r3
 801656e:	697a      	ldr	r2, [r7, #20]
 8016570:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	2201      	movs	r2, #1
 8016576:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801657c:	69bb      	ldr	r3, [r7, #24]
 801657e:	0a5b      	lsrs	r3, r3, #9
 8016580:	4413      	add	r3, r2
 8016582:	4619      	mov	r1, r3
 8016584:	68f8      	ldr	r0, [r7, #12]
 8016586:	f7ff fe3b 	bl	8016200 <move_window>
 801658a:	4603      	mov	r3, r0
 801658c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801658e:	7ffb      	ldrb	r3, [r7, #31]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d17a      	bne.n	801668a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801659a:	69bb      	ldr	r3, [r7, #24]
 801659c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80165a0:	4413      	add	r3, r2
 80165a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80165a4:	68bb      	ldr	r3, [r7, #8]
 80165a6:	f003 0301 	and.w	r3, r3, #1
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d003      	beq.n	80165b6 <put_fat+0xf0>
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	091b      	lsrs	r3, r3, #4
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	e00e      	b.n	80165d4 <put_fat+0x10e>
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	b25b      	sxtb	r3, r3
 80165bc:	f023 030f 	bic.w	r3, r3, #15
 80165c0:	b25a      	sxtb	r2, r3
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	0a1b      	lsrs	r3, r3, #8
 80165c6:	b25b      	sxtb	r3, r3
 80165c8:	f003 030f 	and.w	r3, r3, #15
 80165cc:	b25b      	sxtb	r3, r3
 80165ce:	4313      	orrs	r3, r2
 80165d0:	b25b      	sxtb	r3, r3
 80165d2:	b2db      	uxtb	r3, r3
 80165d4:	697a      	ldr	r2, [r7, #20]
 80165d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	2201      	movs	r2, #1
 80165dc:	70da      	strb	r2, [r3, #3]
			break;
 80165de:	e059      	b.n	8016694 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	0a1b      	lsrs	r3, r3, #8
 80165e8:	4413      	add	r3, r2
 80165ea:	4619      	mov	r1, r3
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	f7ff fe07 	bl	8016200 <move_window>
 80165f2:	4603      	mov	r3, r0
 80165f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80165f6:	7ffb      	ldrb	r3, [r7, #31]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d148      	bne.n	801668e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	005b      	lsls	r3, r3, #1
 8016606:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801660a:	4413      	add	r3, r2
 801660c:	687a      	ldr	r2, [r7, #4]
 801660e:	b292      	uxth	r2, r2
 8016610:	4611      	mov	r1, r2
 8016612:	4618      	mov	r0, r3
 8016614:	f7ff fb4d 	bl	8015cb2 <st_word>
			fs->wflag = 1;
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	2201      	movs	r2, #1
 801661c:	70da      	strb	r2, [r3, #3]
			break;
 801661e:	e039      	b.n	8016694 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016624:	68bb      	ldr	r3, [r7, #8]
 8016626:	09db      	lsrs	r3, r3, #7
 8016628:	4413      	add	r3, r2
 801662a:	4619      	mov	r1, r3
 801662c:	68f8      	ldr	r0, [r7, #12]
 801662e:	f7ff fde7 	bl	8016200 <move_window>
 8016632:	4603      	mov	r3, r0
 8016634:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016636:	7ffb      	ldrb	r3, [r7, #31]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d12a      	bne.n	8016692 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	009b      	lsls	r3, r3, #2
 801664c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016650:	4413      	add	r3, r2
 8016652:	4618      	mov	r0, r3
 8016654:	f7ff fb0a 	bl	8015c6c <ld_dword>
 8016658:	4603      	mov	r3, r0
 801665a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801665e:	4323      	orrs	r3, r4
 8016660:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	009b      	lsls	r3, r3, #2
 801666c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016670:	4413      	add	r3, r2
 8016672:	6879      	ldr	r1, [r7, #4]
 8016674:	4618      	mov	r0, r3
 8016676:	f7ff fb37 	bl	8015ce8 <st_dword>
			fs->wflag = 1;
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	2201      	movs	r2, #1
 801667e:	70da      	strb	r2, [r3, #3]
			break;
 8016680:	e008      	b.n	8016694 <put_fat+0x1ce>
		}
	}
 8016682:	bf00      	nop
 8016684:	e006      	b.n	8016694 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016686:	bf00      	nop
 8016688:	e004      	b.n	8016694 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801668a:	bf00      	nop
 801668c:	e002      	b.n	8016694 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801668e:	bf00      	nop
 8016690:	e000      	b.n	8016694 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016692:	bf00      	nop
	return res;
 8016694:	7ffb      	ldrb	r3, [r7, #31]
}
 8016696:	4618      	mov	r0, r3
 8016698:	3724      	adds	r7, #36	; 0x24
 801669a:	46bd      	mov	sp, r7
 801669c:	bd90      	pop	{r4, r7, pc}

0801669e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801669e:	b580      	push	{r7, lr}
 80166a0:	b088      	sub	sp, #32
 80166a2:	af00      	add	r7, sp, #0
 80166a4:	60f8      	str	r0, [r7, #12]
 80166a6:	60b9      	str	r1, [r7, #8]
 80166a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80166aa:	2300      	movs	r3, #0
 80166ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	2b01      	cmp	r3, #1
 80166b8:	d904      	bls.n	80166c4 <remove_chain+0x26>
 80166ba:	69bb      	ldr	r3, [r7, #24]
 80166bc:	69db      	ldr	r3, [r3, #28]
 80166be:	68ba      	ldr	r2, [r7, #8]
 80166c0:	429a      	cmp	r2, r3
 80166c2:	d301      	bcc.n	80166c8 <remove_chain+0x2a>
 80166c4:	2302      	movs	r3, #2
 80166c6:	e04b      	b.n	8016760 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d00c      	beq.n	80166e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80166ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80166d2:	6879      	ldr	r1, [r7, #4]
 80166d4:	69b8      	ldr	r0, [r7, #24]
 80166d6:	f7ff fef6 	bl	80164c6 <put_fat>
 80166da:	4603      	mov	r3, r0
 80166dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80166de:	7ffb      	ldrb	r3, [r7, #31]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d001      	beq.n	80166e8 <remove_chain+0x4a>
 80166e4:	7ffb      	ldrb	r3, [r7, #31]
 80166e6:	e03b      	b.n	8016760 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80166e8:	68b9      	ldr	r1, [r7, #8]
 80166ea:	68f8      	ldr	r0, [r7, #12]
 80166ec:	f7ff fe43 	bl	8016376 <get_fat>
 80166f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d031      	beq.n	801675c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80166f8:	697b      	ldr	r3, [r7, #20]
 80166fa:	2b01      	cmp	r3, #1
 80166fc:	d101      	bne.n	8016702 <remove_chain+0x64>
 80166fe:	2302      	movs	r3, #2
 8016700:	e02e      	b.n	8016760 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016702:	697b      	ldr	r3, [r7, #20]
 8016704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016708:	d101      	bne.n	801670e <remove_chain+0x70>
 801670a:	2301      	movs	r3, #1
 801670c:	e028      	b.n	8016760 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801670e:	2200      	movs	r2, #0
 8016710:	68b9      	ldr	r1, [r7, #8]
 8016712:	69b8      	ldr	r0, [r7, #24]
 8016714:	f7ff fed7 	bl	80164c6 <put_fat>
 8016718:	4603      	mov	r3, r0
 801671a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801671c:	7ffb      	ldrb	r3, [r7, #31]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d001      	beq.n	8016726 <remove_chain+0x88>
 8016722:	7ffb      	ldrb	r3, [r7, #31]
 8016724:	e01c      	b.n	8016760 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016726:	69bb      	ldr	r3, [r7, #24]
 8016728:	699a      	ldr	r2, [r3, #24]
 801672a:	69bb      	ldr	r3, [r7, #24]
 801672c:	69db      	ldr	r3, [r3, #28]
 801672e:	3b02      	subs	r3, #2
 8016730:	429a      	cmp	r2, r3
 8016732:	d20b      	bcs.n	801674c <remove_chain+0xae>
			fs->free_clst++;
 8016734:	69bb      	ldr	r3, [r7, #24]
 8016736:	699b      	ldr	r3, [r3, #24]
 8016738:	1c5a      	adds	r2, r3, #1
 801673a:	69bb      	ldr	r3, [r7, #24]
 801673c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801673e:	69bb      	ldr	r3, [r7, #24]
 8016740:	791b      	ldrb	r3, [r3, #4]
 8016742:	f043 0301 	orr.w	r3, r3, #1
 8016746:	b2da      	uxtb	r2, r3
 8016748:	69bb      	ldr	r3, [r7, #24]
 801674a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016750:	69bb      	ldr	r3, [r7, #24]
 8016752:	69db      	ldr	r3, [r3, #28]
 8016754:	68ba      	ldr	r2, [r7, #8]
 8016756:	429a      	cmp	r2, r3
 8016758:	d3c6      	bcc.n	80166e8 <remove_chain+0x4a>
 801675a:	e000      	b.n	801675e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801675c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801675e:	2300      	movs	r3, #0
}
 8016760:	4618      	mov	r0, r3
 8016762:	3720      	adds	r7, #32
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}

08016768 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b088      	sub	sp, #32
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d10d      	bne.n	801679a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	695b      	ldr	r3, [r3, #20]
 8016782:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016784:	69bb      	ldr	r3, [r7, #24]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d004      	beq.n	8016794 <create_chain+0x2c>
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	69db      	ldr	r3, [r3, #28]
 801678e:	69ba      	ldr	r2, [r7, #24]
 8016790:	429a      	cmp	r2, r3
 8016792:	d31b      	bcc.n	80167cc <create_chain+0x64>
 8016794:	2301      	movs	r3, #1
 8016796:	61bb      	str	r3, [r7, #24]
 8016798:	e018      	b.n	80167cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801679a:	6839      	ldr	r1, [r7, #0]
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f7ff fdea 	bl	8016376 <get_fat>
 80167a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2b01      	cmp	r3, #1
 80167a8:	d801      	bhi.n	80167ae <create_chain+0x46>
 80167aa:	2301      	movs	r3, #1
 80167ac:	e070      	b.n	8016890 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80167b4:	d101      	bne.n	80167ba <create_chain+0x52>
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	e06a      	b.n	8016890 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80167ba:	693b      	ldr	r3, [r7, #16]
 80167bc:	69db      	ldr	r3, [r3, #28]
 80167be:	68fa      	ldr	r2, [r7, #12]
 80167c0:	429a      	cmp	r2, r3
 80167c2:	d201      	bcs.n	80167c8 <create_chain+0x60>
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	e063      	b.n	8016890 <create_chain+0x128>
		scl = clst;
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80167cc:	69bb      	ldr	r3, [r7, #24]
 80167ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80167d0:	69fb      	ldr	r3, [r7, #28]
 80167d2:	3301      	adds	r3, #1
 80167d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80167d6:	693b      	ldr	r3, [r7, #16]
 80167d8:	69db      	ldr	r3, [r3, #28]
 80167da:	69fa      	ldr	r2, [r7, #28]
 80167dc:	429a      	cmp	r2, r3
 80167de:	d307      	bcc.n	80167f0 <create_chain+0x88>
				ncl = 2;
 80167e0:	2302      	movs	r3, #2
 80167e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80167e4:	69fa      	ldr	r2, [r7, #28]
 80167e6:	69bb      	ldr	r3, [r7, #24]
 80167e8:	429a      	cmp	r2, r3
 80167ea:	d901      	bls.n	80167f0 <create_chain+0x88>
 80167ec:	2300      	movs	r3, #0
 80167ee:	e04f      	b.n	8016890 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80167f0:	69f9      	ldr	r1, [r7, #28]
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f7ff fdbf 	bl	8016376 <get_fat>
 80167f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00e      	beq.n	801681e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	2b01      	cmp	r3, #1
 8016804:	d003      	beq.n	801680e <create_chain+0xa6>
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801680c:	d101      	bne.n	8016812 <create_chain+0xaa>
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	e03e      	b.n	8016890 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8016812:	69fa      	ldr	r2, [r7, #28]
 8016814:	69bb      	ldr	r3, [r7, #24]
 8016816:	429a      	cmp	r2, r3
 8016818:	d1da      	bne.n	80167d0 <create_chain+0x68>
 801681a:	2300      	movs	r3, #0
 801681c:	e038      	b.n	8016890 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801681e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8016820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016824:	69f9      	ldr	r1, [r7, #28]
 8016826:	6938      	ldr	r0, [r7, #16]
 8016828:	f7ff fe4d 	bl	80164c6 <put_fat>
 801682c:	4603      	mov	r3, r0
 801682e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8016830:	7dfb      	ldrb	r3, [r7, #23]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d109      	bne.n	801684a <create_chain+0xe2>
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d006      	beq.n	801684a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801683c:	69fa      	ldr	r2, [r7, #28]
 801683e:	6839      	ldr	r1, [r7, #0]
 8016840:	6938      	ldr	r0, [r7, #16]
 8016842:	f7ff fe40 	bl	80164c6 <put_fat>
 8016846:	4603      	mov	r3, r0
 8016848:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801684a:	7dfb      	ldrb	r3, [r7, #23]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d116      	bne.n	801687e <create_chain+0x116>
		fs->last_clst = ncl;
 8016850:	693b      	ldr	r3, [r7, #16]
 8016852:	69fa      	ldr	r2, [r7, #28]
 8016854:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016856:	693b      	ldr	r3, [r7, #16]
 8016858:	699a      	ldr	r2, [r3, #24]
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	69db      	ldr	r3, [r3, #28]
 801685e:	3b02      	subs	r3, #2
 8016860:	429a      	cmp	r2, r3
 8016862:	d804      	bhi.n	801686e <create_chain+0x106>
 8016864:	693b      	ldr	r3, [r7, #16]
 8016866:	699b      	ldr	r3, [r3, #24]
 8016868:	1e5a      	subs	r2, r3, #1
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	791b      	ldrb	r3, [r3, #4]
 8016872:	f043 0301 	orr.w	r3, r3, #1
 8016876:	b2da      	uxtb	r2, r3
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	711a      	strb	r2, [r3, #4]
 801687c:	e007      	b.n	801688e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801687e:	7dfb      	ldrb	r3, [r7, #23]
 8016880:	2b01      	cmp	r3, #1
 8016882:	d102      	bne.n	801688a <create_chain+0x122>
 8016884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016888:	e000      	b.n	801688c <create_chain+0x124>
 801688a:	2301      	movs	r3, #1
 801688c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801688e:	69fb      	ldr	r3, [r7, #28]
}
 8016890:	4618      	mov	r0, r3
 8016892:	3720      	adds	r7, #32
 8016894:	46bd      	mov	sp, r7
 8016896:	bd80      	pop	{r7, pc}

08016898 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016898:	b480      	push	{r7}
 801689a:	b087      	sub	sp, #28
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
 80168a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ac:	3304      	adds	r3, #4
 80168ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	0a5b      	lsrs	r3, r3, #9
 80168b4:	68fa      	ldr	r2, [r7, #12]
 80168b6:	8952      	ldrh	r2, [r2, #10]
 80168b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80168bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	1d1a      	adds	r2, r3, #4
 80168c2:	613a      	str	r2, [r7, #16]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80168c8:	68bb      	ldr	r3, [r7, #8]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d101      	bne.n	80168d2 <clmt_clust+0x3a>
 80168ce:	2300      	movs	r3, #0
 80168d0:	e010      	b.n	80168f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80168d2:	697a      	ldr	r2, [r7, #20]
 80168d4:	68bb      	ldr	r3, [r7, #8]
 80168d6:	429a      	cmp	r2, r3
 80168d8:	d307      	bcc.n	80168ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80168da:	697a      	ldr	r2, [r7, #20]
 80168dc:	68bb      	ldr	r3, [r7, #8]
 80168de:	1ad3      	subs	r3, r2, r3
 80168e0:	617b      	str	r3, [r7, #20]
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	3304      	adds	r3, #4
 80168e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80168e8:	e7e9      	b.n	80168be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80168ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80168ec:	693b      	ldr	r3, [r7, #16]
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	697b      	ldr	r3, [r7, #20]
 80168f2:	4413      	add	r3, r2
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	371c      	adds	r7, #28
 80168f8:	46bd      	mov	sp, r7
 80168fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fe:	4770      	bx	lr

08016900 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b086      	sub	sp, #24
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016916:	d204      	bcs.n	8016922 <dir_sdi+0x22>
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	f003 031f 	and.w	r3, r3, #31
 801691e:	2b00      	cmp	r3, #0
 8016920:	d001      	beq.n	8016926 <dir_sdi+0x26>
		return FR_INT_ERR;
 8016922:	2302      	movs	r3, #2
 8016924:	e063      	b.n	80169ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	683a      	ldr	r2, [r7, #0]
 801692a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	689b      	ldr	r3, [r3, #8]
 8016930:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016932:	697b      	ldr	r3, [r7, #20]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d106      	bne.n	8016946 <dir_sdi+0x46>
 8016938:	693b      	ldr	r3, [r7, #16]
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	2b02      	cmp	r3, #2
 801693e:	d902      	bls.n	8016946 <dir_sdi+0x46>
		clst = fs->dirbase;
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016944:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016946:	697b      	ldr	r3, [r7, #20]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d10c      	bne.n	8016966 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	095b      	lsrs	r3, r3, #5
 8016950:	693a      	ldr	r2, [r7, #16]
 8016952:	8912      	ldrh	r2, [r2, #8]
 8016954:	4293      	cmp	r3, r2
 8016956:	d301      	bcc.n	801695c <dir_sdi+0x5c>
 8016958:	2302      	movs	r3, #2
 801695a:	e048      	b.n	80169ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801695c:	693b      	ldr	r3, [r7, #16]
 801695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	61da      	str	r2, [r3, #28]
 8016964:	e029      	b.n	80169ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016966:	693b      	ldr	r3, [r7, #16]
 8016968:	895b      	ldrh	r3, [r3, #10]
 801696a:	025b      	lsls	r3, r3, #9
 801696c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801696e:	e019      	b.n	80169a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6979      	ldr	r1, [r7, #20]
 8016974:	4618      	mov	r0, r3
 8016976:	f7ff fcfe 	bl	8016376 <get_fat>
 801697a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801697c:	697b      	ldr	r3, [r7, #20]
 801697e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016982:	d101      	bne.n	8016988 <dir_sdi+0x88>
 8016984:	2301      	movs	r3, #1
 8016986:	e032      	b.n	80169ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016988:	697b      	ldr	r3, [r7, #20]
 801698a:	2b01      	cmp	r3, #1
 801698c:	d904      	bls.n	8016998 <dir_sdi+0x98>
 801698e:	693b      	ldr	r3, [r7, #16]
 8016990:	69db      	ldr	r3, [r3, #28]
 8016992:	697a      	ldr	r2, [r7, #20]
 8016994:	429a      	cmp	r2, r3
 8016996:	d301      	bcc.n	801699c <dir_sdi+0x9c>
 8016998:	2302      	movs	r3, #2
 801699a:	e028      	b.n	80169ee <dir_sdi+0xee>
			ofs -= csz;
 801699c:	683a      	ldr	r2, [r7, #0]
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	1ad3      	subs	r3, r2, r3
 80169a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80169a4:	683a      	ldr	r2, [r7, #0]
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d2e1      	bcs.n	8016970 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80169ac:	6979      	ldr	r1, [r7, #20]
 80169ae:	6938      	ldr	r0, [r7, #16]
 80169b0:	f7ff fcc2 	bl	8016338 <clust2sect>
 80169b4:	4602      	mov	r2, r0
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	697a      	ldr	r2, [r7, #20]
 80169be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	69db      	ldr	r3, [r3, #28]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d101      	bne.n	80169cc <dir_sdi+0xcc>
 80169c8:	2302      	movs	r3, #2
 80169ca:	e010      	b.n	80169ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	69da      	ldr	r2, [r3, #28]
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	0a5b      	lsrs	r3, r3, #9
 80169d4:	441a      	add	r2, r3
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80169da:	693b      	ldr	r3, [r7, #16]
 80169dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80169e0:	683b      	ldr	r3, [r7, #0]
 80169e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80169e6:	441a      	add	r2, r3
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80169ec:	2300      	movs	r3, #0
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	3718      	adds	r7, #24
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}

080169f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80169f6:	b580      	push	{r7, lr}
 80169f8:	b086      	sub	sp, #24
 80169fa:	af00      	add	r7, sp, #0
 80169fc:	6078      	str	r0, [r7, #4]
 80169fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	695b      	ldr	r3, [r3, #20]
 8016a0a:	3320      	adds	r3, #32
 8016a0c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	69db      	ldr	r3, [r3, #28]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d003      	beq.n	8016a1e <dir_next+0x28>
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016a1c:	d301      	bcc.n	8016a22 <dir_next+0x2c>
 8016a1e:	2304      	movs	r3, #4
 8016a20:	e0aa      	b.n	8016b78 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	f040 8098 	bne.w	8016b5e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	69db      	ldr	r3, [r3, #28]
 8016a32:	1c5a      	adds	r2, r3, #1
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	699b      	ldr	r3, [r3, #24]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d10b      	bne.n	8016a58 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016a40:	68bb      	ldr	r3, [r7, #8]
 8016a42:	095b      	lsrs	r3, r3, #5
 8016a44:	68fa      	ldr	r2, [r7, #12]
 8016a46:	8912      	ldrh	r2, [r2, #8]
 8016a48:	4293      	cmp	r3, r2
 8016a4a:	f0c0 8088 	bcc.w	8016b5e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	2200      	movs	r2, #0
 8016a52:	61da      	str	r2, [r3, #28]
 8016a54:	2304      	movs	r3, #4
 8016a56:	e08f      	b.n	8016b78 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	0a5b      	lsrs	r3, r3, #9
 8016a5c:	68fa      	ldr	r2, [r7, #12]
 8016a5e:	8952      	ldrh	r2, [r2, #10]
 8016a60:	3a01      	subs	r2, #1
 8016a62:	4013      	ands	r3, r2
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d17a      	bne.n	8016b5e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016a68:	687a      	ldr	r2, [r7, #4]
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	699b      	ldr	r3, [r3, #24]
 8016a6e:	4619      	mov	r1, r3
 8016a70:	4610      	mov	r0, r2
 8016a72:	f7ff fc80 	bl	8016376 <get_fat>
 8016a76:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	2b01      	cmp	r3, #1
 8016a7c:	d801      	bhi.n	8016a82 <dir_next+0x8c>
 8016a7e:	2302      	movs	r3, #2
 8016a80:	e07a      	b.n	8016b78 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016a82:	697b      	ldr	r3, [r7, #20]
 8016a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a88:	d101      	bne.n	8016a8e <dir_next+0x98>
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	e074      	b.n	8016b78 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	69db      	ldr	r3, [r3, #28]
 8016a92:	697a      	ldr	r2, [r7, #20]
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d358      	bcc.n	8016b4a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d104      	bne.n	8016aa8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	61da      	str	r2, [r3, #28]
 8016aa4:	2304      	movs	r3, #4
 8016aa6:	e067      	b.n	8016b78 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016aa8:	687a      	ldr	r2, [r7, #4]
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	699b      	ldr	r3, [r3, #24]
 8016aae:	4619      	mov	r1, r3
 8016ab0:	4610      	mov	r0, r2
 8016ab2:	f7ff fe59 	bl	8016768 <create_chain>
 8016ab6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d101      	bne.n	8016ac2 <dir_next+0xcc>
 8016abe:	2307      	movs	r3, #7
 8016ac0:	e05a      	b.n	8016b78 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8016ac2:	697b      	ldr	r3, [r7, #20]
 8016ac4:	2b01      	cmp	r3, #1
 8016ac6:	d101      	bne.n	8016acc <dir_next+0xd6>
 8016ac8:	2302      	movs	r3, #2
 8016aca:	e055      	b.n	8016b78 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016acc:	697b      	ldr	r3, [r7, #20]
 8016ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016ad2:	d101      	bne.n	8016ad8 <dir_next+0xe2>
 8016ad4:	2301      	movs	r3, #1
 8016ad6:	e04f      	b.n	8016b78 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016ad8:	68f8      	ldr	r0, [r7, #12]
 8016ada:	f7ff fb4d 	bl	8016178 <sync_window>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d001      	beq.n	8016ae8 <dir_next+0xf2>
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	e047      	b.n	8016b78 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	3338      	adds	r3, #56	; 0x38
 8016aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016af0:	2100      	movs	r1, #0
 8016af2:	4618      	mov	r0, r3
 8016af4:	f7ff f945 	bl	8015d82 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016af8:	2300      	movs	r3, #0
 8016afa:	613b      	str	r3, [r7, #16]
 8016afc:	6979      	ldr	r1, [r7, #20]
 8016afe:	68f8      	ldr	r0, [r7, #12]
 8016b00:	f7ff fc1a 	bl	8016338 <clust2sect>
 8016b04:	4602      	mov	r2, r0
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	635a      	str	r2, [r3, #52]	; 0x34
 8016b0a:	e012      	b.n	8016b32 <dir_next+0x13c>
						fs->wflag = 1;
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	2201      	movs	r2, #1
 8016b10:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016b12:	68f8      	ldr	r0, [r7, #12]
 8016b14:	f7ff fb30 	bl	8016178 <sync_window>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d001      	beq.n	8016b22 <dir_next+0x12c>
 8016b1e:	2301      	movs	r3, #1
 8016b20:	e02a      	b.n	8016b78 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	3301      	adds	r3, #1
 8016b26:	613b      	str	r3, [r7, #16]
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b2c:	1c5a      	adds	r2, r3, #1
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	635a      	str	r2, [r3, #52]	; 0x34
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	895b      	ldrh	r3, [r3, #10]
 8016b36:	461a      	mov	r2, r3
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	4293      	cmp	r3, r2
 8016b3c:	d3e6      	bcc.n	8016b0c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016b42:	693b      	ldr	r3, [r7, #16]
 8016b44:	1ad2      	subs	r2, r2, r3
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	697a      	ldr	r2, [r7, #20]
 8016b4e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8016b50:	6979      	ldr	r1, [r7, #20]
 8016b52:	68f8      	ldr	r0, [r7, #12]
 8016b54:	f7ff fbf0 	bl	8016338 <clust2sect>
 8016b58:	4602      	mov	r2, r0
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	68ba      	ldr	r2, [r7, #8]
 8016b62:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016b6a:	68bb      	ldr	r3, [r7, #8]
 8016b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b70:	441a      	add	r2, r3
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016b76:	2300      	movs	r3, #0
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	3718      	adds	r7, #24
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b086      	sub	sp, #24
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
 8016b88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8016b90:	2100      	movs	r1, #0
 8016b92:	6878      	ldr	r0, [r7, #4]
 8016b94:	f7ff feb4 	bl	8016900 <dir_sdi>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016b9c:	7dfb      	ldrb	r3, [r7, #23]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d12b      	bne.n	8016bfa <dir_alloc+0x7a>
		n = 0;
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	69db      	ldr	r3, [r3, #28]
 8016baa:	4619      	mov	r1, r3
 8016bac:	68f8      	ldr	r0, [r7, #12]
 8016bae:	f7ff fb27 	bl	8016200 <move_window>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016bb6:	7dfb      	ldrb	r3, [r7, #23]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d11d      	bne.n	8016bf8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	6a1b      	ldr	r3, [r3, #32]
 8016bc0:	781b      	ldrb	r3, [r3, #0]
 8016bc2:	2be5      	cmp	r3, #229	; 0xe5
 8016bc4:	d004      	beq.n	8016bd0 <dir_alloc+0x50>
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6a1b      	ldr	r3, [r3, #32]
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d107      	bne.n	8016be0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016bd0:	693b      	ldr	r3, [r7, #16]
 8016bd2:	3301      	adds	r3, #1
 8016bd4:	613b      	str	r3, [r7, #16]
 8016bd6:	693a      	ldr	r2, [r7, #16]
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	429a      	cmp	r2, r3
 8016bdc:	d102      	bne.n	8016be4 <dir_alloc+0x64>
 8016bde:	e00c      	b.n	8016bfa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016be0:	2300      	movs	r3, #0
 8016be2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016be4:	2101      	movs	r1, #1
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f7ff ff05 	bl	80169f6 <dir_next>
 8016bec:	4603      	mov	r3, r0
 8016bee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016bf0:	7dfb      	ldrb	r3, [r7, #23]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d0d7      	beq.n	8016ba6 <dir_alloc+0x26>
 8016bf6:	e000      	b.n	8016bfa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8016bf8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016bfa:	7dfb      	ldrb	r3, [r7, #23]
 8016bfc:	2b04      	cmp	r3, #4
 8016bfe:	d101      	bne.n	8016c04 <dir_alloc+0x84>
 8016c00:	2307      	movs	r3, #7
 8016c02:	75fb      	strb	r3, [r7, #23]
	return res;
 8016c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3718      	adds	r7, #24
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b084      	sub	sp, #16
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]
 8016c16:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	331a      	adds	r3, #26
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7ff f80d 	bl	8015c3c <ld_word>
 8016c22:	4603      	mov	r3, r0
 8016c24:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	781b      	ldrb	r3, [r3, #0]
 8016c2a:	2b03      	cmp	r3, #3
 8016c2c:	d109      	bne.n	8016c42 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	3314      	adds	r3, #20
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7ff f802 	bl	8015c3c <ld_word>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	041b      	lsls	r3, r3, #16
 8016c3c:	68fa      	ldr	r2, [r7, #12]
 8016c3e:	4313      	orrs	r3, r2
 8016c40:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016c42:	68fb      	ldr	r3, [r7, #12]
}
 8016c44:	4618      	mov	r0, r3
 8016c46:	3710      	adds	r7, #16
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bd80      	pop	{r7, pc}

08016c4c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b084      	sub	sp, #16
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016c58:	68bb      	ldr	r3, [r7, #8]
 8016c5a:	331a      	adds	r3, #26
 8016c5c:	687a      	ldr	r2, [r7, #4]
 8016c5e:	b292      	uxth	r2, r2
 8016c60:	4611      	mov	r1, r2
 8016c62:	4618      	mov	r0, r3
 8016c64:	f7ff f825 	bl	8015cb2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	781b      	ldrb	r3, [r3, #0]
 8016c6c:	2b03      	cmp	r3, #3
 8016c6e:	d109      	bne.n	8016c84 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	f103 0214 	add.w	r2, r3, #20
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	0c1b      	lsrs	r3, r3, #16
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	4619      	mov	r1, r3
 8016c7e:	4610      	mov	r0, r2
 8016c80:	f7ff f817 	bl	8015cb2 <st_word>
	}
}
 8016c84:	bf00      	nop
 8016c86:	3710      	adds	r7, #16
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	bd80      	pop	{r7, pc}

08016c8c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8016c8c:	b590      	push	{r4, r7, lr}
 8016c8e:	b087      	sub	sp, #28
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	331a      	adds	r3, #26
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7fe ffce 	bl	8015c3c <ld_word>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d001      	beq.n	8016caa <cmp_lfn+0x1e>
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	e059      	b.n	8016d5e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	781b      	ldrb	r3, [r3, #0]
 8016cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cb2:	1e5a      	subs	r2, r3, #1
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	005b      	lsls	r3, r3, #1
 8016cb8:	4413      	add	r3, r2
 8016cba:	009b      	lsls	r3, r3, #2
 8016cbc:	4413      	add	r3, r2
 8016cbe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	81fb      	strh	r3, [r7, #14]
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	613b      	str	r3, [r7, #16]
 8016cc8:	e033      	b.n	8016d32 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016cca:	4a27      	ldr	r2, [pc, #156]	; (8016d68 <cmp_lfn+0xdc>)
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	4413      	add	r3, r2
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	461a      	mov	r2, r3
 8016cd4:	683b      	ldr	r3, [r7, #0]
 8016cd6:	4413      	add	r3, r2
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f7fe ffaf 	bl	8015c3c <ld_word>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8016ce2:	89fb      	ldrh	r3, [r7, #14]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d01a      	beq.n	8016d1e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	2b63      	cmp	r3, #99	; 0x63
 8016cec:	d812      	bhi.n	8016d14 <cmp_lfn+0x88>
 8016cee:	89bb      	ldrh	r3, [r7, #12]
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f001 ff0d 	bl	8018b10 <ff_wtoupper>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	461c      	mov	r4, r3
 8016cfa:	697b      	ldr	r3, [r7, #20]
 8016cfc:	1c5a      	adds	r2, r3, #1
 8016cfe:	617a      	str	r2, [r7, #20]
 8016d00:	005b      	lsls	r3, r3, #1
 8016d02:	687a      	ldr	r2, [r7, #4]
 8016d04:	4413      	add	r3, r2
 8016d06:	881b      	ldrh	r3, [r3, #0]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f001 ff01 	bl	8018b10 <ff_wtoupper>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	429c      	cmp	r4, r3
 8016d12:	d001      	beq.n	8016d18 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8016d14:	2300      	movs	r3, #0
 8016d16:	e022      	b.n	8016d5e <cmp_lfn+0xd2>
			}
			wc = uc;
 8016d18:	89bb      	ldrh	r3, [r7, #12]
 8016d1a:	81fb      	strh	r3, [r7, #14]
 8016d1c:	e006      	b.n	8016d2c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8016d1e:	89bb      	ldrh	r3, [r7, #12]
 8016d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d24:	4293      	cmp	r3, r2
 8016d26:	d001      	beq.n	8016d2c <cmp_lfn+0xa0>
 8016d28:	2300      	movs	r3, #0
 8016d2a:	e018      	b.n	8016d5e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016d2c:	693b      	ldr	r3, [r7, #16]
 8016d2e:	3301      	adds	r3, #1
 8016d30:	613b      	str	r3, [r7, #16]
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	2b0c      	cmp	r3, #12
 8016d36:	d9c8      	bls.n	8016cca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	781b      	ldrb	r3, [r3, #0]
 8016d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d00b      	beq.n	8016d5c <cmp_lfn+0xd0>
 8016d44:	89fb      	ldrh	r3, [r7, #14]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d008      	beq.n	8016d5c <cmp_lfn+0xd0>
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	005b      	lsls	r3, r3, #1
 8016d4e:	687a      	ldr	r2, [r7, #4]
 8016d50:	4413      	add	r3, r2
 8016d52:	881b      	ldrh	r3, [r3, #0]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d001      	beq.n	8016d5c <cmp_lfn+0xd0>
 8016d58:	2300      	movs	r3, #0
 8016d5a:	e000      	b.n	8016d5e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8016d5c:	2301      	movs	r3, #1
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	371c      	adds	r7, #28
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd90      	pop	{r4, r7, pc}
 8016d66:	bf00      	nop
 8016d68:	08020060 	.word	0x08020060

08016d6c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b088      	sub	sp, #32
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	60f8      	str	r0, [r7, #12]
 8016d74:	60b9      	str	r1, [r7, #8]
 8016d76:	4611      	mov	r1, r2
 8016d78:	461a      	mov	r2, r3
 8016d7a:	460b      	mov	r3, r1
 8016d7c:	71fb      	strb	r3, [r7, #7]
 8016d7e:	4613      	mov	r3, r2
 8016d80:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016d82:	68bb      	ldr	r3, [r7, #8]
 8016d84:	330d      	adds	r3, #13
 8016d86:	79ba      	ldrb	r2, [r7, #6]
 8016d88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	330b      	adds	r3, #11
 8016d8e:	220f      	movs	r2, #15
 8016d90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8016d92:	68bb      	ldr	r3, [r7, #8]
 8016d94:	330c      	adds	r3, #12
 8016d96:	2200      	movs	r2, #0
 8016d98:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8016d9a:	68bb      	ldr	r3, [r7, #8]
 8016d9c:	331a      	adds	r3, #26
 8016d9e:	2100      	movs	r1, #0
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7fe ff86 	bl	8015cb2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016da6:	79fb      	ldrb	r3, [r7, #7]
 8016da8:	1e5a      	subs	r2, r3, #1
 8016daa:	4613      	mov	r3, r2
 8016dac:	005b      	lsls	r3, r3, #1
 8016dae:	4413      	add	r3, r2
 8016db0:	009b      	lsls	r3, r3, #2
 8016db2:	4413      	add	r3, r2
 8016db4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8016db6:	2300      	movs	r3, #0
 8016db8:	82fb      	strh	r3, [r7, #22]
 8016dba:	2300      	movs	r3, #0
 8016dbc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016dbe:	8afb      	ldrh	r3, [r7, #22]
 8016dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016dc4:	4293      	cmp	r3, r2
 8016dc6:	d007      	beq.n	8016dd8 <put_lfn+0x6c>
 8016dc8:	69fb      	ldr	r3, [r7, #28]
 8016dca:	1c5a      	adds	r2, r3, #1
 8016dcc:	61fa      	str	r2, [r7, #28]
 8016dce:	005b      	lsls	r3, r3, #1
 8016dd0:	68fa      	ldr	r2, [r7, #12]
 8016dd2:	4413      	add	r3, r2
 8016dd4:	881b      	ldrh	r3, [r3, #0]
 8016dd6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8016dd8:	4a17      	ldr	r2, [pc, #92]	; (8016e38 <put_lfn+0xcc>)
 8016dda:	69bb      	ldr	r3, [r7, #24]
 8016ddc:	4413      	add	r3, r2
 8016dde:	781b      	ldrb	r3, [r3, #0]
 8016de0:	461a      	mov	r2, r3
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	4413      	add	r3, r2
 8016de6:	8afa      	ldrh	r2, [r7, #22]
 8016de8:	4611      	mov	r1, r2
 8016dea:	4618      	mov	r0, r3
 8016dec:	f7fe ff61 	bl	8015cb2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016df0:	8afb      	ldrh	r3, [r7, #22]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d102      	bne.n	8016dfc <put_lfn+0x90>
 8016df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016dfa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8016dfc:	69bb      	ldr	r3, [r7, #24]
 8016dfe:	3301      	adds	r3, #1
 8016e00:	61bb      	str	r3, [r7, #24]
 8016e02:	69bb      	ldr	r3, [r7, #24]
 8016e04:	2b0c      	cmp	r3, #12
 8016e06:	d9da      	bls.n	8016dbe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016e08:	8afb      	ldrh	r3, [r7, #22]
 8016e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e0e:	4293      	cmp	r3, r2
 8016e10:	d006      	beq.n	8016e20 <put_lfn+0xb4>
 8016e12:	69fb      	ldr	r3, [r7, #28]
 8016e14:	005b      	lsls	r3, r3, #1
 8016e16:	68fa      	ldr	r2, [r7, #12]
 8016e18:	4413      	add	r3, r2
 8016e1a:	881b      	ldrh	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d103      	bne.n	8016e28 <put_lfn+0xbc>
 8016e20:	79fb      	ldrb	r3, [r7, #7]
 8016e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	79fa      	ldrb	r2, [r7, #7]
 8016e2c:	701a      	strb	r2, [r3, #0]
}
 8016e2e:	bf00      	nop
 8016e30:	3720      	adds	r7, #32
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	08020060 	.word	0x08020060

08016e3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b08c      	sub	sp, #48	; 0x30
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	60f8      	str	r0, [r7, #12]
 8016e44:	60b9      	str	r1, [r7, #8]
 8016e46:	607a      	str	r2, [r7, #4]
 8016e48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8016e4a:	220b      	movs	r2, #11
 8016e4c:	68b9      	ldr	r1, [r7, #8]
 8016e4e:	68f8      	ldr	r0, [r7, #12]
 8016e50:	f7fe ff76 	bl	8015d40 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8016e54:	683b      	ldr	r3, [r7, #0]
 8016e56:	2b05      	cmp	r3, #5
 8016e58:	d929      	bls.n	8016eae <gen_numname+0x72>
		sr = seq;
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8016e5e:	e020      	b.n	8016ea2 <gen_numname+0x66>
			wc = *lfn++;
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	1c9a      	adds	r2, r3, #2
 8016e64:	607a      	str	r2, [r7, #4]
 8016e66:	881b      	ldrh	r3, [r3, #0]
 8016e68:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e6e:	e015      	b.n	8016e9c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8016e70:	69fb      	ldr	r3, [r7, #28]
 8016e72:	005a      	lsls	r2, r3, #1
 8016e74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e76:	f003 0301 	and.w	r3, r3, #1
 8016e7a:	4413      	add	r3, r2
 8016e7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8016e7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e80:	085b      	lsrs	r3, r3, #1
 8016e82:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016e84:	69fb      	ldr	r3, [r7, #28]
 8016e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d003      	beq.n	8016e96 <gen_numname+0x5a>
 8016e8e:	69fa      	ldr	r2, [r7, #28]
 8016e90:	4b31      	ldr	r3, [pc, #196]	; (8016f58 <gen_numname+0x11c>)
 8016e92:	4053      	eors	r3, r2
 8016e94:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e98:	3301      	adds	r3, #1
 8016e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e9e:	2b0f      	cmp	r3, #15
 8016ea0:	d9e6      	bls.n	8016e70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	881b      	ldrh	r3, [r3, #0]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d1da      	bne.n	8016e60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8016eaa:	69fb      	ldr	r3, [r7, #28]
 8016eac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8016eae:	2307      	movs	r3, #7
 8016eb0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016eb2:	683b      	ldr	r3, [r7, #0]
 8016eb4:	b2db      	uxtb	r3, r3
 8016eb6:	f003 030f 	and.w	r3, r3, #15
 8016eba:	b2db      	uxtb	r3, r3
 8016ebc:	3330      	adds	r3, #48	; 0x30
 8016ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8016ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016ec6:	2b39      	cmp	r3, #57	; 0x39
 8016ec8:	d904      	bls.n	8016ed4 <gen_numname+0x98>
 8016eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016ece:	3307      	adds	r3, #7
 8016ed0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed6:	1e5a      	subs	r2, r3, #1
 8016ed8:	62ba      	str	r2, [r7, #40]	; 0x28
 8016eda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016ede:	4413      	add	r3, r2
 8016ee0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016ee4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	091b      	lsrs	r3, r3, #4
 8016eec:	603b      	str	r3, [r7, #0]
	} while (seq);
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d1de      	bne.n	8016eb2 <gen_numname+0x76>
	ns[i] = '~';
 8016ef4:	f107 0214 	add.w	r2, r7, #20
 8016ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efa:	4413      	add	r3, r2
 8016efc:	227e      	movs	r2, #126	; 0x7e
 8016efe:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016f00:	2300      	movs	r3, #0
 8016f02:	627b      	str	r3, [r7, #36]	; 0x24
 8016f04:	e002      	b.n	8016f0c <gen_numname+0xd0>
 8016f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f08:	3301      	adds	r3, #1
 8016f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8016f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f10:	429a      	cmp	r2, r3
 8016f12:	d205      	bcs.n	8016f20 <gen_numname+0xe4>
 8016f14:	68fa      	ldr	r2, [r7, #12]
 8016f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f18:	4413      	add	r3, r2
 8016f1a:	781b      	ldrb	r3, [r3, #0]
 8016f1c:	2b20      	cmp	r3, #32
 8016f1e:	d1f2      	bne.n	8016f06 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f22:	2b07      	cmp	r3, #7
 8016f24:	d808      	bhi.n	8016f38 <gen_numname+0xfc>
 8016f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f28:	1c5a      	adds	r2, r3, #1
 8016f2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8016f2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016f30:	4413      	add	r3, r2
 8016f32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8016f36:	e000      	b.n	8016f3a <gen_numname+0xfe>
 8016f38:	2120      	movs	r1, #32
 8016f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3c:	1c5a      	adds	r2, r3, #1
 8016f3e:	627a      	str	r2, [r7, #36]	; 0x24
 8016f40:	68fa      	ldr	r2, [r7, #12]
 8016f42:	4413      	add	r3, r2
 8016f44:	460a      	mov	r2, r1
 8016f46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8016f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4a:	2b07      	cmp	r3, #7
 8016f4c:	d9e8      	bls.n	8016f20 <gen_numname+0xe4>
}
 8016f4e:	bf00      	nop
 8016f50:	bf00      	nop
 8016f52:	3730      	adds	r7, #48	; 0x30
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}
 8016f58:	00011021 	.word	0x00011021

08016f5c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8016f5c:	b480      	push	{r7}
 8016f5e:	b085      	sub	sp, #20
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8016f64:	2300      	movs	r3, #0
 8016f66:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8016f68:	230b      	movs	r3, #11
 8016f6a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016f6c:	7bfb      	ldrb	r3, [r7, #15]
 8016f6e:	b2da      	uxtb	r2, r3
 8016f70:	0852      	lsrs	r2, r2, #1
 8016f72:	01db      	lsls	r3, r3, #7
 8016f74:	4313      	orrs	r3, r2
 8016f76:	b2da      	uxtb	r2, r3
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	1c59      	adds	r1, r3, #1
 8016f7c:	6079      	str	r1, [r7, #4]
 8016f7e:	781b      	ldrb	r3, [r3, #0]
 8016f80:	4413      	add	r3, r2
 8016f82:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	3b01      	subs	r3, #1
 8016f88:	60bb      	str	r3, [r7, #8]
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d1ed      	bne.n	8016f6c <sum_sfn+0x10>
	return sum;
 8016f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f92:	4618      	mov	r0, r3
 8016f94:	3714      	adds	r7, #20
 8016f96:	46bd      	mov	sp, r7
 8016f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9c:	4770      	bx	lr

08016f9e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016f9e:	b580      	push	{r7, lr}
 8016fa0:	b086      	sub	sp, #24
 8016fa2:	af00      	add	r7, sp, #0
 8016fa4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016fac:	2100      	movs	r1, #0
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f7ff fca6 	bl	8016900 <dir_sdi>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8016fb8:	7dfb      	ldrb	r3, [r7, #23]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d001      	beq.n	8016fc2 <dir_find+0x24>
 8016fbe:	7dfb      	ldrb	r3, [r7, #23]
 8016fc0:	e0a9      	b.n	8017116 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016fc2:	23ff      	movs	r3, #255	; 0xff
 8016fc4:	753b      	strb	r3, [r7, #20]
 8016fc6:	7d3b      	ldrb	r3, [r7, #20]
 8016fc8:	757b      	strb	r3, [r7, #21]
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016fd0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	69db      	ldr	r3, [r3, #28]
 8016fd6:	4619      	mov	r1, r3
 8016fd8:	6938      	ldr	r0, [r7, #16]
 8016fda:	f7ff f911 	bl	8016200 <move_window>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016fe2:	7dfb      	ldrb	r3, [r7, #23]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	f040 8090 	bne.w	801710a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	6a1b      	ldr	r3, [r3, #32]
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016ff2:	7dbb      	ldrb	r3, [r7, #22]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d102      	bne.n	8016ffe <dir_find+0x60>
 8016ff8:	2304      	movs	r3, #4
 8016ffa:	75fb      	strb	r3, [r7, #23]
 8016ffc:	e08a      	b.n	8017114 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6a1b      	ldr	r3, [r3, #32]
 8017002:	330b      	adds	r3, #11
 8017004:	781b      	ldrb	r3, [r3, #0]
 8017006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801700a:	73fb      	strb	r3, [r7, #15]
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	7bfa      	ldrb	r2, [r7, #15]
 8017010:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8017012:	7dbb      	ldrb	r3, [r7, #22]
 8017014:	2be5      	cmp	r3, #229	; 0xe5
 8017016:	d007      	beq.n	8017028 <dir_find+0x8a>
 8017018:	7bfb      	ldrb	r3, [r7, #15]
 801701a:	f003 0308 	and.w	r3, r3, #8
 801701e:	2b00      	cmp	r3, #0
 8017020:	d009      	beq.n	8017036 <dir_find+0x98>
 8017022:	7bfb      	ldrb	r3, [r7, #15]
 8017024:	2b0f      	cmp	r3, #15
 8017026:	d006      	beq.n	8017036 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017028:	23ff      	movs	r3, #255	; 0xff
 801702a:	757b      	strb	r3, [r7, #21]
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017032:	631a      	str	r2, [r3, #48]	; 0x30
 8017034:	e05e      	b.n	80170f4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8017036:	7bfb      	ldrb	r3, [r7, #15]
 8017038:	2b0f      	cmp	r3, #15
 801703a:	d136      	bne.n	80170aa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017046:	2b00      	cmp	r3, #0
 8017048:	d154      	bne.n	80170f4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801704a:	7dbb      	ldrb	r3, [r7, #22]
 801704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017050:	2b00      	cmp	r3, #0
 8017052:	d00d      	beq.n	8017070 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	6a1b      	ldr	r3, [r3, #32]
 8017058:	7b5b      	ldrb	r3, [r3, #13]
 801705a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801705c:	7dbb      	ldrb	r3, [r7, #22]
 801705e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017062:	75bb      	strb	r3, [r7, #22]
 8017064:	7dbb      	ldrb	r3, [r7, #22]
 8017066:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	695a      	ldr	r2, [r3, #20]
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017070:	7dba      	ldrb	r2, [r7, #22]
 8017072:	7d7b      	ldrb	r3, [r7, #21]
 8017074:	429a      	cmp	r2, r3
 8017076:	d115      	bne.n	80170a4 <dir_find+0x106>
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6a1b      	ldr	r3, [r3, #32]
 801707c:	330d      	adds	r3, #13
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	7d3a      	ldrb	r2, [r7, #20]
 8017082:	429a      	cmp	r2, r3
 8017084:	d10e      	bne.n	80170a4 <dir_find+0x106>
 8017086:	693b      	ldr	r3, [r7, #16]
 8017088:	68da      	ldr	r2, [r3, #12]
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6a1b      	ldr	r3, [r3, #32]
 801708e:	4619      	mov	r1, r3
 8017090:	4610      	mov	r0, r2
 8017092:	f7ff fdfb 	bl	8016c8c <cmp_lfn>
 8017096:	4603      	mov	r3, r0
 8017098:	2b00      	cmp	r3, #0
 801709a:	d003      	beq.n	80170a4 <dir_find+0x106>
 801709c:	7d7b      	ldrb	r3, [r7, #21]
 801709e:	3b01      	subs	r3, #1
 80170a0:	b2db      	uxtb	r3, r3
 80170a2:	e000      	b.n	80170a6 <dir_find+0x108>
 80170a4:	23ff      	movs	r3, #255	; 0xff
 80170a6:	757b      	strb	r3, [r7, #21]
 80170a8:	e024      	b.n	80170f4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80170aa:	7d7b      	ldrb	r3, [r7, #21]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d109      	bne.n	80170c4 <dir_find+0x126>
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6a1b      	ldr	r3, [r3, #32]
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7ff ff51 	bl	8016f5c <sum_sfn>
 80170ba:	4603      	mov	r3, r0
 80170bc:	461a      	mov	r2, r3
 80170be:	7d3b      	ldrb	r3, [r7, #20]
 80170c0:	4293      	cmp	r3, r2
 80170c2:	d024      	beq.n	801710e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80170ca:	f003 0301 	and.w	r3, r3, #1
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d10a      	bne.n	80170e8 <dir_find+0x14a>
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	6a18      	ldr	r0, [r3, #32]
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	3324      	adds	r3, #36	; 0x24
 80170da:	220b      	movs	r2, #11
 80170dc:	4619      	mov	r1, r3
 80170de:	f7fe fe6b 	bl	8015db8 <mem_cmp>
 80170e2:	4603      	mov	r3, r0
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d014      	beq.n	8017112 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80170e8:	23ff      	movs	r3, #255	; 0xff
 80170ea:	757b      	strb	r3, [r7, #21]
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80170f2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80170f4:	2100      	movs	r1, #0
 80170f6:	6878      	ldr	r0, [r7, #4]
 80170f8:	f7ff fc7d 	bl	80169f6 <dir_next>
 80170fc:	4603      	mov	r3, r0
 80170fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017100:	7dfb      	ldrb	r3, [r7, #23]
 8017102:	2b00      	cmp	r3, #0
 8017104:	f43f af65 	beq.w	8016fd2 <dir_find+0x34>
 8017108:	e004      	b.n	8017114 <dir_find+0x176>
		if (res != FR_OK) break;
 801710a:	bf00      	nop
 801710c:	e002      	b.n	8017114 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801710e:	bf00      	nop
 8017110:	e000      	b.n	8017114 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017112:	bf00      	nop

	return res;
 8017114:	7dfb      	ldrb	r3, [r7, #23]
}
 8017116:	4618      	mov	r0, r3
 8017118:	3718      	adds	r7, #24
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
	...

08017120 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017120:	b580      	push	{r7, lr}
 8017122:	b08c      	sub	sp, #48	; 0x30
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017134:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8017138:	2b00      	cmp	r3, #0
 801713a:	d001      	beq.n	8017140 <dir_register+0x20>
 801713c:	2306      	movs	r3, #6
 801713e:	e0e0      	b.n	8017302 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8017140:	2300      	movs	r3, #0
 8017142:	627b      	str	r3, [r7, #36]	; 0x24
 8017144:	e002      	b.n	801714c <dir_register+0x2c>
 8017146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017148:	3301      	adds	r3, #1
 801714a:	627b      	str	r3, [r7, #36]	; 0x24
 801714c:	69fb      	ldr	r3, [r7, #28]
 801714e:	68da      	ldr	r2, [r3, #12]
 8017150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017152:	005b      	lsls	r3, r3, #1
 8017154:	4413      	add	r3, r2
 8017156:	881b      	ldrh	r3, [r3, #0]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d1f4      	bne.n	8017146 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8017162:	f107 030c 	add.w	r3, r7, #12
 8017166:	220c      	movs	r2, #12
 8017168:	4618      	mov	r0, r3
 801716a:	f7fe fde9 	bl	8015d40 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801716e:	7dfb      	ldrb	r3, [r7, #23]
 8017170:	f003 0301 	and.w	r3, r3, #1
 8017174:	2b00      	cmp	r3, #0
 8017176:	d032      	beq.n	80171de <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	2240      	movs	r2, #64	; 0x40
 801717c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8017180:	2301      	movs	r3, #1
 8017182:	62bb      	str	r3, [r7, #40]	; 0x28
 8017184:	e016      	b.n	80171b4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801718c:	69fb      	ldr	r3, [r7, #28]
 801718e:	68da      	ldr	r2, [r3, #12]
 8017190:	f107 010c 	add.w	r1, r7, #12
 8017194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017196:	f7ff fe51 	bl	8016e3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801719a:	6878      	ldr	r0, [r7, #4]
 801719c:	f7ff feff 	bl	8016f9e <dir_find>
 80171a0:	4603      	mov	r3, r0
 80171a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80171a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d106      	bne.n	80171bc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80171ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b0:	3301      	adds	r3, #1
 80171b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80171b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b6:	2b63      	cmp	r3, #99	; 0x63
 80171b8:	d9e5      	bls.n	8017186 <dir_register+0x66>
 80171ba:	e000      	b.n	80171be <dir_register+0x9e>
			if (res != FR_OK) break;
 80171bc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80171be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171c0:	2b64      	cmp	r3, #100	; 0x64
 80171c2:	d101      	bne.n	80171c8 <dir_register+0xa8>
 80171c4:	2307      	movs	r3, #7
 80171c6:	e09c      	b.n	8017302 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80171c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80171cc:	2b04      	cmp	r3, #4
 80171ce:	d002      	beq.n	80171d6 <dir_register+0xb6>
 80171d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80171d4:	e095      	b.n	8017302 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80171d6:	7dfa      	ldrb	r2, [r7, #23]
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80171de:	7dfb      	ldrb	r3, [r7, #23]
 80171e0:	f003 0302 	and.w	r3, r3, #2
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d007      	beq.n	80171f8 <dir_register+0xd8>
 80171e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ea:	330c      	adds	r3, #12
 80171ec:	4a47      	ldr	r2, [pc, #284]	; (801730c <dir_register+0x1ec>)
 80171ee:	fba2 2303 	umull	r2, r3, r2, r3
 80171f2:	089b      	lsrs	r3, r3, #2
 80171f4:	3301      	adds	r3, #1
 80171f6:	e000      	b.n	80171fa <dir_register+0xda>
 80171f8:	2301      	movs	r3, #1
 80171fa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80171fc:	6a39      	ldr	r1, [r7, #32]
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f7ff fcbe 	bl	8016b80 <dir_alloc>
 8017204:	4603      	mov	r3, r0
 8017206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801720a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801720e:	2b00      	cmp	r3, #0
 8017210:	d148      	bne.n	80172a4 <dir_register+0x184>
 8017212:	6a3b      	ldr	r3, [r7, #32]
 8017214:	3b01      	subs	r3, #1
 8017216:	623b      	str	r3, [r7, #32]
 8017218:	6a3b      	ldr	r3, [r7, #32]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d042      	beq.n	80172a4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	695a      	ldr	r2, [r3, #20]
 8017222:	6a3b      	ldr	r3, [r7, #32]
 8017224:	015b      	lsls	r3, r3, #5
 8017226:	1ad3      	subs	r3, r2, r3
 8017228:	4619      	mov	r1, r3
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	f7ff fb68 	bl	8016900 <dir_sdi>
 8017230:	4603      	mov	r3, r0
 8017232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8017236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801723a:	2b00      	cmp	r3, #0
 801723c:	d132      	bne.n	80172a4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	3324      	adds	r3, #36	; 0x24
 8017242:	4618      	mov	r0, r3
 8017244:	f7ff fe8a 	bl	8016f5c <sum_sfn>
 8017248:	4603      	mov	r3, r0
 801724a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	69db      	ldr	r3, [r3, #28]
 8017250:	4619      	mov	r1, r3
 8017252:	69f8      	ldr	r0, [r7, #28]
 8017254:	f7fe ffd4 	bl	8016200 <move_window>
 8017258:	4603      	mov	r3, r0
 801725a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801725e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017262:	2b00      	cmp	r3, #0
 8017264:	d11d      	bne.n	80172a2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8017266:	69fb      	ldr	r3, [r7, #28]
 8017268:	68d8      	ldr	r0, [r3, #12]
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	6a19      	ldr	r1, [r3, #32]
 801726e:	6a3b      	ldr	r3, [r7, #32]
 8017270:	b2da      	uxtb	r2, r3
 8017272:	7efb      	ldrb	r3, [r7, #27]
 8017274:	f7ff fd7a 	bl	8016d6c <put_lfn>
				fs->wflag = 1;
 8017278:	69fb      	ldr	r3, [r7, #28]
 801727a:	2201      	movs	r2, #1
 801727c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801727e:	2100      	movs	r1, #0
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f7ff fbb8 	bl	80169f6 <dir_next>
 8017286:	4603      	mov	r3, r0
 8017288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801728c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017290:	2b00      	cmp	r3, #0
 8017292:	d107      	bne.n	80172a4 <dir_register+0x184>
 8017294:	6a3b      	ldr	r3, [r7, #32]
 8017296:	3b01      	subs	r3, #1
 8017298:	623b      	str	r3, [r7, #32]
 801729a:	6a3b      	ldr	r3, [r7, #32]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d1d5      	bne.n	801724c <dir_register+0x12c>
 80172a0:	e000      	b.n	80172a4 <dir_register+0x184>
				if (res != FR_OK) break;
 80172a2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80172a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d128      	bne.n	80172fe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	69db      	ldr	r3, [r3, #28]
 80172b0:	4619      	mov	r1, r3
 80172b2:	69f8      	ldr	r0, [r7, #28]
 80172b4:	f7fe ffa4 	bl	8016200 <move_window>
 80172b8:	4603      	mov	r3, r0
 80172ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80172be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d11b      	bne.n	80172fe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	6a1b      	ldr	r3, [r3, #32]
 80172ca:	2220      	movs	r2, #32
 80172cc:	2100      	movs	r1, #0
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7fe fd57 	bl	8015d82 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6a18      	ldr	r0, [r3, #32]
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	3324      	adds	r3, #36	; 0x24
 80172dc:	220b      	movs	r2, #11
 80172de:	4619      	mov	r1, r3
 80172e0:	f7fe fd2e 	bl	8015d40 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	6a1b      	ldr	r3, [r3, #32]
 80172ee:	330c      	adds	r3, #12
 80172f0:	f002 0218 	and.w	r2, r2, #24
 80172f4:	b2d2      	uxtb	r2, r2
 80172f6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80172f8:	69fb      	ldr	r3, [r7, #28]
 80172fa:	2201      	movs	r2, #1
 80172fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80172fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8017302:	4618      	mov	r0, r3
 8017304:	3730      	adds	r7, #48	; 0x30
 8017306:	46bd      	mov	sp, r7
 8017308:	bd80      	pop	{r7, pc}
 801730a:	bf00      	nop
 801730c:	4ec4ec4f 	.word	0x4ec4ec4f

08017310 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b08a      	sub	sp, #40	; 0x28
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
 8017318:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801731a:	683b      	ldr	r3, [r7, #0]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	613b      	str	r3, [r7, #16]
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	68db      	ldr	r3, [r3, #12]
 8017326:	60fb      	str	r3, [r7, #12]
 8017328:	2300      	movs	r3, #0
 801732a:	617b      	str	r3, [r7, #20]
 801732c:	697b      	ldr	r3, [r7, #20]
 801732e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8017330:	69bb      	ldr	r3, [r7, #24]
 8017332:	1c5a      	adds	r2, r3, #1
 8017334:	61ba      	str	r2, [r7, #24]
 8017336:	693a      	ldr	r2, [r7, #16]
 8017338:	4413      	add	r3, r2
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801733e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017340:	2b1f      	cmp	r3, #31
 8017342:	d940      	bls.n	80173c6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8017344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017346:	2b2f      	cmp	r3, #47	; 0x2f
 8017348:	d006      	beq.n	8017358 <create_name+0x48>
 801734a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801734c:	2b5c      	cmp	r3, #92	; 0x5c
 801734e:	d110      	bne.n	8017372 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017350:	e002      	b.n	8017358 <create_name+0x48>
 8017352:	69bb      	ldr	r3, [r7, #24]
 8017354:	3301      	adds	r3, #1
 8017356:	61bb      	str	r3, [r7, #24]
 8017358:	693a      	ldr	r2, [r7, #16]
 801735a:	69bb      	ldr	r3, [r7, #24]
 801735c:	4413      	add	r3, r2
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	2b2f      	cmp	r3, #47	; 0x2f
 8017362:	d0f6      	beq.n	8017352 <create_name+0x42>
 8017364:	693a      	ldr	r2, [r7, #16]
 8017366:	69bb      	ldr	r3, [r7, #24]
 8017368:	4413      	add	r3, r2
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	2b5c      	cmp	r3, #92	; 0x5c
 801736e:	d0f0      	beq.n	8017352 <create_name+0x42>
			break;
 8017370:	e02a      	b.n	80173c8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	2b63      	cmp	r3, #99	; 0x63
 8017376:	d901      	bls.n	801737c <create_name+0x6c>
 8017378:	2306      	movs	r3, #6
 801737a:	e177      	b.n	801766c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801737c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801737e:	b2db      	uxtb	r3, r3
 8017380:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8017382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017384:	2101      	movs	r1, #1
 8017386:	4618      	mov	r0, r3
 8017388:	f001 fb86 	bl	8018a98 <ff_convert>
 801738c:	4603      	mov	r3, r0
 801738e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8017390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017392:	2b00      	cmp	r3, #0
 8017394:	d101      	bne.n	801739a <create_name+0x8a>
 8017396:	2306      	movs	r3, #6
 8017398:	e168      	b.n	801766c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801739a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801739c:	2b7f      	cmp	r3, #127	; 0x7f
 801739e:	d809      	bhi.n	80173b4 <create_name+0xa4>
 80173a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173a2:	4619      	mov	r1, r3
 80173a4:	48b3      	ldr	r0, [pc, #716]	; (8017674 <create_name+0x364>)
 80173a6:	f7fe fd2e 	bl	8015e06 <chk_chr>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d001      	beq.n	80173b4 <create_name+0xa4>
 80173b0:	2306      	movs	r3, #6
 80173b2:	e15b      	b.n	801766c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80173b4:	697b      	ldr	r3, [r7, #20]
 80173b6:	1c5a      	adds	r2, r3, #1
 80173b8:	617a      	str	r2, [r7, #20]
 80173ba:	005b      	lsls	r3, r3, #1
 80173bc:	68fa      	ldr	r2, [r7, #12]
 80173be:	4413      	add	r3, r2
 80173c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80173c2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80173c4:	e7b4      	b.n	8017330 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80173c6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80173c8:	693a      	ldr	r2, [r7, #16]
 80173ca:	69bb      	ldr	r3, [r7, #24]
 80173cc:	441a      	add	r2, r3
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80173d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173d4:	2b1f      	cmp	r3, #31
 80173d6:	d801      	bhi.n	80173dc <create_name+0xcc>
 80173d8:	2304      	movs	r3, #4
 80173da:	e000      	b.n	80173de <create_name+0xce>
 80173dc:	2300      	movs	r3, #0
 80173de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80173e2:	e011      	b.n	8017408 <create_name+0xf8>
		w = lfn[di - 1];
 80173e4:	697a      	ldr	r2, [r7, #20]
 80173e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80173ea:	4413      	add	r3, r2
 80173ec:	005b      	lsls	r3, r3, #1
 80173ee:	68fa      	ldr	r2, [r7, #12]
 80173f0:	4413      	add	r3, r2
 80173f2:	881b      	ldrh	r3, [r3, #0]
 80173f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80173f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173f8:	2b20      	cmp	r3, #32
 80173fa:	d002      	beq.n	8017402 <create_name+0xf2>
 80173fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173fe:	2b2e      	cmp	r3, #46	; 0x2e
 8017400:	d106      	bne.n	8017410 <create_name+0x100>
		di--;
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	3b01      	subs	r3, #1
 8017406:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017408:	697b      	ldr	r3, [r7, #20]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d1ea      	bne.n	80173e4 <create_name+0xd4>
 801740e:	e000      	b.n	8017412 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8017410:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	005b      	lsls	r3, r3, #1
 8017416:	68fa      	ldr	r2, [r7, #12]
 8017418:	4413      	add	r3, r2
 801741a:	2200      	movs	r2, #0
 801741c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d101      	bne.n	8017428 <create_name+0x118>
 8017424:	2306      	movs	r3, #6
 8017426:	e121      	b.n	801766c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	3324      	adds	r3, #36	; 0x24
 801742c:	220b      	movs	r2, #11
 801742e:	2120      	movs	r1, #32
 8017430:	4618      	mov	r0, r3
 8017432:	f7fe fca6 	bl	8015d82 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8017436:	2300      	movs	r3, #0
 8017438:	61bb      	str	r3, [r7, #24]
 801743a:	e002      	b.n	8017442 <create_name+0x132>
 801743c:	69bb      	ldr	r3, [r7, #24]
 801743e:	3301      	adds	r3, #1
 8017440:	61bb      	str	r3, [r7, #24]
 8017442:	69bb      	ldr	r3, [r7, #24]
 8017444:	005b      	lsls	r3, r3, #1
 8017446:	68fa      	ldr	r2, [r7, #12]
 8017448:	4413      	add	r3, r2
 801744a:	881b      	ldrh	r3, [r3, #0]
 801744c:	2b20      	cmp	r3, #32
 801744e:	d0f5      	beq.n	801743c <create_name+0x12c>
 8017450:	69bb      	ldr	r3, [r7, #24]
 8017452:	005b      	lsls	r3, r3, #1
 8017454:	68fa      	ldr	r2, [r7, #12]
 8017456:	4413      	add	r3, r2
 8017458:	881b      	ldrh	r3, [r3, #0]
 801745a:	2b2e      	cmp	r3, #46	; 0x2e
 801745c:	d0ee      	beq.n	801743c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801745e:	69bb      	ldr	r3, [r7, #24]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d009      	beq.n	8017478 <create_name+0x168>
 8017464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017468:	f043 0303 	orr.w	r3, r3, #3
 801746c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8017470:	e002      	b.n	8017478 <create_name+0x168>
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	3b01      	subs	r3, #1
 8017476:	617b      	str	r3, [r7, #20]
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d009      	beq.n	8017492 <create_name+0x182>
 801747e:	697a      	ldr	r2, [r7, #20]
 8017480:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017484:	4413      	add	r3, r2
 8017486:	005b      	lsls	r3, r3, #1
 8017488:	68fa      	ldr	r2, [r7, #12]
 801748a:	4413      	add	r3, r2
 801748c:	881b      	ldrh	r3, [r3, #0]
 801748e:	2b2e      	cmp	r3, #46	; 0x2e
 8017490:	d1ef      	bne.n	8017472 <create_name+0x162>

	i = b = 0; ni = 8;
 8017492:	2300      	movs	r3, #0
 8017494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017498:	2300      	movs	r3, #0
 801749a:	623b      	str	r3, [r7, #32]
 801749c:	2308      	movs	r3, #8
 801749e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80174a0:	69bb      	ldr	r3, [r7, #24]
 80174a2:	1c5a      	adds	r2, r3, #1
 80174a4:	61ba      	str	r2, [r7, #24]
 80174a6:	005b      	lsls	r3, r3, #1
 80174a8:	68fa      	ldr	r2, [r7, #12]
 80174aa:	4413      	add	r3, r2
 80174ac:	881b      	ldrh	r3, [r3, #0]
 80174ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80174b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f000 8090 	beq.w	80175d8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80174b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80174ba:	2b20      	cmp	r3, #32
 80174bc:	d006      	beq.n	80174cc <create_name+0x1bc>
 80174be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80174c0:	2b2e      	cmp	r3, #46	; 0x2e
 80174c2:	d10a      	bne.n	80174da <create_name+0x1ca>
 80174c4:	69ba      	ldr	r2, [r7, #24]
 80174c6:	697b      	ldr	r3, [r7, #20]
 80174c8:	429a      	cmp	r2, r3
 80174ca:	d006      	beq.n	80174da <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80174cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174d0:	f043 0303 	orr.w	r3, r3, #3
 80174d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80174d8:	e07d      	b.n	80175d6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80174da:	6a3a      	ldr	r2, [r7, #32]
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	429a      	cmp	r2, r3
 80174e0:	d203      	bcs.n	80174ea <create_name+0x1da>
 80174e2:	69ba      	ldr	r2, [r7, #24]
 80174e4:	697b      	ldr	r3, [r7, #20]
 80174e6:	429a      	cmp	r2, r3
 80174e8:	d123      	bne.n	8017532 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80174ea:	69fb      	ldr	r3, [r7, #28]
 80174ec:	2b0b      	cmp	r3, #11
 80174ee:	d106      	bne.n	80174fe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80174f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174f4:	f043 0303 	orr.w	r3, r3, #3
 80174f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80174fc:	e06f      	b.n	80175de <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80174fe:	69ba      	ldr	r2, [r7, #24]
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	429a      	cmp	r2, r3
 8017504:	d005      	beq.n	8017512 <create_name+0x202>
 8017506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801750a:	f043 0303 	orr.w	r3, r3, #3
 801750e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8017512:	69ba      	ldr	r2, [r7, #24]
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	429a      	cmp	r2, r3
 8017518:	d860      	bhi.n	80175dc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801751a:	697b      	ldr	r3, [r7, #20]
 801751c:	61bb      	str	r3, [r7, #24]
 801751e:	2308      	movs	r3, #8
 8017520:	623b      	str	r3, [r7, #32]
 8017522:	230b      	movs	r3, #11
 8017524:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8017526:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801752a:	009b      	lsls	r3, r3, #2
 801752c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017530:	e051      	b.n	80175d6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8017532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017534:	2b7f      	cmp	r3, #127	; 0x7f
 8017536:	d914      	bls.n	8017562 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8017538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801753a:	2100      	movs	r1, #0
 801753c:	4618      	mov	r0, r3
 801753e:	f001 faab 	bl	8018a98 <ff_convert>
 8017542:	4603      	mov	r3, r0
 8017544:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8017546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017548:	2b00      	cmp	r3, #0
 801754a:	d004      	beq.n	8017556 <create_name+0x246>
 801754c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801754e:	3b80      	subs	r3, #128	; 0x80
 8017550:	4a49      	ldr	r2, [pc, #292]	; (8017678 <create_name+0x368>)
 8017552:	5cd3      	ldrb	r3, [r2, r3]
 8017554:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8017556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801755a:	f043 0302 	orr.w	r3, r3, #2
 801755e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8017562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017564:	2b00      	cmp	r3, #0
 8017566:	d007      	beq.n	8017578 <create_name+0x268>
 8017568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801756a:	4619      	mov	r1, r3
 801756c:	4843      	ldr	r0, [pc, #268]	; (801767c <create_name+0x36c>)
 801756e:	f7fe fc4a 	bl	8015e06 <chk_chr>
 8017572:	4603      	mov	r3, r0
 8017574:	2b00      	cmp	r3, #0
 8017576:	d008      	beq.n	801758a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8017578:	235f      	movs	r3, #95	; 0x5f
 801757a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801757c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017580:	f043 0303 	orr.w	r3, r3, #3
 8017584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017588:	e01b      	b.n	80175c2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801758a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801758c:	2b40      	cmp	r3, #64	; 0x40
 801758e:	d909      	bls.n	80175a4 <create_name+0x294>
 8017590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017592:	2b5a      	cmp	r3, #90	; 0x5a
 8017594:	d806      	bhi.n	80175a4 <create_name+0x294>
					b |= 2;
 8017596:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801759a:	f043 0302 	orr.w	r3, r3, #2
 801759e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80175a2:	e00e      	b.n	80175c2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80175a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175a6:	2b60      	cmp	r3, #96	; 0x60
 80175a8:	d90b      	bls.n	80175c2 <create_name+0x2b2>
 80175aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175ac:	2b7a      	cmp	r3, #122	; 0x7a
 80175ae:	d808      	bhi.n	80175c2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80175b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175b4:	f043 0301 	orr.w	r3, r3, #1
 80175b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80175bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175be:	3b20      	subs	r3, #32
 80175c0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80175c2:	6a3b      	ldr	r3, [r7, #32]
 80175c4:	1c5a      	adds	r2, r3, #1
 80175c6:	623a      	str	r2, [r7, #32]
 80175c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80175ca:	b2d1      	uxtb	r1, r2
 80175cc:	687a      	ldr	r2, [r7, #4]
 80175ce:	4413      	add	r3, r2
 80175d0:	460a      	mov	r2, r1
 80175d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80175d6:	e763      	b.n	80174a0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80175d8:	bf00      	nop
 80175da:	e000      	b.n	80175de <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80175dc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80175e4:	2be5      	cmp	r3, #229	; 0xe5
 80175e6:	d103      	bne.n	80175f0 <create_name+0x2e0>
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2205      	movs	r2, #5
 80175ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80175f0:	69fb      	ldr	r3, [r7, #28]
 80175f2:	2b08      	cmp	r3, #8
 80175f4:	d104      	bne.n	8017600 <create_name+0x2f0>
 80175f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175fa:	009b      	lsls	r3, r3, #2
 80175fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8017600:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017604:	f003 030c 	and.w	r3, r3, #12
 8017608:	2b0c      	cmp	r3, #12
 801760a:	d005      	beq.n	8017618 <create_name+0x308>
 801760c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017610:	f003 0303 	and.w	r3, r3, #3
 8017614:	2b03      	cmp	r3, #3
 8017616:	d105      	bne.n	8017624 <create_name+0x314>
 8017618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801761c:	f043 0302 	orr.w	r3, r3, #2
 8017620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8017624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017628:	f003 0302 	and.w	r3, r3, #2
 801762c:	2b00      	cmp	r3, #0
 801762e:	d117      	bne.n	8017660 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8017630:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017634:	f003 0303 	and.w	r3, r3, #3
 8017638:	2b01      	cmp	r3, #1
 801763a:	d105      	bne.n	8017648 <create_name+0x338>
 801763c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017640:	f043 0310 	orr.w	r3, r3, #16
 8017644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8017648:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801764c:	f003 030c 	and.w	r3, r3, #12
 8017650:	2b04      	cmp	r3, #4
 8017652:	d105      	bne.n	8017660 <create_name+0x350>
 8017654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017658:	f043 0308 	orr.w	r3, r3, #8
 801765c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017666:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801766a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801766c:	4618      	mov	r0, r3
 801766e:	3728      	adds	r7, #40	; 0x28
 8017670:	46bd      	mov	sp, r7
 8017672:	bd80      	pop	{r7, pc}
 8017674:	0801e0f4 	.word	0x0801e0f4
 8017678:	0801ffe0 	.word	0x0801ffe0
 801767c:	0801e100 	.word	0x0801e100

08017680 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b086      	sub	sp, #24
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801768e:	693b      	ldr	r3, [r7, #16]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017694:	e002      	b.n	801769c <follow_path+0x1c>
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	3301      	adds	r3, #1
 801769a:	603b      	str	r3, [r7, #0]
 801769c:	683b      	ldr	r3, [r7, #0]
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	2b2f      	cmp	r3, #47	; 0x2f
 80176a2:	d0f8      	beq.n	8017696 <follow_path+0x16>
 80176a4:	683b      	ldr	r3, [r7, #0]
 80176a6:	781b      	ldrb	r3, [r3, #0]
 80176a8:	2b5c      	cmp	r3, #92	; 0x5c
 80176aa:	d0f4      	beq.n	8017696 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80176ac:	693b      	ldr	r3, [r7, #16]
 80176ae:	2200      	movs	r2, #0
 80176b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80176b2:	683b      	ldr	r3, [r7, #0]
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	2b1f      	cmp	r3, #31
 80176b8:	d80a      	bhi.n	80176d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	2280      	movs	r2, #128	; 0x80
 80176be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80176c2:	2100      	movs	r1, #0
 80176c4:	6878      	ldr	r0, [r7, #4]
 80176c6:	f7ff f91b 	bl	8016900 <dir_sdi>
 80176ca:	4603      	mov	r3, r0
 80176cc:	75fb      	strb	r3, [r7, #23]
 80176ce:	e043      	b.n	8017758 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80176d0:	463b      	mov	r3, r7
 80176d2:	4619      	mov	r1, r3
 80176d4:	6878      	ldr	r0, [r7, #4]
 80176d6:	f7ff fe1b 	bl	8017310 <create_name>
 80176da:	4603      	mov	r3, r0
 80176dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80176de:	7dfb      	ldrb	r3, [r7, #23]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d134      	bne.n	801774e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f7ff fc5a 	bl	8016f9e <dir_find>
 80176ea:	4603      	mov	r3, r0
 80176ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80176f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80176f6:	7dfb      	ldrb	r3, [r7, #23]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d00a      	beq.n	8017712 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80176fc:	7dfb      	ldrb	r3, [r7, #23]
 80176fe:	2b04      	cmp	r3, #4
 8017700:	d127      	bne.n	8017752 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017702:	7afb      	ldrb	r3, [r7, #11]
 8017704:	f003 0304 	and.w	r3, r3, #4
 8017708:	2b00      	cmp	r3, #0
 801770a:	d122      	bne.n	8017752 <follow_path+0xd2>
 801770c:	2305      	movs	r3, #5
 801770e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017710:	e01f      	b.n	8017752 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017712:	7afb      	ldrb	r3, [r7, #11]
 8017714:	f003 0304 	and.w	r3, r3, #4
 8017718:	2b00      	cmp	r3, #0
 801771a:	d11c      	bne.n	8017756 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801771c:	693b      	ldr	r3, [r7, #16]
 801771e:	799b      	ldrb	r3, [r3, #6]
 8017720:	f003 0310 	and.w	r3, r3, #16
 8017724:	2b00      	cmp	r3, #0
 8017726:	d102      	bne.n	801772e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017728:	2305      	movs	r3, #5
 801772a:	75fb      	strb	r3, [r7, #23]
 801772c:	e014      	b.n	8017758 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	695b      	ldr	r3, [r3, #20]
 8017738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801773c:	4413      	add	r3, r2
 801773e:	4619      	mov	r1, r3
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f7ff fa64 	bl	8016c0e <ld_clust>
 8017746:	4602      	mov	r2, r0
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801774c:	e7c0      	b.n	80176d0 <follow_path+0x50>
			if (res != FR_OK) break;
 801774e:	bf00      	nop
 8017750:	e002      	b.n	8017758 <follow_path+0xd8>
				break;
 8017752:	bf00      	nop
 8017754:	e000      	b.n	8017758 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017756:	bf00      	nop
			}
		}
	}

	return res;
 8017758:	7dfb      	ldrb	r3, [r7, #23]
}
 801775a:	4618      	mov	r0, r3
 801775c:	3718      	adds	r7, #24
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}

08017762 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017762:	b480      	push	{r7}
 8017764:	b087      	sub	sp, #28
 8017766:	af00      	add	r7, sp, #0
 8017768:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801776a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801776e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d031      	beq.n	80177dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	617b      	str	r3, [r7, #20]
 801777e:	e002      	b.n	8017786 <get_ldnumber+0x24>
 8017780:	697b      	ldr	r3, [r7, #20]
 8017782:	3301      	adds	r3, #1
 8017784:	617b      	str	r3, [r7, #20]
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	781b      	ldrb	r3, [r3, #0]
 801778a:	2b1f      	cmp	r3, #31
 801778c:	d903      	bls.n	8017796 <get_ldnumber+0x34>
 801778e:	697b      	ldr	r3, [r7, #20]
 8017790:	781b      	ldrb	r3, [r3, #0]
 8017792:	2b3a      	cmp	r3, #58	; 0x3a
 8017794:	d1f4      	bne.n	8017780 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	781b      	ldrb	r3, [r3, #0]
 801779a:	2b3a      	cmp	r3, #58	; 0x3a
 801779c:	d11c      	bne.n	80177d8 <get_ldnumber+0x76>
			tp = *path;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	1c5a      	adds	r2, r3, #1
 80177a8:	60fa      	str	r2, [r7, #12]
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	3b30      	subs	r3, #48	; 0x30
 80177ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80177b0:	68bb      	ldr	r3, [r7, #8]
 80177b2:	2b09      	cmp	r3, #9
 80177b4:	d80e      	bhi.n	80177d4 <get_ldnumber+0x72>
 80177b6:	68fa      	ldr	r2, [r7, #12]
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	429a      	cmp	r2, r3
 80177bc:	d10a      	bne.n	80177d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80177be:	68bb      	ldr	r3, [r7, #8]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d107      	bne.n	80177d4 <get_ldnumber+0x72>
					vol = (int)i;
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80177c8:	697b      	ldr	r3, [r7, #20]
 80177ca:	3301      	adds	r3, #1
 80177cc:	617b      	str	r3, [r7, #20]
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	697a      	ldr	r2, [r7, #20]
 80177d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80177d4:	693b      	ldr	r3, [r7, #16]
 80177d6:	e002      	b.n	80177de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80177d8:	2300      	movs	r3, #0
 80177da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80177dc:	693b      	ldr	r3, [r7, #16]
}
 80177de:	4618      	mov	r0, r3
 80177e0:	371c      	adds	r7, #28
 80177e2:	46bd      	mov	sp, r7
 80177e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e8:	4770      	bx	lr
	...

080177ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b082      	sub	sp, #8
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
 80177f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	2200      	movs	r2, #0
 80177fa:	70da      	strb	r2, [r3, #3]
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017802:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017804:	6839      	ldr	r1, [r7, #0]
 8017806:	6878      	ldr	r0, [r7, #4]
 8017808:	f7fe fcfa 	bl	8016200 <move_window>
 801780c:	4603      	mov	r3, r0
 801780e:	2b00      	cmp	r3, #0
 8017810:	d001      	beq.n	8017816 <check_fs+0x2a>
 8017812:	2304      	movs	r3, #4
 8017814:	e038      	b.n	8017888 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	3338      	adds	r3, #56	; 0x38
 801781a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801781e:	4618      	mov	r0, r3
 8017820:	f7fe fa0c 	bl	8015c3c <ld_word>
 8017824:	4603      	mov	r3, r0
 8017826:	461a      	mov	r2, r3
 8017828:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801782c:	429a      	cmp	r2, r3
 801782e:	d001      	beq.n	8017834 <check_fs+0x48>
 8017830:	2303      	movs	r3, #3
 8017832:	e029      	b.n	8017888 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801783a:	2be9      	cmp	r3, #233	; 0xe9
 801783c:	d009      	beq.n	8017852 <check_fs+0x66>
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017844:	2beb      	cmp	r3, #235	; 0xeb
 8017846:	d11e      	bne.n	8017886 <check_fs+0x9a>
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801784e:	2b90      	cmp	r3, #144	; 0x90
 8017850:	d119      	bne.n	8017886 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	3338      	adds	r3, #56	; 0x38
 8017856:	3336      	adds	r3, #54	; 0x36
 8017858:	4618      	mov	r0, r3
 801785a:	f7fe fa07 	bl	8015c6c <ld_dword>
 801785e:	4603      	mov	r3, r0
 8017860:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017864:	4a0a      	ldr	r2, [pc, #40]	; (8017890 <check_fs+0xa4>)
 8017866:	4293      	cmp	r3, r2
 8017868:	d101      	bne.n	801786e <check_fs+0x82>
 801786a:	2300      	movs	r3, #0
 801786c:	e00c      	b.n	8017888 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	3338      	adds	r3, #56	; 0x38
 8017872:	3352      	adds	r3, #82	; 0x52
 8017874:	4618      	mov	r0, r3
 8017876:	f7fe f9f9 	bl	8015c6c <ld_dword>
 801787a:	4603      	mov	r3, r0
 801787c:	4a05      	ldr	r2, [pc, #20]	; (8017894 <check_fs+0xa8>)
 801787e:	4293      	cmp	r3, r2
 8017880:	d101      	bne.n	8017886 <check_fs+0x9a>
 8017882:	2300      	movs	r3, #0
 8017884:	e000      	b.n	8017888 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017886:	2302      	movs	r3, #2
}
 8017888:	4618      	mov	r0, r3
 801788a:	3708      	adds	r7, #8
 801788c:	46bd      	mov	sp, r7
 801788e:	bd80      	pop	{r7, pc}
 8017890:	00544146 	.word	0x00544146
 8017894:	33544146 	.word	0x33544146

08017898 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b096      	sub	sp, #88	; 0x58
 801789c:	af00      	add	r7, sp, #0
 801789e:	60f8      	str	r0, [r7, #12]
 80178a0:	60b9      	str	r1, [r7, #8]
 80178a2:	4613      	mov	r3, r2
 80178a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80178a6:	68bb      	ldr	r3, [r7, #8]
 80178a8:	2200      	movs	r2, #0
 80178aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80178ac:	68f8      	ldr	r0, [r7, #12]
 80178ae:	f7ff ff58 	bl	8017762 <get_ldnumber>
 80178b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80178b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	da01      	bge.n	80178be <find_volume+0x26>
 80178ba:	230b      	movs	r3, #11
 80178bc:	e236      	b.n	8017d2c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80178be:	4aac      	ldr	r2, [pc, #688]	; (8017b70 <find_volume+0x2d8>)
 80178c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80178c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d101      	bne.n	80178d2 <find_volume+0x3a>
 80178ce:	230c      	movs	r3, #12
 80178d0:	e22c      	b.n	8017d2c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80178d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80178d4:	f7fe fab2 	bl	8015e3c <lock_fs>
 80178d8:	4603      	mov	r3, r0
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d101      	bne.n	80178e2 <find_volume+0x4a>
 80178de:	230f      	movs	r3, #15
 80178e0:	e224      	b.n	8017d2c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80178e2:	68bb      	ldr	r3, [r7, #8]
 80178e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80178e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80178e8:	79fb      	ldrb	r3, [r7, #7]
 80178ea:	f023 0301 	bic.w	r3, r3, #1
 80178ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80178f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178f2:	781b      	ldrb	r3, [r3, #0]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d01a      	beq.n	801792e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80178f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178fa:	785b      	ldrb	r3, [r3, #1]
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7fe f8ff 	bl	8015b00 <disk_status>
 8017902:	4603      	mov	r3, r0
 8017904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801790c:	f003 0301 	and.w	r3, r3, #1
 8017910:	2b00      	cmp	r3, #0
 8017912:	d10c      	bne.n	801792e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017914:	79fb      	ldrb	r3, [r7, #7]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d007      	beq.n	801792a <find_volume+0x92>
 801791a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801791e:	f003 0304 	and.w	r3, r3, #4
 8017922:	2b00      	cmp	r3, #0
 8017924:	d001      	beq.n	801792a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8017926:	230a      	movs	r3, #10
 8017928:	e200      	b.n	8017d2c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801792a:	2300      	movs	r3, #0
 801792c:	e1fe      	b.n	8017d2c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017930:	2200      	movs	r2, #0
 8017932:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017936:	b2da      	uxtb	r2, r3
 8017938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801793a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801793e:	785b      	ldrb	r3, [r3, #1]
 8017940:	4618      	mov	r0, r3
 8017942:	f7fe f8f7 	bl	8015b34 <disk_initialize>
 8017946:	4603      	mov	r3, r0
 8017948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801794c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017950:	f003 0301 	and.w	r3, r3, #1
 8017954:	2b00      	cmp	r3, #0
 8017956:	d001      	beq.n	801795c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017958:	2303      	movs	r3, #3
 801795a:	e1e7      	b.n	8017d2c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801795c:	79fb      	ldrb	r3, [r7, #7]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d007      	beq.n	8017972 <find_volume+0xda>
 8017962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017966:	f003 0304 	and.w	r3, r3, #4
 801796a:	2b00      	cmp	r3, #0
 801796c:	d001      	beq.n	8017972 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801796e:	230a      	movs	r3, #10
 8017970:	e1dc      	b.n	8017d2c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017972:	2300      	movs	r3, #0
 8017974:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017976:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017978:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801797a:	f7ff ff37 	bl	80177ec <check_fs>
 801797e:	4603      	mov	r3, r0
 8017980:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017984:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017988:	2b02      	cmp	r3, #2
 801798a:	d14b      	bne.n	8017a24 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801798c:	2300      	movs	r3, #0
 801798e:	643b      	str	r3, [r7, #64]	; 0x40
 8017990:	e01f      	b.n	80179d2 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017994:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801799a:	011b      	lsls	r3, r3, #4
 801799c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80179a0:	4413      	add	r3, r2
 80179a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80179a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179a6:	3304      	adds	r3, #4
 80179a8:	781b      	ldrb	r3, [r3, #0]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d006      	beq.n	80179bc <find_volume+0x124>
 80179ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179b0:	3308      	adds	r3, #8
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7fe f95a 	bl	8015c6c <ld_dword>
 80179b8:	4602      	mov	r2, r0
 80179ba:	e000      	b.n	80179be <find_volume+0x126>
 80179bc:	2200      	movs	r2, #0
 80179be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80179c6:	440b      	add	r3, r1
 80179c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80179cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179ce:	3301      	adds	r3, #1
 80179d0:	643b      	str	r3, [r7, #64]	; 0x40
 80179d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179d4:	2b03      	cmp	r3, #3
 80179d6:	d9dc      	bls.n	8017992 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80179d8:	2300      	movs	r3, #0
 80179da:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80179dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d002      	beq.n	80179e8 <find_volume+0x150>
 80179e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179e4:	3b01      	subs	r3, #1
 80179e6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80179e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179ea:	009b      	lsls	r3, r3, #2
 80179ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80179f0:	4413      	add	r3, r2
 80179f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80179f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80179f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d005      	beq.n	8017a0a <find_volume+0x172>
 80179fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017a02:	f7ff fef3 	bl	80177ec <check_fs>
 8017a06:	4603      	mov	r3, r0
 8017a08:	e000      	b.n	8017a0c <find_volume+0x174>
 8017a0a:	2303      	movs	r3, #3
 8017a0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a14:	2b01      	cmp	r3, #1
 8017a16:	d905      	bls.n	8017a24 <find_volume+0x18c>
 8017a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a1a:	3301      	adds	r3, #1
 8017a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8017a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a20:	2b03      	cmp	r3, #3
 8017a22:	d9e1      	bls.n	80179e8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a28:	2b04      	cmp	r3, #4
 8017a2a:	d101      	bne.n	8017a30 <find_volume+0x198>
 8017a2c:	2301      	movs	r3, #1
 8017a2e:	e17d      	b.n	8017d2c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017a30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a34:	2b01      	cmp	r3, #1
 8017a36:	d901      	bls.n	8017a3c <find_volume+0x1a4>
 8017a38:	230d      	movs	r3, #13
 8017a3a:	e177      	b.n	8017d2c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a3e:	3338      	adds	r3, #56	; 0x38
 8017a40:	330b      	adds	r3, #11
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7fe f8fa 	bl	8015c3c <ld_word>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a4e:	d001      	beq.n	8017a54 <find_volume+0x1bc>
 8017a50:	230d      	movs	r3, #13
 8017a52:	e16b      	b.n	8017d2c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a56:	3338      	adds	r3, #56	; 0x38
 8017a58:	3316      	adds	r3, #22
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f7fe f8ee 	bl	8015c3c <ld_word>
 8017a60:	4603      	mov	r3, r0
 8017a62:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d106      	bne.n	8017a78 <find_volume+0x1e0>
 8017a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a6c:	3338      	adds	r3, #56	; 0x38
 8017a6e:	3324      	adds	r3, #36	; 0x24
 8017a70:	4618      	mov	r0, r3
 8017a72:	f7fe f8fb 	bl	8015c6c <ld_dword>
 8017a76:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a7c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a80:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8017a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a8a:	789b      	ldrb	r3, [r3, #2]
 8017a8c:	2b01      	cmp	r3, #1
 8017a8e:	d005      	beq.n	8017a9c <find_volume+0x204>
 8017a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a92:	789b      	ldrb	r3, [r3, #2]
 8017a94:	2b02      	cmp	r3, #2
 8017a96:	d001      	beq.n	8017a9c <find_volume+0x204>
 8017a98:	230d      	movs	r3, #13
 8017a9a:	e147      	b.n	8017d2c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a9e:	789b      	ldrb	r3, [r3, #2]
 8017aa0:	461a      	mov	r2, r3
 8017aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017aa4:	fb02 f303 	mul.w	r3, r2, r3
 8017aa8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ab0:	b29a      	uxth	r2, r3
 8017ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ab4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ab8:	895b      	ldrh	r3, [r3, #10]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d008      	beq.n	8017ad0 <find_volume+0x238>
 8017abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac0:	895b      	ldrh	r3, [r3, #10]
 8017ac2:	461a      	mov	r2, r3
 8017ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac6:	895b      	ldrh	r3, [r3, #10]
 8017ac8:	3b01      	subs	r3, #1
 8017aca:	4013      	ands	r3, r2
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d001      	beq.n	8017ad4 <find_volume+0x23c>
 8017ad0:	230d      	movs	r3, #13
 8017ad2:	e12b      	b.n	8017d2c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ad6:	3338      	adds	r3, #56	; 0x38
 8017ad8:	3311      	adds	r3, #17
 8017ada:	4618      	mov	r0, r3
 8017adc:	f7fe f8ae 	bl	8015c3c <ld_word>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	461a      	mov	r2, r3
 8017ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ae6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aea:	891b      	ldrh	r3, [r3, #8]
 8017aec:	f003 030f 	and.w	r3, r3, #15
 8017af0:	b29b      	uxth	r3, r3
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d001      	beq.n	8017afa <find_volume+0x262>
 8017af6:	230d      	movs	r3, #13
 8017af8:	e118      	b.n	8017d2c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017afc:	3338      	adds	r3, #56	; 0x38
 8017afe:	3313      	adds	r3, #19
 8017b00:	4618      	mov	r0, r3
 8017b02:	f7fe f89b 	bl	8015c3c <ld_word>
 8017b06:	4603      	mov	r3, r0
 8017b08:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d106      	bne.n	8017b1e <find_volume+0x286>
 8017b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b12:	3338      	adds	r3, #56	; 0x38
 8017b14:	3320      	adds	r3, #32
 8017b16:	4618      	mov	r0, r3
 8017b18:	f7fe f8a8 	bl	8015c6c <ld_dword>
 8017b1c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b20:	3338      	adds	r3, #56	; 0x38
 8017b22:	330e      	adds	r3, #14
 8017b24:	4618      	mov	r0, r3
 8017b26:	f7fe f889 	bl	8015c3c <ld_word>
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017b2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d101      	bne.n	8017b38 <find_volume+0x2a0>
 8017b34:	230d      	movs	r3, #13
 8017b36:	e0f9      	b.n	8017d2c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017b38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b3c:	4413      	add	r3, r2
 8017b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b40:	8912      	ldrh	r2, [r2, #8]
 8017b42:	0912      	lsrs	r2, r2, #4
 8017b44:	b292      	uxth	r2, r2
 8017b46:	4413      	add	r3, r2
 8017b48:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b4e:	429a      	cmp	r2, r3
 8017b50:	d201      	bcs.n	8017b56 <find_volume+0x2be>
 8017b52:	230d      	movs	r3, #13
 8017b54:	e0ea      	b.n	8017d2c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b5a:	1ad3      	subs	r3, r2, r3
 8017b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b5e:	8952      	ldrh	r2, [r2, #10]
 8017b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b64:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d103      	bne.n	8017b74 <find_volume+0x2dc>
 8017b6c:	230d      	movs	r3, #13
 8017b6e:	e0dd      	b.n	8017d2c <find_volume+0x494>
 8017b70:	2000052c 	.word	0x2000052c
		fmt = FS_FAT32;
 8017b74:	2303      	movs	r3, #3
 8017b76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017b80:	4293      	cmp	r3, r2
 8017b82:	d802      	bhi.n	8017b8a <find_volume+0x2f2>
 8017b84:	2302      	movs	r3, #2
 8017b86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b8c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017b90:	4293      	cmp	r3, r2
 8017b92:	d802      	bhi.n	8017b9a <find_volume+0x302>
 8017b94:	2301      	movs	r3, #1
 8017b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b9c:	1c9a      	adds	r2, r3, #2
 8017b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8017ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017ba6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017ba8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bac:	441a      	add	r2, r3
 8017bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bb0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8017bb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bb6:	441a      	add	r2, r3
 8017bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bba:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8017bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bc0:	2b03      	cmp	r3, #3
 8017bc2:	d11e      	bne.n	8017c02 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bc6:	3338      	adds	r3, #56	; 0x38
 8017bc8:	332a      	adds	r3, #42	; 0x2a
 8017bca:	4618      	mov	r0, r3
 8017bcc:	f7fe f836 	bl	8015c3c <ld_word>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d001      	beq.n	8017bda <find_volume+0x342>
 8017bd6:	230d      	movs	r3, #13
 8017bd8:	e0a8      	b.n	8017d2c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bdc:	891b      	ldrh	r3, [r3, #8]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d001      	beq.n	8017be6 <find_volume+0x34e>
 8017be2:	230d      	movs	r3, #13
 8017be4:	e0a2      	b.n	8017d2c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be8:	3338      	adds	r3, #56	; 0x38
 8017bea:	332c      	adds	r3, #44	; 0x2c
 8017bec:	4618      	mov	r0, r3
 8017bee:	f7fe f83d 	bl	8015c6c <ld_dword>
 8017bf2:	4602      	mov	r2, r0
 8017bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bf6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bfa:	69db      	ldr	r3, [r3, #28]
 8017bfc:	009b      	lsls	r3, r3, #2
 8017bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8017c00:	e01f      	b.n	8017c42 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c04:	891b      	ldrh	r3, [r3, #8]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d101      	bne.n	8017c0e <find_volume+0x376>
 8017c0a:	230d      	movs	r3, #13
 8017c0c:	e08e      	b.n	8017d2c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c14:	441a      	add	r2, r3
 8017c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c18:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c1e:	2b02      	cmp	r3, #2
 8017c20:	d103      	bne.n	8017c2a <find_volume+0x392>
 8017c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c24:	69db      	ldr	r3, [r3, #28]
 8017c26:	005b      	lsls	r3, r3, #1
 8017c28:	e00a      	b.n	8017c40 <find_volume+0x3a8>
 8017c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c2c:	69da      	ldr	r2, [r3, #28]
 8017c2e:	4613      	mov	r3, r2
 8017c30:	005b      	lsls	r3, r3, #1
 8017c32:	4413      	add	r3, r2
 8017c34:	085a      	lsrs	r2, r3, #1
 8017c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c38:	69db      	ldr	r3, [r3, #28]
 8017c3a:	f003 0301 	and.w	r3, r3, #1
 8017c3e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017c40:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c44:	6a1a      	ldr	r2, [r3, #32]
 8017c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017c4c:	0a5b      	lsrs	r3, r3, #9
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	d201      	bcs.n	8017c56 <find_volume+0x3be>
 8017c52:	230d      	movs	r3, #13
 8017c54:	e06a      	b.n	8017d2c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c5c:	619a      	str	r2, [r3, #24]
 8017c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c60:	699a      	ldr	r2, [r3, #24]
 8017c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c64:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8017c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c68:	2280      	movs	r2, #128	; 0x80
 8017c6a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c70:	2b03      	cmp	r3, #3
 8017c72:	d149      	bne.n	8017d08 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c76:	3338      	adds	r3, #56	; 0x38
 8017c78:	3330      	adds	r3, #48	; 0x30
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f7fd ffde 	bl	8015c3c <ld_word>
 8017c80:	4603      	mov	r3, r0
 8017c82:	2b01      	cmp	r3, #1
 8017c84:	d140      	bne.n	8017d08 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c88:	3301      	adds	r3, #1
 8017c8a:	4619      	mov	r1, r3
 8017c8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017c8e:	f7fe fab7 	bl	8016200 <move_window>
 8017c92:	4603      	mov	r3, r0
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d137      	bne.n	8017d08 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8017c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca0:	3338      	adds	r3, #56	; 0x38
 8017ca2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f7fd ffc8 	bl	8015c3c <ld_word>
 8017cac:	4603      	mov	r3, r0
 8017cae:	461a      	mov	r2, r3
 8017cb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d127      	bne.n	8017d08 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cba:	3338      	adds	r3, #56	; 0x38
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7fd ffd5 	bl	8015c6c <ld_dword>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	4a1b      	ldr	r2, [pc, #108]	; (8017d34 <find_volume+0x49c>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d11e      	bne.n	8017d08 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ccc:	3338      	adds	r3, #56	; 0x38
 8017cce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	f7fd ffca 	bl	8015c6c <ld_dword>
 8017cd8:	4603      	mov	r3, r0
 8017cda:	4a17      	ldr	r2, [pc, #92]	; (8017d38 <find_volume+0x4a0>)
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	d113      	bne.n	8017d08 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce2:	3338      	adds	r3, #56	; 0x38
 8017ce4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f7fd ffbf 	bl	8015c6c <ld_dword>
 8017cee:	4602      	mov	r2, r0
 8017cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf6:	3338      	adds	r3, #56	; 0x38
 8017cf8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f7fd ffb5 	bl	8015c6c <ld_dword>
 8017d02:	4602      	mov	r2, r0
 8017d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d06:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d0a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017d0e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017d10:	4b0a      	ldr	r3, [pc, #40]	; (8017d3c <find_volume+0x4a4>)
 8017d12:	881b      	ldrh	r3, [r3, #0]
 8017d14:	3301      	adds	r3, #1
 8017d16:	b29a      	uxth	r2, r3
 8017d18:	4b08      	ldr	r3, [pc, #32]	; (8017d3c <find_volume+0x4a4>)
 8017d1a:	801a      	strh	r2, [r3, #0]
 8017d1c:	4b07      	ldr	r3, [pc, #28]	; (8017d3c <find_volume+0x4a4>)
 8017d1e:	881a      	ldrh	r2, [r3, #0]
 8017d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d22:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017d24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017d26:	f7fe fa03 	bl	8016130 <clear_lock>
#endif
	return FR_OK;
 8017d2a:	2300      	movs	r3, #0
}
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	3758      	adds	r7, #88	; 0x58
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}
 8017d34:	41615252 	.word	0x41615252
 8017d38:	61417272 	.word	0x61417272
 8017d3c:	20000530 	.word	0x20000530

08017d40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b084      	sub	sp, #16
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
 8017d48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017d4a:	2309      	movs	r3, #9
 8017d4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d02e      	beq.n	8017db2 <validate+0x72>
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d02a      	beq.n	8017db2 <validate+0x72>
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	781b      	ldrb	r3, [r3, #0]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d025      	beq.n	8017db2 <validate+0x72>
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	889a      	ldrh	r2, [r3, #4]
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	88db      	ldrh	r3, [r3, #6]
 8017d70:	429a      	cmp	r2, r3
 8017d72:	d11e      	bne.n	8017db2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f7fe f85f 	bl	8015e3c <lock_fs>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d014      	beq.n	8017dae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	785b      	ldrb	r3, [r3, #1]
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7fd feb8 	bl	8015b00 <disk_status>
 8017d90:	4603      	mov	r3, r0
 8017d92:	f003 0301 	and.w	r3, r3, #1
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d102      	bne.n	8017da0 <validate+0x60>
				res = FR_OK;
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	73fb      	strb	r3, [r7, #15]
 8017d9e:	e008      	b.n	8017db2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	2100      	movs	r1, #0
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7fe f85e 	bl	8015e68 <unlock_fs>
 8017dac:	e001      	b.n	8017db2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8017dae:	230f      	movs	r3, #15
 8017db0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017db2:	7bfb      	ldrb	r3, [r7, #15]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d102      	bne.n	8017dbe <validate+0x7e>
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	e000      	b.n	8017dc0 <validate+0x80>
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	683a      	ldr	r2, [r7, #0]
 8017dc2:	6013      	str	r3, [r2, #0]
	return res;
 8017dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	3710      	adds	r7, #16
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}
	...

08017dd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b088      	sub	sp, #32
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	60f8      	str	r0, [r7, #12]
 8017dd8:	60b9      	str	r1, [r7, #8]
 8017dda:	4613      	mov	r3, r2
 8017ddc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017dde:	68bb      	ldr	r3, [r7, #8]
 8017de0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017de2:	f107 0310 	add.w	r3, r7, #16
 8017de6:	4618      	mov	r0, r3
 8017de8:	f7ff fcbb 	bl	8017762 <get_ldnumber>
 8017dec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017dee:	69fb      	ldr	r3, [r7, #28]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	da01      	bge.n	8017df8 <f_mount+0x28>
 8017df4:	230b      	movs	r3, #11
 8017df6:	e048      	b.n	8017e8a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017df8:	4a26      	ldr	r2, [pc, #152]	; (8017e94 <f_mount+0xc4>)
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017e02:	69bb      	ldr	r3, [r7, #24]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d00f      	beq.n	8017e28 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017e08:	69b8      	ldr	r0, [r7, #24]
 8017e0a:	f7fe f991 	bl	8016130 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8017e0e:	69bb      	ldr	r3, [r7, #24]
 8017e10:	691b      	ldr	r3, [r3, #16]
 8017e12:	4618      	mov	r0, r3
 8017e14:	f000 ff26 	bl	8018c64 <ff_del_syncobj>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d101      	bne.n	8017e22 <f_mount+0x52>
 8017e1e:	2302      	movs	r3, #2
 8017e20:	e033      	b.n	8017e8a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017e22:	69bb      	ldr	r3, [r7, #24]
 8017e24:	2200      	movs	r2, #0
 8017e26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d00f      	beq.n	8017e4e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2200      	movs	r2, #0
 8017e32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8017e34:	69fb      	ldr	r3, [r7, #28]
 8017e36:	b2da      	uxtb	r2, r3
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	3310      	adds	r3, #16
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	4610      	mov	r0, r2
 8017e40:	f000 fef0 	bl	8018c24 <ff_cre_syncobj>
 8017e44:	4603      	mov	r3, r0
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d101      	bne.n	8017e4e <f_mount+0x7e>
 8017e4a:	2302      	movs	r3, #2
 8017e4c:	e01d      	b.n	8017e8a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017e4e:	68fa      	ldr	r2, [r7, #12]
 8017e50:	4910      	ldr	r1, [pc, #64]	; (8017e94 <f_mount+0xc4>)
 8017e52:	69fb      	ldr	r3, [r7, #28]
 8017e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d002      	beq.n	8017e64 <f_mount+0x94>
 8017e5e:	79fb      	ldrb	r3, [r7, #7]
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	d001      	beq.n	8017e68 <f_mount+0x98>
 8017e64:	2300      	movs	r3, #0
 8017e66:	e010      	b.n	8017e8a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017e68:	f107 010c 	add.w	r1, r7, #12
 8017e6c:	f107 0308 	add.w	r3, r7, #8
 8017e70:	2200      	movs	r2, #0
 8017e72:	4618      	mov	r0, r3
 8017e74:	f7ff fd10 	bl	8017898 <find_volume>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	7dfa      	ldrb	r2, [r7, #23]
 8017e80:	4611      	mov	r1, r2
 8017e82:	4618      	mov	r0, r3
 8017e84:	f7fd fff0 	bl	8015e68 <unlock_fs>
 8017e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	3720      	adds	r7, #32
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	bd80      	pop	{r7, pc}
 8017e92:	bf00      	nop
 8017e94:	2000052c 	.word	0x2000052c

08017e98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b09a      	sub	sp, #104	; 0x68
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	60f8      	str	r0, [r7, #12]
 8017ea0:	60b9      	str	r1, [r7, #8]
 8017ea2:	4613      	mov	r3, r2
 8017ea4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d101      	bne.n	8017eb0 <f_open+0x18>
 8017eac:	2309      	movs	r3, #9
 8017eae:	e1c8      	b.n	8018242 <f_open+0x3aa>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017eb0:	79fb      	ldrb	r3, [r7, #7]
 8017eb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017eb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017eb8:	79fa      	ldrb	r2, [r7, #7]
 8017eba:	f107 0110 	add.w	r1, r7, #16
 8017ebe:	f107 0308 	add.w	r3, r7, #8
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f7ff fce8 	bl	8017898 <find_volume>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8017ece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	f040 81a5 	bne.w	8018222 <f_open+0x38a>
		dj.obj.fs = fs;
 8017ed8:	693b      	ldr	r3, [r7, #16]
 8017eda:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8017edc:	20ca      	movs	r0, #202	; 0xca
 8017ede:	f000 feed 	bl	8018cbc <ff_memalloc>
 8017ee2:	65b8      	str	r0, [r7, #88]	; 0x58
 8017ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d106      	bne.n	8017ef8 <f_open+0x60>
 8017eea:	693b      	ldr	r3, [r7, #16]
 8017eec:	2111      	movs	r1, #17
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7fd ffba 	bl	8015e68 <unlock_fs>
 8017ef4:	2311      	movs	r3, #17
 8017ef6:	e1a4      	b.n	8018242 <f_open+0x3aa>
 8017ef8:	693b      	ldr	r3, [r7, #16]
 8017efa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017efc:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8017efe:	68ba      	ldr	r2, [r7, #8]
 8017f00:	f107 0314 	add.w	r3, r7, #20
 8017f04:	4611      	mov	r1, r2
 8017f06:	4618      	mov	r0, r3
 8017f08:	f7ff fbba 	bl	8017680 <follow_path>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017f12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d11a      	bne.n	8017f50 <f_open+0xb8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017f1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017f1e:	b25b      	sxtb	r3, r3
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	da03      	bge.n	8017f2c <f_open+0x94>
				res = FR_INVALID_NAME;
 8017f24:	2306      	movs	r3, #6
 8017f26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017f2a:	e011      	b.n	8017f50 <f_open+0xb8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017f2c:	79fb      	ldrb	r3, [r7, #7]
 8017f2e:	f023 0301 	bic.w	r3, r3, #1
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	bf14      	ite	ne
 8017f36:	2301      	movne	r3, #1
 8017f38:	2300      	moveq	r3, #0
 8017f3a:	b2db      	uxtb	r3, r3
 8017f3c:	461a      	mov	r2, r3
 8017f3e:	f107 0314 	add.w	r3, r7, #20
 8017f42:	4611      	mov	r1, r2
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7fd ffab 	bl	8015ea0 <chk_lock>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017f50:	79fb      	ldrb	r3, [r7, #7]
 8017f52:	f003 031c 	and.w	r3, r3, #28
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d07f      	beq.n	801805a <f_open+0x1c2>
			if (res != FR_OK) {					/* No file, create new */
 8017f5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d017      	beq.n	8017f92 <f_open+0xfa>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017f62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017f66:	2b04      	cmp	r3, #4
 8017f68:	d10e      	bne.n	8017f88 <f_open+0xf0>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017f6a:	f7fd fff5 	bl	8015f58 <enq_lock>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d006      	beq.n	8017f82 <f_open+0xea>
 8017f74:	f107 0314 	add.w	r3, r7, #20
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f7ff f8d1 	bl	8017120 <dir_register>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	e000      	b.n	8017f84 <f_open+0xec>
 8017f82:	2312      	movs	r3, #18
 8017f84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017f88:	79fb      	ldrb	r3, [r7, #7]
 8017f8a:	f043 0308 	orr.w	r3, r3, #8
 8017f8e:	71fb      	strb	r3, [r7, #7]
 8017f90:	e010      	b.n	8017fb4 <f_open+0x11c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017f92:	7ebb      	ldrb	r3, [r7, #26]
 8017f94:	f003 0311 	and.w	r3, r3, #17
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d003      	beq.n	8017fa4 <f_open+0x10c>
					res = FR_DENIED;
 8017f9c:	2307      	movs	r3, #7
 8017f9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017fa2:	e007      	b.n	8017fb4 <f_open+0x11c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017fa4:	79fb      	ldrb	r3, [r7, #7]
 8017fa6:	f003 0304 	and.w	r3, r3, #4
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d002      	beq.n	8017fb4 <f_open+0x11c>
 8017fae:	2308      	movs	r3, #8
 8017fb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017fb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d168      	bne.n	801808e <f_open+0x1f6>
 8017fbc:	79fb      	ldrb	r3, [r7, #7]
 8017fbe:	f003 0308 	and.w	r3, r3, #8
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d063      	beq.n	801808e <f_open+0x1f6>
				dw = GET_FATTIME();
 8017fc6:	f7fa fc2f 	bl	8012828 <get_fattime>
 8017fca:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fce:	330e      	adds	r3, #14
 8017fd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7fd fe88 	bl	8015ce8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fda:	3316      	adds	r3, #22
 8017fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f7fd fe82 	bl	8015ce8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fe6:	330b      	adds	r3, #11
 8017fe8:	2220      	movs	r2, #32
 8017fea:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017fec:	693b      	ldr	r3, [r7, #16]
 8017fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ff0:	4611      	mov	r1, r2
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7fe fe0b 	bl	8016c0e <ld_clust>
 8017ff8:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017ffe:	2200      	movs	r2, #0
 8018000:	4618      	mov	r0, r3
 8018002:	f7fe fe23 	bl	8016c4c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018008:	331c      	adds	r3, #28
 801800a:	2100      	movs	r1, #0
 801800c:	4618      	mov	r0, r3
 801800e:	f7fd fe6b 	bl	8015ce8 <st_dword>
					fs->wflag = 1;
 8018012:	693b      	ldr	r3, [r7, #16]
 8018014:	2201      	movs	r2, #1
 8018016:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801801a:	2b00      	cmp	r3, #0
 801801c:	d037      	beq.n	801808e <f_open+0x1f6>
						dw = fs->winsect;
 801801e:	693b      	ldr	r3, [r7, #16]
 8018020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018022:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8018024:	f107 0314 	add.w	r3, r7, #20
 8018028:	2200      	movs	r2, #0
 801802a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801802c:	4618      	mov	r0, r3
 801802e:	f7fe fb36 	bl	801669e <remove_chain>
 8018032:	4603      	mov	r3, r0
 8018034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8018038:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801803c:	2b00      	cmp	r3, #0
 801803e:	d126      	bne.n	801808e <f_open+0x1f6>
							res = move_window(fs, dw);
 8018040:	693b      	ldr	r3, [r7, #16]
 8018042:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018044:	4618      	mov	r0, r3
 8018046:	f7fe f8db 	bl	8016200 <move_window>
 801804a:	4603      	mov	r3, r0
 801804c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018054:	3a01      	subs	r2, #1
 8018056:	615a      	str	r2, [r3, #20]
 8018058:	e019      	b.n	801808e <f_open+0x1f6>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801805a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801805e:	2b00      	cmp	r3, #0
 8018060:	d115      	bne.n	801808e <f_open+0x1f6>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018062:	7ebb      	ldrb	r3, [r7, #26]
 8018064:	f003 0310 	and.w	r3, r3, #16
 8018068:	2b00      	cmp	r3, #0
 801806a:	d003      	beq.n	8018074 <f_open+0x1dc>
					res = FR_NO_FILE;
 801806c:	2304      	movs	r3, #4
 801806e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018072:	e00c      	b.n	801808e <f_open+0x1f6>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018074:	79fb      	ldrb	r3, [r7, #7]
 8018076:	f003 0302 	and.w	r3, r3, #2
 801807a:	2b00      	cmp	r3, #0
 801807c:	d007      	beq.n	801808e <f_open+0x1f6>
 801807e:	7ebb      	ldrb	r3, [r7, #26]
 8018080:	f003 0301 	and.w	r3, r3, #1
 8018084:	2b00      	cmp	r3, #0
 8018086:	d002      	beq.n	801808e <f_open+0x1f6>
						res = FR_DENIED;
 8018088:	2307      	movs	r3, #7
 801808a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801808e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018092:	2b00      	cmp	r3, #0
 8018094:	d128      	bne.n	80180e8 <f_open+0x250>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018096:	79fb      	ldrb	r3, [r7, #7]
 8018098:	f003 0308 	and.w	r3, r3, #8
 801809c:	2b00      	cmp	r3, #0
 801809e:	d003      	beq.n	80180a8 <f_open+0x210>
				mode |= FA_MODIFIED;
 80180a0:	79fb      	ldrb	r3, [r7, #7]
 80180a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180a6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80180a8:	693b      	ldr	r3, [r7, #16]
 80180aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80180b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80180b6:	79fb      	ldrb	r3, [r7, #7]
 80180b8:	f023 0301 	bic.w	r3, r3, #1
 80180bc:	2b00      	cmp	r3, #0
 80180be:	bf14      	ite	ne
 80180c0:	2301      	movne	r3, #1
 80180c2:	2300      	moveq	r3, #0
 80180c4:	b2db      	uxtb	r3, r3
 80180c6:	461a      	mov	r2, r3
 80180c8:	f107 0314 	add.w	r3, r7, #20
 80180cc:	4611      	mov	r1, r2
 80180ce:	4618      	mov	r0, r3
 80180d0:	f7fd ff64 	bl	8015f9c <inc_lock>
 80180d4:	4602      	mov	r2, r0
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	691b      	ldr	r3, [r3, #16]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d102      	bne.n	80180e8 <f_open+0x250>
 80180e2:	2302      	movs	r3, #2
 80180e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80180e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	f040 8095 	bne.w	801821c <f_open+0x384>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80180f2:	693b      	ldr	r3, [r7, #16]
 80180f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80180f6:	4611      	mov	r1, r2
 80180f8:	4618      	mov	r0, r3
 80180fa:	f7fe fd88 	bl	8016c0e <ld_clust>
 80180fe:	4602      	mov	r2, r0
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018106:	331c      	adds	r3, #28
 8018108:	4618      	mov	r0, r3
 801810a:	f7fd fdaf 	bl	8015c6c <ld_dword>
 801810e:	4602      	mov	r2, r0
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	2200      	movs	r2, #0
 8018118:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801811a:	693a      	ldr	r2, [r7, #16]
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018120:	693b      	ldr	r3, [r7, #16]
 8018122:	88da      	ldrh	r2, [r3, #6]
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	79fa      	ldrb	r2, [r7, #7]
 801812c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	2200      	movs	r2, #0
 8018132:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	2200      	movs	r2, #0
 8018138:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	2200      	movs	r2, #0
 801813e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	3330      	adds	r3, #48	; 0x30
 8018144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018148:	2100      	movs	r1, #0
 801814a:	4618      	mov	r0, r3
 801814c:	f7fd fe19 	bl	8015d82 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018150:	79fb      	ldrb	r3, [r7, #7]
 8018152:	f003 0320 	and.w	r3, r3, #32
 8018156:	2b00      	cmp	r3, #0
 8018158:	d060      	beq.n	801821c <f_open+0x384>
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	68db      	ldr	r3, [r3, #12]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d05c      	beq.n	801821c <f_open+0x384>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	68da      	ldr	r2, [r3, #12]
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	895b      	ldrh	r3, [r3, #10]
 801816e:	025b      	lsls	r3, r3, #9
 8018170:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	689b      	ldr	r3, [r3, #8]
 8018176:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	68db      	ldr	r3, [r3, #12]
 801817c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801817e:	e016      	b.n	80181ae <f_open+0x316>
					clst = get_fat(&fp->obj, clst);
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018184:	4618      	mov	r0, r3
 8018186:	f7fe f8f6 	bl	8016376 <get_fat>
 801818a:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801818c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801818e:	2b01      	cmp	r3, #1
 8018190:	d802      	bhi.n	8018198 <f_open+0x300>
 8018192:	2302      	movs	r3, #2
 8018194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801819a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801819e:	d102      	bne.n	80181a6 <f_open+0x30e>
 80181a0:	2301      	movs	r3, #1
 80181a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80181a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80181aa:	1ad3      	subs	r3, r2, r3
 80181ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80181ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d103      	bne.n	80181be <f_open+0x326>
 80181b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80181b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d8e0      	bhi.n	8018180 <f_open+0x2e8>
				}
				fp->clust = clst;
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80181c2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80181c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d127      	bne.n	801821c <f_open+0x384>
 80181cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80181ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d022      	beq.n	801821c <f_open+0x384>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80181d6:	693b      	ldr	r3, [r7, #16]
 80181d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80181da:	4618      	mov	r0, r3
 80181dc:	f7fe f8ac 	bl	8016338 <clust2sect>
 80181e0:	64b8      	str	r0, [r7, #72]	; 0x48
 80181e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d103      	bne.n	80181f0 <f_open+0x358>
						res = FR_INT_ERR;
 80181e8:	2302      	movs	r3, #2
 80181ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80181ee:	e015      	b.n	801821c <f_open+0x384>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80181f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80181f2:	0a5a      	lsrs	r2, r3, #9
 80181f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181f6:	441a      	add	r2, r3
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80181fc:	693b      	ldr	r3, [r7, #16]
 80181fe:	7858      	ldrb	r0, [r3, #1]
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	6a1a      	ldr	r2, [r3, #32]
 801820a:	2301      	movs	r3, #1
 801820c:	f7fd fcb8 	bl	8015b80 <disk_read>
 8018210:	4603      	mov	r3, r0
 8018212:	2b00      	cmp	r3, #0
 8018214:	d002      	beq.n	801821c <f_open+0x384>
 8018216:	2301      	movs	r3, #1
 8018218:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 801821c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801821e:	f000 fd59 	bl	8018cd4 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018222:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018226:	2b00      	cmp	r3, #0
 8018228:	d002      	beq.n	8018230 <f_open+0x398>
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	2200      	movs	r2, #0
 801822e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018230:	693b      	ldr	r3, [r7, #16]
 8018232:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8018236:	4611      	mov	r1, r2
 8018238:	4618      	mov	r0, r3
 801823a:	f7fd fe15 	bl	8015e68 <unlock_fs>
 801823e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8018242:	4618      	mov	r0, r3
 8018244:	3768      	adds	r7, #104	; 0x68
 8018246:	46bd      	mov	sp, r7
 8018248:	bd80      	pop	{r7, pc}

0801824a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801824a:	b580      	push	{r7, lr}
 801824c:	b08e      	sub	sp, #56	; 0x38
 801824e:	af00      	add	r7, sp, #0
 8018250:	60f8      	str	r0, [r7, #12]
 8018252:	60b9      	str	r1, [r7, #8]
 8018254:	607a      	str	r2, [r7, #4]
 8018256:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8018258:	68bb      	ldr	r3, [r7, #8]
 801825a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801825c:	683b      	ldr	r3, [r7, #0]
 801825e:	2200      	movs	r2, #0
 8018260:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	f107 0214 	add.w	r2, r7, #20
 8018268:	4611      	mov	r1, r2
 801826a:	4618      	mov	r0, r3
 801826c:	f7ff fd68 	bl	8017d40 <validate>
 8018270:	4603      	mov	r3, r0
 8018272:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801827a:	2b00      	cmp	r3, #0
 801827c:	d107      	bne.n	801828e <f_read+0x44>
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	7d5b      	ldrb	r3, [r3, #21]
 8018282:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8018286:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801828a:	2b00      	cmp	r3, #0
 801828c:	d009      	beq.n	80182a2 <f_read+0x58>
 801828e:	697b      	ldr	r3, [r7, #20]
 8018290:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8018294:	4611      	mov	r1, r2
 8018296:	4618      	mov	r0, r3
 8018298:	f7fd fde6 	bl	8015e68 <unlock_fs>
 801829c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182a0:	e13d      	b.n	801851e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	7d1b      	ldrb	r3, [r3, #20]
 80182a6:	f003 0301 	and.w	r3, r3, #1
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d106      	bne.n	80182bc <f_read+0x72>
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	2107      	movs	r1, #7
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7fd fdd8 	bl	8015e68 <unlock_fs>
 80182b8:	2307      	movs	r3, #7
 80182ba:	e130      	b.n	801851e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	68da      	ldr	r2, [r3, #12]
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	699b      	ldr	r3, [r3, #24]
 80182c4:	1ad3      	subs	r3, r2, r3
 80182c6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80182c8:	687a      	ldr	r2, [r7, #4]
 80182ca:	6a3b      	ldr	r3, [r7, #32]
 80182cc:	429a      	cmp	r2, r3
 80182ce:	f240 811c 	bls.w	801850a <f_read+0x2c0>
 80182d2:	6a3b      	ldr	r3, [r7, #32]
 80182d4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80182d6:	e118      	b.n	801850a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	699b      	ldr	r3, [r3, #24]
 80182dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	f040 80e4 	bne.w	80184ae <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	699b      	ldr	r3, [r3, #24]
 80182ea:	0a5b      	lsrs	r3, r3, #9
 80182ec:	697a      	ldr	r2, [r7, #20]
 80182ee:	8952      	ldrh	r2, [r2, #10]
 80182f0:	3a01      	subs	r2, #1
 80182f2:	4013      	ands	r3, r2
 80182f4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80182f6:	69fb      	ldr	r3, [r7, #28]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d139      	bne.n	8018370 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	699b      	ldr	r3, [r3, #24]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d103      	bne.n	801830c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	689b      	ldr	r3, [r3, #8]
 8018308:	633b      	str	r3, [r7, #48]	; 0x30
 801830a:	e013      	b.n	8018334 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018310:	2b00      	cmp	r3, #0
 8018312:	d007      	beq.n	8018324 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	699b      	ldr	r3, [r3, #24]
 8018318:	4619      	mov	r1, r3
 801831a:	68f8      	ldr	r0, [r7, #12]
 801831c:	f7fe fabc 	bl	8016898 <clmt_clust>
 8018320:	6338      	str	r0, [r7, #48]	; 0x30
 8018322:	e007      	b.n	8018334 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018324:	68fa      	ldr	r2, [r7, #12]
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	69db      	ldr	r3, [r3, #28]
 801832a:	4619      	mov	r1, r3
 801832c:	4610      	mov	r0, r2
 801832e:	f7fe f822 	bl	8016376 <get_fat>
 8018332:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018336:	2b01      	cmp	r3, #1
 8018338:	d809      	bhi.n	801834e <f_read+0x104>
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	2202      	movs	r2, #2
 801833e:	755a      	strb	r2, [r3, #21]
 8018340:	697b      	ldr	r3, [r7, #20]
 8018342:	2102      	movs	r1, #2
 8018344:	4618      	mov	r0, r3
 8018346:	f7fd fd8f 	bl	8015e68 <unlock_fs>
 801834a:	2302      	movs	r3, #2
 801834c:	e0e7      	b.n	801851e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018354:	d109      	bne.n	801836a <f_read+0x120>
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	2201      	movs	r2, #1
 801835a:	755a      	strb	r2, [r3, #21]
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	2101      	movs	r1, #1
 8018360:	4618      	mov	r0, r3
 8018362:	f7fd fd81 	bl	8015e68 <unlock_fs>
 8018366:	2301      	movs	r3, #1
 8018368:	e0d9      	b.n	801851e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801836e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018370:	697a      	ldr	r2, [r7, #20]
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	69db      	ldr	r3, [r3, #28]
 8018376:	4619      	mov	r1, r3
 8018378:	4610      	mov	r0, r2
 801837a:	f7fd ffdd 	bl	8016338 <clust2sect>
 801837e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018380:	69bb      	ldr	r3, [r7, #24]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d109      	bne.n	801839a <f_read+0x150>
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	2202      	movs	r2, #2
 801838a:	755a      	strb	r2, [r3, #21]
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	2102      	movs	r1, #2
 8018390:	4618      	mov	r0, r3
 8018392:	f7fd fd69 	bl	8015e68 <unlock_fs>
 8018396:	2302      	movs	r3, #2
 8018398:	e0c1      	b.n	801851e <f_read+0x2d4>
			sect += csect;
 801839a:	69ba      	ldr	r2, [r7, #24]
 801839c:	69fb      	ldr	r3, [r7, #28]
 801839e:	4413      	add	r3, r2
 80183a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	0a5b      	lsrs	r3, r3, #9
 80183a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80183a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d03e      	beq.n	801842c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80183ae:	69fa      	ldr	r2, [r7, #28]
 80183b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183b2:	4413      	add	r3, r2
 80183b4:	697a      	ldr	r2, [r7, #20]
 80183b6:	8952      	ldrh	r2, [r2, #10]
 80183b8:	4293      	cmp	r3, r2
 80183ba:	d905      	bls.n	80183c8 <f_read+0x17e>
					cc = fs->csize - csect;
 80183bc:	697b      	ldr	r3, [r7, #20]
 80183be:	895b      	ldrh	r3, [r3, #10]
 80183c0:	461a      	mov	r2, r3
 80183c2:	69fb      	ldr	r3, [r7, #28]
 80183c4:	1ad3      	subs	r3, r2, r3
 80183c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80183c8:	697b      	ldr	r3, [r7, #20]
 80183ca:	7858      	ldrb	r0, [r3, #1]
 80183cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ce:	69ba      	ldr	r2, [r7, #24]
 80183d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80183d2:	f7fd fbd5 	bl	8015b80 <disk_read>
 80183d6:	4603      	mov	r3, r0
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d009      	beq.n	80183f0 <f_read+0x1a6>
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	2201      	movs	r2, #1
 80183e0:	755a      	strb	r2, [r3, #21]
 80183e2:	697b      	ldr	r3, [r7, #20]
 80183e4:	2101      	movs	r1, #1
 80183e6:	4618      	mov	r0, r3
 80183e8:	f7fd fd3e 	bl	8015e68 <unlock_fs>
 80183ec:	2301      	movs	r3, #1
 80183ee:	e096      	b.n	801851e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	7d1b      	ldrb	r3, [r3, #20]
 80183f4:	b25b      	sxtb	r3, r3
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	da14      	bge.n	8018424 <f_read+0x1da>
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	6a1a      	ldr	r2, [r3, #32]
 80183fe:	69bb      	ldr	r3, [r7, #24]
 8018400:	1ad3      	subs	r3, r2, r3
 8018402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018404:	429a      	cmp	r2, r3
 8018406:	d90d      	bls.n	8018424 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	6a1a      	ldr	r2, [r3, #32]
 801840c:	69bb      	ldr	r3, [r7, #24]
 801840e:	1ad3      	subs	r3, r2, r3
 8018410:	025b      	lsls	r3, r3, #9
 8018412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018414:	18d0      	adds	r0, r2, r3
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	3330      	adds	r3, #48	; 0x30
 801841a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801841e:	4619      	mov	r1, r3
 8018420:	f7fd fc8e 	bl	8015d40 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8018424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018426:	025b      	lsls	r3, r3, #9
 8018428:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801842a:	e05a      	b.n	80184e2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	6a1b      	ldr	r3, [r3, #32]
 8018430:	69ba      	ldr	r2, [r7, #24]
 8018432:	429a      	cmp	r2, r3
 8018434:	d038      	beq.n	80184a8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	7d1b      	ldrb	r3, [r3, #20]
 801843a:	b25b      	sxtb	r3, r3
 801843c:	2b00      	cmp	r3, #0
 801843e:	da1d      	bge.n	801847c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018440:	697b      	ldr	r3, [r7, #20]
 8018442:	7858      	ldrb	r0, [r3, #1]
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	6a1a      	ldr	r2, [r3, #32]
 801844e:	2301      	movs	r3, #1
 8018450:	f7fd fbb6 	bl	8015bc0 <disk_write>
 8018454:	4603      	mov	r3, r0
 8018456:	2b00      	cmp	r3, #0
 8018458:	d009      	beq.n	801846e <f_read+0x224>
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	2201      	movs	r2, #1
 801845e:	755a      	strb	r2, [r3, #21]
 8018460:	697b      	ldr	r3, [r7, #20]
 8018462:	2101      	movs	r1, #1
 8018464:	4618      	mov	r0, r3
 8018466:	f7fd fcff 	bl	8015e68 <unlock_fs>
 801846a:	2301      	movs	r3, #1
 801846c:	e057      	b.n	801851e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	7d1b      	ldrb	r3, [r3, #20]
 8018472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018476:	b2da      	uxtb	r2, r3
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801847c:	697b      	ldr	r3, [r7, #20]
 801847e:	7858      	ldrb	r0, [r3, #1]
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018486:	2301      	movs	r3, #1
 8018488:	69ba      	ldr	r2, [r7, #24]
 801848a:	f7fd fb79 	bl	8015b80 <disk_read>
 801848e:	4603      	mov	r3, r0
 8018490:	2b00      	cmp	r3, #0
 8018492:	d009      	beq.n	80184a8 <f_read+0x25e>
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	2201      	movs	r2, #1
 8018498:	755a      	strb	r2, [r3, #21]
 801849a:	697b      	ldr	r3, [r7, #20]
 801849c:	2101      	movs	r1, #1
 801849e:	4618      	mov	r0, r3
 80184a0:	f7fd fce2 	bl	8015e68 <unlock_fs>
 80184a4:	2301      	movs	r3, #1
 80184a6:	e03a      	b.n	801851e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	69ba      	ldr	r2, [r7, #24]
 80184ac:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	699b      	ldr	r3, [r3, #24]
 80184b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80184b6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80184ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80184bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	429a      	cmp	r2, r3
 80184c2:	d901      	bls.n	80184c8 <f_read+0x27e>
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	699b      	ldr	r3, [r3, #24]
 80184d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80184d6:	4413      	add	r3, r2
 80184d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184da:	4619      	mov	r1, r3
 80184dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184de:	f7fd fc2f 	bl	8015d40 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80184e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184e6:	4413      	add	r3, r2
 80184e8:	627b      	str	r3, [r7, #36]	; 0x24
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	699a      	ldr	r2, [r3, #24]
 80184ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184f0:	441a      	add	r2, r3
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	619a      	str	r2, [r3, #24]
 80184f6:	683b      	ldr	r3, [r7, #0]
 80184f8:	681a      	ldr	r2, [r3, #0]
 80184fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184fc:	441a      	add	r2, r3
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	601a      	str	r2, [r3, #0]
 8018502:	687a      	ldr	r2, [r7, #4]
 8018504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018506:	1ad3      	subs	r3, r2, r3
 8018508:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	2b00      	cmp	r3, #0
 801850e:	f47f aee3 	bne.w	80182d8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8018512:	697b      	ldr	r3, [r7, #20]
 8018514:	2100      	movs	r1, #0
 8018516:	4618      	mov	r0, r3
 8018518:	f7fd fca6 	bl	8015e68 <unlock_fs>
 801851c:	2300      	movs	r3, #0
}
 801851e:	4618      	mov	r0, r3
 8018520:	3738      	adds	r7, #56	; 0x38
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}

08018526 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018526:	b580      	push	{r7, lr}
 8018528:	b08c      	sub	sp, #48	; 0x30
 801852a:	af00      	add	r7, sp, #0
 801852c:	60f8      	str	r0, [r7, #12]
 801852e:	60b9      	str	r1, [r7, #8]
 8018530:	607a      	str	r2, [r7, #4]
 8018532:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018534:	68bb      	ldr	r3, [r7, #8]
 8018536:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	2200      	movs	r2, #0
 801853c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	f107 0210 	add.w	r2, r7, #16
 8018544:	4611      	mov	r1, r2
 8018546:	4618      	mov	r0, r3
 8018548:	f7ff fbfa 	bl	8017d40 <validate>
 801854c:	4603      	mov	r3, r0
 801854e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018556:	2b00      	cmp	r3, #0
 8018558:	d107      	bne.n	801856a <f_write+0x44>
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	7d5b      	ldrb	r3, [r3, #21]
 801855e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018566:	2b00      	cmp	r3, #0
 8018568:	d009      	beq.n	801857e <f_write+0x58>
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018570:	4611      	mov	r1, r2
 8018572:	4618      	mov	r0, r3
 8018574:	f7fd fc78 	bl	8015e68 <unlock_fs>
 8018578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801857c:	e173      	b.n	8018866 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	7d1b      	ldrb	r3, [r3, #20]
 8018582:	f003 0302 	and.w	r3, r3, #2
 8018586:	2b00      	cmp	r3, #0
 8018588:	d106      	bne.n	8018598 <f_write+0x72>
 801858a:	693b      	ldr	r3, [r7, #16]
 801858c:	2107      	movs	r1, #7
 801858e:	4618      	mov	r0, r3
 8018590:	f7fd fc6a 	bl	8015e68 <unlock_fs>
 8018594:	2307      	movs	r3, #7
 8018596:	e166      	b.n	8018866 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	699a      	ldr	r2, [r3, #24]
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	441a      	add	r2, r3
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	699b      	ldr	r3, [r3, #24]
 80185a4:	429a      	cmp	r2, r3
 80185a6:	f080 814b 	bcs.w	8018840 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	699b      	ldr	r3, [r3, #24]
 80185ae:	43db      	mvns	r3, r3
 80185b0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80185b2:	e145      	b.n	8018840 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	699b      	ldr	r3, [r3, #24]
 80185b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80185bc:	2b00      	cmp	r3, #0
 80185be:	f040 8101 	bne.w	80187c4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	699b      	ldr	r3, [r3, #24]
 80185c6:	0a5b      	lsrs	r3, r3, #9
 80185c8:	693a      	ldr	r2, [r7, #16]
 80185ca:	8952      	ldrh	r2, [r2, #10]
 80185cc:	3a01      	subs	r2, #1
 80185ce:	4013      	ands	r3, r2
 80185d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80185d2:	69bb      	ldr	r3, [r7, #24]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d14d      	bne.n	8018674 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	699b      	ldr	r3, [r3, #24]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d10c      	bne.n	80185fa <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	689b      	ldr	r3, [r3, #8]
 80185e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80185e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d11a      	bne.n	8018622 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	2100      	movs	r1, #0
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7fe f8b9 	bl	8016768 <create_chain>
 80185f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80185f8:	e013      	b.n	8018622 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d007      	beq.n	8018612 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	699b      	ldr	r3, [r3, #24]
 8018606:	4619      	mov	r1, r3
 8018608:	68f8      	ldr	r0, [r7, #12]
 801860a:	f7fe f945 	bl	8016898 <clmt_clust>
 801860e:	62b8      	str	r0, [r7, #40]	; 0x28
 8018610:	e007      	b.n	8018622 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018612:	68fa      	ldr	r2, [r7, #12]
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	69db      	ldr	r3, [r3, #28]
 8018618:	4619      	mov	r1, r3
 801861a:	4610      	mov	r0, r2
 801861c:	f7fe f8a4 	bl	8016768 <create_chain>
 8018620:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018624:	2b00      	cmp	r3, #0
 8018626:	f000 8110 	beq.w	801884a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801862c:	2b01      	cmp	r3, #1
 801862e:	d109      	bne.n	8018644 <f_write+0x11e>
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	2202      	movs	r2, #2
 8018634:	755a      	strb	r2, [r3, #21]
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	2102      	movs	r1, #2
 801863a:	4618      	mov	r0, r3
 801863c:	f7fd fc14 	bl	8015e68 <unlock_fs>
 8018640:	2302      	movs	r3, #2
 8018642:	e110      	b.n	8018866 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801864a:	d109      	bne.n	8018660 <f_write+0x13a>
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	2201      	movs	r2, #1
 8018650:	755a      	strb	r2, [r3, #21]
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	2101      	movs	r1, #1
 8018656:	4618      	mov	r0, r3
 8018658:	f7fd fc06 	bl	8015e68 <unlock_fs>
 801865c:	2301      	movs	r3, #1
 801865e:	e102      	b.n	8018866 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018664:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	689b      	ldr	r3, [r3, #8]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d102      	bne.n	8018674 <f_write+0x14e>
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018672:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	7d1b      	ldrb	r3, [r3, #20]
 8018678:	b25b      	sxtb	r3, r3
 801867a:	2b00      	cmp	r3, #0
 801867c:	da1d      	bge.n	80186ba <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	7858      	ldrb	r0, [r3, #1]
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	6a1a      	ldr	r2, [r3, #32]
 801868c:	2301      	movs	r3, #1
 801868e:	f7fd fa97 	bl	8015bc0 <disk_write>
 8018692:	4603      	mov	r3, r0
 8018694:	2b00      	cmp	r3, #0
 8018696:	d009      	beq.n	80186ac <f_write+0x186>
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	2201      	movs	r2, #1
 801869c:	755a      	strb	r2, [r3, #21]
 801869e:	693b      	ldr	r3, [r7, #16]
 80186a0:	2101      	movs	r1, #1
 80186a2:	4618      	mov	r0, r3
 80186a4:	f7fd fbe0 	bl	8015e68 <unlock_fs>
 80186a8:	2301      	movs	r3, #1
 80186aa:	e0dc      	b.n	8018866 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	7d1b      	ldrb	r3, [r3, #20]
 80186b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80186b4:	b2da      	uxtb	r2, r3
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80186ba:	693a      	ldr	r2, [r7, #16]
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	69db      	ldr	r3, [r3, #28]
 80186c0:	4619      	mov	r1, r3
 80186c2:	4610      	mov	r0, r2
 80186c4:	f7fd fe38 	bl	8016338 <clust2sect>
 80186c8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80186ca:	697b      	ldr	r3, [r7, #20]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d109      	bne.n	80186e4 <f_write+0x1be>
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	2202      	movs	r2, #2
 80186d4:	755a      	strb	r2, [r3, #21]
 80186d6:	693b      	ldr	r3, [r7, #16]
 80186d8:	2102      	movs	r1, #2
 80186da:	4618      	mov	r0, r3
 80186dc:	f7fd fbc4 	bl	8015e68 <unlock_fs>
 80186e0:	2302      	movs	r3, #2
 80186e2:	e0c0      	b.n	8018866 <f_write+0x340>
			sect += csect;
 80186e4:	697a      	ldr	r2, [r7, #20]
 80186e6:	69bb      	ldr	r3, [r7, #24]
 80186e8:	4413      	add	r3, r2
 80186ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	0a5b      	lsrs	r3, r3, #9
 80186f0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80186f2:	6a3b      	ldr	r3, [r7, #32]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d041      	beq.n	801877c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80186f8:	69ba      	ldr	r2, [r7, #24]
 80186fa:	6a3b      	ldr	r3, [r7, #32]
 80186fc:	4413      	add	r3, r2
 80186fe:	693a      	ldr	r2, [r7, #16]
 8018700:	8952      	ldrh	r2, [r2, #10]
 8018702:	4293      	cmp	r3, r2
 8018704:	d905      	bls.n	8018712 <f_write+0x1ec>
					cc = fs->csize - csect;
 8018706:	693b      	ldr	r3, [r7, #16]
 8018708:	895b      	ldrh	r3, [r3, #10]
 801870a:	461a      	mov	r2, r3
 801870c:	69bb      	ldr	r3, [r7, #24]
 801870e:	1ad3      	subs	r3, r2, r3
 8018710:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018712:	693b      	ldr	r3, [r7, #16]
 8018714:	7858      	ldrb	r0, [r3, #1]
 8018716:	6a3b      	ldr	r3, [r7, #32]
 8018718:	697a      	ldr	r2, [r7, #20]
 801871a:	69f9      	ldr	r1, [r7, #28]
 801871c:	f7fd fa50 	bl	8015bc0 <disk_write>
 8018720:	4603      	mov	r3, r0
 8018722:	2b00      	cmp	r3, #0
 8018724:	d009      	beq.n	801873a <f_write+0x214>
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	2201      	movs	r2, #1
 801872a:	755a      	strb	r2, [r3, #21]
 801872c:	693b      	ldr	r3, [r7, #16]
 801872e:	2101      	movs	r1, #1
 8018730:	4618      	mov	r0, r3
 8018732:	f7fd fb99 	bl	8015e68 <unlock_fs>
 8018736:	2301      	movs	r3, #1
 8018738:	e095      	b.n	8018866 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	6a1a      	ldr	r2, [r3, #32]
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	1ad3      	subs	r3, r2, r3
 8018742:	6a3a      	ldr	r2, [r7, #32]
 8018744:	429a      	cmp	r2, r3
 8018746:	d915      	bls.n	8018774 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	6a1a      	ldr	r2, [r3, #32]
 8018752:	697b      	ldr	r3, [r7, #20]
 8018754:	1ad3      	subs	r3, r2, r3
 8018756:	025b      	lsls	r3, r3, #9
 8018758:	69fa      	ldr	r2, [r7, #28]
 801875a:	4413      	add	r3, r2
 801875c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018760:	4619      	mov	r1, r3
 8018762:	f7fd faed 	bl	8015d40 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	7d1b      	ldrb	r3, [r3, #20]
 801876a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801876e:	b2da      	uxtb	r2, r3
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018774:	6a3b      	ldr	r3, [r7, #32]
 8018776:	025b      	lsls	r3, r3, #9
 8018778:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801877a:	e044      	b.n	8018806 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	6a1b      	ldr	r3, [r3, #32]
 8018780:	697a      	ldr	r2, [r7, #20]
 8018782:	429a      	cmp	r2, r3
 8018784:	d01b      	beq.n	80187be <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	699a      	ldr	r2, [r3, #24]
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801878e:	429a      	cmp	r2, r3
 8018790:	d215      	bcs.n	80187be <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018792:	693b      	ldr	r3, [r7, #16]
 8018794:	7858      	ldrb	r0, [r3, #1]
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801879c:	2301      	movs	r3, #1
 801879e:	697a      	ldr	r2, [r7, #20]
 80187a0:	f7fd f9ee 	bl	8015b80 <disk_read>
 80187a4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d009      	beq.n	80187be <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	2201      	movs	r2, #1
 80187ae:	755a      	strb	r2, [r3, #21]
 80187b0:	693b      	ldr	r3, [r7, #16]
 80187b2:	2101      	movs	r1, #1
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7fd fb57 	bl	8015e68 <unlock_fs>
 80187ba:	2301      	movs	r3, #1
 80187bc:	e053      	b.n	8018866 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	697a      	ldr	r2, [r7, #20]
 80187c2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	699b      	ldr	r3, [r3, #24]
 80187c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80187cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80187d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80187d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d901      	bls.n	80187de <f_write+0x2b8>
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	699b      	ldr	r3, [r3, #24]
 80187e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80187ec:	4413      	add	r3, r2
 80187ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187f0:	69f9      	ldr	r1, [r7, #28]
 80187f2:	4618      	mov	r0, r3
 80187f4:	f7fd faa4 	bl	8015d40 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	7d1b      	ldrb	r3, [r3, #20]
 80187fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018800:	b2da      	uxtb	r2, r3
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018806:	69fa      	ldr	r2, [r7, #28]
 8018808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801880a:	4413      	add	r3, r2
 801880c:	61fb      	str	r3, [r7, #28]
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	699a      	ldr	r2, [r3, #24]
 8018812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018814:	441a      	add	r2, r3
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	619a      	str	r2, [r3, #24]
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	68da      	ldr	r2, [r3, #12]
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	699b      	ldr	r3, [r3, #24]
 8018822:	429a      	cmp	r2, r3
 8018824:	bf38      	it	cc
 8018826:	461a      	movcc	r2, r3
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	60da      	str	r2, [r3, #12]
 801882c:	683b      	ldr	r3, [r7, #0]
 801882e:	681a      	ldr	r2, [r3, #0]
 8018830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018832:	441a      	add	r2, r3
 8018834:	683b      	ldr	r3, [r7, #0]
 8018836:	601a      	str	r2, [r3, #0]
 8018838:	687a      	ldr	r2, [r7, #4]
 801883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883c:	1ad3      	subs	r3, r2, r3
 801883e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	2b00      	cmp	r3, #0
 8018844:	f47f aeb6 	bne.w	80185b4 <f_write+0x8e>
 8018848:	e000      	b.n	801884c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801884a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	7d1b      	ldrb	r3, [r3, #20]
 8018850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018854:	b2da      	uxtb	r2, r3
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801885a:	693b      	ldr	r3, [r7, #16]
 801885c:	2100      	movs	r1, #0
 801885e:	4618      	mov	r0, r3
 8018860:	f7fd fb02 	bl	8015e68 <unlock_fs>
 8018864:	2300      	movs	r3, #0
}
 8018866:	4618      	mov	r0, r3
 8018868:	3730      	adds	r7, #48	; 0x30
 801886a:	46bd      	mov	sp, r7
 801886c:	bd80      	pop	{r7, pc}

0801886e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801886e:	b580      	push	{r7, lr}
 8018870:	b086      	sub	sp, #24
 8018872:	af00      	add	r7, sp, #0
 8018874:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	f107 0208 	add.w	r2, r7, #8
 801887c:	4611      	mov	r1, r2
 801887e:	4618      	mov	r0, r3
 8018880:	f7ff fa5e 	bl	8017d40 <validate>
 8018884:	4603      	mov	r3, r0
 8018886:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018888:	7dfb      	ldrb	r3, [r7, #23]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d16d      	bne.n	801896a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	7d1b      	ldrb	r3, [r3, #20]
 8018892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018896:	2b00      	cmp	r3, #0
 8018898:	d067      	beq.n	801896a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	7d1b      	ldrb	r3, [r3, #20]
 801889e:	b25b      	sxtb	r3, r3
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	da1a      	bge.n	80188da <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	7858      	ldrb	r0, [r3, #1]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6a1a      	ldr	r2, [r3, #32]
 80188b2:	2301      	movs	r3, #1
 80188b4:	f7fd f984 	bl	8015bc0 <disk_write>
 80188b8:	4603      	mov	r3, r0
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d006      	beq.n	80188cc <f_sync+0x5e>
 80188be:	68bb      	ldr	r3, [r7, #8]
 80188c0:	2101      	movs	r1, #1
 80188c2:	4618      	mov	r0, r3
 80188c4:	f7fd fad0 	bl	8015e68 <unlock_fs>
 80188c8:	2301      	movs	r3, #1
 80188ca:	e055      	b.n	8018978 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	7d1b      	ldrb	r3, [r3, #20]
 80188d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80188d4:	b2da      	uxtb	r2, r3
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80188da:	f7f9 ffa5 	bl	8012828 <get_fattime>
 80188de:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80188e0:	68ba      	ldr	r2, [r7, #8]
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188e6:	4619      	mov	r1, r3
 80188e8:	4610      	mov	r0, r2
 80188ea:	f7fd fc89 	bl	8016200 <move_window>
 80188ee:	4603      	mov	r3, r0
 80188f0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80188f2:	7dfb      	ldrb	r3, [r7, #23]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d138      	bne.n	801896a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188fc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	330b      	adds	r3, #11
 8018902:	781a      	ldrb	r2, [r3, #0]
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	330b      	adds	r3, #11
 8018908:	f042 0220 	orr.w	r2, r2, #32
 801890c:	b2d2      	uxtb	r2, r2
 801890e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6818      	ldr	r0, [r3, #0]
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	689b      	ldr	r3, [r3, #8]
 8018918:	461a      	mov	r2, r3
 801891a:	68f9      	ldr	r1, [r7, #12]
 801891c:	f7fe f996 	bl	8016c4c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	f103 021c 	add.w	r2, r3, #28
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	68db      	ldr	r3, [r3, #12]
 801892a:	4619      	mov	r1, r3
 801892c:	4610      	mov	r0, r2
 801892e:	f7fd f9db 	bl	8015ce8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	3316      	adds	r3, #22
 8018936:	6939      	ldr	r1, [r7, #16]
 8018938:	4618      	mov	r0, r3
 801893a:	f7fd f9d5 	bl	8015ce8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	3312      	adds	r3, #18
 8018942:	2100      	movs	r1, #0
 8018944:	4618      	mov	r0, r3
 8018946:	f7fd f9b4 	bl	8015cb2 <st_word>
					fs->wflag = 1;
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	2201      	movs	r2, #1
 801894e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	4618      	mov	r0, r3
 8018954:	f7fd fc82 	bl	801625c <sync_fs>
 8018958:	4603      	mov	r3, r0
 801895a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	7d1b      	ldrb	r3, [r3, #20]
 8018960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018964:	b2da      	uxtb	r2, r3
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801896a:	68bb      	ldr	r3, [r7, #8]
 801896c:	7dfa      	ldrb	r2, [r7, #23]
 801896e:	4611      	mov	r1, r2
 8018970:	4618      	mov	r0, r3
 8018972:	f7fd fa79 	bl	8015e68 <unlock_fs>
 8018976:	7dfb      	ldrb	r3, [r7, #23]
}
 8018978:	4618      	mov	r0, r3
 801897a:	3718      	adds	r7, #24
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}

08018980 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b084      	sub	sp, #16
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8018988:	6878      	ldr	r0, [r7, #4]
 801898a:	f7ff ff70 	bl	801886e <f_sync>
 801898e:	4603      	mov	r3, r0
 8018990:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8018992:	7bfb      	ldrb	r3, [r7, #15]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d11d      	bne.n	80189d4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	f107 0208 	add.w	r2, r7, #8
 801899e:	4611      	mov	r1, r2
 80189a0:	4618      	mov	r0, r3
 80189a2:	f7ff f9cd 	bl	8017d40 <validate>
 80189a6:	4603      	mov	r3, r0
 80189a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80189aa:	7bfb      	ldrb	r3, [r7, #15]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d111      	bne.n	80189d4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	691b      	ldr	r3, [r3, #16]
 80189b4:	4618      	mov	r0, r3
 80189b6:	f7fd fb7f 	bl	80160b8 <dec_lock>
 80189ba:	4603      	mov	r3, r0
 80189bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80189be:	7bfb      	ldrb	r3, [r7, #15]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d102      	bne.n	80189ca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2200      	movs	r2, #0
 80189c8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80189ca:	68bb      	ldr	r3, [r7, #8]
 80189cc:	2100      	movs	r1, #0
 80189ce:	4618      	mov	r0, r3
 80189d0:	f7fd fa4a 	bl	8015e68 <unlock_fs>
#endif
		}
	}
	return res;
 80189d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	3710      	adds	r7, #16
 80189da:	46bd      	mov	sp, r7
 80189dc:	bd80      	pop	{r7, pc}
	...

080189e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80189e0:	b480      	push	{r7}
 80189e2:	b087      	sub	sp, #28
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	60f8      	str	r0, [r7, #12]
 80189e8:	60b9      	str	r1, [r7, #8]
 80189ea:	4613      	mov	r3, r2
 80189ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80189ee:	2301      	movs	r3, #1
 80189f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80189f2:	2300      	movs	r3, #0
 80189f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80189f6:	4b1f      	ldr	r3, [pc, #124]	; (8018a74 <FATFS_LinkDriverEx+0x94>)
 80189f8:	7a5b      	ldrb	r3, [r3, #9]
 80189fa:	b2db      	uxtb	r3, r3
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d131      	bne.n	8018a64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018a00:	4b1c      	ldr	r3, [pc, #112]	; (8018a74 <FATFS_LinkDriverEx+0x94>)
 8018a02:	7a5b      	ldrb	r3, [r3, #9]
 8018a04:	b2db      	uxtb	r3, r3
 8018a06:	461a      	mov	r2, r3
 8018a08:	4b1a      	ldr	r3, [pc, #104]	; (8018a74 <FATFS_LinkDriverEx+0x94>)
 8018a0a:	2100      	movs	r1, #0
 8018a0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018a0e:	4b19      	ldr	r3, [pc, #100]	; (8018a74 <FATFS_LinkDriverEx+0x94>)
 8018a10:	7a5b      	ldrb	r3, [r3, #9]
 8018a12:	b2db      	uxtb	r3, r3
 8018a14:	4a17      	ldr	r2, [pc, #92]	; (8018a74 <FATFS_LinkDriverEx+0x94>)
 8018a16:	009b      	lsls	r3, r3, #2
 8018a18:	4413      	add	r3, r2
 8018a1a:	68fa      	ldr	r2, [r7, #12]
 8018a1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018a1e:	4b15      	ldr	r3, [pc, #84]	; (8018a74 <FATFS_LinkDriverEx+0x94>)
 8018a20:	7a5b      	ldrb	r3, [r3, #9]
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	461a      	mov	r2, r3
 8018a26:	4b13      	ldr	r3, [pc, #76]	; (8018a74 <FATFS_LinkDriverEx+0x94>)
 8018a28:	4413      	add	r3, r2
 8018a2a:	79fa      	ldrb	r2, [r7, #7]
 8018a2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018a2e:	4b11      	ldr	r3, [pc, #68]	; (8018a74 <FATFS_LinkDriverEx+0x94>)
 8018a30:	7a5b      	ldrb	r3, [r3, #9]
 8018a32:	b2db      	uxtb	r3, r3
 8018a34:	1c5a      	adds	r2, r3, #1
 8018a36:	b2d1      	uxtb	r1, r2
 8018a38:	4a0e      	ldr	r2, [pc, #56]	; (8018a74 <FATFS_LinkDriverEx+0x94>)
 8018a3a:	7251      	strb	r1, [r2, #9]
 8018a3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018a3e:	7dbb      	ldrb	r3, [r7, #22]
 8018a40:	3330      	adds	r3, #48	; 0x30
 8018a42:	b2da      	uxtb	r2, r3
 8018a44:	68bb      	ldr	r3, [r7, #8]
 8018a46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	3301      	adds	r3, #1
 8018a4c:	223a      	movs	r2, #58	; 0x3a
 8018a4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018a50:	68bb      	ldr	r3, [r7, #8]
 8018a52:	3302      	adds	r3, #2
 8018a54:	222f      	movs	r2, #47	; 0x2f
 8018a56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018a58:	68bb      	ldr	r3, [r7, #8]
 8018a5a:	3303      	adds	r3, #3
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018a60:	2300      	movs	r3, #0
 8018a62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a66:	4618      	mov	r0, r3
 8018a68:	371c      	adds	r7, #28
 8018a6a:	46bd      	mov	sp, r7
 8018a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a70:	4770      	bx	lr
 8018a72:	bf00      	nop
 8018a74:	20000554 	.word	0x20000554

08018a78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b082      	sub	sp, #8
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	6078      	str	r0, [r7, #4]
 8018a80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018a82:	2200      	movs	r2, #0
 8018a84:	6839      	ldr	r1, [r7, #0]
 8018a86:	6878      	ldr	r0, [r7, #4]
 8018a88:	f7ff ffaa 	bl	80189e0 <FATFS_LinkDriverEx>
 8018a8c:	4603      	mov	r3, r0
}
 8018a8e:	4618      	mov	r0, r3
 8018a90:	3708      	adds	r7, #8
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd80      	pop	{r7, pc}
	...

08018a98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8018a98:	b480      	push	{r7}
 8018a9a:	b085      	sub	sp, #20
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	6039      	str	r1, [r7, #0]
 8018aa2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8018aa4:	88fb      	ldrh	r3, [r7, #6]
 8018aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8018aa8:	d802      	bhi.n	8018ab0 <ff_convert+0x18>
		c = chr;
 8018aaa:	88fb      	ldrh	r3, [r7, #6]
 8018aac:	81fb      	strh	r3, [r7, #14]
 8018aae:	e025      	b.n	8018afc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018ab0:	683b      	ldr	r3, [r7, #0]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d00b      	beq.n	8018ace <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8018ab6:	88fb      	ldrh	r3, [r7, #6]
 8018ab8:	2bff      	cmp	r3, #255	; 0xff
 8018aba:	d805      	bhi.n	8018ac8 <ff_convert+0x30>
 8018abc:	88fb      	ldrh	r3, [r7, #6]
 8018abe:	3b80      	subs	r3, #128	; 0x80
 8018ac0:	4a12      	ldr	r2, [pc, #72]	; (8018b0c <ff_convert+0x74>)
 8018ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018ac6:	e000      	b.n	8018aca <ff_convert+0x32>
 8018ac8:	2300      	movs	r3, #0
 8018aca:	81fb      	strh	r3, [r7, #14]
 8018acc:	e016      	b.n	8018afc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8018ace:	2300      	movs	r3, #0
 8018ad0:	81fb      	strh	r3, [r7, #14]
 8018ad2:	e009      	b.n	8018ae8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8018ad4:	89fb      	ldrh	r3, [r7, #14]
 8018ad6:	4a0d      	ldr	r2, [pc, #52]	; (8018b0c <ff_convert+0x74>)
 8018ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018adc:	88fa      	ldrh	r2, [r7, #6]
 8018ade:	429a      	cmp	r2, r3
 8018ae0:	d006      	beq.n	8018af0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8018ae2:	89fb      	ldrh	r3, [r7, #14]
 8018ae4:	3301      	adds	r3, #1
 8018ae6:	81fb      	strh	r3, [r7, #14]
 8018ae8:	89fb      	ldrh	r3, [r7, #14]
 8018aea:	2b7f      	cmp	r3, #127	; 0x7f
 8018aec:	d9f2      	bls.n	8018ad4 <ff_convert+0x3c>
 8018aee:	e000      	b.n	8018af2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018af0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8018af2:	89fb      	ldrh	r3, [r7, #14]
 8018af4:	3380      	adds	r3, #128	; 0x80
 8018af6:	b29b      	uxth	r3, r3
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8018afc:	89fb      	ldrh	r3, [r7, #14]
}
 8018afe:	4618      	mov	r0, r3
 8018b00:	3714      	adds	r7, #20
 8018b02:	46bd      	mov	sp, r7
 8018b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b08:	4770      	bx	lr
 8018b0a:	bf00      	nop
 8018b0c:	08020070 	.word	0x08020070

08018b10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018b10:	b480      	push	{r7}
 8018b12:	b087      	sub	sp, #28
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	4603      	mov	r3, r0
 8018b18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8018b1a:	88fb      	ldrh	r3, [r7, #6]
 8018b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018b20:	d201      	bcs.n	8018b26 <ff_wtoupper+0x16>
 8018b22:	4b3e      	ldr	r3, [pc, #248]	; (8018c1c <ff_wtoupper+0x10c>)
 8018b24:	e000      	b.n	8018b28 <ff_wtoupper+0x18>
 8018b26:	4b3e      	ldr	r3, [pc, #248]	; (8018c20 <ff_wtoupper+0x110>)
 8018b28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8018b2a:	697b      	ldr	r3, [r7, #20]
 8018b2c:	1c9a      	adds	r2, r3, #2
 8018b2e:	617a      	str	r2, [r7, #20]
 8018b30:	881b      	ldrh	r3, [r3, #0]
 8018b32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8018b34:	8a7b      	ldrh	r3, [r7, #18]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d068      	beq.n	8018c0c <ff_wtoupper+0xfc>
 8018b3a:	88fa      	ldrh	r2, [r7, #6]
 8018b3c:	8a7b      	ldrh	r3, [r7, #18]
 8018b3e:	429a      	cmp	r2, r3
 8018b40:	d364      	bcc.n	8018c0c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8018b42:	697b      	ldr	r3, [r7, #20]
 8018b44:	1c9a      	adds	r2, r3, #2
 8018b46:	617a      	str	r2, [r7, #20]
 8018b48:	881b      	ldrh	r3, [r3, #0]
 8018b4a:	823b      	strh	r3, [r7, #16]
 8018b4c:	8a3b      	ldrh	r3, [r7, #16]
 8018b4e:	0a1b      	lsrs	r3, r3, #8
 8018b50:	81fb      	strh	r3, [r7, #14]
 8018b52:	8a3b      	ldrh	r3, [r7, #16]
 8018b54:	b2db      	uxtb	r3, r3
 8018b56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8018b58:	88fa      	ldrh	r2, [r7, #6]
 8018b5a:	8a79      	ldrh	r1, [r7, #18]
 8018b5c:	8a3b      	ldrh	r3, [r7, #16]
 8018b5e:	440b      	add	r3, r1
 8018b60:	429a      	cmp	r2, r3
 8018b62:	da49      	bge.n	8018bf8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8018b64:	89fb      	ldrh	r3, [r7, #14]
 8018b66:	2b08      	cmp	r3, #8
 8018b68:	d84f      	bhi.n	8018c0a <ff_wtoupper+0xfa>
 8018b6a:	a201      	add	r2, pc, #4	; (adr r2, 8018b70 <ff_wtoupper+0x60>)
 8018b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b70:	08018b95 	.word	0x08018b95
 8018b74:	08018ba7 	.word	0x08018ba7
 8018b78:	08018bbd 	.word	0x08018bbd
 8018b7c:	08018bc5 	.word	0x08018bc5
 8018b80:	08018bcd 	.word	0x08018bcd
 8018b84:	08018bd5 	.word	0x08018bd5
 8018b88:	08018bdd 	.word	0x08018bdd
 8018b8c:	08018be5 	.word	0x08018be5
 8018b90:	08018bed 	.word	0x08018bed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8018b94:	88fa      	ldrh	r2, [r7, #6]
 8018b96:	8a7b      	ldrh	r3, [r7, #18]
 8018b98:	1ad3      	subs	r3, r2, r3
 8018b9a:	005b      	lsls	r3, r3, #1
 8018b9c:	697a      	ldr	r2, [r7, #20]
 8018b9e:	4413      	add	r3, r2
 8018ba0:	881b      	ldrh	r3, [r3, #0]
 8018ba2:	80fb      	strh	r3, [r7, #6]
 8018ba4:	e027      	b.n	8018bf6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8018ba6:	88fa      	ldrh	r2, [r7, #6]
 8018ba8:	8a7b      	ldrh	r3, [r7, #18]
 8018baa:	1ad3      	subs	r3, r2, r3
 8018bac:	b29b      	uxth	r3, r3
 8018bae:	f003 0301 	and.w	r3, r3, #1
 8018bb2:	b29b      	uxth	r3, r3
 8018bb4:	88fa      	ldrh	r2, [r7, #6]
 8018bb6:	1ad3      	subs	r3, r2, r3
 8018bb8:	80fb      	strh	r3, [r7, #6]
 8018bba:	e01c      	b.n	8018bf6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8018bbc:	88fb      	ldrh	r3, [r7, #6]
 8018bbe:	3b10      	subs	r3, #16
 8018bc0:	80fb      	strh	r3, [r7, #6]
 8018bc2:	e018      	b.n	8018bf6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8018bc4:	88fb      	ldrh	r3, [r7, #6]
 8018bc6:	3b20      	subs	r3, #32
 8018bc8:	80fb      	strh	r3, [r7, #6]
 8018bca:	e014      	b.n	8018bf6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8018bcc:	88fb      	ldrh	r3, [r7, #6]
 8018bce:	3b30      	subs	r3, #48	; 0x30
 8018bd0:	80fb      	strh	r3, [r7, #6]
 8018bd2:	e010      	b.n	8018bf6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8018bd4:	88fb      	ldrh	r3, [r7, #6]
 8018bd6:	3b1a      	subs	r3, #26
 8018bd8:	80fb      	strh	r3, [r7, #6]
 8018bda:	e00c      	b.n	8018bf6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8018bdc:	88fb      	ldrh	r3, [r7, #6]
 8018bde:	3308      	adds	r3, #8
 8018be0:	80fb      	strh	r3, [r7, #6]
 8018be2:	e008      	b.n	8018bf6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8018be4:	88fb      	ldrh	r3, [r7, #6]
 8018be6:	3b50      	subs	r3, #80	; 0x50
 8018be8:	80fb      	strh	r3, [r7, #6]
 8018bea:	e004      	b.n	8018bf6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8018bec:	88fb      	ldrh	r3, [r7, #6]
 8018bee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8018bf2:	80fb      	strh	r3, [r7, #6]
 8018bf4:	bf00      	nop
			}
			break;
 8018bf6:	e008      	b.n	8018c0a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8018bf8:	89fb      	ldrh	r3, [r7, #14]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d195      	bne.n	8018b2a <ff_wtoupper+0x1a>
 8018bfe:	8a3b      	ldrh	r3, [r7, #16]
 8018c00:	005b      	lsls	r3, r3, #1
 8018c02:	697a      	ldr	r2, [r7, #20]
 8018c04:	4413      	add	r3, r2
 8018c06:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8018c08:	e78f      	b.n	8018b2a <ff_wtoupper+0x1a>
			break;
 8018c0a:	bf00      	nop
	}

	return chr;
 8018c0c:	88fb      	ldrh	r3, [r7, #6]
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	371c      	adds	r7, #28
 8018c12:	46bd      	mov	sp, r7
 8018c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c18:	4770      	bx	lr
 8018c1a:	bf00      	nop
 8018c1c:	08020170 	.word	0x08020170
 8018c20:	08020364 	.word	0x08020364

08018c24 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b086      	sub	sp, #24
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	6039      	str	r1, [r7, #0]
 8018c2e:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8018c30:	2300      	movs	r3, #0
 8018c32:	60fb      	str	r3, [r7, #12]
 8018c34:	2300      	movs	r3, #0
 8018c36:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8018c38:	f107 030c 	add.w	r3, r7, #12
 8018c3c:	2101      	movs	r1, #1
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f000 f8ec 	bl	8018e1c <osSemaphoreCreate>
 8018c44:	4602      	mov	r2, r0
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8018c4a:	683b      	ldr	r3, [r7, #0]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	bf14      	ite	ne
 8018c52:	2301      	movne	r3, #1
 8018c54:	2300      	moveq	r3, #0
 8018c56:	b2db      	uxtb	r3, r3
 8018c58:	617b      	str	r3, [r7, #20]

    return ret;
 8018c5a:	697b      	ldr	r3, [r7, #20]
}
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	3718      	adds	r7, #24
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bd80      	pop	{r7, pc}

08018c64 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8018c6c:	6878      	ldr	r0, [r7, #4]
 8018c6e:	f000 f999 	bl	8018fa4 <osSemaphoreDelete>
#endif
    return 1;
 8018c72:	2301      	movs	r3, #1
}
 8018c74:	4618      	mov	r0, r3
 8018c76:	3708      	adds	r7, #8
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}

08018c7c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b084      	sub	sp, #16
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8018c84:	2300      	movs	r3, #0
 8018c86:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8018c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	f000 f905 	bl	8018e9c <osSemaphoreWait>
 8018c92:	4603      	mov	r3, r0
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d101      	bne.n	8018c9c <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8018c98:	2301      	movs	r3, #1
 8018c9a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8018c9c:	68fb      	ldr	r3, [r7, #12]
}
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	3710      	adds	r7, #16
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	bd80      	pop	{r7, pc}

08018ca6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8018ca6:	b580      	push	{r7, lr}
 8018ca8:	b082      	sub	sp, #8
 8018caa:	af00      	add	r7, sp, #0
 8018cac:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8018cae:	6878      	ldr	r0, [r7, #4]
 8018cb0:	f000 f942 	bl	8018f38 <osSemaphoreRelease>
#endif
}
 8018cb4:	bf00      	nop
 8018cb6:	3708      	adds	r7, #8
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}

08018cbc <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b082      	sub	sp, #8
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8018cc4:	6878      	ldr	r0, [r7, #4]
 8018cc6:	f002 fde5 	bl	801b894 <pvPortMalloc>
 8018cca:	4603      	mov	r3, r0
}
 8018ccc:	4618      	mov	r0, r3
 8018cce:	3708      	adds	r7, #8
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	bd80      	pop	{r7, pc}

08018cd4 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b082      	sub	sp, #8
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8018cdc:	6878      	ldr	r0, [r7, #4]
 8018cde:	f002 fea9 	bl	801ba34 <vPortFree>
}
 8018ce2:	bf00      	nop
 8018ce4:	3708      	adds	r7, #8
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	bd80      	pop	{r7, pc}

08018cea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8018cea:	b480      	push	{r7}
 8018cec:	b085      	sub	sp, #20
 8018cee:	af00      	add	r7, sp, #0
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8018cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018cfc:	2b84      	cmp	r3, #132	; 0x84
 8018cfe:	d005      	beq.n	8018d0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8018d00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	4413      	add	r3, r2
 8018d08:	3303      	adds	r3, #3
 8018d0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8018d0c:	68fb      	ldr	r3, [r7, #12]
}
 8018d0e:	4618      	mov	r0, r3
 8018d10:	3714      	adds	r7, #20
 8018d12:	46bd      	mov	sp, r7
 8018d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d18:	4770      	bx	lr

08018d1a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8018d1a:	b480      	push	{r7}
 8018d1c:	b083      	sub	sp, #12
 8018d1e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018d20:	f3ef 8305 	mrs	r3, IPSR
 8018d24:	607b      	str	r3, [r7, #4]
  return(result);
 8018d26:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	bf14      	ite	ne
 8018d2c:	2301      	movne	r3, #1
 8018d2e:	2300      	moveq	r3, #0
 8018d30:	b2db      	uxtb	r3, r3
}
 8018d32:	4618      	mov	r0, r3
 8018d34:	370c      	adds	r7, #12
 8018d36:	46bd      	mov	sp, r7
 8018d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3c:	4770      	bx	lr

08018d3e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8018d3e:	b580      	push	{r7, lr}
 8018d40:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8018d42:	f001 fcbb 	bl	801a6bc <vTaskStartScheduler>
  
  return osOK;
 8018d46:	2300      	movs	r3, #0
}
 8018d48:	4618      	mov	r0, r3
 8018d4a:	bd80      	pop	{r7, pc}

08018d4c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8018d50:	f002 f924 	bl	801af9c <xTaskGetSchedulerState>
 8018d54:	4603      	mov	r3, r0
 8018d56:	2b01      	cmp	r3, #1
 8018d58:	d101      	bne.n	8018d5e <osKernelRunning+0x12>
    return 0;
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	e000      	b.n	8018d60 <osKernelRunning+0x14>
  else
    return 1;
 8018d5e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8018d60:	4618      	mov	r0, r3
 8018d62:	bd80      	pop	{r7, pc}

08018d64 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8018d68:	f7ff ffd7 	bl	8018d1a <inHandlerMode>
 8018d6c:	4603      	mov	r3, r0
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d003      	beq.n	8018d7a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8018d72:	f001 fdcd 	bl	801a910 <xTaskGetTickCountFromISR>
 8018d76:	4603      	mov	r3, r0
 8018d78:	e002      	b.n	8018d80 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8018d7a:	f001 fdb9 	bl	801a8f0 <xTaskGetTickCount>
 8018d7e:	4603      	mov	r3, r0
  }
}
 8018d80:	4618      	mov	r0, r3
 8018d82:	bd80      	pop	{r7, pc}

08018d84 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8018d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d86:	b089      	sub	sp, #36	; 0x24
 8018d88:	af04      	add	r7, sp, #16
 8018d8a:	6078      	str	r0, [r7, #4]
 8018d8c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	695b      	ldr	r3, [r3, #20]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d020      	beq.n	8018dd8 <osThreadCreate+0x54>
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	699b      	ldr	r3, [r3, #24]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d01c      	beq.n	8018dd8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	685c      	ldr	r4, [r3, #4]
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681d      	ldr	r5, [r3, #0]
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	691e      	ldr	r6, [r3, #16]
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018db0:	4618      	mov	r0, r3
 8018db2:	f7ff ff9a 	bl	8018cea <makeFreeRtosPriority>
 8018db6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	695b      	ldr	r3, [r3, #20]
 8018dbc:	687a      	ldr	r2, [r7, #4]
 8018dbe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018dc0:	9202      	str	r2, [sp, #8]
 8018dc2:	9301      	str	r3, [sp, #4]
 8018dc4:	9100      	str	r1, [sp, #0]
 8018dc6:	683b      	ldr	r3, [r7, #0]
 8018dc8:	4632      	mov	r2, r6
 8018dca:	4629      	mov	r1, r5
 8018dcc:	4620      	mov	r0, r4
 8018dce:	f001 fa81 	bl	801a2d4 <xTaskCreateStatic>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	60fb      	str	r3, [r7, #12]
 8018dd6:	e01c      	b.n	8018e12 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	685c      	ldr	r4, [r3, #4]
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018de4:	b29e      	uxth	r6, r3
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7ff ff7c 	bl	8018cea <makeFreeRtosPriority>
 8018df2:	4602      	mov	r2, r0
 8018df4:	f107 030c 	add.w	r3, r7, #12
 8018df8:	9301      	str	r3, [sp, #4]
 8018dfa:	9200      	str	r2, [sp, #0]
 8018dfc:	683b      	ldr	r3, [r7, #0]
 8018dfe:	4632      	mov	r2, r6
 8018e00:	4629      	mov	r1, r5
 8018e02:	4620      	mov	r0, r4
 8018e04:	f001 fac9 	bl	801a39a <xTaskCreate>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	2b01      	cmp	r3, #1
 8018e0c:	d001      	beq.n	8018e12 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8018e0e:	2300      	movs	r3, #0
 8018e10:	e000      	b.n	8018e14 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8018e12:	68fb      	ldr	r3, [r7, #12]
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	3714      	adds	r7, #20
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018e1c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b086      	sub	sp, #24
 8018e20:	af02      	add	r7, sp, #8
 8018e22:	6078      	str	r0, [r7, #4]
 8018e24:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	685b      	ldr	r3, [r3, #4]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d016      	beq.n	8018e5c <osSemaphoreCreate+0x40>
    if (count == 1) {
 8018e2e:	683b      	ldr	r3, [r7, #0]
 8018e30:	2b01      	cmp	r3, #1
 8018e32:	d10a      	bne.n	8018e4a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	685b      	ldr	r3, [r3, #4]
 8018e38:	2203      	movs	r2, #3
 8018e3a:	9200      	str	r2, [sp, #0]
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	2100      	movs	r1, #0
 8018e40:	2001      	movs	r0, #1
 8018e42:	f000 fabd 	bl	80193c0 <xQueueGenericCreateStatic>
 8018e46:	4603      	mov	r3, r0
 8018e48:	e023      	b.n	8018e92 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8018e4a:	6838      	ldr	r0, [r7, #0]
 8018e4c:	6839      	ldr	r1, [r7, #0]
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	685b      	ldr	r3, [r3, #4]
 8018e52:	461a      	mov	r2, r3
 8018e54:	f000 fb97 	bl	8019586 <xQueueCreateCountingSemaphoreStatic>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	e01a      	b.n	8018e92 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	2b01      	cmp	r3, #1
 8018e60:	d110      	bne.n	8018e84 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8018e62:	2203      	movs	r2, #3
 8018e64:	2100      	movs	r1, #0
 8018e66:	2001      	movs	r0, #1
 8018e68:	f000 fb2c 	bl	80194c4 <xQueueGenericCreate>
 8018e6c:	60f8      	str	r0, [r7, #12]
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d005      	beq.n	8018e80 <osSemaphoreCreate+0x64>
 8018e74:	2300      	movs	r3, #0
 8018e76:	2200      	movs	r2, #0
 8018e78:	2100      	movs	r1, #0
 8018e7a:	68f8      	ldr	r0, [r7, #12]
 8018e7c:	f000 fbf6 	bl	801966c <xQueueGenericSend>
      return sema;
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	e006      	b.n	8018e92 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8018e84:	683b      	ldr	r3, [r7, #0]
 8018e86:	683a      	ldr	r2, [r7, #0]
 8018e88:	4611      	mov	r1, r2
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f000 fbb6 	bl	80195fc <xQueueCreateCountingSemaphore>
 8018e90:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8018e92:	4618      	mov	r0, r3
 8018e94:	3710      	adds	r7, #16
 8018e96:	46bd      	mov	sp, r7
 8018e98:	bd80      	pop	{r7, pc}
	...

08018e9c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b084      	sub	sp, #16
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	6078      	str	r0, [r7, #4]
 8018ea4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d101      	bne.n	8018eb4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8018eb0:	2380      	movs	r3, #128	; 0x80
 8018eb2:	e03a      	b.n	8018f2a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8018eb8:	683b      	ldr	r3, [r7, #0]
 8018eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018ebe:	d103      	bne.n	8018ec8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8018ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ec4:	60fb      	str	r3, [r7, #12]
 8018ec6:	e009      	b.n	8018edc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8018ec8:	683b      	ldr	r3, [r7, #0]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d006      	beq.n	8018edc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d101      	bne.n	8018edc <osSemaphoreWait+0x40>
      ticks = 1;
 8018ed8:	2301      	movs	r3, #1
 8018eda:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8018edc:	f7ff ff1d 	bl	8018d1a <inHandlerMode>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d017      	beq.n	8018f16 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8018ee6:	f107 0308 	add.w	r3, r7, #8
 8018eea:	461a      	mov	r2, r3
 8018eec:	2100      	movs	r1, #0
 8018eee:	6878      	ldr	r0, [r7, #4]
 8018ef0:	f000 fff2 	bl	8019ed8 <xQueueReceiveFromISR>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	2b01      	cmp	r3, #1
 8018ef8:	d001      	beq.n	8018efe <osSemaphoreWait+0x62>
      return osErrorOS;
 8018efa:	23ff      	movs	r3, #255	; 0xff
 8018efc:	e015      	b.n	8018f2a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8018efe:	68bb      	ldr	r3, [r7, #8]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d011      	beq.n	8018f28 <osSemaphoreWait+0x8c>
 8018f04:	4b0b      	ldr	r3, [pc, #44]	; (8018f34 <osSemaphoreWait+0x98>)
 8018f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f0a:	601a      	str	r2, [r3, #0]
 8018f0c:	f3bf 8f4f 	dsb	sy
 8018f10:	f3bf 8f6f 	isb	sy
 8018f14:	e008      	b.n	8018f28 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8018f16:	68f9      	ldr	r1, [r7, #12]
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f000 fec9 	bl	8019cb0 <xQueueSemaphoreTake>
 8018f1e:	4603      	mov	r3, r0
 8018f20:	2b01      	cmp	r3, #1
 8018f22:	d001      	beq.n	8018f28 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8018f24:	23ff      	movs	r3, #255	; 0xff
 8018f26:	e000      	b.n	8018f2a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8018f28:	2300      	movs	r3, #0
}
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	3710      	adds	r7, #16
 8018f2e:	46bd      	mov	sp, r7
 8018f30:	bd80      	pop	{r7, pc}
 8018f32:	bf00      	nop
 8018f34:	e000ed04 	.word	0xe000ed04

08018f38 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b084      	sub	sp, #16
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8018f40:	2300      	movs	r3, #0
 8018f42:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8018f44:	2300      	movs	r3, #0
 8018f46:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8018f48:	f7ff fee7 	bl	8018d1a <inHandlerMode>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d016      	beq.n	8018f80 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8018f52:	f107 0308 	add.w	r3, r7, #8
 8018f56:	4619      	mov	r1, r3
 8018f58:	6878      	ldr	r0, [r7, #4]
 8018f5a:	f000 fd2d 	bl	80199b8 <xQueueGiveFromISR>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	2b01      	cmp	r3, #1
 8018f62:	d001      	beq.n	8018f68 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8018f64:	23ff      	movs	r3, #255	; 0xff
 8018f66:	e017      	b.n	8018f98 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018f68:	68bb      	ldr	r3, [r7, #8]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d013      	beq.n	8018f96 <osSemaphoreRelease+0x5e>
 8018f6e:	4b0c      	ldr	r3, [pc, #48]	; (8018fa0 <osSemaphoreRelease+0x68>)
 8018f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f74:	601a      	str	r2, [r3, #0]
 8018f76:	f3bf 8f4f 	dsb	sy
 8018f7a:	f3bf 8f6f 	isb	sy
 8018f7e:	e00a      	b.n	8018f96 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8018f80:	2300      	movs	r3, #0
 8018f82:	2200      	movs	r2, #0
 8018f84:	2100      	movs	r1, #0
 8018f86:	6878      	ldr	r0, [r7, #4]
 8018f88:	f000 fb70 	bl	801966c <xQueueGenericSend>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	2b01      	cmp	r3, #1
 8018f90:	d001      	beq.n	8018f96 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8018f92:	23ff      	movs	r3, #255	; 0xff
 8018f94:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8018f96:	68fb      	ldr	r3, [r7, #12]
}
 8018f98:	4618      	mov	r0, r3
 8018f9a:	3710      	adds	r7, #16
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}
 8018fa0:	e000ed04 	.word	0xe000ed04

08018fa4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b082      	sub	sp, #8
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8018fac:	f7ff feb5 	bl	8018d1a <inHandlerMode>
 8018fb0:	4603      	mov	r3, r0
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d001      	beq.n	8018fba <osSemaphoreDelete+0x16>
    return osErrorISR;
 8018fb6:	2382      	movs	r3, #130	; 0x82
 8018fb8:	e003      	b.n	8018fc2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8018fba:	6878      	ldr	r0, [r7, #4]
 8018fbc:	f001 f812 	bl	8019fe4 <vQueueDelete>

  return osOK; 
 8018fc0:	2300      	movs	r3, #0
}
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	3708      	adds	r7, #8
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bd80      	pop	{r7, pc}

08018fca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8018fca:	b590      	push	{r4, r7, lr}
 8018fcc:	b085      	sub	sp, #20
 8018fce:	af02      	add	r7, sp, #8
 8018fd0:	6078      	str	r0, [r7, #4]
 8018fd2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	689b      	ldr	r3, [r3, #8]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d011      	beq.n	8019000 <osMessageCreate+0x36>
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	68db      	ldr	r3, [r3, #12]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d00d      	beq.n	8019000 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	6818      	ldr	r0, [r3, #0]
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6859      	ldr	r1, [r3, #4]
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	689a      	ldr	r2, [r3, #8]
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	68db      	ldr	r3, [r3, #12]
 8018ff4:	2400      	movs	r4, #0
 8018ff6:	9400      	str	r4, [sp, #0]
 8018ff8:	f000 f9e2 	bl	80193c0 <xQueueGenericCreateStatic>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	e008      	b.n	8019012 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	6818      	ldr	r0, [r3, #0]
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	685b      	ldr	r3, [r3, #4]
 8019008:	2200      	movs	r2, #0
 801900a:	4619      	mov	r1, r3
 801900c:	f000 fa5a 	bl	80194c4 <xQueueGenericCreate>
 8019010:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8019012:	4618      	mov	r0, r3
 8019014:	370c      	adds	r7, #12
 8019016:	46bd      	mov	sp, r7
 8019018:	bd90      	pop	{r4, r7, pc}
	...

0801901c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b086      	sub	sp, #24
 8019020:	af00      	add	r7, sp, #0
 8019022:	60f8      	str	r0, [r7, #12]
 8019024:	60b9      	str	r1, [r7, #8]
 8019026:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8019028:	2300      	movs	r3, #0
 801902a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8019030:	697b      	ldr	r3, [r7, #20]
 8019032:	2b00      	cmp	r3, #0
 8019034:	d101      	bne.n	801903a <osMessagePut+0x1e>
    ticks = 1;
 8019036:	2301      	movs	r3, #1
 8019038:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801903a:	f7ff fe6e 	bl	8018d1a <inHandlerMode>
 801903e:	4603      	mov	r3, r0
 8019040:	2b00      	cmp	r3, #0
 8019042:	d018      	beq.n	8019076 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8019044:	f107 0210 	add.w	r2, r7, #16
 8019048:	f107 0108 	add.w	r1, r7, #8
 801904c:	2300      	movs	r3, #0
 801904e:	68f8      	ldr	r0, [r7, #12]
 8019050:	f000 fc12 	bl	8019878 <xQueueGenericSendFromISR>
 8019054:	4603      	mov	r3, r0
 8019056:	2b01      	cmp	r3, #1
 8019058:	d001      	beq.n	801905e <osMessagePut+0x42>
      return osErrorOS;
 801905a:	23ff      	movs	r3, #255	; 0xff
 801905c:	e018      	b.n	8019090 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801905e:	693b      	ldr	r3, [r7, #16]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d014      	beq.n	801908e <osMessagePut+0x72>
 8019064:	4b0c      	ldr	r3, [pc, #48]	; (8019098 <osMessagePut+0x7c>)
 8019066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801906a:	601a      	str	r2, [r3, #0]
 801906c:	f3bf 8f4f 	dsb	sy
 8019070:	f3bf 8f6f 	isb	sy
 8019074:	e00b      	b.n	801908e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8019076:	f107 0108 	add.w	r1, r7, #8
 801907a:	2300      	movs	r3, #0
 801907c:	697a      	ldr	r2, [r7, #20]
 801907e:	68f8      	ldr	r0, [r7, #12]
 8019080:	f000 faf4 	bl	801966c <xQueueGenericSend>
 8019084:	4603      	mov	r3, r0
 8019086:	2b01      	cmp	r3, #1
 8019088:	d001      	beq.n	801908e <osMessagePut+0x72>
      return osErrorOS;
 801908a:	23ff      	movs	r3, #255	; 0xff
 801908c:	e000      	b.n	8019090 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801908e:	2300      	movs	r3, #0
}
 8019090:	4618      	mov	r0, r3
 8019092:	3718      	adds	r7, #24
 8019094:	46bd      	mov	sp, r7
 8019096:	bd80      	pop	{r7, pc}
 8019098:	e000ed04 	.word	0xe000ed04

0801909c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801909c:	b590      	push	{r4, r7, lr}
 801909e:	b08b      	sub	sp, #44	; 0x2c
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	60f8      	str	r0, [r7, #12]
 80190a4:	60b9      	str	r1, [r7, #8]
 80190a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80190ac:	2300      	movs	r3, #0
 80190ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80190b0:	68bb      	ldr	r3, [r7, #8]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d10a      	bne.n	80190cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80190b6:	2380      	movs	r3, #128	; 0x80
 80190b8:	617b      	str	r3, [r7, #20]
    return event;
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	461c      	mov	r4, r3
 80190be:	f107 0314 	add.w	r3, r7, #20
 80190c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80190c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80190ca:	e054      	b.n	8019176 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80190cc:	2300      	movs	r3, #0
 80190ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80190d0:	2300      	movs	r3, #0
 80190d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80190da:	d103      	bne.n	80190e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80190dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80190e0:	627b      	str	r3, [r7, #36]	; 0x24
 80190e2:	e009      	b.n	80190f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d006      	beq.n	80190f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80190ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d101      	bne.n	80190f8 <osMessageGet+0x5c>
      ticks = 1;
 80190f4:	2301      	movs	r3, #1
 80190f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80190f8:	f7ff fe0f 	bl	8018d1a <inHandlerMode>
 80190fc:	4603      	mov	r3, r0
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d01c      	beq.n	801913c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8019102:	f107 0220 	add.w	r2, r7, #32
 8019106:	f107 0314 	add.w	r3, r7, #20
 801910a:	3304      	adds	r3, #4
 801910c:	4619      	mov	r1, r3
 801910e:	68b8      	ldr	r0, [r7, #8]
 8019110:	f000 fee2 	bl	8019ed8 <xQueueReceiveFromISR>
 8019114:	4603      	mov	r3, r0
 8019116:	2b01      	cmp	r3, #1
 8019118:	d102      	bne.n	8019120 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801911a:	2310      	movs	r3, #16
 801911c:	617b      	str	r3, [r7, #20]
 801911e:	e001      	b.n	8019124 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8019120:	2300      	movs	r3, #0
 8019122:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019124:	6a3b      	ldr	r3, [r7, #32]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d01d      	beq.n	8019166 <osMessageGet+0xca>
 801912a:	4b15      	ldr	r3, [pc, #84]	; (8019180 <osMessageGet+0xe4>)
 801912c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019130:	601a      	str	r2, [r3, #0]
 8019132:	f3bf 8f4f 	dsb	sy
 8019136:	f3bf 8f6f 	isb	sy
 801913a:	e014      	b.n	8019166 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801913c:	f107 0314 	add.w	r3, r7, #20
 8019140:	3304      	adds	r3, #4
 8019142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019144:	4619      	mov	r1, r3
 8019146:	68b8      	ldr	r0, [r7, #8]
 8019148:	f000 fccc 	bl	8019ae4 <xQueueReceive>
 801914c:	4603      	mov	r3, r0
 801914e:	2b01      	cmp	r3, #1
 8019150:	d102      	bne.n	8019158 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8019152:	2310      	movs	r3, #16
 8019154:	617b      	str	r3, [r7, #20]
 8019156:	e006      	b.n	8019166 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8019158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801915a:	2b00      	cmp	r3, #0
 801915c:	d101      	bne.n	8019162 <osMessageGet+0xc6>
 801915e:	2300      	movs	r3, #0
 8019160:	e000      	b.n	8019164 <osMessageGet+0xc8>
 8019162:	2340      	movs	r3, #64	; 0x40
 8019164:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	461c      	mov	r4, r3
 801916a:	f107 0314 	add.w	r3, r7, #20
 801916e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8019176:	68f8      	ldr	r0, [r7, #12]
 8019178:	372c      	adds	r7, #44	; 0x2c
 801917a:	46bd      	mov	sp, r7
 801917c:	bd90      	pop	{r4, r7, pc}
 801917e:	bf00      	nop
 8019180:	e000ed04 	.word	0xe000ed04

08019184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019184:	b480      	push	{r7}
 8019186:	b083      	sub	sp, #12
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	f103 0208 	add.w	r2, r3, #8
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801919c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	f103 0208 	add.w	r2, r3, #8
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	f103 0208 	add.w	r2, r3, #8
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	2200      	movs	r2, #0
 80191b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80191b8:	bf00      	nop
 80191ba:	370c      	adds	r7, #12
 80191bc:	46bd      	mov	sp, r7
 80191be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c2:	4770      	bx	lr

080191c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80191c4:	b480      	push	{r7}
 80191c6:	b083      	sub	sp, #12
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	2200      	movs	r2, #0
 80191d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80191d2:	bf00      	nop
 80191d4:	370c      	adds	r7, #12
 80191d6:	46bd      	mov	sp, r7
 80191d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191dc:	4770      	bx	lr

080191de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80191de:	b480      	push	{r7}
 80191e0:	b085      	sub	sp, #20
 80191e2:	af00      	add	r7, sp, #0
 80191e4:	6078      	str	r0, [r7, #4]
 80191e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	685b      	ldr	r3, [r3, #4]
 80191ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80191ee:	683b      	ldr	r3, [r7, #0]
 80191f0:	68fa      	ldr	r2, [r7, #12]
 80191f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	689a      	ldr	r2, [r3, #8]
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	689b      	ldr	r3, [r3, #8]
 8019200:	683a      	ldr	r2, [r7, #0]
 8019202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	683a      	ldr	r2, [r7, #0]
 8019208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	687a      	ldr	r2, [r7, #4]
 801920e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	1c5a      	adds	r2, r3, #1
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	601a      	str	r2, [r3, #0]
}
 801921a:	bf00      	nop
 801921c:	3714      	adds	r7, #20
 801921e:	46bd      	mov	sp, r7
 8019220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019224:	4770      	bx	lr

08019226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019226:	b480      	push	{r7}
 8019228:	b085      	sub	sp, #20
 801922a:	af00      	add	r7, sp, #0
 801922c:	6078      	str	r0, [r7, #4]
 801922e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019230:	683b      	ldr	r3, [r7, #0]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019236:	68bb      	ldr	r3, [r7, #8]
 8019238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801923c:	d103      	bne.n	8019246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	691b      	ldr	r3, [r3, #16]
 8019242:	60fb      	str	r3, [r7, #12]
 8019244:	e00c      	b.n	8019260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	3308      	adds	r3, #8
 801924a:	60fb      	str	r3, [r7, #12]
 801924c:	e002      	b.n	8019254 <vListInsert+0x2e>
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	685b      	ldr	r3, [r3, #4]
 8019252:	60fb      	str	r3, [r7, #12]
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	685b      	ldr	r3, [r3, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	68ba      	ldr	r2, [r7, #8]
 801925c:	429a      	cmp	r2, r3
 801925e:	d2f6      	bcs.n	801924e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	685a      	ldr	r2, [r3, #4]
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019268:	683b      	ldr	r3, [r7, #0]
 801926a:	685b      	ldr	r3, [r3, #4]
 801926c:	683a      	ldr	r2, [r7, #0]
 801926e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019270:	683b      	ldr	r3, [r7, #0]
 8019272:	68fa      	ldr	r2, [r7, #12]
 8019274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	683a      	ldr	r2, [r7, #0]
 801927a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801927c:	683b      	ldr	r3, [r7, #0]
 801927e:	687a      	ldr	r2, [r7, #4]
 8019280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	1c5a      	adds	r2, r3, #1
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	601a      	str	r2, [r3, #0]
}
 801928c:	bf00      	nop
 801928e:	3714      	adds	r7, #20
 8019290:	46bd      	mov	sp, r7
 8019292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019296:	4770      	bx	lr

08019298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019298:	b480      	push	{r7}
 801929a:	b085      	sub	sp, #20
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	691b      	ldr	r3, [r3, #16]
 80192a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	685b      	ldr	r3, [r3, #4]
 80192aa:	687a      	ldr	r2, [r7, #4]
 80192ac:	6892      	ldr	r2, [r2, #8]
 80192ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	689b      	ldr	r3, [r3, #8]
 80192b4:	687a      	ldr	r2, [r7, #4]
 80192b6:	6852      	ldr	r2, [r2, #4]
 80192b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	685b      	ldr	r3, [r3, #4]
 80192be:	687a      	ldr	r2, [r7, #4]
 80192c0:	429a      	cmp	r2, r3
 80192c2:	d103      	bne.n	80192cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	689a      	ldr	r2, [r3, #8]
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	2200      	movs	r2, #0
 80192d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	1e5a      	subs	r2, r3, #1
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	681b      	ldr	r3, [r3, #0]
}
 80192e0:	4618      	mov	r0, r3
 80192e2:	3714      	adds	r7, #20
 80192e4:	46bd      	mov	sp, r7
 80192e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ea:	4770      	bx	lr

080192ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b084      	sub	sp, #16
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	6078      	str	r0, [r7, #4]
 80192f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d10c      	bne.n	801931a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019304:	b672      	cpsid	i
 8019306:	f383 8811 	msr	BASEPRI, r3
 801930a:	f3bf 8f6f 	isb	sy
 801930e:	f3bf 8f4f 	dsb	sy
 8019312:	b662      	cpsie	i
 8019314:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019316:	bf00      	nop
 8019318:	e7fe      	b.n	8019318 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801931a:	f002 f98f 	bl	801b63c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	681a      	ldr	r2, [r3, #0]
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019326:	68f9      	ldr	r1, [r7, #12]
 8019328:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801932a:	fb01 f303 	mul.w	r3, r1, r3
 801932e:	441a      	add	r2, r3
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	2200      	movs	r2, #0
 8019338:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	681a      	ldr	r2, [r3, #0]
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	681a      	ldr	r2, [r3, #0]
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801934a:	3b01      	subs	r3, #1
 801934c:	68f9      	ldr	r1, [r7, #12]
 801934e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019350:	fb01 f303 	mul.w	r3, r1, r3
 8019354:	441a      	add	r2, r3
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	22ff      	movs	r2, #255	; 0xff
 801935e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	22ff      	movs	r2, #255	; 0xff
 8019366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801936a:	683b      	ldr	r3, [r7, #0]
 801936c:	2b00      	cmp	r3, #0
 801936e:	d114      	bne.n	801939a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	691b      	ldr	r3, [r3, #16]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d01a      	beq.n	80193ae <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	3310      	adds	r3, #16
 801937c:	4618      	mov	r0, r3
 801937e:	f001 fc43 	bl	801ac08 <xTaskRemoveFromEventList>
 8019382:	4603      	mov	r3, r0
 8019384:	2b00      	cmp	r3, #0
 8019386:	d012      	beq.n	80193ae <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019388:	4b0c      	ldr	r3, [pc, #48]	; (80193bc <xQueueGenericReset+0xd0>)
 801938a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801938e:	601a      	str	r2, [r3, #0]
 8019390:	f3bf 8f4f 	dsb	sy
 8019394:	f3bf 8f6f 	isb	sy
 8019398:	e009      	b.n	80193ae <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	3310      	adds	r3, #16
 801939e:	4618      	mov	r0, r3
 80193a0:	f7ff fef0 	bl	8019184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	3324      	adds	r3, #36	; 0x24
 80193a8:	4618      	mov	r0, r3
 80193aa:	f7ff feeb 	bl	8019184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80193ae:	f002 f979 	bl	801b6a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80193b2:	2301      	movs	r3, #1
}
 80193b4:	4618      	mov	r0, r3
 80193b6:	3710      	adds	r7, #16
 80193b8:	46bd      	mov	sp, r7
 80193ba:	bd80      	pop	{r7, pc}
 80193bc:	e000ed04 	.word	0xe000ed04

080193c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b08e      	sub	sp, #56	; 0x38
 80193c4:	af02      	add	r7, sp, #8
 80193c6:	60f8      	str	r0, [r7, #12]
 80193c8:	60b9      	str	r1, [r7, #8]
 80193ca:	607a      	str	r2, [r7, #4]
 80193cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80193ce:	68fb      	ldr	r3, [r7, #12]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d10c      	bne.n	80193ee <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80193d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193d8:	b672      	cpsid	i
 80193da:	f383 8811 	msr	BASEPRI, r3
 80193de:	f3bf 8f6f 	isb	sy
 80193e2:	f3bf 8f4f 	dsb	sy
 80193e6:	b662      	cpsie	i
 80193e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80193ea:	bf00      	nop
 80193ec:	e7fe      	b.n	80193ec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80193ee:	683b      	ldr	r3, [r7, #0]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d10c      	bne.n	801940e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80193f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193f8:	b672      	cpsid	i
 80193fa:	f383 8811 	msr	BASEPRI, r3
 80193fe:	f3bf 8f6f 	isb	sy
 8019402:	f3bf 8f4f 	dsb	sy
 8019406:	b662      	cpsie	i
 8019408:	627b      	str	r3, [r7, #36]	; 0x24
}
 801940a:	bf00      	nop
 801940c:	e7fe      	b.n	801940c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d002      	beq.n	801941a <xQueueGenericCreateStatic+0x5a>
 8019414:	68bb      	ldr	r3, [r7, #8]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d001      	beq.n	801941e <xQueueGenericCreateStatic+0x5e>
 801941a:	2301      	movs	r3, #1
 801941c:	e000      	b.n	8019420 <xQueueGenericCreateStatic+0x60>
 801941e:	2300      	movs	r3, #0
 8019420:	2b00      	cmp	r3, #0
 8019422:	d10c      	bne.n	801943e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8019424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019428:	b672      	cpsid	i
 801942a:	f383 8811 	msr	BASEPRI, r3
 801942e:	f3bf 8f6f 	isb	sy
 8019432:	f3bf 8f4f 	dsb	sy
 8019436:	b662      	cpsie	i
 8019438:	623b      	str	r3, [r7, #32]
}
 801943a:	bf00      	nop
 801943c:	e7fe      	b.n	801943c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d102      	bne.n	801944a <xQueueGenericCreateStatic+0x8a>
 8019444:	68bb      	ldr	r3, [r7, #8]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d101      	bne.n	801944e <xQueueGenericCreateStatic+0x8e>
 801944a:	2301      	movs	r3, #1
 801944c:	e000      	b.n	8019450 <xQueueGenericCreateStatic+0x90>
 801944e:	2300      	movs	r3, #0
 8019450:	2b00      	cmp	r3, #0
 8019452:	d10c      	bne.n	801946e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8019454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019458:	b672      	cpsid	i
 801945a:	f383 8811 	msr	BASEPRI, r3
 801945e:	f3bf 8f6f 	isb	sy
 8019462:	f3bf 8f4f 	dsb	sy
 8019466:	b662      	cpsie	i
 8019468:	61fb      	str	r3, [r7, #28]
}
 801946a:	bf00      	nop
 801946c:	e7fe      	b.n	801946c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801946e:	2348      	movs	r3, #72	; 0x48
 8019470:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019472:	697b      	ldr	r3, [r7, #20]
 8019474:	2b48      	cmp	r3, #72	; 0x48
 8019476:	d00c      	beq.n	8019492 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8019478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801947c:	b672      	cpsid	i
 801947e:	f383 8811 	msr	BASEPRI, r3
 8019482:	f3bf 8f6f 	isb	sy
 8019486:	f3bf 8f4f 	dsb	sy
 801948a:	b662      	cpsie	i
 801948c:	61bb      	str	r3, [r7, #24]
}
 801948e:	bf00      	nop
 8019490:	e7fe      	b.n	8019490 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019492:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019494:	683b      	ldr	r3, [r7, #0]
 8019496:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801949a:	2b00      	cmp	r3, #0
 801949c:	d00d      	beq.n	80194ba <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801949e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194a0:	2201      	movs	r2, #1
 80194a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80194a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80194aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ac:	9300      	str	r3, [sp, #0]
 80194ae:	4613      	mov	r3, r2
 80194b0:	687a      	ldr	r2, [r7, #4]
 80194b2:	68b9      	ldr	r1, [r7, #8]
 80194b4:	68f8      	ldr	r0, [r7, #12]
 80194b6:	f000 f847 	bl	8019548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80194ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80194bc:	4618      	mov	r0, r3
 80194be:	3730      	adds	r7, #48	; 0x30
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bd80      	pop	{r7, pc}

080194c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b08a      	sub	sp, #40	; 0x28
 80194c8:	af02      	add	r7, sp, #8
 80194ca:	60f8      	str	r0, [r7, #12]
 80194cc:	60b9      	str	r1, [r7, #8]
 80194ce:	4613      	mov	r3, r2
 80194d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d10c      	bne.n	80194f2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80194d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194dc:	b672      	cpsid	i
 80194de:	f383 8811 	msr	BASEPRI, r3
 80194e2:	f3bf 8f6f 	isb	sy
 80194e6:	f3bf 8f4f 	dsb	sy
 80194ea:	b662      	cpsie	i
 80194ec:	613b      	str	r3, [r7, #16]
}
 80194ee:	bf00      	nop
 80194f0:	e7fe      	b.n	80194f0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80194f2:	68bb      	ldr	r3, [r7, #8]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d102      	bne.n	80194fe <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80194f8:	2300      	movs	r3, #0
 80194fa:	61fb      	str	r3, [r7, #28]
 80194fc:	e004      	b.n	8019508 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	68ba      	ldr	r2, [r7, #8]
 8019502:	fb02 f303 	mul.w	r3, r2, r3
 8019506:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019508:	69fb      	ldr	r3, [r7, #28]
 801950a:	3348      	adds	r3, #72	; 0x48
 801950c:	4618      	mov	r0, r3
 801950e:	f002 f9c1 	bl	801b894 <pvPortMalloc>
 8019512:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019514:	69bb      	ldr	r3, [r7, #24]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d011      	beq.n	801953e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801951a:	69bb      	ldr	r3, [r7, #24]
 801951c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801951e:	697b      	ldr	r3, [r7, #20]
 8019520:	3348      	adds	r3, #72	; 0x48
 8019522:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019524:	69bb      	ldr	r3, [r7, #24]
 8019526:	2200      	movs	r2, #0
 8019528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801952c:	79fa      	ldrb	r2, [r7, #7]
 801952e:	69bb      	ldr	r3, [r7, #24]
 8019530:	9300      	str	r3, [sp, #0]
 8019532:	4613      	mov	r3, r2
 8019534:	697a      	ldr	r2, [r7, #20]
 8019536:	68b9      	ldr	r1, [r7, #8]
 8019538:	68f8      	ldr	r0, [r7, #12]
 801953a:	f000 f805 	bl	8019548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801953e:	69bb      	ldr	r3, [r7, #24]
	}
 8019540:	4618      	mov	r0, r3
 8019542:	3720      	adds	r7, #32
 8019544:	46bd      	mov	sp, r7
 8019546:	bd80      	pop	{r7, pc}

08019548 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b084      	sub	sp, #16
 801954c:	af00      	add	r7, sp, #0
 801954e:	60f8      	str	r0, [r7, #12]
 8019550:	60b9      	str	r1, [r7, #8]
 8019552:	607a      	str	r2, [r7, #4]
 8019554:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d103      	bne.n	8019564 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801955c:	69bb      	ldr	r3, [r7, #24]
 801955e:	69ba      	ldr	r2, [r7, #24]
 8019560:	601a      	str	r2, [r3, #0]
 8019562:	e002      	b.n	801956a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019564:	69bb      	ldr	r3, [r7, #24]
 8019566:	687a      	ldr	r2, [r7, #4]
 8019568:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801956a:	69bb      	ldr	r3, [r7, #24]
 801956c:	68fa      	ldr	r2, [r7, #12]
 801956e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019570:	69bb      	ldr	r3, [r7, #24]
 8019572:	68ba      	ldr	r2, [r7, #8]
 8019574:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019576:	2101      	movs	r1, #1
 8019578:	69b8      	ldr	r0, [r7, #24]
 801957a:	f7ff feb7 	bl	80192ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801957e:	bf00      	nop
 8019580:	3710      	adds	r7, #16
 8019582:	46bd      	mov	sp, r7
 8019584:	bd80      	pop	{r7, pc}

08019586 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8019586:	b580      	push	{r7, lr}
 8019588:	b08a      	sub	sp, #40	; 0x28
 801958a:	af02      	add	r7, sp, #8
 801958c:	60f8      	str	r0, [r7, #12]
 801958e:	60b9      	str	r1, [r7, #8]
 8019590:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019592:	68fb      	ldr	r3, [r7, #12]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d10c      	bne.n	80195b2 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8019598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801959c:	b672      	cpsid	i
 801959e:	f383 8811 	msr	BASEPRI, r3
 80195a2:	f3bf 8f6f 	isb	sy
 80195a6:	f3bf 8f4f 	dsb	sy
 80195aa:	b662      	cpsie	i
 80195ac:	61bb      	str	r3, [r7, #24]
}
 80195ae:	bf00      	nop
 80195b0:	e7fe      	b.n	80195b0 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80195b2:	68ba      	ldr	r2, [r7, #8]
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	429a      	cmp	r2, r3
 80195b8:	d90c      	bls.n	80195d4 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80195ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195be:	b672      	cpsid	i
 80195c0:	f383 8811 	msr	BASEPRI, r3
 80195c4:	f3bf 8f6f 	isb	sy
 80195c8:	f3bf 8f4f 	dsb	sy
 80195cc:	b662      	cpsie	i
 80195ce:	617b      	str	r3, [r7, #20]
}
 80195d0:	bf00      	nop
 80195d2:	e7fe      	b.n	80195d2 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80195d4:	2302      	movs	r3, #2
 80195d6:	9300      	str	r3, [sp, #0]
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	2200      	movs	r2, #0
 80195dc:	2100      	movs	r1, #0
 80195de:	68f8      	ldr	r0, [r7, #12]
 80195e0:	f7ff feee 	bl	80193c0 <xQueueGenericCreateStatic>
 80195e4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80195e6:	69fb      	ldr	r3, [r7, #28]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d002      	beq.n	80195f2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80195ec:	69fb      	ldr	r3, [r7, #28]
 80195ee:	68ba      	ldr	r2, [r7, #8]
 80195f0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80195f2:	69fb      	ldr	r3, [r7, #28]
	}
 80195f4:	4618      	mov	r0, r3
 80195f6:	3720      	adds	r7, #32
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}

080195fc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b086      	sub	sp, #24
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
 8019604:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d10c      	bne.n	8019626 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 801960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019610:	b672      	cpsid	i
 8019612:	f383 8811 	msr	BASEPRI, r3
 8019616:	f3bf 8f6f 	isb	sy
 801961a:	f3bf 8f4f 	dsb	sy
 801961e:	b662      	cpsie	i
 8019620:	613b      	str	r3, [r7, #16]
}
 8019622:	bf00      	nop
 8019624:	e7fe      	b.n	8019624 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019626:	683a      	ldr	r2, [r7, #0]
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	429a      	cmp	r2, r3
 801962c:	d90c      	bls.n	8019648 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 801962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019632:	b672      	cpsid	i
 8019634:	f383 8811 	msr	BASEPRI, r3
 8019638:	f3bf 8f6f 	isb	sy
 801963c:	f3bf 8f4f 	dsb	sy
 8019640:	b662      	cpsie	i
 8019642:	60fb      	str	r3, [r7, #12]
}
 8019644:	bf00      	nop
 8019646:	e7fe      	b.n	8019646 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019648:	2202      	movs	r2, #2
 801964a:	2100      	movs	r1, #0
 801964c:	6878      	ldr	r0, [r7, #4]
 801964e:	f7ff ff39 	bl	80194c4 <xQueueGenericCreate>
 8019652:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8019654:	697b      	ldr	r3, [r7, #20]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d002      	beq.n	8019660 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801965a:	697b      	ldr	r3, [r7, #20]
 801965c:	683a      	ldr	r2, [r7, #0]
 801965e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019660:	697b      	ldr	r3, [r7, #20]
	}
 8019662:	4618      	mov	r0, r3
 8019664:	3718      	adds	r7, #24
 8019666:	46bd      	mov	sp, r7
 8019668:	bd80      	pop	{r7, pc}
	...

0801966c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b08e      	sub	sp, #56	; 0x38
 8019670:	af00      	add	r7, sp, #0
 8019672:	60f8      	str	r0, [r7, #12]
 8019674:	60b9      	str	r1, [r7, #8]
 8019676:	607a      	str	r2, [r7, #4]
 8019678:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801967a:	2300      	movs	r3, #0
 801967c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019684:	2b00      	cmp	r3, #0
 8019686:	d10c      	bne.n	80196a2 <xQueueGenericSend+0x36>
	__asm volatile
 8019688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801968c:	b672      	cpsid	i
 801968e:	f383 8811 	msr	BASEPRI, r3
 8019692:	f3bf 8f6f 	isb	sy
 8019696:	f3bf 8f4f 	dsb	sy
 801969a:	b662      	cpsie	i
 801969c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801969e:	bf00      	nop
 80196a0:	e7fe      	b.n	80196a0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80196a2:	68bb      	ldr	r3, [r7, #8]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d103      	bne.n	80196b0 <xQueueGenericSend+0x44>
 80196a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d101      	bne.n	80196b4 <xQueueGenericSend+0x48>
 80196b0:	2301      	movs	r3, #1
 80196b2:	e000      	b.n	80196b6 <xQueueGenericSend+0x4a>
 80196b4:	2300      	movs	r3, #0
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d10c      	bne.n	80196d4 <xQueueGenericSend+0x68>
	__asm volatile
 80196ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196be:	b672      	cpsid	i
 80196c0:	f383 8811 	msr	BASEPRI, r3
 80196c4:	f3bf 8f6f 	isb	sy
 80196c8:	f3bf 8f4f 	dsb	sy
 80196cc:	b662      	cpsie	i
 80196ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80196d0:	bf00      	nop
 80196d2:	e7fe      	b.n	80196d2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80196d4:	683b      	ldr	r3, [r7, #0]
 80196d6:	2b02      	cmp	r3, #2
 80196d8:	d103      	bne.n	80196e2 <xQueueGenericSend+0x76>
 80196da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196de:	2b01      	cmp	r3, #1
 80196e0:	d101      	bne.n	80196e6 <xQueueGenericSend+0x7a>
 80196e2:	2301      	movs	r3, #1
 80196e4:	e000      	b.n	80196e8 <xQueueGenericSend+0x7c>
 80196e6:	2300      	movs	r3, #0
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d10c      	bne.n	8019706 <xQueueGenericSend+0x9a>
	__asm volatile
 80196ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196f0:	b672      	cpsid	i
 80196f2:	f383 8811 	msr	BASEPRI, r3
 80196f6:	f3bf 8f6f 	isb	sy
 80196fa:	f3bf 8f4f 	dsb	sy
 80196fe:	b662      	cpsie	i
 8019700:	623b      	str	r3, [r7, #32]
}
 8019702:	bf00      	nop
 8019704:	e7fe      	b.n	8019704 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019706:	f001 fc49 	bl	801af9c <xTaskGetSchedulerState>
 801970a:	4603      	mov	r3, r0
 801970c:	2b00      	cmp	r3, #0
 801970e:	d102      	bne.n	8019716 <xQueueGenericSend+0xaa>
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d101      	bne.n	801971a <xQueueGenericSend+0xae>
 8019716:	2301      	movs	r3, #1
 8019718:	e000      	b.n	801971c <xQueueGenericSend+0xb0>
 801971a:	2300      	movs	r3, #0
 801971c:	2b00      	cmp	r3, #0
 801971e:	d10c      	bne.n	801973a <xQueueGenericSend+0xce>
	__asm volatile
 8019720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019724:	b672      	cpsid	i
 8019726:	f383 8811 	msr	BASEPRI, r3
 801972a:	f3bf 8f6f 	isb	sy
 801972e:	f3bf 8f4f 	dsb	sy
 8019732:	b662      	cpsie	i
 8019734:	61fb      	str	r3, [r7, #28]
}
 8019736:	bf00      	nop
 8019738:	e7fe      	b.n	8019738 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801973a:	f001 ff7f 	bl	801b63c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019746:	429a      	cmp	r2, r3
 8019748:	d302      	bcc.n	8019750 <xQueueGenericSend+0xe4>
 801974a:	683b      	ldr	r3, [r7, #0]
 801974c:	2b02      	cmp	r3, #2
 801974e:	d129      	bne.n	80197a4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019750:	683a      	ldr	r2, [r7, #0]
 8019752:	68b9      	ldr	r1, [r7, #8]
 8019754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019756:	f000 fc82 	bl	801a05e <prvCopyDataToQueue>
 801975a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019760:	2b00      	cmp	r3, #0
 8019762:	d010      	beq.n	8019786 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019766:	3324      	adds	r3, #36	; 0x24
 8019768:	4618      	mov	r0, r3
 801976a:	f001 fa4d 	bl	801ac08 <xTaskRemoveFromEventList>
 801976e:	4603      	mov	r3, r0
 8019770:	2b00      	cmp	r3, #0
 8019772:	d013      	beq.n	801979c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019774:	4b3f      	ldr	r3, [pc, #252]	; (8019874 <xQueueGenericSend+0x208>)
 8019776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801977a:	601a      	str	r2, [r3, #0]
 801977c:	f3bf 8f4f 	dsb	sy
 8019780:	f3bf 8f6f 	isb	sy
 8019784:	e00a      	b.n	801979c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019788:	2b00      	cmp	r3, #0
 801978a:	d007      	beq.n	801979c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801978c:	4b39      	ldr	r3, [pc, #228]	; (8019874 <xQueueGenericSend+0x208>)
 801978e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019792:	601a      	str	r2, [r3, #0]
 8019794:	f3bf 8f4f 	dsb	sy
 8019798:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801979c:	f001 ff82 	bl	801b6a4 <vPortExitCritical>
				return pdPASS;
 80197a0:	2301      	movs	r3, #1
 80197a2:	e063      	b.n	801986c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d103      	bne.n	80197b2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80197aa:	f001 ff7b 	bl	801b6a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80197ae:	2300      	movs	r3, #0
 80197b0:	e05c      	b.n	801986c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80197b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d106      	bne.n	80197c6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80197b8:	f107 0314 	add.w	r3, r7, #20
 80197bc:	4618      	mov	r0, r3
 80197be:	f001 fa87 	bl	801acd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80197c2:	2301      	movs	r3, #1
 80197c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80197c6:	f001 ff6d 	bl	801b6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80197ca:	f000 ffe5 	bl	801a798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80197ce:	f001 ff35 	bl	801b63c <vPortEnterCritical>
 80197d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80197d8:	b25b      	sxtb	r3, r3
 80197da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80197de:	d103      	bne.n	80197e8 <xQueueGenericSend+0x17c>
 80197e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197e2:	2200      	movs	r2, #0
 80197e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80197e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80197ee:	b25b      	sxtb	r3, r3
 80197f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80197f4:	d103      	bne.n	80197fe <xQueueGenericSend+0x192>
 80197f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197f8:	2200      	movs	r2, #0
 80197fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80197fe:	f001 ff51 	bl	801b6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019802:	1d3a      	adds	r2, r7, #4
 8019804:	f107 0314 	add.w	r3, r7, #20
 8019808:	4611      	mov	r1, r2
 801980a:	4618      	mov	r0, r3
 801980c:	f001 fa76 	bl	801acfc <xTaskCheckForTimeOut>
 8019810:	4603      	mov	r3, r0
 8019812:	2b00      	cmp	r3, #0
 8019814:	d124      	bne.n	8019860 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019818:	f000 fd19 	bl	801a24e <prvIsQueueFull>
 801981c:	4603      	mov	r3, r0
 801981e:	2b00      	cmp	r3, #0
 8019820:	d018      	beq.n	8019854 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019824:	3310      	adds	r3, #16
 8019826:	687a      	ldr	r2, [r7, #4]
 8019828:	4611      	mov	r1, r2
 801982a:	4618      	mov	r0, r3
 801982c:	f001 f9c6 	bl	801abbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019832:	f000 fca4 	bl	801a17e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019836:	f000 ffbd 	bl	801a7b4 <xTaskResumeAll>
 801983a:	4603      	mov	r3, r0
 801983c:	2b00      	cmp	r3, #0
 801983e:	f47f af7c 	bne.w	801973a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8019842:	4b0c      	ldr	r3, [pc, #48]	; (8019874 <xQueueGenericSend+0x208>)
 8019844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019848:	601a      	str	r2, [r3, #0]
 801984a:	f3bf 8f4f 	dsb	sy
 801984e:	f3bf 8f6f 	isb	sy
 8019852:	e772      	b.n	801973a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019856:	f000 fc92 	bl	801a17e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801985a:	f000 ffab 	bl	801a7b4 <xTaskResumeAll>
 801985e:	e76c      	b.n	801973a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019862:	f000 fc8c 	bl	801a17e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019866:	f000 ffa5 	bl	801a7b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801986a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801986c:	4618      	mov	r0, r3
 801986e:	3738      	adds	r7, #56	; 0x38
 8019870:	46bd      	mov	sp, r7
 8019872:	bd80      	pop	{r7, pc}
 8019874:	e000ed04 	.word	0xe000ed04

08019878 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b08e      	sub	sp, #56	; 0x38
 801987c:	af00      	add	r7, sp, #0
 801987e:	60f8      	str	r0, [r7, #12]
 8019880:	60b9      	str	r1, [r7, #8]
 8019882:	607a      	str	r2, [r7, #4]
 8019884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801988c:	2b00      	cmp	r3, #0
 801988e:	d10c      	bne.n	80198aa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8019890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019894:	b672      	cpsid	i
 8019896:	f383 8811 	msr	BASEPRI, r3
 801989a:	f3bf 8f6f 	isb	sy
 801989e:	f3bf 8f4f 	dsb	sy
 80198a2:	b662      	cpsie	i
 80198a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80198a6:	bf00      	nop
 80198a8:	e7fe      	b.n	80198a8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80198aa:	68bb      	ldr	r3, [r7, #8]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d103      	bne.n	80198b8 <xQueueGenericSendFromISR+0x40>
 80198b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d101      	bne.n	80198bc <xQueueGenericSendFromISR+0x44>
 80198b8:	2301      	movs	r3, #1
 80198ba:	e000      	b.n	80198be <xQueueGenericSendFromISR+0x46>
 80198bc:	2300      	movs	r3, #0
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d10c      	bne.n	80198dc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80198c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198c6:	b672      	cpsid	i
 80198c8:	f383 8811 	msr	BASEPRI, r3
 80198cc:	f3bf 8f6f 	isb	sy
 80198d0:	f3bf 8f4f 	dsb	sy
 80198d4:	b662      	cpsie	i
 80198d6:	623b      	str	r3, [r7, #32]
}
 80198d8:	bf00      	nop
 80198da:	e7fe      	b.n	80198da <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80198dc:	683b      	ldr	r3, [r7, #0]
 80198de:	2b02      	cmp	r3, #2
 80198e0:	d103      	bne.n	80198ea <xQueueGenericSendFromISR+0x72>
 80198e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198e6:	2b01      	cmp	r3, #1
 80198e8:	d101      	bne.n	80198ee <xQueueGenericSendFromISR+0x76>
 80198ea:	2301      	movs	r3, #1
 80198ec:	e000      	b.n	80198f0 <xQueueGenericSendFromISR+0x78>
 80198ee:	2300      	movs	r3, #0
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d10c      	bne.n	801990e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80198f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198f8:	b672      	cpsid	i
 80198fa:	f383 8811 	msr	BASEPRI, r3
 80198fe:	f3bf 8f6f 	isb	sy
 8019902:	f3bf 8f4f 	dsb	sy
 8019906:	b662      	cpsie	i
 8019908:	61fb      	str	r3, [r7, #28]
}
 801990a:	bf00      	nop
 801990c:	e7fe      	b.n	801990c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801990e:	f001 ff7d 	bl	801b80c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019912:	f3ef 8211 	mrs	r2, BASEPRI
 8019916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801991a:	b672      	cpsid	i
 801991c:	f383 8811 	msr	BASEPRI, r3
 8019920:	f3bf 8f6f 	isb	sy
 8019924:	f3bf 8f4f 	dsb	sy
 8019928:	b662      	cpsie	i
 801992a:	61ba      	str	r2, [r7, #24]
 801992c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801992e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019930:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801993a:	429a      	cmp	r2, r3
 801993c:	d302      	bcc.n	8019944 <xQueueGenericSendFromISR+0xcc>
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	2b02      	cmp	r3, #2
 8019942:	d12c      	bne.n	801999e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801994a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801994e:	683a      	ldr	r2, [r7, #0]
 8019950:	68b9      	ldr	r1, [r7, #8]
 8019952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019954:	f000 fb83 	bl	801a05e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019958:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801995c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019960:	d112      	bne.n	8019988 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019966:	2b00      	cmp	r3, #0
 8019968:	d016      	beq.n	8019998 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801996c:	3324      	adds	r3, #36	; 0x24
 801996e:	4618      	mov	r0, r3
 8019970:	f001 f94a 	bl	801ac08 <xTaskRemoveFromEventList>
 8019974:	4603      	mov	r3, r0
 8019976:	2b00      	cmp	r3, #0
 8019978:	d00e      	beq.n	8019998 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d00b      	beq.n	8019998 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	2201      	movs	r2, #1
 8019984:	601a      	str	r2, [r3, #0]
 8019986:	e007      	b.n	8019998 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801998c:	3301      	adds	r3, #1
 801998e:	b2db      	uxtb	r3, r3
 8019990:	b25a      	sxtb	r2, r3
 8019992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019998:	2301      	movs	r3, #1
 801999a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801999c:	e001      	b.n	80199a2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801999e:	2300      	movs	r3, #0
 80199a0:	637b      	str	r3, [r7, #52]	; 0x34
 80199a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80199a6:	693b      	ldr	r3, [r7, #16]
 80199a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80199ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80199ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80199b0:	4618      	mov	r0, r3
 80199b2:	3738      	adds	r7, #56	; 0x38
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}

080199b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b08e      	sub	sp, #56	; 0x38
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
 80199c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80199c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d10c      	bne.n	80199e6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80199cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199d0:	b672      	cpsid	i
 80199d2:	f383 8811 	msr	BASEPRI, r3
 80199d6:	f3bf 8f6f 	isb	sy
 80199da:	f3bf 8f4f 	dsb	sy
 80199de:	b662      	cpsie	i
 80199e0:	623b      	str	r3, [r7, #32]
}
 80199e2:	bf00      	nop
 80199e4:	e7fe      	b.n	80199e4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80199e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d00c      	beq.n	8019a08 <xQueueGiveFromISR+0x50>
	__asm volatile
 80199ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199f2:	b672      	cpsid	i
 80199f4:	f383 8811 	msr	BASEPRI, r3
 80199f8:	f3bf 8f6f 	isb	sy
 80199fc:	f3bf 8f4f 	dsb	sy
 8019a00:	b662      	cpsie	i
 8019a02:	61fb      	str	r3, [r7, #28]
}
 8019a04:	bf00      	nop
 8019a06:	e7fe      	b.n	8019a06 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8019a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d103      	bne.n	8019a18 <xQueueGiveFromISR+0x60>
 8019a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a12:	689b      	ldr	r3, [r3, #8]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d101      	bne.n	8019a1c <xQueueGiveFromISR+0x64>
 8019a18:	2301      	movs	r3, #1
 8019a1a:	e000      	b.n	8019a1e <xQueueGiveFromISR+0x66>
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d10c      	bne.n	8019a3c <xQueueGiveFromISR+0x84>
	__asm volatile
 8019a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a26:	b672      	cpsid	i
 8019a28:	f383 8811 	msr	BASEPRI, r3
 8019a2c:	f3bf 8f6f 	isb	sy
 8019a30:	f3bf 8f4f 	dsb	sy
 8019a34:	b662      	cpsie	i
 8019a36:	61bb      	str	r3, [r7, #24]
}
 8019a38:	bf00      	nop
 8019a3a:	e7fe      	b.n	8019a3a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019a3c:	f001 fee6 	bl	801b80c <vPortValidateInterruptPriority>
	__asm volatile
 8019a40:	f3ef 8211 	mrs	r2, BASEPRI
 8019a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a48:	b672      	cpsid	i
 8019a4a:	f383 8811 	msr	BASEPRI, r3
 8019a4e:	f3bf 8f6f 	isb	sy
 8019a52:	f3bf 8f4f 	dsb	sy
 8019a56:	b662      	cpsie	i
 8019a58:	617a      	str	r2, [r7, #20]
 8019a5a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8019a5c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a64:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8019a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a6c:	429a      	cmp	r2, r3
 8019a6e:	d22b      	bcs.n	8019ac8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a7c:	1c5a      	adds	r2, r3, #1
 8019a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a80:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019a82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019a8a:	d112      	bne.n	8019ab2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d016      	beq.n	8019ac2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a96:	3324      	adds	r3, #36	; 0x24
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f001 f8b5 	bl	801ac08 <xTaskRemoveFromEventList>
 8019a9e:	4603      	mov	r3, r0
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d00e      	beq.n	8019ac2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019aa4:	683b      	ldr	r3, [r7, #0]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d00b      	beq.n	8019ac2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	2201      	movs	r2, #1
 8019aae:	601a      	str	r2, [r3, #0]
 8019ab0:	e007      	b.n	8019ac2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ab6:	3301      	adds	r3, #1
 8019ab8:	b2db      	uxtb	r3, r3
 8019aba:	b25a      	sxtb	r2, r3
 8019abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8019ac6:	e001      	b.n	8019acc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019ac8:	2300      	movs	r3, #0
 8019aca:	637b      	str	r3, [r7, #52]	; 0x34
 8019acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ace:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	f383 8811 	msr	BASEPRI, r3
}
 8019ad6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019ada:	4618      	mov	r0, r3
 8019adc:	3738      	adds	r7, #56	; 0x38
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
	...

08019ae4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b08c      	sub	sp, #48	; 0x30
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	60f8      	str	r0, [r7, #12]
 8019aec:	60b9      	str	r1, [r7, #8]
 8019aee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019af0:	2300      	movs	r3, #0
 8019af2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d10c      	bne.n	8019b18 <xQueueReceive+0x34>
	__asm volatile
 8019afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b02:	b672      	cpsid	i
 8019b04:	f383 8811 	msr	BASEPRI, r3
 8019b08:	f3bf 8f6f 	isb	sy
 8019b0c:	f3bf 8f4f 	dsb	sy
 8019b10:	b662      	cpsie	i
 8019b12:	623b      	str	r3, [r7, #32]
}
 8019b14:	bf00      	nop
 8019b16:	e7fe      	b.n	8019b16 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019b18:	68bb      	ldr	r3, [r7, #8]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d103      	bne.n	8019b26 <xQueueReceive+0x42>
 8019b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d101      	bne.n	8019b2a <xQueueReceive+0x46>
 8019b26:	2301      	movs	r3, #1
 8019b28:	e000      	b.n	8019b2c <xQueueReceive+0x48>
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d10c      	bne.n	8019b4a <xQueueReceive+0x66>
	__asm volatile
 8019b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b34:	b672      	cpsid	i
 8019b36:	f383 8811 	msr	BASEPRI, r3
 8019b3a:	f3bf 8f6f 	isb	sy
 8019b3e:	f3bf 8f4f 	dsb	sy
 8019b42:	b662      	cpsie	i
 8019b44:	61fb      	str	r3, [r7, #28]
}
 8019b46:	bf00      	nop
 8019b48:	e7fe      	b.n	8019b48 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019b4a:	f001 fa27 	bl	801af9c <xTaskGetSchedulerState>
 8019b4e:	4603      	mov	r3, r0
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d102      	bne.n	8019b5a <xQueueReceive+0x76>
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d101      	bne.n	8019b5e <xQueueReceive+0x7a>
 8019b5a:	2301      	movs	r3, #1
 8019b5c:	e000      	b.n	8019b60 <xQueueReceive+0x7c>
 8019b5e:	2300      	movs	r3, #0
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d10c      	bne.n	8019b7e <xQueueReceive+0x9a>
	__asm volatile
 8019b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b68:	b672      	cpsid	i
 8019b6a:	f383 8811 	msr	BASEPRI, r3
 8019b6e:	f3bf 8f6f 	isb	sy
 8019b72:	f3bf 8f4f 	dsb	sy
 8019b76:	b662      	cpsie	i
 8019b78:	61bb      	str	r3, [r7, #24]
}
 8019b7a:	bf00      	nop
 8019b7c:	e7fe      	b.n	8019b7c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019b7e:	f001 fd5d 	bl	801b63c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d01f      	beq.n	8019bce <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019b8e:	68b9      	ldr	r1, [r7, #8]
 8019b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019b92:	f000 face 	bl	801a132 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b98:	1e5a      	subs	r2, r3, #1
 8019b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ba0:	691b      	ldr	r3, [r3, #16]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d00f      	beq.n	8019bc6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ba8:	3310      	adds	r3, #16
 8019baa:	4618      	mov	r0, r3
 8019bac:	f001 f82c 	bl	801ac08 <xTaskRemoveFromEventList>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d007      	beq.n	8019bc6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019bb6:	4b3d      	ldr	r3, [pc, #244]	; (8019cac <xQueueReceive+0x1c8>)
 8019bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019bbc:	601a      	str	r2, [r3, #0]
 8019bbe:	f3bf 8f4f 	dsb	sy
 8019bc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019bc6:	f001 fd6d 	bl	801b6a4 <vPortExitCritical>
				return pdPASS;
 8019bca:	2301      	movs	r3, #1
 8019bcc:	e069      	b.n	8019ca2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d103      	bne.n	8019bdc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019bd4:	f001 fd66 	bl	801b6a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019bd8:	2300      	movs	r3, #0
 8019bda:	e062      	b.n	8019ca2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d106      	bne.n	8019bf0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019be2:	f107 0310 	add.w	r3, r7, #16
 8019be6:	4618      	mov	r0, r3
 8019be8:	f001 f872 	bl	801acd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019bec:	2301      	movs	r3, #1
 8019bee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019bf0:	f001 fd58 	bl	801b6a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019bf4:	f000 fdd0 	bl	801a798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019bf8:	f001 fd20 	bl	801b63c <vPortEnterCritical>
 8019bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019c02:	b25b      	sxtb	r3, r3
 8019c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019c08:	d103      	bne.n	8019c12 <xQueueReceive+0x12e>
 8019c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019c18:	b25b      	sxtb	r3, r3
 8019c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019c1e:	d103      	bne.n	8019c28 <xQueueReceive+0x144>
 8019c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c22:	2200      	movs	r2, #0
 8019c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019c28:	f001 fd3c 	bl	801b6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019c2c:	1d3a      	adds	r2, r7, #4
 8019c2e:	f107 0310 	add.w	r3, r7, #16
 8019c32:	4611      	mov	r1, r2
 8019c34:	4618      	mov	r0, r3
 8019c36:	f001 f861 	bl	801acfc <xTaskCheckForTimeOut>
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d123      	bne.n	8019c88 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c42:	f000 faee 	bl	801a222 <prvIsQueueEmpty>
 8019c46:	4603      	mov	r3, r0
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d017      	beq.n	8019c7c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c4e:	3324      	adds	r3, #36	; 0x24
 8019c50:	687a      	ldr	r2, [r7, #4]
 8019c52:	4611      	mov	r1, r2
 8019c54:	4618      	mov	r0, r3
 8019c56:	f000 ffb1 	bl	801abbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c5c:	f000 fa8f 	bl	801a17e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019c60:	f000 fda8 	bl	801a7b4 <xTaskResumeAll>
 8019c64:	4603      	mov	r3, r0
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d189      	bne.n	8019b7e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8019c6a:	4b10      	ldr	r3, [pc, #64]	; (8019cac <xQueueReceive+0x1c8>)
 8019c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c70:	601a      	str	r2, [r3, #0]
 8019c72:	f3bf 8f4f 	dsb	sy
 8019c76:	f3bf 8f6f 	isb	sy
 8019c7a:	e780      	b.n	8019b7e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c7e:	f000 fa7e 	bl	801a17e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019c82:	f000 fd97 	bl	801a7b4 <xTaskResumeAll>
 8019c86:	e77a      	b.n	8019b7e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c8a:	f000 fa78 	bl	801a17e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019c8e:	f000 fd91 	bl	801a7b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c94:	f000 fac5 	bl	801a222 <prvIsQueueEmpty>
 8019c98:	4603      	mov	r3, r0
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	f43f af6f 	beq.w	8019b7e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019ca0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	3730      	adds	r7, #48	; 0x30
 8019ca6:	46bd      	mov	sp, r7
 8019ca8:	bd80      	pop	{r7, pc}
 8019caa:	bf00      	nop
 8019cac:	e000ed04 	.word	0xe000ed04

08019cb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b08e      	sub	sp, #56	; 0x38
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	6078      	str	r0, [r7, #4]
 8019cb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8019cba:	2300      	movs	r3, #0
 8019cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d10c      	bne.n	8019ce6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8019ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cd0:	b672      	cpsid	i
 8019cd2:	f383 8811 	msr	BASEPRI, r3
 8019cd6:	f3bf 8f6f 	isb	sy
 8019cda:	f3bf 8f4f 	dsb	sy
 8019cde:	b662      	cpsie	i
 8019ce0:	623b      	str	r3, [r7, #32]
}
 8019ce2:	bf00      	nop
 8019ce4:	e7fe      	b.n	8019ce4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d00c      	beq.n	8019d08 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8019cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cf2:	b672      	cpsid	i
 8019cf4:	f383 8811 	msr	BASEPRI, r3
 8019cf8:	f3bf 8f6f 	isb	sy
 8019cfc:	f3bf 8f4f 	dsb	sy
 8019d00:	b662      	cpsie	i
 8019d02:	61fb      	str	r3, [r7, #28]
}
 8019d04:	bf00      	nop
 8019d06:	e7fe      	b.n	8019d06 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019d08:	f001 f948 	bl	801af9c <xTaskGetSchedulerState>
 8019d0c:	4603      	mov	r3, r0
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d102      	bne.n	8019d18 <xQueueSemaphoreTake+0x68>
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d101      	bne.n	8019d1c <xQueueSemaphoreTake+0x6c>
 8019d18:	2301      	movs	r3, #1
 8019d1a:	e000      	b.n	8019d1e <xQueueSemaphoreTake+0x6e>
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d10c      	bne.n	8019d3c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8019d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d26:	b672      	cpsid	i
 8019d28:	f383 8811 	msr	BASEPRI, r3
 8019d2c:	f3bf 8f6f 	isb	sy
 8019d30:	f3bf 8f4f 	dsb	sy
 8019d34:	b662      	cpsie	i
 8019d36:	61bb      	str	r3, [r7, #24]
}
 8019d38:	bf00      	nop
 8019d3a:	e7fe      	b.n	8019d3a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019d3c:	f001 fc7e 	bl	801b63c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d44:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d024      	beq.n	8019d96 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d4e:	1e5a      	subs	r2, r3, #1
 8019d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d52:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d104      	bne.n	8019d66 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019d5c:	f001 fae4 	bl	801b328 <pvTaskIncrementMutexHeldCount>
 8019d60:	4602      	mov	r2, r0
 8019d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d64:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d68:	691b      	ldr	r3, [r3, #16]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d00f      	beq.n	8019d8e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d70:	3310      	adds	r3, #16
 8019d72:	4618      	mov	r0, r3
 8019d74:	f000 ff48 	bl	801ac08 <xTaskRemoveFromEventList>
 8019d78:	4603      	mov	r3, r0
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d007      	beq.n	8019d8e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019d7e:	4b55      	ldr	r3, [pc, #340]	; (8019ed4 <xQueueSemaphoreTake+0x224>)
 8019d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d84:	601a      	str	r2, [r3, #0]
 8019d86:	f3bf 8f4f 	dsb	sy
 8019d8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019d8e:	f001 fc89 	bl	801b6a4 <vPortExitCritical>
				return pdPASS;
 8019d92:	2301      	movs	r3, #1
 8019d94:	e099      	b.n	8019eca <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d113      	bne.n	8019dc4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8019d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d00c      	beq.n	8019dbc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8019da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019da6:	b672      	cpsid	i
 8019da8:	f383 8811 	msr	BASEPRI, r3
 8019dac:	f3bf 8f6f 	isb	sy
 8019db0:	f3bf 8f4f 	dsb	sy
 8019db4:	b662      	cpsie	i
 8019db6:	617b      	str	r3, [r7, #20]
}
 8019db8:	bf00      	nop
 8019dba:	e7fe      	b.n	8019dba <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019dbc:	f001 fc72 	bl	801b6a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	e082      	b.n	8019eca <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d106      	bne.n	8019dd8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019dca:	f107 030c 	add.w	r3, r7, #12
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f000 ff7e 	bl	801acd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019dd4:	2301      	movs	r3, #1
 8019dd6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019dd8:	f001 fc64 	bl	801b6a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019ddc:	f000 fcdc 	bl	801a798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019de0:	f001 fc2c 	bl	801b63c <vPortEnterCritical>
 8019de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019dea:	b25b      	sxtb	r3, r3
 8019dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019df0:	d103      	bne.n	8019dfa <xQueueSemaphoreTake+0x14a>
 8019df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019df4:	2200      	movs	r2, #0
 8019df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019e00:	b25b      	sxtb	r3, r3
 8019e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019e06:	d103      	bne.n	8019e10 <xQueueSemaphoreTake+0x160>
 8019e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019e10:	f001 fc48 	bl	801b6a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019e14:	463a      	mov	r2, r7
 8019e16:	f107 030c 	add.w	r3, r7, #12
 8019e1a:	4611      	mov	r1, r2
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f000 ff6d 	bl	801acfc <xTaskCheckForTimeOut>
 8019e22:	4603      	mov	r3, r0
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d132      	bne.n	8019e8e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e2a:	f000 f9fa 	bl	801a222 <prvIsQueueEmpty>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d026      	beq.n	8019e82 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d109      	bne.n	8019e50 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8019e3c:	f001 fbfe 	bl	801b63c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e42:	689b      	ldr	r3, [r3, #8]
 8019e44:	4618      	mov	r0, r3
 8019e46:	f001 f8c7 	bl	801afd8 <xTaskPriorityInherit>
 8019e4a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8019e4c:	f001 fc2a 	bl	801b6a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e52:	3324      	adds	r3, #36	; 0x24
 8019e54:	683a      	ldr	r2, [r7, #0]
 8019e56:	4611      	mov	r1, r2
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f000 feaf 	bl	801abbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e60:	f000 f98d 	bl	801a17e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019e64:	f000 fca6 	bl	801a7b4 <xTaskResumeAll>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	f47f af66 	bne.w	8019d3c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8019e70:	4b18      	ldr	r3, [pc, #96]	; (8019ed4 <xQueueSemaphoreTake+0x224>)
 8019e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e76:	601a      	str	r2, [r3, #0]
 8019e78:	f3bf 8f4f 	dsb	sy
 8019e7c:	f3bf 8f6f 	isb	sy
 8019e80:	e75c      	b.n	8019d3c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8019e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e84:	f000 f97b 	bl	801a17e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019e88:	f000 fc94 	bl	801a7b4 <xTaskResumeAll>
 8019e8c:	e756      	b.n	8019d3c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8019e8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e90:	f000 f975 	bl	801a17e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019e94:	f000 fc8e 	bl	801a7b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e9a:	f000 f9c2 	bl	801a222 <prvIsQueueEmpty>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	f43f af4b 	beq.w	8019d3c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8019ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d00d      	beq.n	8019ec8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8019eac:	f001 fbc6 	bl	801b63c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8019eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019eb2:	f000 f8bc 	bl	801a02e <prvGetDisinheritPriorityAfterTimeout>
 8019eb6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8019eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eba:	689b      	ldr	r3, [r3, #8]
 8019ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	f001 f994 	bl	801b1ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8019ec4:	f001 fbee 	bl	801b6a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019ec8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019eca:	4618      	mov	r0, r3
 8019ecc:	3738      	adds	r7, #56	; 0x38
 8019ece:	46bd      	mov	sp, r7
 8019ed0:	bd80      	pop	{r7, pc}
 8019ed2:	bf00      	nop
 8019ed4:	e000ed04 	.word	0xe000ed04

08019ed8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b08e      	sub	sp, #56	; 0x38
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	60f8      	str	r0, [r7, #12]
 8019ee0:	60b9      	str	r1, [r7, #8]
 8019ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d10c      	bne.n	8019f08 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8019eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ef2:	b672      	cpsid	i
 8019ef4:	f383 8811 	msr	BASEPRI, r3
 8019ef8:	f3bf 8f6f 	isb	sy
 8019efc:	f3bf 8f4f 	dsb	sy
 8019f00:	b662      	cpsie	i
 8019f02:	623b      	str	r3, [r7, #32]
}
 8019f04:	bf00      	nop
 8019f06:	e7fe      	b.n	8019f06 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d103      	bne.n	8019f16 <xQueueReceiveFromISR+0x3e>
 8019f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d101      	bne.n	8019f1a <xQueueReceiveFromISR+0x42>
 8019f16:	2301      	movs	r3, #1
 8019f18:	e000      	b.n	8019f1c <xQueueReceiveFromISR+0x44>
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d10c      	bne.n	8019f3a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8019f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f24:	b672      	cpsid	i
 8019f26:	f383 8811 	msr	BASEPRI, r3
 8019f2a:	f3bf 8f6f 	isb	sy
 8019f2e:	f3bf 8f4f 	dsb	sy
 8019f32:	b662      	cpsie	i
 8019f34:	61fb      	str	r3, [r7, #28]
}
 8019f36:	bf00      	nop
 8019f38:	e7fe      	b.n	8019f38 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019f3a:	f001 fc67 	bl	801b80c <vPortValidateInterruptPriority>
	__asm volatile
 8019f3e:	f3ef 8211 	mrs	r2, BASEPRI
 8019f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f46:	b672      	cpsid	i
 8019f48:	f383 8811 	msr	BASEPRI, r3
 8019f4c:	f3bf 8f6f 	isb	sy
 8019f50:	f3bf 8f4f 	dsb	sy
 8019f54:	b662      	cpsie	i
 8019f56:	61ba      	str	r2, [r7, #24]
 8019f58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019f5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d02f      	beq.n	8019fca <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8019f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019f74:	68b9      	ldr	r1, [r7, #8]
 8019f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019f78:	f000 f8db 	bl	801a132 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f7e:	1e5a      	subs	r2, r3, #1
 8019f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8019f84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019f8c:	d112      	bne.n	8019fb4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f90:	691b      	ldr	r3, [r3, #16]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d016      	beq.n	8019fc4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f98:	3310      	adds	r3, #16
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	f000 fe34 	bl	801ac08 <xTaskRemoveFromEventList>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d00e      	beq.n	8019fc4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d00b      	beq.n	8019fc4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	2201      	movs	r2, #1
 8019fb0:	601a      	str	r2, [r3, #0]
 8019fb2:	e007      	b.n	8019fc4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019fb8:	3301      	adds	r3, #1
 8019fba:	b2db      	uxtb	r3, r3
 8019fbc:	b25a      	sxtb	r2, r3
 8019fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8019fc4:	2301      	movs	r3, #1
 8019fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8019fc8:	e001      	b.n	8019fce <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8019fca:	2300      	movs	r3, #0
 8019fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8019fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fd0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8019fd2:	693b      	ldr	r3, [r7, #16]
 8019fd4:	f383 8811 	msr	BASEPRI, r3
}
 8019fd8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019fdc:	4618      	mov	r0, r3
 8019fde:	3738      	adds	r7, #56	; 0x38
 8019fe0:	46bd      	mov	sp, r7
 8019fe2:	bd80      	pop	{r7, pc}

08019fe4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	b084      	sub	sp, #16
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d10c      	bne.n	801a010 <vQueueDelete+0x2c>
	__asm volatile
 8019ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ffa:	b672      	cpsid	i
 8019ffc:	f383 8811 	msr	BASEPRI, r3
 801a000:	f3bf 8f6f 	isb	sy
 801a004:	f3bf 8f4f 	dsb	sy
 801a008:	b662      	cpsie	i
 801a00a:	60bb      	str	r3, [r7, #8]
}
 801a00c:	bf00      	nop
 801a00e:	e7fe      	b.n	801a00e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801a010:	68f8      	ldr	r0, [r7, #12]
 801a012:	f000 f935 	bl	801a280 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d102      	bne.n	801a026 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 801a020:	68f8      	ldr	r0, [r7, #12]
 801a022:	f001 fd07 	bl	801ba34 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801a026:	bf00      	nop
 801a028:	3710      	adds	r7, #16
 801a02a:	46bd      	mov	sp, r7
 801a02c:	bd80      	pop	{r7, pc}

0801a02e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a02e:	b480      	push	{r7}
 801a030:	b085      	sub	sp, #20
 801a032:	af00      	add	r7, sp, #0
 801a034:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d006      	beq.n	801a04c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	f1c3 0307 	rsb	r3, r3, #7
 801a048:	60fb      	str	r3, [r7, #12]
 801a04a:	e001      	b.n	801a050 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a04c:	2300      	movs	r3, #0
 801a04e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a050:	68fb      	ldr	r3, [r7, #12]
	}
 801a052:	4618      	mov	r0, r3
 801a054:	3714      	adds	r7, #20
 801a056:	46bd      	mov	sp, r7
 801a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a05c:	4770      	bx	lr

0801a05e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a05e:	b580      	push	{r7, lr}
 801a060:	b086      	sub	sp, #24
 801a062:	af00      	add	r7, sp, #0
 801a064:	60f8      	str	r0, [r7, #12]
 801a066:	60b9      	str	r1, [r7, #8]
 801a068:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a06a:	2300      	movs	r3, #0
 801a06c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a072:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d10d      	bne.n	801a098 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d14d      	bne.n	801a120 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	689b      	ldr	r3, [r3, #8]
 801a088:	4618      	mov	r0, r3
 801a08a:	f001 f825 	bl	801b0d8 <xTaskPriorityDisinherit>
 801a08e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	2200      	movs	r2, #0
 801a094:	609a      	str	r2, [r3, #8]
 801a096:	e043      	b.n	801a120 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d119      	bne.n	801a0d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	6858      	ldr	r0, [r3, #4]
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	68b9      	ldr	r1, [r7, #8]
 801a0aa:	f002 fa01 	bl	801c4b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	685a      	ldr	r2, [r3, #4]
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0b6:	441a      	add	r2, r3
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	685a      	ldr	r2, [r3, #4]
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	689b      	ldr	r3, [r3, #8]
 801a0c4:	429a      	cmp	r2, r3
 801a0c6:	d32b      	bcc.n	801a120 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	681a      	ldr	r2, [r3, #0]
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	605a      	str	r2, [r3, #4]
 801a0d0:	e026      	b.n	801a120 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	68d8      	ldr	r0, [r3, #12]
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0da:	461a      	mov	r2, r3
 801a0dc:	68b9      	ldr	r1, [r7, #8]
 801a0de:	f002 f9e7 	bl	801c4b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	68da      	ldr	r2, [r3, #12]
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0ea:	425b      	negs	r3, r3
 801a0ec:	441a      	add	r2, r3
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	68da      	ldr	r2, [r3, #12]
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d207      	bcs.n	801a10e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	689a      	ldr	r2, [r3, #8]
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a106:	425b      	negs	r3, r3
 801a108:	441a      	add	r2, r3
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	2b02      	cmp	r3, #2
 801a112:	d105      	bne.n	801a120 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a114:	693b      	ldr	r3, [r7, #16]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d002      	beq.n	801a120 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a11a:	693b      	ldr	r3, [r7, #16]
 801a11c:	3b01      	subs	r3, #1
 801a11e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a120:	693b      	ldr	r3, [r7, #16]
 801a122:	1c5a      	adds	r2, r3, #1
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a128:	697b      	ldr	r3, [r7, #20]
}
 801a12a:	4618      	mov	r0, r3
 801a12c:	3718      	adds	r7, #24
 801a12e:	46bd      	mov	sp, r7
 801a130:	bd80      	pop	{r7, pc}

0801a132 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a132:	b580      	push	{r7, lr}
 801a134:	b082      	sub	sp, #8
 801a136:	af00      	add	r7, sp, #0
 801a138:	6078      	str	r0, [r7, #4]
 801a13a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a140:	2b00      	cmp	r3, #0
 801a142:	d018      	beq.n	801a176 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	68da      	ldr	r2, [r3, #12]
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a14c:	441a      	add	r2, r3
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	68da      	ldr	r2, [r3, #12]
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	689b      	ldr	r3, [r3, #8]
 801a15a:	429a      	cmp	r2, r3
 801a15c:	d303      	bcc.n	801a166 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	681a      	ldr	r2, [r3, #0]
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	68d9      	ldr	r1, [r3, #12]
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a16e:	461a      	mov	r2, r3
 801a170:	6838      	ldr	r0, [r7, #0]
 801a172:	f002 f99d 	bl	801c4b0 <memcpy>
	}
}
 801a176:	bf00      	nop
 801a178:	3708      	adds	r7, #8
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bd80      	pop	{r7, pc}

0801a17e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a17e:	b580      	push	{r7, lr}
 801a180:	b084      	sub	sp, #16
 801a182:	af00      	add	r7, sp, #0
 801a184:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a186:	f001 fa59 	bl	801b63c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a190:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a192:	e011      	b.n	801a1b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d012      	beq.n	801a1c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	3324      	adds	r3, #36	; 0x24
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f000 fd31 	bl	801ac08 <xTaskRemoveFromEventList>
 801a1a6:	4603      	mov	r3, r0
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d001      	beq.n	801a1b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a1ac:	f000 fe0c 	bl	801adc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a1b0:	7bfb      	ldrb	r3, [r7, #15]
 801a1b2:	3b01      	subs	r3, #1
 801a1b4:	b2db      	uxtb	r3, r3
 801a1b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a1b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	dce9      	bgt.n	801a194 <prvUnlockQueue+0x16>
 801a1c0:	e000      	b.n	801a1c4 <prvUnlockQueue+0x46>
					break;
 801a1c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	22ff      	movs	r2, #255	; 0xff
 801a1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801a1cc:	f001 fa6a 	bl	801b6a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a1d0:	f001 fa34 	bl	801b63c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a1da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a1dc:	e011      	b.n	801a202 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	691b      	ldr	r3, [r3, #16]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d012      	beq.n	801a20c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	3310      	adds	r3, #16
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f000 fd0c 	bl	801ac08 <xTaskRemoveFromEventList>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d001      	beq.n	801a1fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a1f6:	f000 fde7 	bl	801adc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a1fa:	7bbb      	ldrb	r3, [r7, #14]
 801a1fc:	3b01      	subs	r3, #1
 801a1fe:	b2db      	uxtb	r3, r3
 801a200:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a206:	2b00      	cmp	r3, #0
 801a208:	dce9      	bgt.n	801a1de <prvUnlockQueue+0x60>
 801a20a:	e000      	b.n	801a20e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a20c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	22ff      	movs	r2, #255	; 0xff
 801a212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801a216:	f001 fa45 	bl	801b6a4 <vPortExitCritical>
}
 801a21a:	bf00      	nop
 801a21c:	3710      	adds	r7, #16
 801a21e:	46bd      	mov	sp, r7
 801a220:	bd80      	pop	{r7, pc}

0801a222 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a222:	b580      	push	{r7, lr}
 801a224:	b084      	sub	sp, #16
 801a226:	af00      	add	r7, sp, #0
 801a228:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a22a:	f001 fa07 	bl	801b63c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a232:	2b00      	cmp	r3, #0
 801a234:	d102      	bne.n	801a23c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a236:	2301      	movs	r3, #1
 801a238:	60fb      	str	r3, [r7, #12]
 801a23a:	e001      	b.n	801a240 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a23c:	2300      	movs	r3, #0
 801a23e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a240:	f001 fa30 	bl	801b6a4 <vPortExitCritical>

	return xReturn;
 801a244:	68fb      	ldr	r3, [r7, #12]
}
 801a246:	4618      	mov	r0, r3
 801a248:	3710      	adds	r7, #16
 801a24a:	46bd      	mov	sp, r7
 801a24c:	bd80      	pop	{r7, pc}

0801a24e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a24e:	b580      	push	{r7, lr}
 801a250:	b084      	sub	sp, #16
 801a252:	af00      	add	r7, sp, #0
 801a254:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a256:	f001 f9f1 	bl	801b63c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a262:	429a      	cmp	r2, r3
 801a264:	d102      	bne.n	801a26c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a266:	2301      	movs	r3, #1
 801a268:	60fb      	str	r3, [r7, #12]
 801a26a:	e001      	b.n	801a270 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a26c:	2300      	movs	r3, #0
 801a26e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a270:	f001 fa18 	bl	801b6a4 <vPortExitCritical>

	return xReturn;
 801a274:	68fb      	ldr	r3, [r7, #12]
}
 801a276:	4618      	mov	r0, r3
 801a278:	3710      	adds	r7, #16
 801a27a:	46bd      	mov	sp, r7
 801a27c:	bd80      	pop	{r7, pc}
	...

0801a280 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801a280:	b480      	push	{r7}
 801a282:	b085      	sub	sp, #20
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a288:	2300      	movs	r3, #0
 801a28a:	60fb      	str	r3, [r7, #12]
 801a28c:	e016      	b.n	801a2bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801a28e:	4a10      	ldr	r2, [pc, #64]	; (801a2d0 <vQueueUnregisterQueue+0x50>)
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	00db      	lsls	r3, r3, #3
 801a294:	4413      	add	r3, r2
 801a296:	685b      	ldr	r3, [r3, #4]
 801a298:	687a      	ldr	r2, [r7, #4]
 801a29a:	429a      	cmp	r2, r3
 801a29c:	d10b      	bne.n	801a2b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801a29e:	4a0c      	ldr	r2, [pc, #48]	; (801a2d0 <vQueueUnregisterQueue+0x50>)
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	2100      	movs	r1, #0
 801a2a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801a2a8:	4a09      	ldr	r2, [pc, #36]	; (801a2d0 <vQueueUnregisterQueue+0x50>)
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	00db      	lsls	r3, r3, #3
 801a2ae:	4413      	add	r3, r2
 801a2b0:	2200      	movs	r2, #0
 801a2b2:	605a      	str	r2, [r3, #4]
				break;
 801a2b4:	e006      	b.n	801a2c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	3301      	adds	r3, #1
 801a2ba:	60fb      	str	r3, [r7, #12]
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	2b07      	cmp	r3, #7
 801a2c0:	d9e5      	bls.n	801a28e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801a2c2:	bf00      	nop
 801a2c4:	bf00      	nop
 801a2c6:	3714      	adds	r7, #20
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ce:	4770      	bx	lr
 801a2d0:	2000c724 	.word	0x2000c724

0801a2d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a2d4:	b580      	push	{r7, lr}
 801a2d6:	b08e      	sub	sp, #56	; 0x38
 801a2d8:	af04      	add	r7, sp, #16
 801a2da:	60f8      	str	r0, [r7, #12]
 801a2dc:	60b9      	str	r1, [r7, #8]
 801a2de:	607a      	str	r2, [r7, #4]
 801a2e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d10c      	bne.n	801a302 <xTaskCreateStatic+0x2e>
	__asm volatile
 801a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2ec:	b672      	cpsid	i
 801a2ee:	f383 8811 	msr	BASEPRI, r3
 801a2f2:	f3bf 8f6f 	isb	sy
 801a2f6:	f3bf 8f4f 	dsb	sy
 801a2fa:	b662      	cpsie	i
 801a2fc:	623b      	str	r3, [r7, #32]
}
 801a2fe:	bf00      	nop
 801a300:	e7fe      	b.n	801a300 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a304:	2b00      	cmp	r3, #0
 801a306:	d10c      	bne.n	801a322 <xTaskCreateStatic+0x4e>
	__asm volatile
 801a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a30c:	b672      	cpsid	i
 801a30e:	f383 8811 	msr	BASEPRI, r3
 801a312:	f3bf 8f6f 	isb	sy
 801a316:	f3bf 8f4f 	dsb	sy
 801a31a:	b662      	cpsie	i
 801a31c:	61fb      	str	r3, [r7, #28]
}
 801a31e:	bf00      	nop
 801a320:	e7fe      	b.n	801a320 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a322:	23b8      	movs	r3, #184	; 0xb8
 801a324:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a326:	693b      	ldr	r3, [r7, #16]
 801a328:	2bb8      	cmp	r3, #184	; 0xb8
 801a32a:	d00c      	beq.n	801a346 <xTaskCreateStatic+0x72>
	__asm volatile
 801a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a330:	b672      	cpsid	i
 801a332:	f383 8811 	msr	BASEPRI, r3
 801a336:	f3bf 8f6f 	isb	sy
 801a33a:	f3bf 8f4f 	dsb	sy
 801a33e:	b662      	cpsie	i
 801a340:	61bb      	str	r3, [r7, #24]
}
 801a342:	bf00      	nop
 801a344:	e7fe      	b.n	801a344 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a346:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d01e      	beq.n	801a38c <xTaskCreateStatic+0xb8>
 801a34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a350:	2b00      	cmp	r3, #0
 801a352:	d01b      	beq.n	801a38c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a356:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a35a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a35c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a360:	2202      	movs	r2, #2
 801a362:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a366:	2300      	movs	r3, #0
 801a368:	9303      	str	r3, [sp, #12]
 801a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36c:	9302      	str	r3, [sp, #8]
 801a36e:	f107 0314 	add.w	r3, r7, #20
 801a372:	9301      	str	r3, [sp, #4]
 801a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a376:	9300      	str	r3, [sp, #0]
 801a378:	683b      	ldr	r3, [r7, #0]
 801a37a:	687a      	ldr	r2, [r7, #4]
 801a37c:	68b9      	ldr	r1, [r7, #8]
 801a37e:	68f8      	ldr	r0, [r7, #12]
 801a380:	f000 f850 	bl	801a424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a386:	f000 f8f9 	bl	801a57c <prvAddNewTaskToReadyList>
 801a38a:	e001      	b.n	801a390 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801a38c:	2300      	movs	r3, #0
 801a38e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a390:	697b      	ldr	r3, [r7, #20]
	}
 801a392:	4618      	mov	r0, r3
 801a394:	3728      	adds	r7, #40	; 0x28
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}

0801a39a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a39a:	b580      	push	{r7, lr}
 801a39c:	b08c      	sub	sp, #48	; 0x30
 801a39e:	af04      	add	r7, sp, #16
 801a3a0:	60f8      	str	r0, [r7, #12]
 801a3a2:	60b9      	str	r1, [r7, #8]
 801a3a4:	603b      	str	r3, [r7, #0]
 801a3a6:	4613      	mov	r3, r2
 801a3a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a3aa:	88fb      	ldrh	r3, [r7, #6]
 801a3ac:	009b      	lsls	r3, r3, #2
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	f001 fa70 	bl	801b894 <pvPortMalloc>
 801a3b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a3b6:	697b      	ldr	r3, [r7, #20]
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d00e      	beq.n	801a3da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a3bc:	20b8      	movs	r0, #184	; 0xb8
 801a3be:	f001 fa69 	bl	801b894 <pvPortMalloc>
 801a3c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a3c4:	69fb      	ldr	r3, [r7, #28]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d003      	beq.n	801a3d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	697a      	ldr	r2, [r7, #20]
 801a3ce:	631a      	str	r2, [r3, #48]	; 0x30
 801a3d0:	e005      	b.n	801a3de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a3d2:	6978      	ldr	r0, [r7, #20]
 801a3d4:	f001 fb2e 	bl	801ba34 <vPortFree>
 801a3d8:	e001      	b.n	801a3de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a3da:	2300      	movs	r3, #0
 801a3dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a3de:	69fb      	ldr	r3, [r7, #28]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d017      	beq.n	801a414 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a3e4:	69fb      	ldr	r3, [r7, #28]
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a3ec:	88fa      	ldrh	r2, [r7, #6]
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	9303      	str	r3, [sp, #12]
 801a3f2:	69fb      	ldr	r3, [r7, #28]
 801a3f4:	9302      	str	r3, [sp, #8]
 801a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f8:	9301      	str	r3, [sp, #4]
 801a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3fc:	9300      	str	r3, [sp, #0]
 801a3fe:	683b      	ldr	r3, [r7, #0]
 801a400:	68b9      	ldr	r1, [r7, #8]
 801a402:	68f8      	ldr	r0, [r7, #12]
 801a404:	f000 f80e 	bl	801a424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a408:	69f8      	ldr	r0, [r7, #28]
 801a40a:	f000 f8b7 	bl	801a57c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a40e:	2301      	movs	r3, #1
 801a410:	61bb      	str	r3, [r7, #24]
 801a412:	e002      	b.n	801a41a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a418:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a41a:	69bb      	ldr	r3, [r7, #24]
	}
 801a41c:	4618      	mov	r0, r3
 801a41e:	3720      	adds	r7, #32
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}

0801a424 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a424:	b580      	push	{r7, lr}
 801a426:	b088      	sub	sp, #32
 801a428:	af00      	add	r7, sp, #0
 801a42a:	60f8      	str	r0, [r7, #12]
 801a42c:	60b9      	str	r1, [r7, #8]
 801a42e:	607a      	str	r2, [r7, #4]
 801a430:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a434:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	009b      	lsls	r3, r3, #2
 801a43a:	461a      	mov	r2, r3
 801a43c:	21a5      	movs	r1, #165	; 0xa5
 801a43e:	f002 f85f 	bl	801c500 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a446:	6879      	ldr	r1, [r7, #4]
 801a448:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801a44c:	440b      	add	r3, r1
 801a44e:	009b      	lsls	r3, r3, #2
 801a450:	4413      	add	r3, r2
 801a452:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a454:	69bb      	ldr	r3, [r7, #24]
 801a456:	f023 0307 	bic.w	r3, r3, #7
 801a45a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a45c:	69bb      	ldr	r3, [r7, #24]
 801a45e:	f003 0307 	and.w	r3, r3, #7
 801a462:	2b00      	cmp	r3, #0
 801a464:	d00c      	beq.n	801a480 <prvInitialiseNewTask+0x5c>
	__asm volatile
 801a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a46a:	b672      	cpsid	i
 801a46c:	f383 8811 	msr	BASEPRI, r3
 801a470:	f3bf 8f6f 	isb	sy
 801a474:	f3bf 8f4f 	dsb	sy
 801a478:	b662      	cpsie	i
 801a47a:	617b      	str	r3, [r7, #20]
}
 801a47c:	bf00      	nop
 801a47e:	e7fe      	b.n	801a47e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a480:	68bb      	ldr	r3, [r7, #8]
 801a482:	2b00      	cmp	r3, #0
 801a484:	d01f      	beq.n	801a4c6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a486:	2300      	movs	r3, #0
 801a488:	61fb      	str	r3, [r7, #28]
 801a48a:	e012      	b.n	801a4b2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a48c:	68ba      	ldr	r2, [r7, #8]
 801a48e:	69fb      	ldr	r3, [r7, #28]
 801a490:	4413      	add	r3, r2
 801a492:	7819      	ldrb	r1, [r3, #0]
 801a494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a496:	69fb      	ldr	r3, [r7, #28]
 801a498:	4413      	add	r3, r2
 801a49a:	3334      	adds	r3, #52	; 0x34
 801a49c:	460a      	mov	r2, r1
 801a49e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a4a0:	68ba      	ldr	r2, [r7, #8]
 801a4a2:	69fb      	ldr	r3, [r7, #28]
 801a4a4:	4413      	add	r3, r2
 801a4a6:	781b      	ldrb	r3, [r3, #0]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d006      	beq.n	801a4ba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a4ac:	69fb      	ldr	r3, [r7, #28]
 801a4ae:	3301      	adds	r3, #1
 801a4b0:	61fb      	str	r3, [r7, #28]
 801a4b2:	69fb      	ldr	r3, [r7, #28]
 801a4b4:	2b0f      	cmp	r3, #15
 801a4b6:	d9e9      	bls.n	801a48c <prvInitialiseNewTask+0x68>
 801a4b8:	e000      	b.n	801a4bc <prvInitialiseNewTask+0x98>
			{
				break;
 801a4ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4be:	2200      	movs	r2, #0
 801a4c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a4c4:	e003      	b.n	801a4ce <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4c8:	2200      	movs	r2, #0
 801a4ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4d0:	2b06      	cmp	r3, #6
 801a4d2:	d901      	bls.n	801a4d8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a4d4:	2306      	movs	r3, #6
 801a4d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a4dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a4e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4e6:	2200      	movs	r2, #0
 801a4e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ec:	3304      	adds	r3, #4
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	f7fe fe68 	bl	80191c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4f6:	3318      	adds	r3, #24
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	f7fe fe63 	bl	80191c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a502:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a506:	f1c3 0207 	rsb	r2, r3, #7
 801a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a50c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a512:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a516:	2200      	movs	r2, #0
 801a518:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a51c:	2200      	movs	r2, #0
 801a51e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a524:	2200      	movs	r2, #0
 801a526:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a52c:	3350      	adds	r3, #80	; 0x50
 801a52e:	2260      	movs	r2, #96	; 0x60
 801a530:	2100      	movs	r1, #0
 801a532:	4618      	mov	r0, r3
 801a534:	f001 ffe4 	bl	801c500 <memset>
 801a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a53a:	4a0d      	ldr	r2, [pc, #52]	; (801a570 <prvInitialiseNewTask+0x14c>)
 801a53c:	655a      	str	r2, [r3, #84]	; 0x54
 801a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a540:	4a0c      	ldr	r2, [pc, #48]	; (801a574 <prvInitialiseNewTask+0x150>)
 801a542:	659a      	str	r2, [r3, #88]	; 0x58
 801a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a546:	4a0c      	ldr	r2, [pc, #48]	; (801a578 <prvInitialiseNewTask+0x154>)
 801a548:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a54a:	683a      	ldr	r2, [r7, #0]
 801a54c:	68f9      	ldr	r1, [r7, #12]
 801a54e:	69b8      	ldr	r0, [r7, #24]
 801a550:	f000 ff64 	bl	801b41c <pxPortInitialiseStack>
 801a554:	4602      	mov	r2, r0
 801a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a558:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d002      	beq.n	801a566 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a566:	bf00      	nop
 801a568:	3720      	adds	r7, #32
 801a56a:	46bd      	mov	sp, r7
 801a56c:	bd80      	pop	{r7, pc}
 801a56e:	bf00      	nop
 801a570:	08020440 	.word	0x08020440
 801a574:	08020460 	.word	0x08020460
 801a578:	08020420 	.word	0x08020420

0801a57c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b082      	sub	sp, #8
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a584:	f001 f85a 	bl	801b63c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a588:	4b2a      	ldr	r3, [pc, #168]	; (801a634 <prvAddNewTaskToReadyList+0xb8>)
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	3301      	adds	r3, #1
 801a58e:	4a29      	ldr	r2, [pc, #164]	; (801a634 <prvAddNewTaskToReadyList+0xb8>)
 801a590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a592:	4b29      	ldr	r3, [pc, #164]	; (801a638 <prvAddNewTaskToReadyList+0xbc>)
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d109      	bne.n	801a5ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a59a:	4a27      	ldr	r2, [pc, #156]	; (801a638 <prvAddNewTaskToReadyList+0xbc>)
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a5a0:	4b24      	ldr	r3, [pc, #144]	; (801a634 <prvAddNewTaskToReadyList+0xb8>)
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	2b01      	cmp	r3, #1
 801a5a6:	d110      	bne.n	801a5ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a5a8:	f000 fc34 	bl	801ae14 <prvInitialiseTaskLists>
 801a5ac:	e00d      	b.n	801a5ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a5ae:	4b23      	ldr	r3, [pc, #140]	; (801a63c <prvAddNewTaskToReadyList+0xc0>)
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d109      	bne.n	801a5ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a5b6:	4b20      	ldr	r3, [pc, #128]	; (801a638 <prvAddNewTaskToReadyList+0xbc>)
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	d802      	bhi.n	801a5ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a5c4:	4a1c      	ldr	r2, [pc, #112]	; (801a638 <prvAddNewTaskToReadyList+0xbc>)
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a5ca:	4b1d      	ldr	r3, [pc, #116]	; (801a640 <prvAddNewTaskToReadyList+0xc4>)
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	3301      	adds	r3, #1
 801a5d0:	4a1b      	ldr	r2, [pc, #108]	; (801a640 <prvAddNewTaskToReadyList+0xc4>)
 801a5d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5d8:	2201      	movs	r2, #1
 801a5da:	409a      	lsls	r2, r3
 801a5dc:	4b19      	ldr	r3, [pc, #100]	; (801a644 <prvAddNewTaskToReadyList+0xc8>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	4313      	orrs	r3, r2
 801a5e2:	4a18      	ldr	r2, [pc, #96]	; (801a644 <prvAddNewTaskToReadyList+0xc8>)
 801a5e4:	6013      	str	r3, [r2, #0]
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5ea:	4613      	mov	r3, r2
 801a5ec:	009b      	lsls	r3, r3, #2
 801a5ee:	4413      	add	r3, r2
 801a5f0:	009b      	lsls	r3, r3, #2
 801a5f2:	4a15      	ldr	r2, [pc, #84]	; (801a648 <prvAddNewTaskToReadyList+0xcc>)
 801a5f4:	441a      	add	r2, r3
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	3304      	adds	r3, #4
 801a5fa:	4619      	mov	r1, r3
 801a5fc:	4610      	mov	r0, r2
 801a5fe:	f7fe fdee 	bl	80191de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a602:	f001 f84f 	bl	801b6a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a606:	4b0d      	ldr	r3, [pc, #52]	; (801a63c <prvAddNewTaskToReadyList+0xc0>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d00e      	beq.n	801a62c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a60e:	4b0a      	ldr	r3, [pc, #40]	; (801a638 <prvAddNewTaskToReadyList+0xbc>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a618:	429a      	cmp	r2, r3
 801a61a:	d207      	bcs.n	801a62c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a61c:	4b0b      	ldr	r3, [pc, #44]	; (801a64c <prvAddNewTaskToReadyList+0xd0>)
 801a61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a622:	601a      	str	r2, [r3, #0]
 801a624:	f3bf 8f4f 	dsb	sy
 801a628:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a62c:	bf00      	nop
 801a62e:	3708      	adds	r7, #8
 801a630:	46bd      	mov	sp, r7
 801a632:	bd80      	pop	{r7, pc}
 801a634:	20000660 	.word	0x20000660
 801a638:	20000560 	.word	0x20000560
 801a63c:	2000066c 	.word	0x2000066c
 801a640:	2000067c 	.word	0x2000067c
 801a644:	20000668 	.word	0x20000668
 801a648:	20000564 	.word	0x20000564
 801a64c:	e000ed04 	.word	0xe000ed04

0801a650 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a650:	b580      	push	{r7, lr}
 801a652:	b084      	sub	sp, #16
 801a654:	af00      	add	r7, sp, #0
 801a656:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a658:	2300      	movs	r3, #0
 801a65a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d019      	beq.n	801a696 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a662:	4b14      	ldr	r3, [pc, #80]	; (801a6b4 <vTaskDelay+0x64>)
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	2b00      	cmp	r3, #0
 801a668:	d00c      	beq.n	801a684 <vTaskDelay+0x34>
	__asm volatile
 801a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a66e:	b672      	cpsid	i
 801a670:	f383 8811 	msr	BASEPRI, r3
 801a674:	f3bf 8f6f 	isb	sy
 801a678:	f3bf 8f4f 	dsb	sy
 801a67c:	b662      	cpsie	i
 801a67e:	60bb      	str	r3, [r7, #8]
}
 801a680:	bf00      	nop
 801a682:	e7fe      	b.n	801a682 <vTaskDelay+0x32>
			vTaskSuspendAll();
 801a684:	f000 f888 	bl	801a798 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a688:	2100      	movs	r1, #0
 801a68a:	6878      	ldr	r0, [r7, #4]
 801a68c:	f000 fe60 	bl	801b350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a690:	f000 f890 	bl	801a7b4 <xTaskResumeAll>
 801a694:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d107      	bne.n	801a6ac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 801a69c:	4b06      	ldr	r3, [pc, #24]	; (801a6b8 <vTaskDelay+0x68>)
 801a69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a6a2:	601a      	str	r2, [r3, #0]
 801a6a4:	f3bf 8f4f 	dsb	sy
 801a6a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a6ac:	bf00      	nop
 801a6ae:	3710      	adds	r7, #16
 801a6b0:	46bd      	mov	sp, r7
 801a6b2:	bd80      	pop	{r7, pc}
 801a6b4:	20000688 	.word	0x20000688
 801a6b8:	e000ed04 	.word	0xe000ed04

0801a6bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b08a      	sub	sp, #40	; 0x28
 801a6c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a6ca:	463a      	mov	r2, r7
 801a6cc:	1d39      	adds	r1, r7, #4
 801a6ce:	f107 0308 	add.w	r3, r7, #8
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	f7e6 f8fe 	bl	80008d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a6d8:	6839      	ldr	r1, [r7, #0]
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	68ba      	ldr	r2, [r7, #8]
 801a6de:	9202      	str	r2, [sp, #8]
 801a6e0:	9301      	str	r3, [sp, #4]
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	9300      	str	r3, [sp, #0]
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	460a      	mov	r2, r1
 801a6ea:	4923      	ldr	r1, [pc, #140]	; (801a778 <vTaskStartScheduler+0xbc>)
 801a6ec:	4823      	ldr	r0, [pc, #140]	; (801a77c <vTaskStartScheduler+0xc0>)
 801a6ee:	f7ff fdf1 	bl	801a2d4 <xTaskCreateStatic>
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	4a22      	ldr	r2, [pc, #136]	; (801a780 <vTaskStartScheduler+0xc4>)
 801a6f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801a6f8:	4b21      	ldr	r3, [pc, #132]	; (801a780 <vTaskStartScheduler+0xc4>)
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d002      	beq.n	801a706 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801a700:	2301      	movs	r3, #1
 801a702:	617b      	str	r3, [r7, #20]
 801a704:	e001      	b.n	801a70a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801a706:	2300      	movs	r3, #0
 801a708:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a70a:	697b      	ldr	r3, [r7, #20]
 801a70c:	2b01      	cmp	r3, #1
 801a70e:	d11d      	bne.n	801a74c <vTaskStartScheduler+0x90>
	__asm volatile
 801a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a714:	b672      	cpsid	i
 801a716:	f383 8811 	msr	BASEPRI, r3
 801a71a:	f3bf 8f6f 	isb	sy
 801a71e:	f3bf 8f4f 	dsb	sy
 801a722:	b662      	cpsie	i
 801a724:	613b      	str	r3, [r7, #16]
}
 801a726:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a728:	4b16      	ldr	r3, [pc, #88]	; (801a784 <vTaskStartScheduler+0xc8>)
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	3350      	adds	r3, #80	; 0x50
 801a72e:	4a16      	ldr	r2, [pc, #88]	; (801a788 <vTaskStartScheduler+0xcc>)
 801a730:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a732:	4b16      	ldr	r3, [pc, #88]	; (801a78c <vTaskStartScheduler+0xd0>)
 801a734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a738:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a73a:	4b15      	ldr	r3, [pc, #84]	; (801a790 <vTaskStartScheduler+0xd4>)
 801a73c:	2201      	movs	r2, #1
 801a73e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a740:	4b14      	ldr	r3, [pc, #80]	; (801a794 <vTaskStartScheduler+0xd8>)
 801a742:	2200      	movs	r2, #0
 801a744:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a746:	f000 fefb 	bl	801b540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a74a:	e010      	b.n	801a76e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a74c:	697b      	ldr	r3, [r7, #20]
 801a74e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a752:	d10c      	bne.n	801a76e <vTaskStartScheduler+0xb2>
	__asm volatile
 801a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a758:	b672      	cpsid	i
 801a75a:	f383 8811 	msr	BASEPRI, r3
 801a75e:	f3bf 8f6f 	isb	sy
 801a762:	f3bf 8f4f 	dsb	sy
 801a766:	b662      	cpsie	i
 801a768:	60fb      	str	r3, [r7, #12]
}
 801a76a:	bf00      	nop
 801a76c:	e7fe      	b.n	801a76c <vTaskStartScheduler+0xb0>
}
 801a76e:	bf00      	nop
 801a770:	3718      	adds	r7, #24
 801a772:	46bd      	mov	sp, r7
 801a774:	bd80      	pop	{r7, pc}
 801a776:	bf00      	nop
 801a778:	0801e13c 	.word	0x0801e13c
 801a77c:	0801ade1 	.word	0x0801ade1
 801a780:	20000684 	.word	0x20000684
 801a784:	20000560 	.word	0x20000560
 801a788:	20000064 	.word	0x20000064
 801a78c:	20000680 	.word	0x20000680
 801a790:	2000066c 	.word	0x2000066c
 801a794:	20000664 	.word	0x20000664

0801a798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a798:	b480      	push	{r7}
 801a79a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801a79c:	4b04      	ldr	r3, [pc, #16]	; (801a7b0 <vTaskSuspendAll+0x18>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	3301      	adds	r3, #1
 801a7a2:	4a03      	ldr	r2, [pc, #12]	; (801a7b0 <vTaskSuspendAll+0x18>)
 801a7a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801a7a6:	bf00      	nop
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ae:	4770      	bx	lr
 801a7b0:	20000688 	.word	0x20000688

0801a7b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a7b4:	b580      	push	{r7, lr}
 801a7b6:	b084      	sub	sp, #16
 801a7b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a7be:	2300      	movs	r3, #0
 801a7c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a7c2:	4b42      	ldr	r3, [pc, #264]	; (801a8cc <xTaskResumeAll+0x118>)
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d10c      	bne.n	801a7e4 <xTaskResumeAll+0x30>
	__asm volatile
 801a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7ce:	b672      	cpsid	i
 801a7d0:	f383 8811 	msr	BASEPRI, r3
 801a7d4:	f3bf 8f6f 	isb	sy
 801a7d8:	f3bf 8f4f 	dsb	sy
 801a7dc:	b662      	cpsie	i
 801a7de:	603b      	str	r3, [r7, #0]
}
 801a7e0:	bf00      	nop
 801a7e2:	e7fe      	b.n	801a7e2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a7e4:	f000 ff2a 	bl	801b63c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a7e8:	4b38      	ldr	r3, [pc, #224]	; (801a8cc <xTaskResumeAll+0x118>)
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	3b01      	subs	r3, #1
 801a7ee:	4a37      	ldr	r2, [pc, #220]	; (801a8cc <xTaskResumeAll+0x118>)
 801a7f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a7f2:	4b36      	ldr	r3, [pc, #216]	; (801a8cc <xTaskResumeAll+0x118>)
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d161      	bne.n	801a8be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a7fa:	4b35      	ldr	r3, [pc, #212]	; (801a8d0 <xTaskResumeAll+0x11c>)
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d05d      	beq.n	801a8be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a802:	e02e      	b.n	801a862 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a804:	4b33      	ldr	r3, [pc, #204]	; (801a8d4 <xTaskResumeAll+0x120>)
 801a806:	68db      	ldr	r3, [r3, #12]
 801a808:	68db      	ldr	r3, [r3, #12]
 801a80a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	3318      	adds	r3, #24
 801a810:	4618      	mov	r0, r3
 801a812:	f7fe fd41 	bl	8019298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	3304      	adds	r3, #4
 801a81a:	4618      	mov	r0, r3
 801a81c:	f7fe fd3c 	bl	8019298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a824:	2201      	movs	r2, #1
 801a826:	409a      	lsls	r2, r3
 801a828:	4b2b      	ldr	r3, [pc, #172]	; (801a8d8 <xTaskResumeAll+0x124>)
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	4313      	orrs	r3, r2
 801a82e:	4a2a      	ldr	r2, [pc, #168]	; (801a8d8 <xTaskResumeAll+0x124>)
 801a830:	6013      	str	r3, [r2, #0]
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a836:	4613      	mov	r3, r2
 801a838:	009b      	lsls	r3, r3, #2
 801a83a:	4413      	add	r3, r2
 801a83c:	009b      	lsls	r3, r3, #2
 801a83e:	4a27      	ldr	r2, [pc, #156]	; (801a8dc <xTaskResumeAll+0x128>)
 801a840:	441a      	add	r2, r3
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	3304      	adds	r3, #4
 801a846:	4619      	mov	r1, r3
 801a848:	4610      	mov	r0, r2
 801a84a:	f7fe fcc8 	bl	80191de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a852:	4b23      	ldr	r3, [pc, #140]	; (801a8e0 <xTaskResumeAll+0x12c>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a858:	429a      	cmp	r2, r3
 801a85a:	d302      	bcc.n	801a862 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801a85c:	4b21      	ldr	r3, [pc, #132]	; (801a8e4 <xTaskResumeAll+0x130>)
 801a85e:	2201      	movs	r2, #1
 801a860:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a862:	4b1c      	ldr	r3, [pc, #112]	; (801a8d4 <xTaskResumeAll+0x120>)
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d1cc      	bne.n	801a804 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d001      	beq.n	801a874 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a870:	f000 fb74 	bl	801af5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801a874:	4b1c      	ldr	r3, [pc, #112]	; (801a8e8 <xTaskResumeAll+0x134>)
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d010      	beq.n	801a8a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a880:	f000 f858 	bl	801a934 <xTaskIncrementTick>
 801a884:	4603      	mov	r3, r0
 801a886:	2b00      	cmp	r3, #0
 801a888:	d002      	beq.n	801a890 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801a88a:	4b16      	ldr	r3, [pc, #88]	; (801a8e4 <xTaskResumeAll+0x130>)
 801a88c:	2201      	movs	r2, #1
 801a88e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	3b01      	subs	r3, #1
 801a894:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d1f1      	bne.n	801a880 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801a89c:	4b12      	ldr	r3, [pc, #72]	; (801a8e8 <xTaskResumeAll+0x134>)
 801a89e:	2200      	movs	r2, #0
 801a8a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a8a2:	4b10      	ldr	r3, [pc, #64]	; (801a8e4 <xTaskResumeAll+0x130>)
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d009      	beq.n	801a8be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a8aa:	2301      	movs	r3, #1
 801a8ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a8ae:	4b0f      	ldr	r3, [pc, #60]	; (801a8ec <xTaskResumeAll+0x138>)
 801a8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a8b4:	601a      	str	r2, [r3, #0]
 801a8b6:	f3bf 8f4f 	dsb	sy
 801a8ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a8be:	f000 fef1 	bl	801b6a4 <vPortExitCritical>

	return xAlreadyYielded;
 801a8c2:	68bb      	ldr	r3, [r7, #8]
}
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	3710      	adds	r7, #16
 801a8c8:	46bd      	mov	sp, r7
 801a8ca:	bd80      	pop	{r7, pc}
 801a8cc:	20000688 	.word	0x20000688
 801a8d0:	20000660 	.word	0x20000660
 801a8d4:	20000620 	.word	0x20000620
 801a8d8:	20000668 	.word	0x20000668
 801a8dc:	20000564 	.word	0x20000564
 801a8e0:	20000560 	.word	0x20000560
 801a8e4:	20000674 	.word	0x20000674
 801a8e8:	20000670 	.word	0x20000670
 801a8ec:	e000ed04 	.word	0xe000ed04

0801a8f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a8f0:	b480      	push	{r7}
 801a8f2:	b083      	sub	sp, #12
 801a8f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a8f6:	4b05      	ldr	r3, [pc, #20]	; (801a90c <xTaskGetTickCount+0x1c>)
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a8fc:	687b      	ldr	r3, [r7, #4]
}
 801a8fe:	4618      	mov	r0, r3
 801a900:	370c      	adds	r7, #12
 801a902:	46bd      	mov	sp, r7
 801a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a908:	4770      	bx	lr
 801a90a:	bf00      	nop
 801a90c:	20000664 	.word	0x20000664

0801a910 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b082      	sub	sp, #8
 801a914:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a916:	f000 ff79 	bl	801b80c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801a91a:	2300      	movs	r3, #0
 801a91c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801a91e:	4b04      	ldr	r3, [pc, #16]	; (801a930 <xTaskGetTickCountFromISR+0x20>)
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a924:	683b      	ldr	r3, [r7, #0]
}
 801a926:	4618      	mov	r0, r3
 801a928:	3708      	adds	r7, #8
 801a92a:	46bd      	mov	sp, r7
 801a92c:	bd80      	pop	{r7, pc}
 801a92e:	bf00      	nop
 801a930:	20000664 	.word	0x20000664

0801a934 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a934:	b580      	push	{r7, lr}
 801a936:	b086      	sub	sp, #24
 801a938:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a93a:	2300      	movs	r3, #0
 801a93c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a93e:	4b4f      	ldr	r3, [pc, #316]	; (801aa7c <xTaskIncrementTick+0x148>)
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	2b00      	cmp	r3, #0
 801a944:	f040 808a 	bne.w	801aa5c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a948:	4b4d      	ldr	r3, [pc, #308]	; (801aa80 <xTaskIncrementTick+0x14c>)
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	3301      	adds	r3, #1
 801a94e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a950:	4a4b      	ldr	r2, [pc, #300]	; (801aa80 <xTaskIncrementTick+0x14c>)
 801a952:	693b      	ldr	r3, [r7, #16]
 801a954:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a956:	693b      	ldr	r3, [r7, #16]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d122      	bne.n	801a9a2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801a95c:	4b49      	ldr	r3, [pc, #292]	; (801aa84 <xTaskIncrementTick+0x150>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	2b00      	cmp	r3, #0
 801a964:	d00c      	beq.n	801a980 <xTaskIncrementTick+0x4c>
	__asm volatile
 801a966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a96a:	b672      	cpsid	i
 801a96c:	f383 8811 	msr	BASEPRI, r3
 801a970:	f3bf 8f6f 	isb	sy
 801a974:	f3bf 8f4f 	dsb	sy
 801a978:	b662      	cpsie	i
 801a97a:	603b      	str	r3, [r7, #0]
}
 801a97c:	bf00      	nop
 801a97e:	e7fe      	b.n	801a97e <xTaskIncrementTick+0x4a>
 801a980:	4b40      	ldr	r3, [pc, #256]	; (801aa84 <xTaskIncrementTick+0x150>)
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	60fb      	str	r3, [r7, #12]
 801a986:	4b40      	ldr	r3, [pc, #256]	; (801aa88 <xTaskIncrementTick+0x154>)
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	4a3e      	ldr	r2, [pc, #248]	; (801aa84 <xTaskIncrementTick+0x150>)
 801a98c:	6013      	str	r3, [r2, #0]
 801a98e:	4a3e      	ldr	r2, [pc, #248]	; (801aa88 <xTaskIncrementTick+0x154>)
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	6013      	str	r3, [r2, #0]
 801a994:	4b3d      	ldr	r3, [pc, #244]	; (801aa8c <xTaskIncrementTick+0x158>)
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	3301      	adds	r3, #1
 801a99a:	4a3c      	ldr	r2, [pc, #240]	; (801aa8c <xTaskIncrementTick+0x158>)
 801a99c:	6013      	str	r3, [r2, #0]
 801a99e:	f000 fadd 	bl	801af5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a9a2:	4b3b      	ldr	r3, [pc, #236]	; (801aa90 <xTaskIncrementTick+0x15c>)
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	693a      	ldr	r2, [r7, #16]
 801a9a8:	429a      	cmp	r2, r3
 801a9aa:	d348      	bcc.n	801aa3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a9ac:	4b35      	ldr	r3, [pc, #212]	; (801aa84 <xTaskIncrementTick+0x150>)
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d104      	bne.n	801a9c0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a9b6:	4b36      	ldr	r3, [pc, #216]	; (801aa90 <xTaskIncrementTick+0x15c>)
 801a9b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a9bc:	601a      	str	r2, [r3, #0]
					break;
 801a9be:	e03e      	b.n	801aa3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a9c0:	4b30      	ldr	r3, [pc, #192]	; (801aa84 <xTaskIncrementTick+0x150>)
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	68db      	ldr	r3, [r3, #12]
 801a9c6:	68db      	ldr	r3, [r3, #12]
 801a9c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	685b      	ldr	r3, [r3, #4]
 801a9ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a9d0:	693a      	ldr	r2, [r7, #16]
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	429a      	cmp	r2, r3
 801a9d6:	d203      	bcs.n	801a9e0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a9d8:	4a2d      	ldr	r2, [pc, #180]	; (801aa90 <xTaskIncrementTick+0x15c>)
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a9de:	e02e      	b.n	801aa3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	3304      	adds	r3, #4
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	f7fe fc57 	bl	8019298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a9ea:	68bb      	ldr	r3, [r7, #8]
 801a9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d004      	beq.n	801a9fc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a9f2:	68bb      	ldr	r3, [r7, #8]
 801a9f4:	3318      	adds	r3, #24
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	f7fe fc4e 	bl	8019298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a9fc:	68bb      	ldr	r3, [r7, #8]
 801a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa00:	2201      	movs	r2, #1
 801aa02:	409a      	lsls	r2, r3
 801aa04:	4b23      	ldr	r3, [pc, #140]	; (801aa94 <xTaskIncrementTick+0x160>)
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	4313      	orrs	r3, r2
 801aa0a:	4a22      	ldr	r2, [pc, #136]	; (801aa94 <xTaskIncrementTick+0x160>)
 801aa0c:	6013      	str	r3, [r2, #0]
 801aa0e:	68bb      	ldr	r3, [r7, #8]
 801aa10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa12:	4613      	mov	r3, r2
 801aa14:	009b      	lsls	r3, r3, #2
 801aa16:	4413      	add	r3, r2
 801aa18:	009b      	lsls	r3, r3, #2
 801aa1a:	4a1f      	ldr	r2, [pc, #124]	; (801aa98 <xTaskIncrementTick+0x164>)
 801aa1c:	441a      	add	r2, r3
 801aa1e:	68bb      	ldr	r3, [r7, #8]
 801aa20:	3304      	adds	r3, #4
 801aa22:	4619      	mov	r1, r3
 801aa24:	4610      	mov	r0, r2
 801aa26:	f7fe fbda 	bl	80191de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801aa2a:	68bb      	ldr	r3, [r7, #8]
 801aa2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa2e:	4b1b      	ldr	r3, [pc, #108]	; (801aa9c <xTaskIncrementTick+0x168>)
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa34:	429a      	cmp	r2, r3
 801aa36:	d3b9      	bcc.n	801a9ac <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801aa38:	2301      	movs	r3, #1
 801aa3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801aa3c:	e7b6      	b.n	801a9ac <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801aa3e:	4b17      	ldr	r3, [pc, #92]	; (801aa9c <xTaskIncrementTick+0x168>)
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa44:	4914      	ldr	r1, [pc, #80]	; (801aa98 <xTaskIncrementTick+0x164>)
 801aa46:	4613      	mov	r3, r2
 801aa48:	009b      	lsls	r3, r3, #2
 801aa4a:	4413      	add	r3, r2
 801aa4c:	009b      	lsls	r3, r3, #2
 801aa4e:	440b      	add	r3, r1
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	2b01      	cmp	r3, #1
 801aa54:	d907      	bls.n	801aa66 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801aa56:	2301      	movs	r3, #1
 801aa58:	617b      	str	r3, [r7, #20]
 801aa5a:	e004      	b.n	801aa66 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801aa5c:	4b10      	ldr	r3, [pc, #64]	; (801aaa0 <xTaskIncrementTick+0x16c>)
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	3301      	adds	r3, #1
 801aa62:	4a0f      	ldr	r2, [pc, #60]	; (801aaa0 <xTaskIncrementTick+0x16c>)
 801aa64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801aa66:	4b0f      	ldr	r3, [pc, #60]	; (801aaa4 <xTaskIncrementTick+0x170>)
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d001      	beq.n	801aa72 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801aa6e:	2301      	movs	r3, #1
 801aa70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801aa72:	697b      	ldr	r3, [r7, #20]
}
 801aa74:	4618      	mov	r0, r3
 801aa76:	3718      	adds	r7, #24
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	bd80      	pop	{r7, pc}
 801aa7c:	20000688 	.word	0x20000688
 801aa80:	20000664 	.word	0x20000664
 801aa84:	20000618 	.word	0x20000618
 801aa88:	2000061c 	.word	0x2000061c
 801aa8c:	20000678 	.word	0x20000678
 801aa90:	20000680 	.word	0x20000680
 801aa94:	20000668 	.word	0x20000668
 801aa98:	20000564 	.word	0x20000564
 801aa9c:	20000560 	.word	0x20000560
 801aaa0:	20000670 	.word	0x20000670
 801aaa4:	20000674 	.word	0x20000674

0801aaa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b088      	sub	sp, #32
 801aaac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801aaae:	4b3d      	ldr	r3, [pc, #244]	; (801aba4 <vTaskSwitchContext+0xfc>)
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d003      	beq.n	801aabe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801aab6:	4b3c      	ldr	r3, [pc, #240]	; (801aba8 <vTaskSwitchContext+0x100>)
 801aab8:	2201      	movs	r2, #1
 801aaba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801aabc:	e06d      	b.n	801ab9a <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 801aabe:	4b3a      	ldr	r3, [pc, #232]	; (801aba8 <vTaskSwitchContext+0x100>)
 801aac0:	2200      	movs	r2, #0
 801aac2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801aac4:	4b39      	ldr	r3, [pc, #228]	; (801abac <vTaskSwitchContext+0x104>)
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aaca:	61fb      	str	r3, [r7, #28]
 801aacc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801aad0:	61bb      	str	r3, [r7, #24]
 801aad2:	69fb      	ldr	r3, [r7, #28]
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	69ba      	ldr	r2, [r7, #24]
 801aad8:	429a      	cmp	r2, r3
 801aada:	d111      	bne.n	801ab00 <vTaskSwitchContext+0x58>
 801aadc:	69fb      	ldr	r3, [r7, #28]
 801aade:	3304      	adds	r3, #4
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	69ba      	ldr	r2, [r7, #24]
 801aae4:	429a      	cmp	r2, r3
 801aae6:	d10b      	bne.n	801ab00 <vTaskSwitchContext+0x58>
 801aae8:	69fb      	ldr	r3, [r7, #28]
 801aaea:	3308      	adds	r3, #8
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	69ba      	ldr	r2, [r7, #24]
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d105      	bne.n	801ab00 <vTaskSwitchContext+0x58>
 801aaf4:	69fb      	ldr	r3, [r7, #28]
 801aaf6:	330c      	adds	r3, #12
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	69ba      	ldr	r2, [r7, #24]
 801aafc:	429a      	cmp	r2, r3
 801aafe:	d008      	beq.n	801ab12 <vTaskSwitchContext+0x6a>
 801ab00:	4b2a      	ldr	r3, [pc, #168]	; (801abac <vTaskSwitchContext+0x104>)
 801ab02:	681a      	ldr	r2, [r3, #0]
 801ab04:	4b29      	ldr	r3, [pc, #164]	; (801abac <vTaskSwitchContext+0x104>)
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	3334      	adds	r3, #52	; 0x34
 801ab0a:	4619      	mov	r1, r3
 801ab0c:	4610      	mov	r0, r2
 801ab0e:	f7e5 fece 	bl	80008ae <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ab12:	4b27      	ldr	r3, [pc, #156]	; (801abb0 <vTaskSwitchContext+0x108>)
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	fab3 f383 	clz	r3, r3
 801ab1e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801ab20:	7afb      	ldrb	r3, [r7, #11]
 801ab22:	f1c3 031f 	rsb	r3, r3, #31
 801ab26:	617b      	str	r3, [r7, #20]
 801ab28:	4922      	ldr	r1, [pc, #136]	; (801abb4 <vTaskSwitchContext+0x10c>)
 801ab2a:	697a      	ldr	r2, [r7, #20]
 801ab2c:	4613      	mov	r3, r2
 801ab2e:	009b      	lsls	r3, r3, #2
 801ab30:	4413      	add	r3, r2
 801ab32:	009b      	lsls	r3, r3, #2
 801ab34:	440b      	add	r3, r1
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d10c      	bne.n	801ab56 <vTaskSwitchContext+0xae>
	__asm volatile
 801ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab40:	b672      	cpsid	i
 801ab42:	f383 8811 	msr	BASEPRI, r3
 801ab46:	f3bf 8f6f 	isb	sy
 801ab4a:	f3bf 8f4f 	dsb	sy
 801ab4e:	b662      	cpsie	i
 801ab50:	607b      	str	r3, [r7, #4]
}
 801ab52:	bf00      	nop
 801ab54:	e7fe      	b.n	801ab54 <vTaskSwitchContext+0xac>
 801ab56:	697a      	ldr	r2, [r7, #20]
 801ab58:	4613      	mov	r3, r2
 801ab5a:	009b      	lsls	r3, r3, #2
 801ab5c:	4413      	add	r3, r2
 801ab5e:	009b      	lsls	r3, r3, #2
 801ab60:	4a14      	ldr	r2, [pc, #80]	; (801abb4 <vTaskSwitchContext+0x10c>)
 801ab62:	4413      	add	r3, r2
 801ab64:	613b      	str	r3, [r7, #16]
 801ab66:	693b      	ldr	r3, [r7, #16]
 801ab68:	685b      	ldr	r3, [r3, #4]
 801ab6a:	685a      	ldr	r2, [r3, #4]
 801ab6c:	693b      	ldr	r3, [r7, #16]
 801ab6e:	605a      	str	r2, [r3, #4]
 801ab70:	693b      	ldr	r3, [r7, #16]
 801ab72:	685a      	ldr	r2, [r3, #4]
 801ab74:	693b      	ldr	r3, [r7, #16]
 801ab76:	3308      	adds	r3, #8
 801ab78:	429a      	cmp	r2, r3
 801ab7a:	d104      	bne.n	801ab86 <vTaskSwitchContext+0xde>
 801ab7c:	693b      	ldr	r3, [r7, #16]
 801ab7e:	685b      	ldr	r3, [r3, #4]
 801ab80:	685a      	ldr	r2, [r3, #4]
 801ab82:	693b      	ldr	r3, [r7, #16]
 801ab84:	605a      	str	r2, [r3, #4]
 801ab86:	693b      	ldr	r3, [r7, #16]
 801ab88:	685b      	ldr	r3, [r3, #4]
 801ab8a:	68db      	ldr	r3, [r3, #12]
 801ab8c:	4a07      	ldr	r2, [pc, #28]	; (801abac <vTaskSwitchContext+0x104>)
 801ab8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801ab90:	4b06      	ldr	r3, [pc, #24]	; (801abac <vTaskSwitchContext+0x104>)
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	3350      	adds	r3, #80	; 0x50
 801ab96:	4a08      	ldr	r2, [pc, #32]	; (801abb8 <vTaskSwitchContext+0x110>)
 801ab98:	6013      	str	r3, [r2, #0]
}
 801ab9a:	bf00      	nop
 801ab9c:	3720      	adds	r7, #32
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	bd80      	pop	{r7, pc}
 801aba2:	bf00      	nop
 801aba4:	20000688 	.word	0x20000688
 801aba8:	20000674 	.word	0x20000674
 801abac:	20000560 	.word	0x20000560
 801abb0:	20000668 	.word	0x20000668
 801abb4:	20000564 	.word	0x20000564
 801abb8:	20000064 	.word	0x20000064

0801abbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	b084      	sub	sp, #16
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
 801abc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d10c      	bne.n	801abe6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abd0:	b672      	cpsid	i
 801abd2:	f383 8811 	msr	BASEPRI, r3
 801abd6:	f3bf 8f6f 	isb	sy
 801abda:	f3bf 8f4f 	dsb	sy
 801abde:	b662      	cpsie	i
 801abe0:	60fb      	str	r3, [r7, #12]
}
 801abe2:	bf00      	nop
 801abe4:	e7fe      	b.n	801abe4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801abe6:	4b07      	ldr	r3, [pc, #28]	; (801ac04 <vTaskPlaceOnEventList+0x48>)
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	3318      	adds	r3, #24
 801abec:	4619      	mov	r1, r3
 801abee:	6878      	ldr	r0, [r7, #4]
 801abf0:	f7fe fb19 	bl	8019226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801abf4:	2101      	movs	r1, #1
 801abf6:	6838      	ldr	r0, [r7, #0]
 801abf8:	f000 fbaa 	bl	801b350 <prvAddCurrentTaskToDelayedList>
}
 801abfc:	bf00      	nop
 801abfe:	3710      	adds	r7, #16
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}
 801ac04:	20000560 	.word	0x20000560

0801ac08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b086      	sub	sp, #24
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	68db      	ldr	r3, [r3, #12]
 801ac14:	68db      	ldr	r3, [r3, #12]
 801ac16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801ac18:	693b      	ldr	r3, [r7, #16]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d10c      	bne.n	801ac38 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac22:	b672      	cpsid	i
 801ac24:	f383 8811 	msr	BASEPRI, r3
 801ac28:	f3bf 8f6f 	isb	sy
 801ac2c:	f3bf 8f4f 	dsb	sy
 801ac30:	b662      	cpsie	i
 801ac32:	60fb      	str	r3, [r7, #12]
}
 801ac34:	bf00      	nop
 801ac36:	e7fe      	b.n	801ac36 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801ac38:	693b      	ldr	r3, [r7, #16]
 801ac3a:	3318      	adds	r3, #24
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	f7fe fb2b 	bl	8019298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ac42:	4b1d      	ldr	r3, [pc, #116]	; (801acb8 <xTaskRemoveFromEventList+0xb0>)
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d11c      	bne.n	801ac84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801ac4a:	693b      	ldr	r3, [r7, #16]
 801ac4c:	3304      	adds	r3, #4
 801ac4e:	4618      	mov	r0, r3
 801ac50:	f7fe fb22 	bl	8019298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801ac54:	693b      	ldr	r3, [r7, #16]
 801ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac58:	2201      	movs	r2, #1
 801ac5a:	409a      	lsls	r2, r3
 801ac5c:	4b17      	ldr	r3, [pc, #92]	; (801acbc <xTaskRemoveFromEventList+0xb4>)
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	4313      	orrs	r3, r2
 801ac62:	4a16      	ldr	r2, [pc, #88]	; (801acbc <xTaskRemoveFromEventList+0xb4>)
 801ac64:	6013      	str	r3, [r2, #0]
 801ac66:	693b      	ldr	r3, [r7, #16]
 801ac68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac6a:	4613      	mov	r3, r2
 801ac6c:	009b      	lsls	r3, r3, #2
 801ac6e:	4413      	add	r3, r2
 801ac70:	009b      	lsls	r3, r3, #2
 801ac72:	4a13      	ldr	r2, [pc, #76]	; (801acc0 <xTaskRemoveFromEventList+0xb8>)
 801ac74:	441a      	add	r2, r3
 801ac76:	693b      	ldr	r3, [r7, #16]
 801ac78:	3304      	adds	r3, #4
 801ac7a:	4619      	mov	r1, r3
 801ac7c:	4610      	mov	r0, r2
 801ac7e:	f7fe faae 	bl	80191de <vListInsertEnd>
 801ac82:	e005      	b.n	801ac90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801ac84:	693b      	ldr	r3, [r7, #16]
 801ac86:	3318      	adds	r3, #24
 801ac88:	4619      	mov	r1, r3
 801ac8a:	480e      	ldr	r0, [pc, #56]	; (801acc4 <xTaskRemoveFromEventList+0xbc>)
 801ac8c:	f7fe faa7 	bl	80191de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801ac90:	693b      	ldr	r3, [r7, #16]
 801ac92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac94:	4b0c      	ldr	r3, [pc, #48]	; (801acc8 <xTaskRemoveFromEventList+0xc0>)
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac9a:	429a      	cmp	r2, r3
 801ac9c:	d905      	bls.n	801acaa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801ac9e:	2301      	movs	r3, #1
 801aca0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801aca2:	4b0a      	ldr	r3, [pc, #40]	; (801accc <xTaskRemoveFromEventList+0xc4>)
 801aca4:	2201      	movs	r2, #1
 801aca6:	601a      	str	r2, [r3, #0]
 801aca8:	e001      	b.n	801acae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801acaa:	2300      	movs	r3, #0
 801acac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801acae:	697b      	ldr	r3, [r7, #20]
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3718      	adds	r7, #24
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}
 801acb8:	20000688 	.word	0x20000688
 801acbc:	20000668 	.word	0x20000668
 801acc0:	20000564 	.word	0x20000564
 801acc4:	20000620 	.word	0x20000620
 801acc8:	20000560 	.word	0x20000560
 801accc:	20000674 	.word	0x20000674

0801acd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801acd0:	b480      	push	{r7}
 801acd2:	b083      	sub	sp, #12
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801acd8:	4b06      	ldr	r3, [pc, #24]	; (801acf4 <vTaskInternalSetTimeOutState+0x24>)
 801acda:	681a      	ldr	r2, [r3, #0]
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801ace0:	4b05      	ldr	r3, [pc, #20]	; (801acf8 <vTaskInternalSetTimeOutState+0x28>)
 801ace2:	681a      	ldr	r2, [r3, #0]
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	605a      	str	r2, [r3, #4]
}
 801ace8:	bf00      	nop
 801acea:	370c      	adds	r7, #12
 801acec:	46bd      	mov	sp, r7
 801acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf2:	4770      	bx	lr
 801acf4:	20000678 	.word	0x20000678
 801acf8:	20000664 	.word	0x20000664

0801acfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801acfc:	b580      	push	{r7, lr}
 801acfe:	b088      	sub	sp, #32
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
 801ad04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d10c      	bne.n	801ad26 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad10:	b672      	cpsid	i
 801ad12:	f383 8811 	msr	BASEPRI, r3
 801ad16:	f3bf 8f6f 	isb	sy
 801ad1a:	f3bf 8f4f 	dsb	sy
 801ad1e:	b662      	cpsie	i
 801ad20:	613b      	str	r3, [r7, #16]
}
 801ad22:	bf00      	nop
 801ad24:	e7fe      	b.n	801ad24 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801ad26:	683b      	ldr	r3, [r7, #0]
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d10c      	bne.n	801ad46 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad30:	b672      	cpsid	i
 801ad32:	f383 8811 	msr	BASEPRI, r3
 801ad36:	f3bf 8f6f 	isb	sy
 801ad3a:	f3bf 8f4f 	dsb	sy
 801ad3e:	b662      	cpsie	i
 801ad40:	60fb      	str	r3, [r7, #12]
}
 801ad42:	bf00      	nop
 801ad44:	e7fe      	b.n	801ad44 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801ad46:	f000 fc79 	bl	801b63c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801ad4a:	4b1d      	ldr	r3, [pc, #116]	; (801adc0 <xTaskCheckForTimeOut+0xc4>)
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	685b      	ldr	r3, [r3, #4]
 801ad54:	69ba      	ldr	r2, [r7, #24]
 801ad56:	1ad3      	subs	r3, r2, r3
 801ad58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ad62:	d102      	bne.n	801ad6a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801ad64:	2300      	movs	r3, #0
 801ad66:	61fb      	str	r3, [r7, #28]
 801ad68:	e023      	b.n	801adb2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	681a      	ldr	r2, [r3, #0]
 801ad6e:	4b15      	ldr	r3, [pc, #84]	; (801adc4 <xTaskCheckForTimeOut+0xc8>)
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	429a      	cmp	r2, r3
 801ad74:	d007      	beq.n	801ad86 <xTaskCheckForTimeOut+0x8a>
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	685b      	ldr	r3, [r3, #4]
 801ad7a:	69ba      	ldr	r2, [r7, #24]
 801ad7c:	429a      	cmp	r2, r3
 801ad7e:	d302      	bcc.n	801ad86 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801ad80:	2301      	movs	r3, #1
 801ad82:	61fb      	str	r3, [r7, #28]
 801ad84:	e015      	b.n	801adb2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	697a      	ldr	r2, [r7, #20]
 801ad8c:	429a      	cmp	r2, r3
 801ad8e:	d20b      	bcs.n	801ada8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801ad90:	683b      	ldr	r3, [r7, #0]
 801ad92:	681a      	ldr	r2, [r3, #0]
 801ad94:	697b      	ldr	r3, [r7, #20]
 801ad96:	1ad2      	subs	r2, r2, r3
 801ad98:	683b      	ldr	r3, [r7, #0]
 801ad9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801ad9c:	6878      	ldr	r0, [r7, #4]
 801ad9e:	f7ff ff97 	bl	801acd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801ada2:	2300      	movs	r3, #0
 801ada4:	61fb      	str	r3, [r7, #28]
 801ada6:	e004      	b.n	801adb2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801ada8:	683b      	ldr	r3, [r7, #0]
 801adaa:	2200      	movs	r2, #0
 801adac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801adae:	2301      	movs	r3, #1
 801adb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801adb2:	f000 fc77 	bl	801b6a4 <vPortExitCritical>

	return xReturn;
 801adb6:	69fb      	ldr	r3, [r7, #28]
}
 801adb8:	4618      	mov	r0, r3
 801adba:	3720      	adds	r7, #32
 801adbc:	46bd      	mov	sp, r7
 801adbe:	bd80      	pop	{r7, pc}
 801adc0:	20000664 	.word	0x20000664
 801adc4:	20000678 	.word	0x20000678

0801adc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801adc8:	b480      	push	{r7}
 801adca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801adcc:	4b03      	ldr	r3, [pc, #12]	; (801addc <vTaskMissedYield+0x14>)
 801adce:	2201      	movs	r2, #1
 801add0:	601a      	str	r2, [r3, #0]
}
 801add2:	bf00      	nop
 801add4:	46bd      	mov	sp, r7
 801add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adda:	4770      	bx	lr
 801addc:	20000674 	.word	0x20000674

0801ade0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b082      	sub	sp, #8
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801ade8:	f000 f854 	bl	801ae94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801adec:	4b07      	ldr	r3, [pc, #28]	; (801ae0c <prvIdleTask+0x2c>)
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	2b01      	cmp	r3, #1
 801adf2:	d907      	bls.n	801ae04 <prvIdleTask+0x24>
			{
				taskYIELD();
 801adf4:	4b06      	ldr	r3, [pc, #24]	; (801ae10 <prvIdleTask+0x30>)
 801adf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801adfa:	601a      	str	r2, [r3, #0]
 801adfc:	f3bf 8f4f 	dsb	sy
 801ae00:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801ae04:	f7e5 fd4c 	bl	80008a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801ae08:	e7ee      	b.n	801ade8 <prvIdleTask+0x8>
 801ae0a:	bf00      	nop
 801ae0c:	20000564 	.word	0x20000564
 801ae10:	e000ed04 	.word	0xe000ed04

0801ae14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801ae14:	b580      	push	{r7, lr}
 801ae16:	b082      	sub	sp, #8
 801ae18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	607b      	str	r3, [r7, #4]
 801ae1e:	e00c      	b.n	801ae3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801ae20:	687a      	ldr	r2, [r7, #4]
 801ae22:	4613      	mov	r3, r2
 801ae24:	009b      	lsls	r3, r3, #2
 801ae26:	4413      	add	r3, r2
 801ae28:	009b      	lsls	r3, r3, #2
 801ae2a:	4a12      	ldr	r2, [pc, #72]	; (801ae74 <prvInitialiseTaskLists+0x60>)
 801ae2c:	4413      	add	r3, r2
 801ae2e:	4618      	mov	r0, r3
 801ae30:	f7fe f9a8 	bl	8019184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	3301      	adds	r3, #1
 801ae38:	607b      	str	r3, [r7, #4]
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	2b06      	cmp	r3, #6
 801ae3e:	d9ef      	bls.n	801ae20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801ae40:	480d      	ldr	r0, [pc, #52]	; (801ae78 <prvInitialiseTaskLists+0x64>)
 801ae42:	f7fe f99f 	bl	8019184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801ae46:	480d      	ldr	r0, [pc, #52]	; (801ae7c <prvInitialiseTaskLists+0x68>)
 801ae48:	f7fe f99c 	bl	8019184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801ae4c:	480c      	ldr	r0, [pc, #48]	; (801ae80 <prvInitialiseTaskLists+0x6c>)
 801ae4e:	f7fe f999 	bl	8019184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801ae52:	480c      	ldr	r0, [pc, #48]	; (801ae84 <prvInitialiseTaskLists+0x70>)
 801ae54:	f7fe f996 	bl	8019184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801ae58:	480b      	ldr	r0, [pc, #44]	; (801ae88 <prvInitialiseTaskLists+0x74>)
 801ae5a:	f7fe f993 	bl	8019184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801ae5e:	4b0b      	ldr	r3, [pc, #44]	; (801ae8c <prvInitialiseTaskLists+0x78>)
 801ae60:	4a05      	ldr	r2, [pc, #20]	; (801ae78 <prvInitialiseTaskLists+0x64>)
 801ae62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801ae64:	4b0a      	ldr	r3, [pc, #40]	; (801ae90 <prvInitialiseTaskLists+0x7c>)
 801ae66:	4a05      	ldr	r2, [pc, #20]	; (801ae7c <prvInitialiseTaskLists+0x68>)
 801ae68:	601a      	str	r2, [r3, #0]
}
 801ae6a:	bf00      	nop
 801ae6c:	3708      	adds	r7, #8
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	bd80      	pop	{r7, pc}
 801ae72:	bf00      	nop
 801ae74:	20000564 	.word	0x20000564
 801ae78:	200005f0 	.word	0x200005f0
 801ae7c:	20000604 	.word	0x20000604
 801ae80:	20000620 	.word	0x20000620
 801ae84:	20000634 	.word	0x20000634
 801ae88:	2000064c 	.word	0x2000064c
 801ae8c:	20000618 	.word	0x20000618
 801ae90:	2000061c 	.word	0x2000061c

0801ae94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b082      	sub	sp, #8
 801ae98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801ae9a:	e019      	b.n	801aed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801ae9c:	f000 fbce 	bl	801b63c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aea0:	4b10      	ldr	r3, [pc, #64]	; (801aee4 <prvCheckTasksWaitingTermination+0x50>)
 801aea2:	68db      	ldr	r3, [r3, #12]
 801aea4:	68db      	ldr	r3, [r3, #12]
 801aea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	3304      	adds	r3, #4
 801aeac:	4618      	mov	r0, r3
 801aeae:	f7fe f9f3 	bl	8019298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801aeb2:	4b0d      	ldr	r3, [pc, #52]	; (801aee8 <prvCheckTasksWaitingTermination+0x54>)
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	3b01      	subs	r3, #1
 801aeb8:	4a0b      	ldr	r2, [pc, #44]	; (801aee8 <prvCheckTasksWaitingTermination+0x54>)
 801aeba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801aebc:	4b0b      	ldr	r3, [pc, #44]	; (801aeec <prvCheckTasksWaitingTermination+0x58>)
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	3b01      	subs	r3, #1
 801aec2:	4a0a      	ldr	r2, [pc, #40]	; (801aeec <prvCheckTasksWaitingTermination+0x58>)
 801aec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801aec6:	f000 fbed 	bl	801b6a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801aeca:	6878      	ldr	r0, [r7, #4]
 801aecc:	f000 f810 	bl	801aef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801aed0:	4b06      	ldr	r3, [pc, #24]	; (801aeec <prvCheckTasksWaitingTermination+0x58>)
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d1e1      	bne.n	801ae9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801aed8:	bf00      	nop
 801aeda:	bf00      	nop
 801aedc:	3708      	adds	r7, #8
 801aede:	46bd      	mov	sp, r7
 801aee0:	bd80      	pop	{r7, pc}
 801aee2:	bf00      	nop
 801aee4:	20000634 	.word	0x20000634
 801aee8:	20000660 	.word	0x20000660
 801aeec:	20000648 	.word	0x20000648

0801aef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b084      	sub	sp, #16
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	3350      	adds	r3, #80	; 0x50
 801aefc:	4618      	mov	r0, r3
 801aefe:	f001 fc63 	bl	801c7c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d108      	bne.n	801af1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af10:	4618      	mov	r0, r3
 801af12:	f000 fd8f 	bl	801ba34 <vPortFree>
				vPortFree( pxTCB );
 801af16:	6878      	ldr	r0, [r7, #4]
 801af18:	f000 fd8c 	bl	801ba34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801af1c:	e01a      	b.n	801af54 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 801af24:	2b01      	cmp	r3, #1
 801af26:	d103      	bne.n	801af30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801af28:	6878      	ldr	r0, [r7, #4]
 801af2a:	f000 fd83 	bl	801ba34 <vPortFree>
	}
 801af2e:	e011      	b.n	801af54 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 801af36:	2b02      	cmp	r3, #2
 801af38:	d00c      	beq.n	801af54 <prvDeleteTCB+0x64>
	__asm volatile
 801af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af3e:	b672      	cpsid	i
 801af40:	f383 8811 	msr	BASEPRI, r3
 801af44:	f3bf 8f6f 	isb	sy
 801af48:	f3bf 8f4f 	dsb	sy
 801af4c:	b662      	cpsie	i
 801af4e:	60fb      	str	r3, [r7, #12]
}
 801af50:	bf00      	nop
 801af52:	e7fe      	b.n	801af52 <prvDeleteTCB+0x62>
	}
 801af54:	bf00      	nop
 801af56:	3710      	adds	r7, #16
 801af58:	46bd      	mov	sp, r7
 801af5a:	bd80      	pop	{r7, pc}

0801af5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801af5c:	b480      	push	{r7}
 801af5e:	b083      	sub	sp, #12
 801af60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801af62:	4b0c      	ldr	r3, [pc, #48]	; (801af94 <prvResetNextTaskUnblockTime+0x38>)
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d104      	bne.n	801af76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801af6c:	4b0a      	ldr	r3, [pc, #40]	; (801af98 <prvResetNextTaskUnblockTime+0x3c>)
 801af6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801af72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801af74:	e008      	b.n	801af88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801af76:	4b07      	ldr	r3, [pc, #28]	; (801af94 <prvResetNextTaskUnblockTime+0x38>)
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	68db      	ldr	r3, [r3, #12]
 801af7c:	68db      	ldr	r3, [r3, #12]
 801af7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	685b      	ldr	r3, [r3, #4]
 801af84:	4a04      	ldr	r2, [pc, #16]	; (801af98 <prvResetNextTaskUnblockTime+0x3c>)
 801af86:	6013      	str	r3, [r2, #0]
}
 801af88:	bf00      	nop
 801af8a:	370c      	adds	r7, #12
 801af8c:	46bd      	mov	sp, r7
 801af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af92:	4770      	bx	lr
 801af94:	20000618 	.word	0x20000618
 801af98:	20000680 	.word	0x20000680

0801af9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801af9c:	b480      	push	{r7}
 801af9e:	b083      	sub	sp, #12
 801afa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801afa2:	4b0b      	ldr	r3, [pc, #44]	; (801afd0 <xTaskGetSchedulerState+0x34>)
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d102      	bne.n	801afb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801afaa:	2301      	movs	r3, #1
 801afac:	607b      	str	r3, [r7, #4]
 801afae:	e008      	b.n	801afc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801afb0:	4b08      	ldr	r3, [pc, #32]	; (801afd4 <xTaskGetSchedulerState+0x38>)
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d102      	bne.n	801afbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801afb8:	2302      	movs	r3, #2
 801afba:	607b      	str	r3, [r7, #4]
 801afbc:	e001      	b.n	801afc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801afbe:	2300      	movs	r3, #0
 801afc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801afc2:	687b      	ldr	r3, [r7, #4]
	}
 801afc4:	4618      	mov	r0, r3
 801afc6:	370c      	adds	r7, #12
 801afc8:	46bd      	mov	sp, r7
 801afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afce:	4770      	bx	lr
 801afd0:	2000066c 	.word	0x2000066c
 801afd4:	20000688 	.word	0x20000688

0801afd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b084      	sub	sp, #16
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801afe4:	2300      	movs	r3, #0
 801afe6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d069      	beq.n	801b0c2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801afee:	68bb      	ldr	r3, [r7, #8]
 801aff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aff2:	4b36      	ldr	r3, [pc, #216]	; (801b0cc <xTaskPriorityInherit+0xf4>)
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aff8:	429a      	cmp	r2, r3
 801affa:	d259      	bcs.n	801b0b0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801affc:	68bb      	ldr	r3, [r7, #8]
 801affe:	699b      	ldr	r3, [r3, #24]
 801b000:	2b00      	cmp	r3, #0
 801b002:	db06      	blt.n	801b012 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b004:	4b31      	ldr	r3, [pc, #196]	; (801b0cc <xTaskPriorityInherit+0xf4>)
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b00a:	f1c3 0207 	rsb	r2, r3, #7
 801b00e:	68bb      	ldr	r3, [r7, #8]
 801b010:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b012:	68bb      	ldr	r3, [r7, #8]
 801b014:	6959      	ldr	r1, [r3, #20]
 801b016:	68bb      	ldr	r3, [r7, #8]
 801b018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b01a:	4613      	mov	r3, r2
 801b01c:	009b      	lsls	r3, r3, #2
 801b01e:	4413      	add	r3, r2
 801b020:	009b      	lsls	r3, r3, #2
 801b022:	4a2b      	ldr	r2, [pc, #172]	; (801b0d0 <xTaskPriorityInherit+0xf8>)
 801b024:	4413      	add	r3, r2
 801b026:	4299      	cmp	r1, r3
 801b028:	d13a      	bne.n	801b0a0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b02a:	68bb      	ldr	r3, [r7, #8]
 801b02c:	3304      	adds	r3, #4
 801b02e:	4618      	mov	r0, r3
 801b030:	f7fe f932 	bl	8019298 <uxListRemove>
 801b034:	4603      	mov	r3, r0
 801b036:	2b00      	cmp	r3, #0
 801b038:	d115      	bne.n	801b066 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801b03a:	68bb      	ldr	r3, [r7, #8]
 801b03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b03e:	4924      	ldr	r1, [pc, #144]	; (801b0d0 <xTaskPriorityInherit+0xf8>)
 801b040:	4613      	mov	r3, r2
 801b042:	009b      	lsls	r3, r3, #2
 801b044:	4413      	add	r3, r2
 801b046:	009b      	lsls	r3, r3, #2
 801b048:	440b      	add	r3, r1
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d10a      	bne.n	801b066 <xTaskPriorityInherit+0x8e>
 801b050:	68bb      	ldr	r3, [r7, #8]
 801b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b054:	2201      	movs	r2, #1
 801b056:	fa02 f303 	lsl.w	r3, r2, r3
 801b05a:	43da      	mvns	r2, r3
 801b05c:	4b1d      	ldr	r3, [pc, #116]	; (801b0d4 <xTaskPriorityInherit+0xfc>)
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	4013      	ands	r3, r2
 801b062:	4a1c      	ldr	r2, [pc, #112]	; (801b0d4 <xTaskPriorityInherit+0xfc>)
 801b064:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b066:	4b19      	ldr	r3, [pc, #100]	; (801b0cc <xTaskPriorityInherit+0xf4>)
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b06c:	68bb      	ldr	r3, [r7, #8]
 801b06e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b070:	68bb      	ldr	r3, [r7, #8]
 801b072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b074:	2201      	movs	r2, #1
 801b076:	409a      	lsls	r2, r3
 801b078:	4b16      	ldr	r3, [pc, #88]	; (801b0d4 <xTaskPriorityInherit+0xfc>)
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	4313      	orrs	r3, r2
 801b07e:	4a15      	ldr	r2, [pc, #84]	; (801b0d4 <xTaskPriorityInherit+0xfc>)
 801b080:	6013      	str	r3, [r2, #0]
 801b082:	68bb      	ldr	r3, [r7, #8]
 801b084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b086:	4613      	mov	r3, r2
 801b088:	009b      	lsls	r3, r3, #2
 801b08a:	4413      	add	r3, r2
 801b08c:	009b      	lsls	r3, r3, #2
 801b08e:	4a10      	ldr	r2, [pc, #64]	; (801b0d0 <xTaskPriorityInherit+0xf8>)
 801b090:	441a      	add	r2, r3
 801b092:	68bb      	ldr	r3, [r7, #8]
 801b094:	3304      	adds	r3, #4
 801b096:	4619      	mov	r1, r3
 801b098:	4610      	mov	r0, r2
 801b09a:	f7fe f8a0 	bl	80191de <vListInsertEnd>
 801b09e:	e004      	b.n	801b0aa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b0a0:	4b0a      	ldr	r3, [pc, #40]	; (801b0cc <xTaskPriorityInherit+0xf4>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0a6:	68bb      	ldr	r3, [r7, #8]
 801b0a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b0aa:	2301      	movs	r3, #1
 801b0ac:	60fb      	str	r3, [r7, #12]
 801b0ae:	e008      	b.n	801b0c2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b0b0:	68bb      	ldr	r3, [r7, #8]
 801b0b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b0b4:	4b05      	ldr	r3, [pc, #20]	; (801b0cc <xTaskPriorityInherit+0xf4>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0ba:	429a      	cmp	r2, r3
 801b0bc:	d201      	bcs.n	801b0c2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b0be:	2301      	movs	r3, #1
 801b0c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b0c2:	68fb      	ldr	r3, [r7, #12]
	}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	3710      	adds	r7, #16
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	bd80      	pop	{r7, pc}
 801b0cc:	20000560 	.word	0x20000560
 801b0d0:	20000564 	.word	0x20000564
 801b0d4:	20000668 	.word	0x20000668

0801b0d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b0d8:	b580      	push	{r7, lr}
 801b0da:	b086      	sub	sp, #24
 801b0dc:	af00      	add	r7, sp, #0
 801b0de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d072      	beq.n	801b1d4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b0ee:	4b3c      	ldr	r3, [pc, #240]	; (801b1e0 <xTaskPriorityDisinherit+0x108>)
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	693a      	ldr	r2, [r7, #16]
 801b0f4:	429a      	cmp	r2, r3
 801b0f6:	d00c      	beq.n	801b112 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801b0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0fc:	b672      	cpsid	i
 801b0fe:	f383 8811 	msr	BASEPRI, r3
 801b102:	f3bf 8f6f 	isb	sy
 801b106:	f3bf 8f4f 	dsb	sy
 801b10a:	b662      	cpsie	i
 801b10c:	60fb      	str	r3, [r7, #12]
}
 801b10e:	bf00      	nop
 801b110:	e7fe      	b.n	801b110 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801b112:	693b      	ldr	r3, [r7, #16]
 801b114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b116:	2b00      	cmp	r3, #0
 801b118:	d10c      	bne.n	801b134 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b11e:	b672      	cpsid	i
 801b120:	f383 8811 	msr	BASEPRI, r3
 801b124:	f3bf 8f6f 	isb	sy
 801b128:	f3bf 8f4f 	dsb	sy
 801b12c:	b662      	cpsie	i
 801b12e:	60bb      	str	r3, [r7, #8]
}
 801b130:	bf00      	nop
 801b132:	e7fe      	b.n	801b132 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801b134:	693b      	ldr	r3, [r7, #16]
 801b136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b138:	1e5a      	subs	r2, r3, #1
 801b13a:	693b      	ldr	r3, [r7, #16]
 801b13c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b13e:	693b      	ldr	r3, [r7, #16]
 801b140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b142:	693b      	ldr	r3, [r7, #16]
 801b144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b146:	429a      	cmp	r2, r3
 801b148:	d044      	beq.n	801b1d4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b14a:	693b      	ldr	r3, [r7, #16]
 801b14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d140      	bne.n	801b1d4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b152:	693b      	ldr	r3, [r7, #16]
 801b154:	3304      	adds	r3, #4
 801b156:	4618      	mov	r0, r3
 801b158:	f7fe f89e 	bl	8019298 <uxListRemove>
 801b15c:	4603      	mov	r3, r0
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d115      	bne.n	801b18e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801b162:	693b      	ldr	r3, [r7, #16]
 801b164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b166:	491f      	ldr	r1, [pc, #124]	; (801b1e4 <xTaskPriorityDisinherit+0x10c>)
 801b168:	4613      	mov	r3, r2
 801b16a:	009b      	lsls	r3, r3, #2
 801b16c:	4413      	add	r3, r2
 801b16e:	009b      	lsls	r3, r3, #2
 801b170:	440b      	add	r3, r1
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d10a      	bne.n	801b18e <xTaskPriorityDisinherit+0xb6>
 801b178:	693b      	ldr	r3, [r7, #16]
 801b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b17c:	2201      	movs	r2, #1
 801b17e:	fa02 f303 	lsl.w	r3, r2, r3
 801b182:	43da      	mvns	r2, r3
 801b184:	4b18      	ldr	r3, [pc, #96]	; (801b1e8 <xTaskPriorityDisinherit+0x110>)
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	4013      	ands	r3, r2
 801b18a:	4a17      	ldr	r2, [pc, #92]	; (801b1e8 <xTaskPriorityDisinherit+0x110>)
 801b18c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b18e:	693b      	ldr	r3, [r7, #16]
 801b190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b192:	693b      	ldr	r3, [r7, #16]
 801b194:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b196:	693b      	ldr	r3, [r7, #16]
 801b198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b19a:	f1c3 0207 	rsb	r2, r3, #7
 801b19e:	693b      	ldr	r3, [r7, #16]
 801b1a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b1a2:	693b      	ldr	r3, [r7, #16]
 801b1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1a6:	2201      	movs	r2, #1
 801b1a8:	409a      	lsls	r2, r3
 801b1aa:	4b0f      	ldr	r3, [pc, #60]	; (801b1e8 <xTaskPriorityDisinherit+0x110>)
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	4313      	orrs	r3, r2
 801b1b0:	4a0d      	ldr	r2, [pc, #52]	; (801b1e8 <xTaskPriorityDisinherit+0x110>)
 801b1b2:	6013      	str	r3, [r2, #0]
 801b1b4:	693b      	ldr	r3, [r7, #16]
 801b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b1b8:	4613      	mov	r3, r2
 801b1ba:	009b      	lsls	r3, r3, #2
 801b1bc:	4413      	add	r3, r2
 801b1be:	009b      	lsls	r3, r3, #2
 801b1c0:	4a08      	ldr	r2, [pc, #32]	; (801b1e4 <xTaskPriorityDisinherit+0x10c>)
 801b1c2:	441a      	add	r2, r3
 801b1c4:	693b      	ldr	r3, [r7, #16]
 801b1c6:	3304      	adds	r3, #4
 801b1c8:	4619      	mov	r1, r3
 801b1ca:	4610      	mov	r0, r2
 801b1cc:	f7fe f807 	bl	80191de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b1d0:	2301      	movs	r3, #1
 801b1d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b1d4:	697b      	ldr	r3, [r7, #20]
	}
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	3718      	adds	r7, #24
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	bd80      	pop	{r7, pc}
 801b1de:	bf00      	nop
 801b1e0:	20000560 	.word	0x20000560
 801b1e4:	20000564 	.word	0x20000564
 801b1e8:	20000668 	.word	0x20000668

0801b1ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b088      	sub	sp, #32
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
 801b1f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b1fa:	2301      	movs	r3, #1
 801b1fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	2b00      	cmp	r3, #0
 801b202:	f000 8087 	beq.w	801b314 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b206:	69bb      	ldr	r3, [r7, #24]
 801b208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d10c      	bne.n	801b228 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b212:	b672      	cpsid	i
 801b214:	f383 8811 	msr	BASEPRI, r3
 801b218:	f3bf 8f6f 	isb	sy
 801b21c:	f3bf 8f4f 	dsb	sy
 801b220:	b662      	cpsie	i
 801b222:	60fb      	str	r3, [r7, #12]
}
 801b224:	bf00      	nop
 801b226:	e7fe      	b.n	801b226 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b228:	69bb      	ldr	r3, [r7, #24]
 801b22a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b22c:	683a      	ldr	r2, [r7, #0]
 801b22e:	429a      	cmp	r2, r3
 801b230:	d902      	bls.n	801b238 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b232:	683b      	ldr	r3, [r7, #0]
 801b234:	61fb      	str	r3, [r7, #28]
 801b236:	e002      	b.n	801b23e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b238:	69bb      	ldr	r3, [r7, #24]
 801b23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b23c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b23e:	69bb      	ldr	r3, [r7, #24]
 801b240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b242:	69fa      	ldr	r2, [r7, #28]
 801b244:	429a      	cmp	r2, r3
 801b246:	d065      	beq.n	801b314 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b248:	69bb      	ldr	r3, [r7, #24]
 801b24a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b24c:	697a      	ldr	r2, [r7, #20]
 801b24e:	429a      	cmp	r2, r3
 801b250:	d160      	bne.n	801b314 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b252:	4b32      	ldr	r3, [pc, #200]	; (801b31c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	69ba      	ldr	r2, [r7, #24]
 801b258:	429a      	cmp	r2, r3
 801b25a:	d10c      	bne.n	801b276 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 801b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b260:	b672      	cpsid	i
 801b262:	f383 8811 	msr	BASEPRI, r3
 801b266:	f3bf 8f6f 	isb	sy
 801b26a:	f3bf 8f4f 	dsb	sy
 801b26e:	b662      	cpsie	i
 801b270:	60bb      	str	r3, [r7, #8]
}
 801b272:	bf00      	nop
 801b274:	e7fe      	b.n	801b274 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801b276:	69bb      	ldr	r3, [r7, #24]
 801b278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b27a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801b27c:	69bb      	ldr	r3, [r7, #24]
 801b27e:	69fa      	ldr	r2, [r7, #28]
 801b280:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b282:	69bb      	ldr	r3, [r7, #24]
 801b284:	699b      	ldr	r3, [r3, #24]
 801b286:	2b00      	cmp	r3, #0
 801b288:	db04      	blt.n	801b294 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b28a:	69fb      	ldr	r3, [r7, #28]
 801b28c:	f1c3 0207 	rsb	r2, r3, #7
 801b290:	69bb      	ldr	r3, [r7, #24]
 801b292:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b294:	69bb      	ldr	r3, [r7, #24]
 801b296:	6959      	ldr	r1, [r3, #20]
 801b298:	693a      	ldr	r2, [r7, #16]
 801b29a:	4613      	mov	r3, r2
 801b29c:	009b      	lsls	r3, r3, #2
 801b29e:	4413      	add	r3, r2
 801b2a0:	009b      	lsls	r3, r3, #2
 801b2a2:	4a1f      	ldr	r2, [pc, #124]	; (801b320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801b2a4:	4413      	add	r3, r2
 801b2a6:	4299      	cmp	r1, r3
 801b2a8:	d134      	bne.n	801b314 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b2aa:	69bb      	ldr	r3, [r7, #24]
 801b2ac:	3304      	adds	r3, #4
 801b2ae:	4618      	mov	r0, r3
 801b2b0:	f7fd fff2 	bl	8019298 <uxListRemove>
 801b2b4:	4603      	mov	r3, r0
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d115      	bne.n	801b2e6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801b2ba:	69bb      	ldr	r3, [r7, #24]
 801b2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2be:	4918      	ldr	r1, [pc, #96]	; (801b320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801b2c0:	4613      	mov	r3, r2
 801b2c2:	009b      	lsls	r3, r3, #2
 801b2c4:	4413      	add	r3, r2
 801b2c6:	009b      	lsls	r3, r3, #2
 801b2c8:	440b      	add	r3, r1
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d10a      	bne.n	801b2e6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 801b2d0:	69bb      	ldr	r3, [r7, #24]
 801b2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2d4:	2201      	movs	r2, #1
 801b2d6:	fa02 f303 	lsl.w	r3, r2, r3
 801b2da:	43da      	mvns	r2, r3
 801b2dc:	4b11      	ldr	r3, [pc, #68]	; (801b324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	4013      	ands	r3, r2
 801b2e2:	4a10      	ldr	r2, [pc, #64]	; (801b324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801b2e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801b2e6:	69bb      	ldr	r3, [r7, #24]
 801b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2ea:	2201      	movs	r2, #1
 801b2ec:	409a      	lsls	r2, r3
 801b2ee:	4b0d      	ldr	r3, [pc, #52]	; (801b324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	4313      	orrs	r3, r2
 801b2f4:	4a0b      	ldr	r2, [pc, #44]	; (801b324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801b2f6:	6013      	str	r3, [r2, #0]
 801b2f8:	69bb      	ldr	r3, [r7, #24]
 801b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2fc:	4613      	mov	r3, r2
 801b2fe:	009b      	lsls	r3, r3, #2
 801b300:	4413      	add	r3, r2
 801b302:	009b      	lsls	r3, r3, #2
 801b304:	4a06      	ldr	r2, [pc, #24]	; (801b320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801b306:	441a      	add	r2, r3
 801b308:	69bb      	ldr	r3, [r7, #24]
 801b30a:	3304      	adds	r3, #4
 801b30c:	4619      	mov	r1, r3
 801b30e:	4610      	mov	r0, r2
 801b310:	f7fd ff65 	bl	80191de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b314:	bf00      	nop
 801b316:	3720      	adds	r7, #32
 801b318:	46bd      	mov	sp, r7
 801b31a:	bd80      	pop	{r7, pc}
 801b31c:	20000560 	.word	0x20000560
 801b320:	20000564 	.word	0x20000564
 801b324:	20000668 	.word	0x20000668

0801b328 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801b328:	b480      	push	{r7}
 801b32a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801b32c:	4b07      	ldr	r3, [pc, #28]	; (801b34c <pvTaskIncrementMutexHeldCount+0x24>)
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d004      	beq.n	801b33e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801b334:	4b05      	ldr	r3, [pc, #20]	; (801b34c <pvTaskIncrementMutexHeldCount+0x24>)
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801b33a:	3201      	adds	r2, #1
 801b33c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801b33e:	4b03      	ldr	r3, [pc, #12]	; (801b34c <pvTaskIncrementMutexHeldCount+0x24>)
 801b340:	681b      	ldr	r3, [r3, #0]
	}
 801b342:	4618      	mov	r0, r3
 801b344:	46bd      	mov	sp, r7
 801b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b34a:	4770      	bx	lr
 801b34c:	20000560 	.word	0x20000560

0801b350 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b084      	sub	sp, #16
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
 801b358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b35a:	4b29      	ldr	r3, [pc, #164]	; (801b400 <prvAddCurrentTaskToDelayedList+0xb0>)
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b360:	4b28      	ldr	r3, [pc, #160]	; (801b404 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	3304      	adds	r3, #4
 801b366:	4618      	mov	r0, r3
 801b368:	f7fd ff96 	bl	8019298 <uxListRemove>
 801b36c:	4603      	mov	r3, r0
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d10b      	bne.n	801b38a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801b372:	4b24      	ldr	r3, [pc, #144]	; (801b404 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b378:	2201      	movs	r2, #1
 801b37a:	fa02 f303 	lsl.w	r3, r2, r3
 801b37e:	43da      	mvns	r2, r3
 801b380:	4b21      	ldr	r3, [pc, #132]	; (801b408 <prvAddCurrentTaskToDelayedList+0xb8>)
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	4013      	ands	r3, r2
 801b386:	4a20      	ldr	r2, [pc, #128]	; (801b408 <prvAddCurrentTaskToDelayedList+0xb8>)
 801b388:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b390:	d10a      	bne.n	801b3a8 <prvAddCurrentTaskToDelayedList+0x58>
 801b392:	683b      	ldr	r3, [r7, #0]
 801b394:	2b00      	cmp	r3, #0
 801b396:	d007      	beq.n	801b3a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b398:	4b1a      	ldr	r3, [pc, #104]	; (801b404 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	3304      	adds	r3, #4
 801b39e:	4619      	mov	r1, r3
 801b3a0:	481a      	ldr	r0, [pc, #104]	; (801b40c <prvAddCurrentTaskToDelayedList+0xbc>)
 801b3a2:	f7fd ff1c 	bl	80191de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b3a6:	e026      	b.n	801b3f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b3a8:	68fa      	ldr	r2, [r7, #12]
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	4413      	add	r3, r2
 801b3ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b3b0:	4b14      	ldr	r3, [pc, #80]	; (801b404 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	68ba      	ldr	r2, [r7, #8]
 801b3b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b3b8:	68ba      	ldr	r2, [r7, #8]
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	429a      	cmp	r2, r3
 801b3be:	d209      	bcs.n	801b3d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b3c0:	4b13      	ldr	r3, [pc, #76]	; (801b410 <prvAddCurrentTaskToDelayedList+0xc0>)
 801b3c2:	681a      	ldr	r2, [r3, #0]
 801b3c4:	4b0f      	ldr	r3, [pc, #60]	; (801b404 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	3304      	adds	r3, #4
 801b3ca:	4619      	mov	r1, r3
 801b3cc:	4610      	mov	r0, r2
 801b3ce:	f7fd ff2a 	bl	8019226 <vListInsert>
}
 801b3d2:	e010      	b.n	801b3f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b3d4:	4b0f      	ldr	r3, [pc, #60]	; (801b414 <prvAddCurrentTaskToDelayedList+0xc4>)
 801b3d6:	681a      	ldr	r2, [r3, #0]
 801b3d8:	4b0a      	ldr	r3, [pc, #40]	; (801b404 <prvAddCurrentTaskToDelayedList+0xb4>)
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	3304      	adds	r3, #4
 801b3de:	4619      	mov	r1, r3
 801b3e0:	4610      	mov	r0, r2
 801b3e2:	f7fd ff20 	bl	8019226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801b3e6:	4b0c      	ldr	r3, [pc, #48]	; (801b418 <prvAddCurrentTaskToDelayedList+0xc8>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	68ba      	ldr	r2, [r7, #8]
 801b3ec:	429a      	cmp	r2, r3
 801b3ee:	d202      	bcs.n	801b3f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801b3f0:	4a09      	ldr	r2, [pc, #36]	; (801b418 <prvAddCurrentTaskToDelayedList+0xc8>)
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	6013      	str	r3, [r2, #0]
}
 801b3f6:	bf00      	nop
 801b3f8:	3710      	adds	r7, #16
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	bd80      	pop	{r7, pc}
 801b3fe:	bf00      	nop
 801b400:	20000664 	.word	0x20000664
 801b404:	20000560 	.word	0x20000560
 801b408:	20000668 	.word	0x20000668
 801b40c:	2000064c 	.word	0x2000064c
 801b410:	2000061c 	.word	0x2000061c
 801b414:	20000618 	.word	0x20000618
 801b418:	20000680 	.word	0x20000680

0801b41c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b41c:	b480      	push	{r7}
 801b41e:	b085      	sub	sp, #20
 801b420:	af00      	add	r7, sp, #0
 801b422:	60f8      	str	r0, [r7, #12]
 801b424:	60b9      	str	r1, [r7, #8]
 801b426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	3b04      	subs	r3, #4
 801b42c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	3b04      	subs	r3, #4
 801b43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b43c:	68bb      	ldr	r3, [r7, #8]
 801b43e:	f023 0201 	bic.w	r2, r3, #1
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	3b04      	subs	r3, #4
 801b44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b44c:	4a0c      	ldr	r2, [pc, #48]	; (801b480 <pxPortInitialiseStack+0x64>)
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	3b14      	subs	r3, #20
 801b456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b458:	687a      	ldr	r2, [r7, #4]
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b45e:	68fb      	ldr	r3, [r7, #12]
 801b460:	3b04      	subs	r3, #4
 801b462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	f06f 0202 	mvn.w	r2, #2
 801b46a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	3b20      	subs	r3, #32
 801b470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b472:	68fb      	ldr	r3, [r7, #12]
}
 801b474:	4618      	mov	r0, r3
 801b476:	3714      	adds	r7, #20
 801b478:	46bd      	mov	sp, r7
 801b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b47e:	4770      	bx	lr
 801b480:	0801b485 	.word	0x0801b485

0801b484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b484:	b480      	push	{r7}
 801b486:	b085      	sub	sp, #20
 801b488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b48a:	2300      	movs	r3, #0
 801b48c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b48e:	4b14      	ldr	r3, [pc, #80]	; (801b4e0 <prvTaskExitError+0x5c>)
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b496:	d00c      	beq.n	801b4b2 <prvTaskExitError+0x2e>
	__asm volatile
 801b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b49c:	b672      	cpsid	i
 801b49e:	f383 8811 	msr	BASEPRI, r3
 801b4a2:	f3bf 8f6f 	isb	sy
 801b4a6:	f3bf 8f4f 	dsb	sy
 801b4aa:	b662      	cpsie	i
 801b4ac:	60fb      	str	r3, [r7, #12]
}
 801b4ae:	bf00      	nop
 801b4b0:	e7fe      	b.n	801b4b0 <prvTaskExitError+0x2c>
	__asm volatile
 801b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4b6:	b672      	cpsid	i
 801b4b8:	f383 8811 	msr	BASEPRI, r3
 801b4bc:	f3bf 8f6f 	isb	sy
 801b4c0:	f3bf 8f4f 	dsb	sy
 801b4c4:	b662      	cpsie	i
 801b4c6:	60bb      	str	r3, [r7, #8]
}
 801b4c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b4ca:	bf00      	nop
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d0fc      	beq.n	801b4cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b4d2:	bf00      	nop
 801b4d4:	bf00      	nop
 801b4d6:	3714      	adds	r7, #20
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4de:	4770      	bx	lr
 801b4e0:	20000060 	.word	0x20000060
	...

0801b4f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b4f0:	4b07      	ldr	r3, [pc, #28]	; (801b510 <pxCurrentTCBConst2>)
 801b4f2:	6819      	ldr	r1, [r3, #0]
 801b4f4:	6808      	ldr	r0, [r1, #0]
 801b4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4fa:	f380 8809 	msr	PSP, r0
 801b4fe:	f3bf 8f6f 	isb	sy
 801b502:	f04f 0000 	mov.w	r0, #0
 801b506:	f380 8811 	msr	BASEPRI, r0
 801b50a:	4770      	bx	lr
 801b50c:	f3af 8000 	nop.w

0801b510 <pxCurrentTCBConst2>:
 801b510:	20000560 	.word	0x20000560
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b514:	bf00      	nop
 801b516:	bf00      	nop

0801b518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b518:	4808      	ldr	r0, [pc, #32]	; (801b53c <prvPortStartFirstTask+0x24>)
 801b51a:	6800      	ldr	r0, [r0, #0]
 801b51c:	6800      	ldr	r0, [r0, #0]
 801b51e:	f380 8808 	msr	MSP, r0
 801b522:	f04f 0000 	mov.w	r0, #0
 801b526:	f380 8814 	msr	CONTROL, r0
 801b52a:	b662      	cpsie	i
 801b52c:	b661      	cpsie	f
 801b52e:	f3bf 8f4f 	dsb	sy
 801b532:	f3bf 8f6f 	isb	sy
 801b536:	df00      	svc	0
 801b538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b53a:	bf00      	nop
 801b53c:	e000ed08 	.word	0xe000ed08

0801b540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b540:	b580      	push	{r7, lr}
 801b542:	b084      	sub	sp, #16
 801b544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b546:	4b37      	ldr	r3, [pc, #220]	; (801b624 <xPortStartScheduler+0xe4>)
 801b548:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b54a:	68fb      	ldr	r3, [r7, #12]
 801b54c:	781b      	ldrb	r3, [r3, #0]
 801b54e:	b2db      	uxtb	r3, r3
 801b550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	22ff      	movs	r2, #255	; 0xff
 801b556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	781b      	ldrb	r3, [r3, #0]
 801b55c:	b2db      	uxtb	r3, r3
 801b55e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b560:	78fb      	ldrb	r3, [r7, #3]
 801b562:	b2db      	uxtb	r3, r3
 801b564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b568:	b2da      	uxtb	r2, r3
 801b56a:	4b2f      	ldr	r3, [pc, #188]	; (801b628 <xPortStartScheduler+0xe8>)
 801b56c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b56e:	4b2f      	ldr	r3, [pc, #188]	; (801b62c <xPortStartScheduler+0xec>)
 801b570:	2207      	movs	r2, #7
 801b572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b574:	e009      	b.n	801b58a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801b576:	4b2d      	ldr	r3, [pc, #180]	; (801b62c <xPortStartScheduler+0xec>)
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	3b01      	subs	r3, #1
 801b57c:	4a2b      	ldr	r2, [pc, #172]	; (801b62c <xPortStartScheduler+0xec>)
 801b57e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b580:	78fb      	ldrb	r3, [r7, #3]
 801b582:	b2db      	uxtb	r3, r3
 801b584:	005b      	lsls	r3, r3, #1
 801b586:	b2db      	uxtb	r3, r3
 801b588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b58a:	78fb      	ldrb	r3, [r7, #3]
 801b58c:	b2db      	uxtb	r3, r3
 801b58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b592:	2b80      	cmp	r3, #128	; 0x80
 801b594:	d0ef      	beq.n	801b576 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b596:	4b25      	ldr	r3, [pc, #148]	; (801b62c <xPortStartScheduler+0xec>)
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	f1c3 0307 	rsb	r3, r3, #7
 801b59e:	2b04      	cmp	r3, #4
 801b5a0:	d00c      	beq.n	801b5bc <xPortStartScheduler+0x7c>
	__asm volatile
 801b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5a6:	b672      	cpsid	i
 801b5a8:	f383 8811 	msr	BASEPRI, r3
 801b5ac:	f3bf 8f6f 	isb	sy
 801b5b0:	f3bf 8f4f 	dsb	sy
 801b5b4:	b662      	cpsie	i
 801b5b6:	60bb      	str	r3, [r7, #8]
}
 801b5b8:	bf00      	nop
 801b5ba:	e7fe      	b.n	801b5ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b5bc:	4b1b      	ldr	r3, [pc, #108]	; (801b62c <xPortStartScheduler+0xec>)
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	021b      	lsls	r3, r3, #8
 801b5c2:	4a1a      	ldr	r2, [pc, #104]	; (801b62c <xPortStartScheduler+0xec>)
 801b5c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b5c6:	4b19      	ldr	r3, [pc, #100]	; (801b62c <xPortStartScheduler+0xec>)
 801b5c8:	681b      	ldr	r3, [r3, #0]
 801b5ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b5ce:	4a17      	ldr	r2, [pc, #92]	; (801b62c <xPortStartScheduler+0xec>)
 801b5d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	b2da      	uxtb	r2, r3
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b5da:	4b15      	ldr	r3, [pc, #84]	; (801b630 <xPortStartScheduler+0xf0>)
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	4a14      	ldr	r2, [pc, #80]	; (801b630 <xPortStartScheduler+0xf0>)
 801b5e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b5e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b5e6:	4b12      	ldr	r3, [pc, #72]	; (801b630 <xPortStartScheduler+0xf0>)
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	4a11      	ldr	r2, [pc, #68]	; (801b630 <xPortStartScheduler+0xf0>)
 801b5ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b5f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b5f2:	f000 f8dd 	bl	801b7b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b5f6:	4b0f      	ldr	r3, [pc, #60]	; (801b634 <xPortStartScheduler+0xf4>)
 801b5f8:	2200      	movs	r2, #0
 801b5fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b5fc:	f000 f8fc 	bl	801b7f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b600:	4b0d      	ldr	r3, [pc, #52]	; (801b638 <xPortStartScheduler+0xf8>)
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	4a0c      	ldr	r2, [pc, #48]	; (801b638 <xPortStartScheduler+0xf8>)
 801b606:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b60a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b60c:	f7ff ff84 	bl	801b518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b610:	f7ff fa4a 	bl	801aaa8 <vTaskSwitchContext>
	prvTaskExitError();
 801b614:	f7ff ff36 	bl	801b484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b618:	2300      	movs	r3, #0
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	3710      	adds	r7, #16
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd80      	pop	{r7, pc}
 801b622:	bf00      	nop
 801b624:	e000e400 	.word	0xe000e400
 801b628:	2000068c 	.word	0x2000068c
 801b62c:	20000690 	.word	0x20000690
 801b630:	e000ed20 	.word	0xe000ed20
 801b634:	20000060 	.word	0x20000060
 801b638:	e000ef34 	.word	0xe000ef34

0801b63c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b63c:	b480      	push	{r7}
 801b63e:	b083      	sub	sp, #12
 801b640:	af00      	add	r7, sp, #0
	__asm volatile
 801b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b646:	b672      	cpsid	i
 801b648:	f383 8811 	msr	BASEPRI, r3
 801b64c:	f3bf 8f6f 	isb	sy
 801b650:	f3bf 8f4f 	dsb	sy
 801b654:	b662      	cpsie	i
 801b656:	607b      	str	r3, [r7, #4]
}
 801b658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b65a:	4b10      	ldr	r3, [pc, #64]	; (801b69c <vPortEnterCritical+0x60>)
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	3301      	adds	r3, #1
 801b660:	4a0e      	ldr	r2, [pc, #56]	; (801b69c <vPortEnterCritical+0x60>)
 801b662:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b664:	4b0d      	ldr	r3, [pc, #52]	; (801b69c <vPortEnterCritical+0x60>)
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	2b01      	cmp	r3, #1
 801b66a:	d111      	bne.n	801b690 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b66c:	4b0c      	ldr	r3, [pc, #48]	; (801b6a0 <vPortEnterCritical+0x64>)
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	b2db      	uxtb	r3, r3
 801b672:	2b00      	cmp	r3, #0
 801b674:	d00c      	beq.n	801b690 <vPortEnterCritical+0x54>
	__asm volatile
 801b676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b67a:	b672      	cpsid	i
 801b67c:	f383 8811 	msr	BASEPRI, r3
 801b680:	f3bf 8f6f 	isb	sy
 801b684:	f3bf 8f4f 	dsb	sy
 801b688:	b662      	cpsie	i
 801b68a:	603b      	str	r3, [r7, #0]
}
 801b68c:	bf00      	nop
 801b68e:	e7fe      	b.n	801b68e <vPortEnterCritical+0x52>
	}
}
 801b690:	bf00      	nop
 801b692:	370c      	adds	r7, #12
 801b694:	46bd      	mov	sp, r7
 801b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b69a:	4770      	bx	lr
 801b69c:	20000060 	.word	0x20000060
 801b6a0:	e000ed04 	.word	0xe000ed04

0801b6a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b6a4:	b480      	push	{r7}
 801b6a6:	b083      	sub	sp, #12
 801b6a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b6aa:	4b13      	ldr	r3, [pc, #76]	; (801b6f8 <vPortExitCritical+0x54>)
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d10c      	bne.n	801b6cc <vPortExitCritical+0x28>
	__asm volatile
 801b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6b6:	b672      	cpsid	i
 801b6b8:	f383 8811 	msr	BASEPRI, r3
 801b6bc:	f3bf 8f6f 	isb	sy
 801b6c0:	f3bf 8f4f 	dsb	sy
 801b6c4:	b662      	cpsie	i
 801b6c6:	607b      	str	r3, [r7, #4]
}
 801b6c8:	bf00      	nop
 801b6ca:	e7fe      	b.n	801b6ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801b6cc:	4b0a      	ldr	r3, [pc, #40]	; (801b6f8 <vPortExitCritical+0x54>)
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	3b01      	subs	r3, #1
 801b6d2:	4a09      	ldr	r2, [pc, #36]	; (801b6f8 <vPortExitCritical+0x54>)
 801b6d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b6d6:	4b08      	ldr	r3, [pc, #32]	; (801b6f8 <vPortExitCritical+0x54>)
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d105      	bne.n	801b6ea <vPortExitCritical+0x46>
 801b6de:	2300      	movs	r3, #0
 801b6e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b6e2:	683b      	ldr	r3, [r7, #0]
 801b6e4:	f383 8811 	msr	BASEPRI, r3
}
 801b6e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b6ea:	bf00      	nop
 801b6ec:	370c      	adds	r7, #12
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f4:	4770      	bx	lr
 801b6f6:	bf00      	nop
 801b6f8:	20000060 	.word	0x20000060
 801b6fc:	00000000 	.word	0x00000000

0801b700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b700:	f3ef 8009 	mrs	r0, PSP
 801b704:	f3bf 8f6f 	isb	sy
 801b708:	4b15      	ldr	r3, [pc, #84]	; (801b760 <pxCurrentTCBConst>)
 801b70a:	681a      	ldr	r2, [r3, #0]
 801b70c:	f01e 0f10 	tst.w	lr, #16
 801b710:	bf08      	it	eq
 801b712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b71a:	6010      	str	r0, [r2, #0]
 801b71c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b720:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b724:	b672      	cpsid	i
 801b726:	f380 8811 	msr	BASEPRI, r0
 801b72a:	f3bf 8f4f 	dsb	sy
 801b72e:	f3bf 8f6f 	isb	sy
 801b732:	b662      	cpsie	i
 801b734:	f7ff f9b8 	bl	801aaa8 <vTaskSwitchContext>
 801b738:	f04f 0000 	mov.w	r0, #0
 801b73c:	f380 8811 	msr	BASEPRI, r0
 801b740:	bc09      	pop	{r0, r3}
 801b742:	6819      	ldr	r1, [r3, #0]
 801b744:	6808      	ldr	r0, [r1, #0]
 801b746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b74a:	f01e 0f10 	tst.w	lr, #16
 801b74e:	bf08      	it	eq
 801b750:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b754:	f380 8809 	msr	PSP, r0
 801b758:	f3bf 8f6f 	isb	sy
 801b75c:	4770      	bx	lr
 801b75e:	bf00      	nop

0801b760 <pxCurrentTCBConst>:
 801b760:	20000560 	.word	0x20000560
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b764:	bf00      	nop
 801b766:	bf00      	nop

0801b768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b768:	b580      	push	{r7, lr}
 801b76a:	b082      	sub	sp, #8
 801b76c:	af00      	add	r7, sp, #0
	__asm volatile
 801b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b772:	b672      	cpsid	i
 801b774:	f383 8811 	msr	BASEPRI, r3
 801b778:	f3bf 8f6f 	isb	sy
 801b77c:	f3bf 8f4f 	dsb	sy
 801b780:	b662      	cpsie	i
 801b782:	607b      	str	r3, [r7, #4]
}
 801b784:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b786:	f7ff f8d5 	bl	801a934 <xTaskIncrementTick>
 801b78a:	4603      	mov	r3, r0
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d003      	beq.n	801b798 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b790:	4b06      	ldr	r3, [pc, #24]	; (801b7ac <SysTick_Handler+0x44>)
 801b792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b796:	601a      	str	r2, [r3, #0]
 801b798:	2300      	movs	r3, #0
 801b79a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b79c:	683b      	ldr	r3, [r7, #0]
 801b79e:	f383 8811 	msr	BASEPRI, r3
}
 801b7a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b7a4:	bf00      	nop
 801b7a6:	3708      	adds	r7, #8
 801b7a8:	46bd      	mov	sp, r7
 801b7aa:	bd80      	pop	{r7, pc}
 801b7ac:	e000ed04 	.word	0xe000ed04

0801b7b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b7b0:	b480      	push	{r7}
 801b7b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b7b4:	4b0b      	ldr	r3, [pc, #44]	; (801b7e4 <vPortSetupTimerInterrupt+0x34>)
 801b7b6:	2200      	movs	r2, #0
 801b7b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b7ba:	4b0b      	ldr	r3, [pc, #44]	; (801b7e8 <vPortSetupTimerInterrupt+0x38>)
 801b7bc:	2200      	movs	r2, #0
 801b7be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b7c0:	4b0a      	ldr	r3, [pc, #40]	; (801b7ec <vPortSetupTimerInterrupt+0x3c>)
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	4a0a      	ldr	r2, [pc, #40]	; (801b7f0 <vPortSetupTimerInterrupt+0x40>)
 801b7c6:	fba2 2303 	umull	r2, r3, r2, r3
 801b7ca:	099b      	lsrs	r3, r3, #6
 801b7cc:	4a09      	ldr	r2, [pc, #36]	; (801b7f4 <vPortSetupTimerInterrupt+0x44>)
 801b7ce:	3b01      	subs	r3, #1
 801b7d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b7d2:	4b04      	ldr	r3, [pc, #16]	; (801b7e4 <vPortSetupTimerInterrupt+0x34>)
 801b7d4:	2207      	movs	r2, #7
 801b7d6:	601a      	str	r2, [r3, #0]
}
 801b7d8:	bf00      	nop
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e0:	4770      	bx	lr
 801b7e2:	bf00      	nop
 801b7e4:	e000e010 	.word	0xe000e010
 801b7e8:	e000e018 	.word	0xe000e018
 801b7ec:	20000000 	.word	0x20000000
 801b7f0:	10624dd3 	.word	0x10624dd3
 801b7f4:	e000e014 	.word	0xe000e014

0801b7f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b7f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b808 <vPortEnableVFP+0x10>
 801b7fc:	6801      	ldr	r1, [r0, #0]
 801b7fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b802:	6001      	str	r1, [r0, #0]
 801b804:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b806:	bf00      	nop
 801b808:	e000ed88 	.word	0xe000ed88

0801b80c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b80c:	b480      	push	{r7}
 801b80e:	b085      	sub	sp, #20
 801b810:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b812:	f3ef 8305 	mrs	r3, IPSR
 801b816:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	2b0f      	cmp	r3, #15
 801b81c:	d916      	bls.n	801b84c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b81e:	4a19      	ldr	r2, [pc, #100]	; (801b884 <vPortValidateInterruptPriority+0x78>)
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	4413      	add	r3, r2
 801b824:	781b      	ldrb	r3, [r3, #0]
 801b826:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b828:	4b17      	ldr	r3, [pc, #92]	; (801b888 <vPortValidateInterruptPriority+0x7c>)
 801b82a:	781b      	ldrb	r3, [r3, #0]
 801b82c:	7afa      	ldrb	r2, [r7, #11]
 801b82e:	429a      	cmp	r2, r3
 801b830:	d20c      	bcs.n	801b84c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 801b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b836:	b672      	cpsid	i
 801b838:	f383 8811 	msr	BASEPRI, r3
 801b83c:	f3bf 8f6f 	isb	sy
 801b840:	f3bf 8f4f 	dsb	sy
 801b844:	b662      	cpsie	i
 801b846:	607b      	str	r3, [r7, #4]
}
 801b848:	bf00      	nop
 801b84a:	e7fe      	b.n	801b84a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b84c:	4b0f      	ldr	r3, [pc, #60]	; (801b88c <vPortValidateInterruptPriority+0x80>)
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b854:	4b0e      	ldr	r3, [pc, #56]	; (801b890 <vPortValidateInterruptPriority+0x84>)
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	429a      	cmp	r2, r3
 801b85a:	d90c      	bls.n	801b876 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b860:	b672      	cpsid	i
 801b862:	f383 8811 	msr	BASEPRI, r3
 801b866:	f3bf 8f6f 	isb	sy
 801b86a:	f3bf 8f4f 	dsb	sy
 801b86e:	b662      	cpsie	i
 801b870:	603b      	str	r3, [r7, #0]
}
 801b872:	bf00      	nop
 801b874:	e7fe      	b.n	801b874 <vPortValidateInterruptPriority+0x68>
	}
 801b876:	bf00      	nop
 801b878:	3714      	adds	r7, #20
 801b87a:	46bd      	mov	sp, r7
 801b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b880:	4770      	bx	lr
 801b882:	bf00      	nop
 801b884:	e000e3f0 	.word	0xe000e3f0
 801b888:	2000068c 	.word	0x2000068c
 801b88c:	e000ed0c 	.word	0xe000ed0c
 801b890:	20000690 	.word	0x20000690

0801b894 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b894:	b580      	push	{r7, lr}
 801b896:	b08a      	sub	sp, #40	; 0x28
 801b898:	af00      	add	r7, sp, #0
 801b89a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b89c:	2300      	movs	r3, #0
 801b89e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b8a0:	f7fe ff7a 	bl	801a798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b8a4:	4b5e      	ldr	r3, [pc, #376]	; (801ba20 <pvPortMalloc+0x18c>)
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d101      	bne.n	801b8b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b8ac:	f000 f920 	bl	801baf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b8b0:	4b5c      	ldr	r3, [pc, #368]	; (801ba24 <pvPortMalloc+0x190>)
 801b8b2:	681a      	ldr	r2, [r3, #0]
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	4013      	ands	r3, r2
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	f040 8092 	bne.w	801b9e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d01f      	beq.n	801b904 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 801b8c4:	2208      	movs	r2, #8
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	4413      	add	r3, r2
 801b8ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	f003 0307 	and.w	r3, r3, #7
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d016      	beq.n	801b904 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	f023 0307 	bic.w	r3, r3, #7
 801b8dc:	3308      	adds	r3, #8
 801b8de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	f003 0307 	and.w	r3, r3, #7
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d00c      	beq.n	801b904 <pvPortMalloc+0x70>
	__asm volatile
 801b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8ee:	b672      	cpsid	i
 801b8f0:	f383 8811 	msr	BASEPRI, r3
 801b8f4:	f3bf 8f6f 	isb	sy
 801b8f8:	f3bf 8f4f 	dsb	sy
 801b8fc:	b662      	cpsie	i
 801b8fe:	617b      	str	r3, [r7, #20]
}
 801b900:	bf00      	nop
 801b902:	e7fe      	b.n	801b902 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d06b      	beq.n	801b9e2 <pvPortMalloc+0x14e>
 801b90a:	4b47      	ldr	r3, [pc, #284]	; (801ba28 <pvPortMalloc+0x194>)
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	687a      	ldr	r2, [r7, #4]
 801b910:	429a      	cmp	r2, r3
 801b912:	d866      	bhi.n	801b9e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b914:	4b45      	ldr	r3, [pc, #276]	; (801ba2c <pvPortMalloc+0x198>)
 801b916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b918:	4b44      	ldr	r3, [pc, #272]	; (801ba2c <pvPortMalloc+0x198>)
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b91e:	e004      	b.n	801b92a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 801b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b92c:	685b      	ldr	r3, [r3, #4]
 801b92e:	687a      	ldr	r2, [r7, #4]
 801b930:	429a      	cmp	r2, r3
 801b932:	d903      	bls.n	801b93c <pvPortMalloc+0xa8>
 801b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d1f1      	bne.n	801b920 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b93c:	4b38      	ldr	r3, [pc, #224]	; (801ba20 <pvPortMalloc+0x18c>)
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b942:	429a      	cmp	r2, r3
 801b944:	d04d      	beq.n	801b9e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b946:	6a3b      	ldr	r3, [r7, #32]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	2208      	movs	r2, #8
 801b94c:	4413      	add	r3, r2
 801b94e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b952:	681a      	ldr	r2, [r3, #0]
 801b954:	6a3b      	ldr	r3, [r7, #32]
 801b956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b95a:	685a      	ldr	r2, [r3, #4]
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	1ad2      	subs	r2, r2, r3
 801b960:	2308      	movs	r3, #8
 801b962:	005b      	lsls	r3, r3, #1
 801b964:	429a      	cmp	r2, r3
 801b966:	d921      	bls.n	801b9ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	4413      	add	r3, r2
 801b96e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b970:	69bb      	ldr	r3, [r7, #24]
 801b972:	f003 0307 	and.w	r3, r3, #7
 801b976:	2b00      	cmp	r3, #0
 801b978:	d00c      	beq.n	801b994 <pvPortMalloc+0x100>
	__asm volatile
 801b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b97e:	b672      	cpsid	i
 801b980:	f383 8811 	msr	BASEPRI, r3
 801b984:	f3bf 8f6f 	isb	sy
 801b988:	f3bf 8f4f 	dsb	sy
 801b98c:	b662      	cpsie	i
 801b98e:	613b      	str	r3, [r7, #16]
}
 801b990:	bf00      	nop
 801b992:	e7fe      	b.n	801b992 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b996:	685a      	ldr	r2, [r3, #4]
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	1ad2      	subs	r2, r2, r3
 801b99c:	69bb      	ldr	r3, [r7, #24]
 801b99e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9a2:	687a      	ldr	r2, [r7, #4]
 801b9a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b9a6:	69b8      	ldr	r0, [r7, #24]
 801b9a8:	f000 f904 	bl	801bbb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b9ac:	4b1e      	ldr	r3, [pc, #120]	; (801ba28 <pvPortMalloc+0x194>)
 801b9ae:	681a      	ldr	r2, [r3, #0]
 801b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9b2:	685b      	ldr	r3, [r3, #4]
 801b9b4:	1ad3      	subs	r3, r2, r3
 801b9b6:	4a1c      	ldr	r2, [pc, #112]	; (801ba28 <pvPortMalloc+0x194>)
 801b9b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b9ba:	4b1b      	ldr	r3, [pc, #108]	; (801ba28 <pvPortMalloc+0x194>)
 801b9bc:	681a      	ldr	r2, [r3, #0]
 801b9be:	4b1c      	ldr	r3, [pc, #112]	; (801ba30 <pvPortMalloc+0x19c>)
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	429a      	cmp	r2, r3
 801b9c4:	d203      	bcs.n	801b9ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b9c6:	4b18      	ldr	r3, [pc, #96]	; (801ba28 <pvPortMalloc+0x194>)
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	4a19      	ldr	r2, [pc, #100]	; (801ba30 <pvPortMalloc+0x19c>)
 801b9cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9d0:	685a      	ldr	r2, [r3, #4]
 801b9d2:	4b14      	ldr	r3, [pc, #80]	; (801ba24 <pvPortMalloc+0x190>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	431a      	orrs	r2, r3
 801b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9de:	2200      	movs	r2, #0
 801b9e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b9e2:	f7fe fee7 	bl	801a7b4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801b9e6:	69fb      	ldr	r3, [r7, #28]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d101      	bne.n	801b9f0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801b9ec:	f7e4 ff6a 	bl	80008c4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b9f0:	69fb      	ldr	r3, [r7, #28]
 801b9f2:	f003 0307 	and.w	r3, r3, #7
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d00c      	beq.n	801ba14 <pvPortMalloc+0x180>
	__asm volatile
 801b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9fe:	b672      	cpsid	i
 801ba00:	f383 8811 	msr	BASEPRI, r3
 801ba04:	f3bf 8f6f 	isb	sy
 801ba08:	f3bf 8f4f 	dsb	sy
 801ba0c:	b662      	cpsie	i
 801ba0e:	60fb      	str	r3, [r7, #12]
}
 801ba10:	bf00      	nop
 801ba12:	e7fe      	b.n	801ba12 <pvPortMalloc+0x17e>
	return pvReturn;
 801ba14:	69fb      	ldr	r3, [r7, #28]
}
 801ba16:	4618      	mov	r0, r3
 801ba18:	3728      	adds	r7, #40	; 0x28
 801ba1a:	46bd      	mov	sp, r7
 801ba1c:	bd80      	pop	{r7, pc}
 801ba1e:	bf00      	nop
 801ba20:	2000869c 	.word	0x2000869c
 801ba24:	200086a8 	.word	0x200086a8
 801ba28:	200086a0 	.word	0x200086a0
 801ba2c:	20008694 	.word	0x20008694
 801ba30:	200086a4 	.word	0x200086a4

0801ba34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801ba34:	b580      	push	{r7, lr}
 801ba36:	b086      	sub	sp, #24
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d04c      	beq.n	801bae0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ba46:	2308      	movs	r3, #8
 801ba48:	425b      	negs	r3, r3
 801ba4a:	697a      	ldr	r2, [r7, #20]
 801ba4c:	4413      	add	r3, r2
 801ba4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ba50:	697b      	ldr	r3, [r7, #20]
 801ba52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ba54:	693b      	ldr	r3, [r7, #16]
 801ba56:	685a      	ldr	r2, [r3, #4]
 801ba58:	4b23      	ldr	r3, [pc, #140]	; (801bae8 <vPortFree+0xb4>)
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	4013      	ands	r3, r2
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d10c      	bne.n	801ba7c <vPortFree+0x48>
	__asm volatile
 801ba62:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba66:	b672      	cpsid	i
 801ba68:	f383 8811 	msr	BASEPRI, r3
 801ba6c:	f3bf 8f6f 	isb	sy
 801ba70:	f3bf 8f4f 	dsb	sy
 801ba74:	b662      	cpsie	i
 801ba76:	60fb      	str	r3, [r7, #12]
}
 801ba78:	bf00      	nop
 801ba7a:	e7fe      	b.n	801ba7a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ba7c:	693b      	ldr	r3, [r7, #16]
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d00c      	beq.n	801ba9e <vPortFree+0x6a>
	__asm volatile
 801ba84:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba88:	b672      	cpsid	i
 801ba8a:	f383 8811 	msr	BASEPRI, r3
 801ba8e:	f3bf 8f6f 	isb	sy
 801ba92:	f3bf 8f4f 	dsb	sy
 801ba96:	b662      	cpsie	i
 801ba98:	60bb      	str	r3, [r7, #8]
}
 801ba9a:	bf00      	nop
 801ba9c:	e7fe      	b.n	801ba9c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ba9e:	693b      	ldr	r3, [r7, #16]
 801baa0:	685a      	ldr	r2, [r3, #4]
 801baa2:	4b11      	ldr	r3, [pc, #68]	; (801bae8 <vPortFree+0xb4>)
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	4013      	ands	r3, r2
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d019      	beq.n	801bae0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801baac:	693b      	ldr	r3, [r7, #16]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d115      	bne.n	801bae0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801bab4:	693b      	ldr	r3, [r7, #16]
 801bab6:	685a      	ldr	r2, [r3, #4]
 801bab8:	4b0b      	ldr	r3, [pc, #44]	; (801bae8 <vPortFree+0xb4>)
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	43db      	mvns	r3, r3
 801babe:	401a      	ands	r2, r3
 801bac0:	693b      	ldr	r3, [r7, #16]
 801bac2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801bac4:	f7fe fe68 	bl	801a798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801bac8:	693b      	ldr	r3, [r7, #16]
 801baca:	685a      	ldr	r2, [r3, #4]
 801bacc:	4b07      	ldr	r3, [pc, #28]	; (801baec <vPortFree+0xb8>)
 801bace:	681b      	ldr	r3, [r3, #0]
 801bad0:	4413      	add	r3, r2
 801bad2:	4a06      	ldr	r2, [pc, #24]	; (801baec <vPortFree+0xb8>)
 801bad4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801bad6:	6938      	ldr	r0, [r7, #16]
 801bad8:	f000 f86c 	bl	801bbb4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801badc:	f7fe fe6a 	bl	801a7b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801bae0:	bf00      	nop
 801bae2:	3718      	adds	r7, #24
 801bae4:	46bd      	mov	sp, r7
 801bae6:	bd80      	pop	{r7, pc}
 801bae8:	200086a8 	.word	0x200086a8
 801baec:	200086a0 	.word	0x200086a0

0801baf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801baf0:	b480      	push	{r7}
 801baf2:	b085      	sub	sp, #20
 801baf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801baf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bafa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801bafc:	4b27      	ldr	r3, [pc, #156]	; (801bb9c <prvHeapInit+0xac>)
 801bafe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	f003 0307 	and.w	r3, r3, #7
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d00c      	beq.n	801bb24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	3307      	adds	r3, #7
 801bb0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	f023 0307 	bic.w	r3, r3, #7
 801bb16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801bb18:	68ba      	ldr	r2, [r7, #8]
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	1ad3      	subs	r3, r2, r3
 801bb1e:	4a1f      	ldr	r2, [pc, #124]	; (801bb9c <prvHeapInit+0xac>)
 801bb20:	4413      	add	r3, r2
 801bb22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801bb28:	4a1d      	ldr	r2, [pc, #116]	; (801bba0 <prvHeapInit+0xb0>)
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801bb2e:	4b1c      	ldr	r3, [pc, #112]	; (801bba0 <prvHeapInit+0xb0>)
 801bb30:	2200      	movs	r2, #0
 801bb32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	68ba      	ldr	r2, [r7, #8]
 801bb38:	4413      	add	r3, r2
 801bb3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801bb3c:	2208      	movs	r2, #8
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	1a9b      	subs	r3, r3, r2
 801bb42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	f023 0307 	bic.w	r3, r3, #7
 801bb4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	4a15      	ldr	r2, [pc, #84]	; (801bba4 <prvHeapInit+0xb4>)
 801bb50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801bb52:	4b14      	ldr	r3, [pc, #80]	; (801bba4 <prvHeapInit+0xb4>)
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	2200      	movs	r2, #0
 801bb58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801bb5a:	4b12      	ldr	r3, [pc, #72]	; (801bba4 <prvHeapInit+0xb4>)
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	2200      	movs	r2, #0
 801bb60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	68fa      	ldr	r2, [r7, #12]
 801bb6a:	1ad2      	subs	r2, r2, r3
 801bb6c:	683b      	ldr	r3, [r7, #0]
 801bb6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801bb70:	4b0c      	ldr	r3, [pc, #48]	; (801bba4 <prvHeapInit+0xb4>)
 801bb72:	681a      	ldr	r2, [r3, #0]
 801bb74:	683b      	ldr	r3, [r7, #0]
 801bb76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bb78:	683b      	ldr	r3, [r7, #0]
 801bb7a:	685b      	ldr	r3, [r3, #4]
 801bb7c:	4a0a      	ldr	r2, [pc, #40]	; (801bba8 <prvHeapInit+0xb8>)
 801bb7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bb80:	683b      	ldr	r3, [r7, #0]
 801bb82:	685b      	ldr	r3, [r3, #4]
 801bb84:	4a09      	ldr	r2, [pc, #36]	; (801bbac <prvHeapInit+0xbc>)
 801bb86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801bb88:	4b09      	ldr	r3, [pc, #36]	; (801bbb0 <prvHeapInit+0xc0>)
 801bb8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801bb8e:	601a      	str	r2, [r3, #0]
}
 801bb90:	bf00      	nop
 801bb92:	3714      	adds	r7, #20
 801bb94:	46bd      	mov	sp, r7
 801bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb9a:	4770      	bx	lr
 801bb9c:	20000694 	.word	0x20000694
 801bba0:	20008694 	.word	0x20008694
 801bba4:	2000869c 	.word	0x2000869c
 801bba8:	200086a4 	.word	0x200086a4
 801bbac:	200086a0 	.word	0x200086a0
 801bbb0:	200086a8 	.word	0x200086a8

0801bbb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801bbb4:	b480      	push	{r7}
 801bbb6:	b085      	sub	sp, #20
 801bbb8:	af00      	add	r7, sp, #0
 801bbba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801bbbc:	4b28      	ldr	r3, [pc, #160]	; (801bc60 <prvInsertBlockIntoFreeList+0xac>)
 801bbbe:	60fb      	str	r3, [r7, #12]
 801bbc0:	e002      	b.n	801bbc8 <prvInsertBlockIntoFreeList+0x14>
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	60fb      	str	r3, [r7, #12]
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	687a      	ldr	r2, [r7, #4]
 801bbce:	429a      	cmp	r2, r3
 801bbd0:	d8f7      	bhi.n	801bbc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801bbd6:	68fb      	ldr	r3, [r7, #12]
 801bbd8:	685b      	ldr	r3, [r3, #4]
 801bbda:	68ba      	ldr	r2, [r7, #8]
 801bbdc:	4413      	add	r3, r2
 801bbde:	687a      	ldr	r2, [r7, #4]
 801bbe0:	429a      	cmp	r2, r3
 801bbe2:	d108      	bne.n	801bbf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	685a      	ldr	r2, [r3, #4]
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	685b      	ldr	r3, [r3, #4]
 801bbec:	441a      	add	r2, r3
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	685b      	ldr	r3, [r3, #4]
 801bbfe:	68ba      	ldr	r2, [r7, #8]
 801bc00:	441a      	add	r2, r3
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	429a      	cmp	r2, r3
 801bc08:	d118      	bne.n	801bc3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	681a      	ldr	r2, [r3, #0]
 801bc0e:	4b15      	ldr	r3, [pc, #84]	; (801bc64 <prvInsertBlockIntoFreeList+0xb0>)
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	429a      	cmp	r2, r3
 801bc14:	d00d      	beq.n	801bc32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	685a      	ldr	r2, [r3, #4]
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	685b      	ldr	r3, [r3, #4]
 801bc20:	441a      	add	r2, r3
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	681a      	ldr	r2, [r3, #0]
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	601a      	str	r2, [r3, #0]
 801bc30:	e008      	b.n	801bc44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801bc32:	4b0c      	ldr	r3, [pc, #48]	; (801bc64 <prvInsertBlockIntoFreeList+0xb0>)
 801bc34:	681a      	ldr	r2, [r3, #0]
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	601a      	str	r2, [r3, #0]
 801bc3a:	e003      	b.n	801bc44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	681a      	ldr	r2, [r3, #0]
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801bc44:	68fa      	ldr	r2, [r7, #12]
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	429a      	cmp	r2, r3
 801bc4a:	d002      	beq.n	801bc52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	687a      	ldr	r2, [r7, #4]
 801bc50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801bc52:	bf00      	nop
 801bc54:	3714      	adds	r7, #20
 801bc56:	46bd      	mov	sp, r7
 801bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc5c:	4770      	bx	lr
 801bc5e:	bf00      	nop
 801bc60:	20008694 	.word	0x20008694
 801bc64:	2000869c 	.word	0x2000869c

0801bc68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801bc68:	b580      	push	{r7, lr}
 801bc6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801bc6c:	2201      	movs	r2, #1
 801bc6e:	490e      	ldr	r1, [pc, #56]	; (801bca8 <MX_USB_HOST_Init+0x40>)
 801bc70:	480e      	ldr	r0, [pc, #56]	; (801bcac <MX_USB_HOST_Init+0x44>)
 801bc72:	f7f8 f813 	bl	8013c9c <USBH_Init>
 801bc76:	4603      	mov	r3, r0
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d001      	beq.n	801bc80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801bc7c:	f7e6 fdbc 	bl	80027f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 801bc80:	490b      	ldr	r1, [pc, #44]	; (801bcb0 <MX_USB_HOST_Init+0x48>)
 801bc82:	480a      	ldr	r0, [pc, #40]	; (801bcac <MX_USB_HOST_Init+0x44>)
 801bc84:	f7f8 f8ce 	bl	8013e24 <USBH_RegisterClass>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d001      	beq.n	801bc92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801bc8e:	f7e6 fdb3 	bl	80027f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801bc92:	4806      	ldr	r0, [pc, #24]	; (801bcac <MX_USB_HOST_Init+0x44>)
 801bc94:	f7f8 f9b4 	bl	8014000 <USBH_Start>
 801bc98:	4603      	mov	r3, r0
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d001      	beq.n	801bca2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801bc9e:	f7e6 fdab 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801bca2:	bf00      	nop
 801bca4:	bd80      	pop	{r7, pc}
 801bca6:	bf00      	nop
 801bca8:	0801bcb5 	.word	0x0801bcb5
 801bcac:	2000c76c 	.word	0x2000c76c
 801bcb0:	20000040 	.word	0x20000040

0801bcb4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801bcb4:	b480      	push	{r7}
 801bcb6:	b083      	sub	sp, #12
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
 801bcbc:	460b      	mov	r3, r1
 801bcbe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801bcc0:	78fb      	ldrb	r3, [r7, #3]
 801bcc2:	3b01      	subs	r3, #1
 801bcc4:	2b04      	cmp	r3, #4
 801bcc6:	d819      	bhi.n	801bcfc <USBH_UserProcess+0x48>
 801bcc8:	a201      	add	r2, pc, #4	; (adr r2, 801bcd0 <USBH_UserProcess+0x1c>)
 801bcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcce:	bf00      	nop
 801bcd0:	0801bcfd 	.word	0x0801bcfd
 801bcd4:	0801bced 	.word	0x0801bced
 801bcd8:	0801bcfd 	.word	0x0801bcfd
 801bcdc:	0801bcf5 	.word	0x0801bcf5
 801bce0:	0801bce5 	.word	0x0801bce5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801bce4:	4b09      	ldr	r3, [pc, #36]	; (801bd0c <USBH_UserProcess+0x58>)
 801bce6:	2203      	movs	r2, #3
 801bce8:	701a      	strb	r2, [r3, #0]
  break;
 801bcea:	e008      	b.n	801bcfe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801bcec:	4b07      	ldr	r3, [pc, #28]	; (801bd0c <USBH_UserProcess+0x58>)
 801bcee:	2202      	movs	r2, #2
 801bcf0:	701a      	strb	r2, [r3, #0]
  break;
 801bcf2:	e004      	b.n	801bcfe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801bcf4:	4b05      	ldr	r3, [pc, #20]	; (801bd0c <USBH_UserProcess+0x58>)
 801bcf6:	2201      	movs	r2, #1
 801bcf8:	701a      	strb	r2, [r3, #0]
  break;
 801bcfa:	e000      	b.n	801bcfe <USBH_UserProcess+0x4a>

  default:
  break;
 801bcfc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801bcfe:	bf00      	nop
 801bd00:	370c      	adds	r7, #12
 801bd02:	46bd      	mov	sp, r7
 801bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd08:	4770      	bx	lr
 801bd0a:	bf00      	nop
 801bd0c:	200086ac 	.word	0x200086ac

0801bd10 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b08a      	sub	sp, #40	; 0x28
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bd18:	f107 0314 	add.w	r3, r7, #20
 801bd1c:	2200      	movs	r2, #0
 801bd1e:	601a      	str	r2, [r3, #0]
 801bd20:	605a      	str	r2, [r3, #4]
 801bd22:	609a      	str	r2, [r3, #8]
 801bd24:	60da      	str	r2, [r3, #12]
 801bd26:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801bd30:	d13c      	bne.n	801bdac <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bd32:	4b20      	ldr	r3, [pc, #128]	; (801bdb4 <HAL_HCD_MspInit+0xa4>)
 801bd34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd36:	4a1f      	ldr	r2, [pc, #124]	; (801bdb4 <HAL_HCD_MspInit+0xa4>)
 801bd38:	f043 0301 	orr.w	r3, r3, #1
 801bd3c:	6313      	str	r3, [r2, #48]	; 0x30
 801bd3e:	4b1d      	ldr	r3, [pc, #116]	; (801bdb4 <HAL_HCD_MspInit+0xa4>)
 801bd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd42:	f003 0301 	and.w	r3, r3, #1
 801bd46:	613b      	str	r3, [r7, #16]
 801bd48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801bd4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801bd4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bd50:	2302      	movs	r3, #2
 801bd52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bd54:	2300      	movs	r3, #0
 801bd56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bd58:	2303      	movs	r3, #3
 801bd5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801bd5c:	230a      	movs	r3, #10
 801bd5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bd60:	f107 0314 	add.w	r3, r7, #20
 801bd64:	4619      	mov	r1, r3
 801bd66:	4814      	ldr	r0, [pc, #80]	; (801bdb8 <HAL_HCD_MspInit+0xa8>)
 801bd68:	f7eb ffd2 	bl	8007d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801bd6c:	4b11      	ldr	r3, [pc, #68]	; (801bdb4 <HAL_HCD_MspInit+0xa4>)
 801bd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd70:	4a10      	ldr	r2, [pc, #64]	; (801bdb4 <HAL_HCD_MspInit+0xa4>)
 801bd72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd76:	6353      	str	r3, [r2, #52]	; 0x34
 801bd78:	4b0e      	ldr	r3, [pc, #56]	; (801bdb4 <HAL_HCD_MspInit+0xa4>)
 801bd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bd80:	60fb      	str	r3, [r7, #12]
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	4b0b      	ldr	r3, [pc, #44]	; (801bdb4 <HAL_HCD_MspInit+0xa4>)
 801bd86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd88:	4a0a      	ldr	r2, [pc, #40]	; (801bdb4 <HAL_HCD_MspInit+0xa4>)
 801bd8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bd8e:	6453      	str	r3, [r2, #68]	; 0x44
 801bd90:	4b08      	ldr	r3, [pc, #32]	; (801bdb4 <HAL_HCD_MspInit+0xa4>)
 801bd92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bd98:	60bb      	str	r3, [r7, #8]
 801bd9a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801bd9c:	2200      	movs	r2, #0
 801bd9e:	2105      	movs	r1, #5
 801bda0:	2043      	movs	r0, #67	; 0x43
 801bda2:	f7ea fd9b 	bl	80068dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801bda6:	2043      	movs	r0, #67	; 0x43
 801bda8:	f7ea fdb4 	bl	8006914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801bdac:	bf00      	nop
 801bdae:	3728      	adds	r7, #40	; 0x28
 801bdb0:	46bd      	mov	sp, r7
 801bdb2:	bd80      	pop	{r7, pc}
 801bdb4:	40023800 	.word	0x40023800
 801bdb8:	40020000 	.word	0x40020000

0801bdbc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801bdbc:	b580      	push	{r7, lr}
 801bdbe:	b082      	sub	sp, #8
 801bdc0:	af00      	add	r7, sp, #0
 801bdc2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801bdca:	4618      	mov	r0, r3
 801bdcc:	f7f8 ff13 	bl	8014bf6 <USBH_LL_IncTimer>
}
 801bdd0:	bf00      	nop
 801bdd2:	3708      	adds	r7, #8
 801bdd4:	46bd      	mov	sp, r7
 801bdd6:	bd80      	pop	{r7, pc}

0801bdd8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	b082      	sub	sp, #8
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801bde6:	4618      	mov	r0, r3
 801bde8:	f7f8 ff57 	bl	8014c9a <USBH_LL_Connect>
}
 801bdec:	bf00      	nop
 801bdee:	3708      	adds	r7, #8
 801bdf0:	46bd      	mov	sp, r7
 801bdf2:	bd80      	pop	{r7, pc}

0801bdf4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801bdf4:	b580      	push	{r7, lr}
 801bdf6:	b082      	sub	sp, #8
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801be02:	4618      	mov	r0, r3
 801be04:	f7f8 ff6c 	bl	8014ce0 <USBH_LL_Disconnect>
}
 801be08:	bf00      	nop
 801be0a:	3708      	adds	r7, #8
 801be0c:	46bd      	mov	sp, r7
 801be0e:	bd80      	pop	{r7, pc}

0801be10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b082      	sub	sp, #8
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
 801be18:	460b      	mov	r3, r1
 801be1a:	70fb      	strb	r3, [r7, #3]
 801be1c:	4613      	mov	r3, r2
 801be1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801be26:	4618      	mov	r0, r3
 801be28:	f7f8 ffa1 	bl	8014d6e <USBH_LL_NotifyURBChange>
#endif
}
 801be2c:	bf00      	nop
 801be2e:	3708      	adds	r7, #8
 801be30:	46bd      	mov	sp, r7
 801be32:	bd80      	pop	{r7, pc}

0801be34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801be34:	b580      	push	{r7, lr}
 801be36:	b082      	sub	sp, #8
 801be38:	af00      	add	r7, sp, #0
 801be3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801be42:	4618      	mov	r0, r3
 801be44:	f7f8 ff01 	bl	8014c4a <USBH_LL_PortEnabled>
}
 801be48:	bf00      	nop
 801be4a:	3708      	adds	r7, #8
 801be4c:	46bd      	mov	sp, r7
 801be4e:	bd80      	pop	{r7, pc}

0801be50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801be50:	b580      	push	{r7, lr}
 801be52:	b082      	sub	sp, #8
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801be5e:	4618      	mov	r0, r3
 801be60:	f7f8 ff0d 	bl	8014c7e <USBH_LL_PortDisabled>
}
 801be64:	bf00      	nop
 801be66:	3708      	adds	r7, #8
 801be68:	46bd      	mov	sp, r7
 801be6a:	bd80      	pop	{r7, pc}

0801be6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801be6c:	b580      	push	{r7, lr}
 801be6e:	b082      	sub	sp, #8
 801be70:	af00      	add	r7, sp, #0
 801be72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801be7a:	2b01      	cmp	r3, #1
 801be7c:	d12a      	bne.n	801bed4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801be7e:	4a18      	ldr	r2, [pc, #96]	; (801bee0 <USBH_LL_Init+0x74>)
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	4a15      	ldr	r2, [pc, #84]	; (801bee0 <USBH_LL_Init+0x74>)
 801be8a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801be8e:	4b14      	ldr	r3, [pc, #80]	; (801bee0 <USBH_LL_Init+0x74>)
 801be90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801be94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801be96:	4b12      	ldr	r3, [pc, #72]	; (801bee0 <USBH_LL_Init+0x74>)
 801be98:	2208      	movs	r2, #8
 801be9a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801be9c:	4b10      	ldr	r3, [pc, #64]	; (801bee0 <USBH_LL_Init+0x74>)
 801be9e:	2201      	movs	r2, #1
 801bea0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801bea2:	4b0f      	ldr	r3, [pc, #60]	; (801bee0 <USBH_LL_Init+0x74>)
 801bea4:	2200      	movs	r2, #0
 801bea6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801bea8:	4b0d      	ldr	r3, [pc, #52]	; (801bee0 <USBH_LL_Init+0x74>)
 801beaa:	2202      	movs	r2, #2
 801beac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801beae:	4b0c      	ldr	r3, [pc, #48]	; (801bee0 <USBH_LL_Init+0x74>)
 801beb0:	2200      	movs	r2, #0
 801beb2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801beb4:	480a      	ldr	r0, [pc, #40]	; (801bee0 <USBH_LL_Init+0x74>)
 801beb6:	f7ec fa2e 	bl	8008316 <HAL_HCD_Init>
 801beba:	4603      	mov	r3, r0
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d001      	beq.n	801bec4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801bec0:	f7e6 fc9a 	bl	80027f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801bec4:	4806      	ldr	r0, [pc, #24]	; (801bee0 <USBH_LL_Init+0x74>)
 801bec6:	f7ec fe0b 	bl	8008ae0 <HAL_HCD_GetCurrentFrame>
 801beca:	4603      	mov	r3, r0
 801becc:	4619      	mov	r1, r3
 801bece:	6878      	ldr	r0, [r7, #4]
 801bed0:	f7f8 fe82 	bl	8014bd8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801bed4:	2300      	movs	r3, #0
}
 801bed6:	4618      	mov	r0, r3
 801bed8:	3708      	adds	r7, #8
 801beda:	46bd      	mov	sp, r7
 801bedc:	bd80      	pop	{r7, pc}
 801bede:	bf00      	nop
 801bee0:	2000cb50 	.word	0x2000cb50

0801bee4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801bee4:	b580      	push	{r7, lr}
 801bee6:	b084      	sub	sp, #16
 801bee8:	af00      	add	r7, sp, #0
 801beea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801beec:	2300      	movs	r3, #0
 801beee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801bef0:	2300      	movs	r3, #0
 801bef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801befa:	4618      	mov	r0, r3
 801befc:	f7ec fd7a 	bl	80089f4 <HAL_HCD_Start>
 801bf00:	4603      	mov	r3, r0
 801bf02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801bf04:	7bfb      	ldrb	r3, [r7, #15]
 801bf06:	4618      	mov	r0, r3
 801bf08:	f000 f95c 	bl	801c1c4 <USBH_Get_USB_Status>
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf10:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf12:	4618      	mov	r0, r3
 801bf14:	3710      	adds	r7, #16
 801bf16:	46bd      	mov	sp, r7
 801bf18:	bd80      	pop	{r7, pc}

0801bf1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801bf1a:	b580      	push	{r7, lr}
 801bf1c:	b084      	sub	sp, #16
 801bf1e:	af00      	add	r7, sp, #0
 801bf20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf22:	2300      	movs	r3, #0
 801bf24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801bf26:	2300      	movs	r3, #0
 801bf28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801bf30:	4618      	mov	r0, r3
 801bf32:	f7ec fd82 	bl	8008a3a <HAL_HCD_Stop>
 801bf36:	4603      	mov	r3, r0
 801bf38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801bf3a:	7bfb      	ldrb	r3, [r7, #15]
 801bf3c:	4618      	mov	r0, r3
 801bf3e:	f000 f941 	bl	801c1c4 <USBH_Get_USB_Status>
 801bf42:	4603      	mov	r3, r0
 801bf44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf46:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf48:	4618      	mov	r0, r3
 801bf4a:	3710      	adds	r7, #16
 801bf4c:	46bd      	mov	sp, r7
 801bf4e:	bd80      	pop	{r7, pc}

0801bf50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801bf50:	b580      	push	{r7, lr}
 801bf52:	b084      	sub	sp, #16
 801bf54:	af00      	add	r7, sp, #0
 801bf56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801bf58:	2301      	movs	r3, #1
 801bf5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801bf62:	4618      	mov	r0, r3
 801bf64:	f7ec fdca 	bl	8008afc <HAL_HCD_GetCurrentSpeed>
 801bf68:	4603      	mov	r3, r0
 801bf6a:	2b02      	cmp	r3, #2
 801bf6c:	d00c      	beq.n	801bf88 <USBH_LL_GetSpeed+0x38>
 801bf6e:	2b02      	cmp	r3, #2
 801bf70:	d80d      	bhi.n	801bf8e <USBH_LL_GetSpeed+0x3e>
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d002      	beq.n	801bf7c <USBH_LL_GetSpeed+0x2c>
 801bf76:	2b01      	cmp	r3, #1
 801bf78:	d003      	beq.n	801bf82 <USBH_LL_GetSpeed+0x32>
 801bf7a:	e008      	b.n	801bf8e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801bf7c:	2300      	movs	r3, #0
 801bf7e:	73fb      	strb	r3, [r7, #15]
    break;
 801bf80:	e008      	b.n	801bf94 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801bf82:	2301      	movs	r3, #1
 801bf84:	73fb      	strb	r3, [r7, #15]
    break;
 801bf86:	e005      	b.n	801bf94 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801bf88:	2302      	movs	r3, #2
 801bf8a:	73fb      	strb	r3, [r7, #15]
    break;
 801bf8c:	e002      	b.n	801bf94 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801bf8e:	2301      	movs	r3, #1
 801bf90:	73fb      	strb	r3, [r7, #15]
    break;
 801bf92:	bf00      	nop
  }
  return  speed;
 801bf94:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf96:	4618      	mov	r0, r3
 801bf98:	3710      	adds	r7, #16
 801bf9a:	46bd      	mov	sp, r7
 801bf9c:	bd80      	pop	{r7, pc}

0801bf9e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801bf9e:	b580      	push	{r7, lr}
 801bfa0:	b084      	sub	sp, #16
 801bfa2:	af00      	add	r7, sp, #0
 801bfa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801bfaa:	2300      	movs	r3, #0
 801bfac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	f7ec fd5d 	bl	8008a74 <HAL_HCD_ResetPort>
 801bfba:	4603      	mov	r3, r0
 801bfbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801bfbe:	7bfb      	ldrb	r3, [r7, #15]
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	f000 f8ff 	bl	801c1c4 <USBH_Get_USB_Status>
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bfca:	7bbb      	ldrb	r3, [r7, #14]
}
 801bfcc:	4618      	mov	r0, r3
 801bfce:	3710      	adds	r7, #16
 801bfd0:	46bd      	mov	sp, r7
 801bfd2:	bd80      	pop	{r7, pc}

0801bfd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801bfd4:	b580      	push	{r7, lr}
 801bfd6:	b082      	sub	sp, #8
 801bfd8:	af00      	add	r7, sp, #0
 801bfda:	6078      	str	r0, [r7, #4]
 801bfdc:	460b      	mov	r3, r1
 801bfde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801bfe6:	78fa      	ldrb	r2, [r7, #3]
 801bfe8:	4611      	mov	r1, r2
 801bfea:	4618      	mov	r0, r3
 801bfec:	f7ec fd64 	bl	8008ab8 <HAL_HCD_HC_GetXferCount>
 801bff0:	4603      	mov	r3, r0
}
 801bff2:	4618      	mov	r0, r3
 801bff4:	3708      	adds	r7, #8
 801bff6:	46bd      	mov	sp, r7
 801bff8:	bd80      	pop	{r7, pc}

0801bffa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801bffa:	b590      	push	{r4, r7, lr}
 801bffc:	b089      	sub	sp, #36	; 0x24
 801bffe:	af04      	add	r7, sp, #16
 801c000:	6078      	str	r0, [r7, #4]
 801c002:	4608      	mov	r0, r1
 801c004:	4611      	mov	r1, r2
 801c006:	461a      	mov	r2, r3
 801c008:	4603      	mov	r3, r0
 801c00a:	70fb      	strb	r3, [r7, #3]
 801c00c:	460b      	mov	r3, r1
 801c00e:	70bb      	strb	r3, [r7, #2]
 801c010:	4613      	mov	r3, r2
 801c012:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c014:	2300      	movs	r3, #0
 801c016:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c018:	2300      	movs	r3, #0
 801c01a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801c022:	787c      	ldrb	r4, [r7, #1]
 801c024:	78ba      	ldrb	r2, [r7, #2]
 801c026:	78f9      	ldrb	r1, [r7, #3]
 801c028:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c02a:	9302      	str	r3, [sp, #8]
 801c02c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c030:	9301      	str	r3, [sp, #4]
 801c032:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c036:	9300      	str	r3, [sp, #0]
 801c038:	4623      	mov	r3, r4
 801c03a:	f7ec f9ce 	bl	80083da <HAL_HCD_HC_Init>
 801c03e:	4603      	mov	r3, r0
 801c040:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801c042:	7bfb      	ldrb	r3, [r7, #15]
 801c044:	4618      	mov	r0, r3
 801c046:	f000 f8bd 	bl	801c1c4 <USBH_Get_USB_Status>
 801c04a:	4603      	mov	r3, r0
 801c04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c04e:	7bbb      	ldrb	r3, [r7, #14]
}
 801c050:	4618      	mov	r0, r3
 801c052:	3714      	adds	r7, #20
 801c054:	46bd      	mov	sp, r7
 801c056:	bd90      	pop	{r4, r7, pc}

0801c058 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c058:	b580      	push	{r7, lr}
 801c05a:	b084      	sub	sp, #16
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6078      	str	r0, [r7, #4]
 801c060:	460b      	mov	r3, r1
 801c062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c064:	2300      	movs	r3, #0
 801c066:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c068:	2300      	movs	r3, #0
 801c06a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c072:	78fa      	ldrb	r2, [r7, #3]
 801c074:	4611      	mov	r1, r2
 801c076:	4618      	mov	r0, r3
 801c078:	f7ec fa3e 	bl	80084f8 <HAL_HCD_HC_Halt>
 801c07c:	4603      	mov	r3, r0
 801c07e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c080:	7bfb      	ldrb	r3, [r7, #15]
 801c082:	4618      	mov	r0, r3
 801c084:	f000 f89e 	bl	801c1c4 <USBH_Get_USB_Status>
 801c088:	4603      	mov	r3, r0
 801c08a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c08c:	7bbb      	ldrb	r3, [r7, #14]
}
 801c08e:	4618      	mov	r0, r3
 801c090:	3710      	adds	r7, #16
 801c092:	46bd      	mov	sp, r7
 801c094:	bd80      	pop	{r7, pc}

0801c096 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801c096:	b590      	push	{r4, r7, lr}
 801c098:	b089      	sub	sp, #36	; 0x24
 801c09a:	af04      	add	r7, sp, #16
 801c09c:	6078      	str	r0, [r7, #4]
 801c09e:	4608      	mov	r0, r1
 801c0a0:	4611      	mov	r1, r2
 801c0a2:	461a      	mov	r2, r3
 801c0a4:	4603      	mov	r3, r0
 801c0a6:	70fb      	strb	r3, [r7, #3]
 801c0a8:	460b      	mov	r3, r1
 801c0aa:	70bb      	strb	r3, [r7, #2]
 801c0ac:	4613      	mov	r3, r2
 801c0ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c0b4:	2300      	movs	r3, #0
 801c0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801c0be:	787c      	ldrb	r4, [r7, #1]
 801c0c0:	78ba      	ldrb	r2, [r7, #2]
 801c0c2:	78f9      	ldrb	r1, [r7, #3]
 801c0c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c0c8:	9303      	str	r3, [sp, #12]
 801c0ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c0cc:	9302      	str	r3, [sp, #8]
 801c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0d0:	9301      	str	r3, [sp, #4]
 801c0d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c0d6:	9300      	str	r3, [sp, #0]
 801c0d8:	4623      	mov	r3, r4
 801c0da:	f7ec fa31 	bl	8008540 <HAL_HCD_HC_SubmitRequest>
 801c0de:	4603      	mov	r3, r0
 801c0e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801c0e2:	7bfb      	ldrb	r3, [r7, #15]
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	f000 f86d 	bl	801c1c4 <USBH_Get_USB_Status>
 801c0ea:	4603      	mov	r3, r0
 801c0ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c0ee:	7bbb      	ldrb	r3, [r7, #14]
}
 801c0f0:	4618      	mov	r0, r3
 801c0f2:	3714      	adds	r7, #20
 801c0f4:	46bd      	mov	sp, r7
 801c0f6:	bd90      	pop	{r4, r7, pc}

0801c0f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c0f8:	b580      	push	{r7, lr}
 801c0fa:	b082      	sub	sp, #8
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	6078      	str	r0, [r7, #4]
 801c100:	460b      	mov	r3, r1
 801c102:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c10a:	78fa      	ldrb	r2, [r7, #3]
 801c10c:	4611      	mov	r1, r2
 801c10e:	4618      	mov	r0, r3
 801c110:	f7ec fcbe 	bl	8008a90 <HAL_HCD_HC_GetURBState>
 801c114:	4603      	mov	r3, r0
}
 801c116:	4618      	mov	r0, r3
 801c118:	3708      	adds	r7, #8
 801c11a:	46bd      	mov	sp, r7
 801c11c:	bd80      	pop	{r7, pc}

0801c11e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801c11e:	b580      	push	{r7, lr}
 801c120:	b082      	sub	sp, #8
 801c122:	af00      	add	r7, sp, #0
 801c124:	6078      	str	r0, [r7, #4]
 801c126:	460b      	mov	r3, r1
 801c128:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801c130:	2b01      	cmp	r3, #1
 801c132:	d103      	bne.n	801c13c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801c134:	78fb      	ldrb	r3, [r7, #3]
 801c136:	4618      	mov	r0, r3
 801c138:	f000 f870 	bl	801c21c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801c13c:	20c8      	movs	r0, #200	; 0xc8
 801c13e:	f7ea f869 	bl	8006214 <HAL_Delay>
  return USBH_OK;
 801c142:	2300      	movs	r3, #0
}
 801c144:	4618      	mov	r0, r3
 801c146:	3708      	adds	r7, #8
 801c148:	46bd      	mov	sp, r7
 801c14a:	bd80      	pop	{r7, pc}

0801c14c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801c14c:	b480      	push	{r7}
 801c14e:	b085      	sub	sp, #20
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
 801c154:	460b      	mov	r3, r1
 801c156:	70fb      	strb	r3, [r7, #3]
 801c158:	4613      	mov	r3, r2
 801c15a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801c162:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801c164:	78fb      	ldrb	r3, [r7, #3]
 801c166:	68fa      	ldr	r2, [r7, #12]
 801c168:	212c      	movs	r1, #44	; 0x2c
 801c16a:	fb01 f303 	mul.w	r3, r1, r3
 801c16e:	4413      	add	r3, r2
 801c170:	333b      	adds	r3, #59	; 0x3b
 801c172:	781b      	ldrb	r3, [r3, #0]
 801c174:	2b00      	cmp	r3, #0
 801c176:	d009      	beq.n	801c18c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801c178:	78fb      	ldrb	r3, [r7, #3]
 801c17a:	68fa      	ldr	r2, [r7, #12]
 801c17c:	212c      	movs	r1, #44	; 0x2c
 801c17e:	fb01 f303 	mul.w	r3, r1, r3
 801c182:	4413      	add	r3, r2
 801c184:	3354      	adds	r3, #84	; 0x54
 801c186:	78ba      	ldrb	r2, [r7, #2]
 801c188:	701a      	strb	r2, [r3, #0]
 801c18a:	e008      	b.n	801c19e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801c18c:	78fb      	ldrb	r3, [r7, #3]
 801c18e:	68fa      	ldr	r2, [r7, #12]
 801c190:	212c      	movs	r1, #44	; 0x2c
 801c192:	fb01 f303 	mul.w	r3, r1, r3
 801c196:	4413      	add	r3, r2
 801c198:	3355      	adds	r3, #85	; 0x55
 801c19a:	78ba      	ldrb	r2, [r7, #2]
 801c19c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801c19e:	2300      	movs	r3, #0
}
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	3714      	adds	r7, #20
 801c1a4:	46bd      	mov	sp, r7
 801c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1aa:	4770      	bx	lr

0801c1ac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	b082      	sub	sp, #8
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801c1b4:	6878      	ldr	r0, [r7, #4]
 801c1b6:	f7ea f82d 	bl	8006214 <HAL_Delay>
}
 801c1ba:	bf00      	nop
 801c1bc:	3708      	adds	r7, #8
 801c1be:	46bd      	mov	sp, r7
 801c1c0:	bd80      	pop	{r7, pc}
	...

0801c1c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c1c4:	b480      	push	{r7}
 801c1c6:	b085      	sub	sp, #20
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c1d2:	79fb      	ldrb	r3, [r7, #7]
 801c1d4:	2b03      	cmp	r3, #3
 801c1d6:	d817      	bhi.n	801c208 <USBH_Get_USB_Status+0x44>
 801c1d8:	a201      	add	r2, pc, #4	; (adr r2, 801c1e0 <USBH_Get_USB_Status+0x1c>)
 801c1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1de:	bf00      	nop
 801c1e0:	0801c1f1 	.word	0x0801c1f1
 801c1e4:	0801c1f7 	.word	0x0801c1f7
 801c1e8:	0801c1fd 	.word	0x0801c1fd
 801c1ec:	0801c203 	.word	0x0801c203
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801c1f0:	2300      	movs	r3, #0
 801c1f2:	73fb      	strb	r3, [r7, #15]
    break;
 801c1f4:	e00b      	b.n	801c20e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801c1f6:	2302      	movs	r3, #2
 801c1f8:	73fb      	strb	r3, [r7, #15]
    break;
 801c1fa:	e008      	b.n	801c20e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801c1fc:	2301      	movs	r3, #1
 801c1fe:	73fb      	strb	r3, [r7, #15]
    break;
 801c200:	e005      	b.n	801c20e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801c202:	2302      	movs	r3, #2
 801c204:	73fb      	strb	r3, [r7, #15]
    break;
 801c206:	e002      	b.n	801c20e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801c208:	2302      	movs	r3, #2
 801c20a:	73fb      	strb	r3, [r7, #15]
    break;
 801c20c:	bf00      	nop
  }
  return usb_status;
 801c20e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c210:	4618      	mov	r0, r3
 801c212:	3714      	adds	r7, #20
 801c214:	46bd      	mov	sp, r7
 801c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c21a:	4770      	bx	lr

0801c21c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801c21c:	b580      	push	{r7, lr}
 801c21e:	b084      	sub	sp, #16
 801c220:	af00      	add	r7, sp, #0
 801c222:	4603      	mov	r3, r0
 801c224:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801c226:	79fb      	ldrb	r3, [r7, #7]
 801c228:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801c22a:	79fb      	ldrb	r3, [r7, #7]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d102      	bne.n	801c236 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801c230:	2301      	movs	r3, #1
 801c232:	73fb      	strb	r3, [r7, #15]
 801c234:	e001      	b.n	801c23a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801c236:	2300      	movs	r3, #0
 801c238:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801c23a:	7bfb      	ldrb	r3, [r7, #15]
 801c23c:	461a      	mov	r2, r3
 801c23e:	2120      	movs	r1, #32
 801c240:	4803      	ldr	r0, [pc, #12]	; (801c250 <MX_DriverVbusFS+0x34>)
 801c242:	f7ec f835 	bl	80082b0 <HAL_GPIO_WritePin>
}
 801c246:	bf00      	nop
 801c248:	3710      	adds	r7, #16
 801c24a:	46bd      	mov	sp, r7
 801c24c:	bd80      	pop	{r7, pc}
 801c24e:	bf00      	nop
 801c250:	40020c00 	.word	0x40020c00

0801c254 <std>:
 801c254:	2300      	movs	r3, #0
 801c256:	b510      	push	{r4, lr}
 801c258:	4604      	mov	r4, r0
 801c25a:	e9c0 3300 	strd	r3, r3, [r0]
 801c25e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c262:	6083      	str	r3, [r0, #8]
 801c264:	8181      	strh	r1, [r0, #12]
 801c266:	6643      	str	r3, [r0, #100]	; 0x64
 801c268:	81c2      	strh	r2, [r0, #14]
 801c26a:	6183      	str	r3, [r0, #24]
 801c26c:	4619      	mov	r1, r3
 801c26e:	2208      	movs	r2, #8
 801c270:	305c      	adds	r0, #92	; 0x5c
 801c272:	f000 f945 	bl	801c500 <memset>
 801c276:	4b05      	ldr	r3, [pc, #20]	; (801c28c <std+0x38>)
 801c278:	6263      	str	r3, [r4, #36]	; 0x24
 801c27a:	4b05      	ldr	r3, [pc, #20]	; (801c290 <std+0x3c>)
 801c27c:	62a3      	str	r3, [r4, #40]	; 0x28
 801c27e:	4b05      	ldr	r3, [pc, #20]	; (801c294 <std+0x40>)
 801c280:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c282:	4b05      	ldr	r3, [pc, #20]	; (801c298 <std+0x44>)
 801c284:	6224      	str	r4, [r4, #32]
 801c286:	6323      	str	r3, [r4, #48]	; 0x30
 801c288:	bd10      	pop	{r4, pc}
 801c28a:	bf00      	nop
 801c28c:	0801c8e1 	.word	0x0801c8e1
 801c290:	0801c903 	.word	0x0801c903
 801c294:	0801c93b 	.word	0x0801c93b
 801c298:	0801c95f 	.word	0x0801c95f

0801c29c <_cleanup_r>:
 801c29c:	4901      	ldr	r1, [pc, #4]	; (801c2a4 <_cleanup_r+0x8>)
 801c29e:	f000 b8af 	b.w	801c400 <_fwalk_reent>
 801c2a2:	bf00      	nop
 801c2a4:	0801cc39 	.word	0x0801cc39

0801c2a8 <__sfmoreglue>:
 801c2a8:	b570      	push	{r4, r5, r6, lr}
 801c2aa:	1e4a      	subs	r2, r1, #1
 801c2ac:	2568      	movs	r5, #104	; 0x68
 801c2ae:	4355      	muls	r5, r2
 801c2b0:	460e      	mov	r6, r1
 801c2b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c2b6:	f000 f97b 	bl	801c5b0 <_malloc_r>
 801c2ba:	4604      	mov	r4, r0
 801c2bc:	b140      	cbz	r0, 801c2d0 <__sfmoreglue+0x28>
 801c2be:	2100      	movs	r1, #0
 801c2c0:	e9c0 1600 	strd	r1, r6, [r0]
 801c2c4:	300c      	adds	r0, #12
 801c2c6:	60a0      	str	r0, [r4, #8]
 801c2c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c2cc:	f000 f918 	bl	801c500 <memset>
 801c2d0:	4620      	mov	r0, r4
 801c2d2:	bd70      	pop	{r4, r5, r6, pc}

0801c2d4 <__sfp_lock_acquire>:
 801c2d4:	4801      	ldr	r0, [pc, #4]	; (801c2dc <__sfp_lock_acquire+0x8>)
 801c2d6:	f000 b8d8 	b.w	801c48a <__retarget_lock_acquire_recursive>
 801c2da:	bf00      	nop
 801c2dc:	2000ce5c 	.word	0x2000ce5c

0801c2e0 <__sfp_lock_release>:
 801c2e0:	4801      	ldr	r0, [pc, #4]	; (801c2e8 <__sfp_lock_release+0x8>)
 801c2e2:	f000 b8d3 	b.w	801c48c <__retarget_lock_release_recursive>
 801c2e6:	bf00      	nop
 801c2e8:	2000ce5c 	.word	0x2000ce5c

0801c2ec <__sinit_lock_acquire>:
 801c2ec:	4801      	ldr	r0, [pc, #4]	; (801c2f4 <__sinit_lock_acquire+0x8>)
 801c2ee:	f000 b8cc 	b.w	801c48a <__retarget_lock_acquire_recursive>
 801c2f2:	bf00      	nop
 801c2f4:	2000ce57 	.word	0x2000ce57

0801c2f8 <__sinit_lock_release>:
 801c2f8:	4801      	ldr	r0, [pc, #4]	; (801c300 <__sinit_lock_release+0x8>)
 801c2fa:	f000 b8c7 	b.w	801c48c <__retarget_lock_release_recursive>
 801c2fe:	bf00      	nop
 801c300:	2000ce57 	.word	0x2000ce57

0801c304 <__sinit>:
 801c304:	b510      	push	{r4, lr}
 801c306:	4604      	mov	r4, r0
 801c308:	f7ff fff0 	bl	801c2ec <__sinit_lock_acquire>
 801c30c:	69a3      	ldr	r3, [r4, #24]
 801c30e:	b11b      	cbz	r3, 801c318 <__sinit+0x14>
 801c310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c314:	f7ff bff0 	b.w	801c2f8 <__sinit_lock_release>
 801c318:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c31c:	6523      	str	r3, [r4, #80]	; 0x50
 801c31e:	4b13      	ldr	r3, [pc, #76]	; (801c36c <__sinit+0x68>)
 801c320:	4a13      	ldr	r2, [pc, #76]	; (801c370 <__sinit+0x6c>)
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	62a2      	str	r2, [r4, #40]	; 0x28
 801c326:	42a3      	cmp	r3, r4
 801c328:	bf04      	itt	eq
 801c32a:	2301      	moveq	r3, #1
 801c32c:	61a3      	streq	r3, [r4, #24]
 801c32e:	4620      	mov	r0, r4
 801c330:	f000 f820 	bl	801c374 <__sfp>
 801c334:	6060      	str	r0, [r4, #4]
 801c336:	4620      	mov	r0, r4
 801c338:	f000 f81c 	bl	801c374 <__sfp>
 801c33c:	60a0      	str	r0, [r4, #8]
 801c33e:	4620      	mov	r0, r4
 801c340:	f000 f818 	bl	801c374 <__sfp>
 801c344:	2200      	movs	r2, #0
 801c346:	60e0      	str	r0, [r4, #12]
 801c348:	2104      	movs	r1, #4
 801c34a:	6860      	ldr	r0, [r4, #4]
 801c34c:	f7ff ff82 	bl	801c254 <std>
 801c350:	68a0      	ldr	r0, [r4, #8]
 801c352:	2201      	movs	r2, #1
 801c354:	2109      	movs	r1, #9
 801c356:	f7ff ff7d 	bl	801c254 <std>
 801c35a:	68e0      	ldr	r0, [r4, #12]
 801c35c:	2202      	movs	r2, #2
 801c35e:	2112      	movs	r1, #18
 801c360:	f7ff ff78 	bl	801c254 <std>
 801c364:	2301      	movs	r3, #1
 801c366:	61a3      	str	r3, [r4, #24]
 801c368:	e7d2      	b.n	801c310 <__sinit+0xc>
 801c36a:	bf00      	nop
 801c36c:	08020480 	.word	0x08020480
 801c370:	0801c29d 	.word	0x0801c29d

0801c374 <__sfp>:
 801c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c376:	4607      	mov	r7, r0
 801c378:	f7ff ffac 	bl	801c2d4 <__sfp_lock_acquire>
 801c37c:	4b1e      	ldr	r3, [pc, #120]	; (801c3f8 <__sfp+0x84>)
 801c37e:	681e      	ldr	r6, [r3, #0]
 801c380:	69b3      	ldr	r3, [r6, #24]
 801c382:	b913      	cbnz	r3, 801c38a <__sfp+0x16>
 801c384:	4630      	mov	r0, r6
 801c386:	f7ff ffbd 	bl	801c304 <__sinit>
 801c38a:	3648      	adds	r6, #72	; 0x48
 801c38c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c390:	3b01      	subs	r3, #1
 801c392:	d503      	bpl.n	801c39c <__sfp+0x28>
 801c394:	6833      	ldr	r3, [r6, #0]
 801c396:	b30b      	cbz	r3, 801c3dc <__sfp+0x68>
 801c398:	6836      	ldr	r6, [r6, #0]
 801c39a:	e7f7      	b.n	801c38c <__sfp+0x18>
 801c39c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c3a0:	b9d5      	cbnz	r5, 801c3d8 <__sfp+0x64>
 801c3a2:	4b16      	ldr	r3, [pc, #88]	; (801c3fc <__sfp+0x88>)
 801c3a4:	60e3      	str	r3, [r4, #12]
 801c3a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c3aa:	6665      	str	r5, [r4, #100]	; 0x64
 801c3ac:	f000 f86c 	bl	801c488 <__retarget_lock_init_recursive>
 801c3b0:	f7ff ff96 	bl	801c2e0 <__sfp_lock_release>
 801c3b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c3b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c3bc:	6025      	str	r5, [r4, #0]
 801c3be:	61a5      	str	r5, [r4, #24]
 801c3c0:	2208      	movs	r2, #8
 801c3c2:	4629      	mov	r1, r5
 801c3c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c3c8:	f000 f89a 	bl	801c500 <memset>
 801c3cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c3d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3d8:	3468      	adds	r4, #104	; 0x68
 801c3da:	e7d9      	b.n	801c390 <__sfp+0x1c>
 801c3dc:	2104      	movs	r1, #4
 801c3de:	4638      	mov	r0, r7
 801c3e0:	f7ff ff62 	bl	801c2a8 <__sfmoreglue>
 801c3e4:	4604      	mov	r4, r0
 801c3e6:	6030      	str	r0, [r6, #0]
 801c3e8:	2800      	cmp	r0, #0
 801c3ea:	d1d5      	bne.n	801c398 <__sfp+0x24>
 801c3ec:	f7ff ff78 	bl	801c2e0 <__sfp_lock_release>
 801c3f0:	230c      	movs	r3, #12
 801c3f2:	603b      	str	r3, [r7, #0]
 801c3f4:	e7ee      	b.n	801c3d4 <__sfp+0x60>
 801c3f6:	bf00      	nop
 801c3f8:	08020480 	.word	0x08020480
 801c3fc:	ffff0001 	.word	0xffff0001

0801c400 <_fwalk_reent>:
 801c400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c404:	4606      	mov	r6, r0
 801c406:	4688      	mov	r8, r1
 801c408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c40c:	2700      	movs	r7, #0
 801c40e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c412:	f1b9 0901 	subs.w	r9, r9, #1
 801c416:	d505      	bpl.n	801c424 <_fwalk_reent+0x24>
 801c418:	6824      	ldr	r4, [r4, #0]
 801c41a:	2c00      	cmp	r4, #0
 801c41c:	d1f7      	bne.n	801c40e <_fwalk_reent+0xe>
 801c41e:	4638      	mov	r0, r7
 801c420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c424:	89ab      	ldrh	r3, [r5, #12]
 801c426:	2b01      	cmp	r3, #1
 801c428:	d907      	bls.n	801c43a <_fwalk_reent+0x3a>
 801c42a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c42e:	3301      	adds	r3, #1
 801c430:	d003      	beq.n	801c43a <_fwalk_reent+0x3a>
 801c432:	4629      	mov	r1, r5
 801c434:	4630      	mov	r0, r6
 801c436:	47c0      	blx	r8
 801c438:	4307      	orrs	r7, r0
 801c43a:	3568      	adds	r5, #104	; 0x68
 801c43c:	e7e9      	b.n	801c412 <_fwalk_reent+0x12>
	...

0801c440 <__libc_init_array>:
 801c440:	b570      	push	{r4, r5, r6, lr}
 801c442:	4d0d      	ldr	r5, [pc, #52]	; (801c478 <__libc_init_array+0x38>)
 801c444:	4c0d      	ldr	r4, [pc, #52]	; (801c47c <__libc_init_array+0x3c>)
 801c446:	1b64      	subs	r4, r4, r5
 801c448:	10a4      	asrs	r4, r4, #2
 801c44a:	2600      	movs	r6, #0
 801c44c:	42a6      	cmp	r6, r4
 801c44e:	d109      	bne.n	801c464 <__libc_init_array+0x24>
 801c450:	4d0b      	ldr	r5, [pc, #44]	; (801c480 <__libc_init_array+0x40>)
 801c452:	4c0c      	ldr	r4, [pc, #48]	; (801c484 <__libc_init_array+0x44>)
 801c454:	f001 f9a2 	bl	801d79c <_init>
 801c458:	1b64      	subs	r4, r4, r5
 801c45a:	10a4      	asrs	r4, r4, #2
 801c45c:	2600      	movs	r6, #0
 801c45e:	42a6      	cmp	r6, r4
 801c460:	d105      	bne.n	801c46e <__libc_init_array+0x2e>
 801c462:	bd70      	pop	{r4, r5, r6, pc}
 801c464:	f855 3b04 	ldr.w	r3, [r5], #4
 801c468:	4798      	blx	r3
 801c46a:	3601      	adds	r6, #1
 801c46c:	e7ee      	b.n	801c44c <__libc_init_array+0xc>
 801c46e:	f855 3b04 	ldr.w	r3, [r5], #4
 801c472:	4798      	blx	r3
 801c474:	3601      	adds	r6, #1
 801c476:	e7f2      	b.n	801c45e <__libc_init_array+0x1e>
 801c478:	080204c0 	.word	0x080204c0
 801c47c:	080204c0 	.word	0x080204c0
 801c480:	080204c0 	.word	0x080204c0
 801c484:	080204c4 	.word	0x080204c4

0801c488 <__retarget_lock_init_recursive>:
 801c488:	4770      	bx	lr

0801c48a <__retarget_lock_acquire_recursive>:
 801c48a:	4770      	bx	lr

0801c48c <__retarget_lock_release_recursive>:
 801c48c:	4770      	bx	lr
	...

0801c490 <malloc>:
 801c490:	4b02      	ldr	r3, [pc, #8]	; (801c49c <malloc+0xc>)
 801c492:	4601      	mov	r1, r0
 801c494:	6818      	ldr	r0, [r3, #0]
 801c496:	f000 b88b 	b.w	801c5b0 <_malloc_r>
 801c49a:	bf00      	nop
 801c49c:	20000064 	.word	0x20000064

0801c4a0 <free>:
 801c4a0:	4b02      	ldr	r3, [pc, #8]	; (801c4ac <free+0xc>)
 801c4a2:	4601      	mov	r1, r0
 801c4a4:	6818      	ldr	r0, [r3, #0]
 801c4a6:	f000 b833 	b.w	801c510 <_free_r>
 801c4aa:	bf00      	nop
 801c4ac:	20000064 	.word	0x20000064

0801c4b0 <memcpy>:
 801c4b0:	440a      	add	r2, r1
 801c4b2:	4291      	cmp	r1, r2
 801c4b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c4b8:	d100      	bne.n	801c4bc <memcpy+0xc>
 801c4ba:	4770      	bx	lr
 801c4bc:	b510      	push	{r4, lr}
 801c4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c4c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c4c6:	4291      	cmp	r1, r2
 801c4c8:	d1f9      	bne.n	801c4be <memcpy+0xe>
 801c4ca:	bd10      	pop	{r4, pc}

0801c4cc <memmove>:
 801c4cc:	4288      	cmp	r0, r1
 801c4ce:	b510      	push	{r4, lr}
 801c4d0:	eb01 0402 	add.w	r4, r1, r2
 801c4d4:	d902      	bls.n	801c4dc <memmove+0x10>
 801c4d6:	4284      	cmp	r4, r0
 801c4d8:	4623      	mov	r3, r4
 801c4da:	d807      	bhi.n	801c4ec <memmove+0x20>
 801c4dc:	1e43      	subs	r3, r0, #1
 801c4de:	42a1      	cmp	r1, r4
 801c4e0:	d008      	beq.n	801c4f4 <memmove+0x28>
 801c4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c4e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c4ea:	e7f8      	b.n	801c4de <memmove+0x12>
 801c4ec:	4402      	add	r2, r0
 801c4ee:	4601      	mov	r1, r0
 801c4f0:	428a      	cmp	r2, r1
 801c4f2:	d100      	bne.n	801c4f6 <memmove+0x2a>
 801c4f4:	bd10      	pop	{r4, pc}
 801c4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c4fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c4fe:	e7f7      	b.n	801c4f0 <memmove+0x24>

0801c500 <memset>:
 801c500:	4402      	add	r2, r0
 801c502:	4603      	mov	r3, r0
 801c504:	4293      	cmp	r3, r2
 801c506:	d100      	bne.n	801c50a <memset+0xa>
 801c508:	4770      	bx	lr
 801c50a:	f803 1b01 	strb.w	r1, [r3], #1
 801c50e:	e7f9      	b.n	801c504 <memset+0x4>

0801c510 <_free_r>:
 801c510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c512:	2900      	cmp	r1, #0
 801c514:	d048      	beq.n	801c5a8 <_free_r+0x98>
 801c516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c51a:	9001      	str	r0, [sp, #4]
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	f1a1 0404 	sub.w	r4, r1, #4
 801c522:	bfb8      	it	lt
 801c524:	18e4      	addlt	r4, r4, r3
 801c526:	f000 fc39 	bl	801cd9c <__malloc_lock>
 801c52a:	4a20      	ldr	r2, [pc, #128]	; (801c5ac <_free_r+0x9c>)
 801c52c:	9801      	ldr	r0, [sp, #4]
 801c52e:	6813      	ldr	r3, [r2, #0]
 801c530:	4615      	mov	r5, r2
 801c532:	b933      	cbnz	r3, 801c542 <_free_r+0x32>
 801c534:	6063      	str	r3, [r4, #4]
 801c536:	6014      	str	r4, [r2, #0]
 801c538:	b003      	add	sp, #12
 801c53a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c53e:	f000 bc33 	b.w	801cda8 <__malloc_unlock>
 801c542:	42a3      	cmp	r3, r4
 801c544:	d90b      	bls.n	801c55e <_free_r+0x4e>
 801c546:	6821      	ldr	r1, [r4, #0]
 801c548:	1862      	adds	r2, r4, r1
 801c54a:	4293      	cmp	r3, r2
 801c54c:	bf04      	itt	eq
 801c54e:	681a      	ldreq	r2, [r3, #0]
 801c550:	685b      	ldreq	r3, [r3, #4]
 801c552:	6063      	str	r3, [r4, #4]
 801c554:	bf04      	itt	eq
 801c556:	1852      	addeq	r2, r2, r1
 801c558:	6022      	streq	r2, [r4, #0]
 801c55a:	602c      	str	r4, [r5, #0]
 801c55c:	e7ec      	b.n	801c538 <_free_r+0x28>
 801c55e:	461a      	mov	r2, r3
 801c560:	685b      	ldr	r3, [r3, #4]
 801c562:	b10b      	cbz	r3, 801c568 <_free_r+0x58>
 801c564:	42a3      	cmp	r3, r4
 801c566:	d9fa      	bls.n	801c55e <_free_r+0x4e>
 801c568:	6811      	ldr	r1, [r2, #0]
 801c56a:	1855      	adds	r5, r2, r1
 801c56c:	42a5      	cmp	r5, r4
 801c56e:	d10b      	bne.n	801c588 <_free_r+0x78>
 801c570:	6824      	ldr	r4, [r4, #0]
 801c572:	4421      	add	r1, r4
 801c574:	1854      	adds	r4, r2, r1
 801c576:	42a3      	cmp	r3, r4
 801c578:	6011      	str	r1, [r2, #0]
 801c57a:	d1dd      	bne.n	801c538 <_free_r+0x28>
 801c57c:	681c      	ldr	r4, [r3, #0]
 801c57e:	685b      	ldr	r3, [r3, #4]
 801c580:	6053      	str	r3, [r2, #4]
 801c582:	4421      	add	r1, r4
 801c584:	6011      	str	r1, [r2, #0]
 801c586:	e7d7      	b.n	801c538 <_free_r+0x28>
 801c588:	d902      	bls.n	801c590 <_free_r+0x80>
 801c58a:	230c      	movs	r3, #12
 801c58c:	6003      	str	r3, [r0, #0]
 801c58e:	e7d3      	b.n	801c538 <_free_r+0x28>
 801c590:	6825      	ldr	r5, [r4, #0]
 801c592:	1961      	adds	r1, r4, r5
 801c594:	428b      	cmp	r3, r1
 801c596:	bf04      	itt	eq
 801c598:	6819      	ldreq	r1, [r3, #0]
 801c59a:	685b      	ldreq	r3, [r3, #4]
 801c59c:	6063      	str	r3, [r4, #4]
 801c59e:	bf04      	itt	eq
 801c5a0:	1949      	addeq	r1, r1, r5
 801c5a2:	6021      	streq	r1, [r4, #0]
 801c5a4:	6054      	str	r4, [r2, #4]
 801c5a6:	e7c7      	b.n	801c538 <_free_r+0x28>
 801c5a8:	b003      	add	sp, #12
 801c5aa:	bd30      	pop	{r4, r5, pc}
 801c5ac:	200086b0 	.word	0x200086b0

0801c5b0 <_malloc_r>:
 801c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5b2:	1ccd      	adds	r5, r1, #3
 801c5b4:	f025 0503 	bic.w	r5, r5, #3
 801c5b8:	3508      	adds	r5, #8
 801c5ba:	2d0c      	cmp	r5, #12
 801c5bc:	bf38      	it	cc
 801c5be:	250c      	movcc	r5, #12
 801c5c0:	2d00      	cmp	r5, #0
 801c5c2:	4606      	mov	r6, r0
 801c5c4:	db01      	blt.n	801c5ca <_malloc_r+0x1a>
 801c5c6:	42a9      	cmp	r1, r5
 801c5c8:	d903      	bls.n	801c5d2 <_malloc_r+0x22>
 801c5ca:	230c      	movs	r3, #12
 801c5cc:	6033      	str	r3, [r6, #0]
 801c5ce:	2000      	movs	r0, #0
 801c5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5d2:	f000 fbe3 	bl	801cd9c <__malloc_lock>
 801c5d6:	4921      	ldr	r1, [pc, #132]	; (801c65c <_malloc_r+0xac>)
 801c5d8:	680a      	ldr	r2, [r1, #0]
 801c5da:	4614      	mov	r4, r2
 801c5dc:	b99c      	cbnz	r4, 801c606 <_malloc_r+0x56>
 801c5de:	4f20      	ldr	r7, [pc, #128]	; (801c660 <_malloc_r+0xb0>)
 801c5e0:	683b      	ldr	r3, [r7, #0]
 801c5e2:	b923      	cbnz	r3, 801c5ee <_malloc_r+0x3e>
 801c5e4:	4621      	mov	r1, r4
 801c5e6:	4630      	mov	r0, r6
 801c5e8:	f000 f94a 	bl	801c880 <_sbrk_r>
 801c5ec:	6038      	str	r0, [r7, #0]
 801c5ee:	4629      	mov	r1, r5
 801c5f0:	4630      	mov	r0, r6
 801c5f2:	f000 f945 	bl	801c880 <_sbrk_r>
 801c5f6:	1c43      	adds	r3, r0, #1
 801c5f8:	d123      	bne.n	801c642 <_malloc_r+0x92>
 801c5fa:	230c      	movs	r3, #12
 801c5fc:	6033      	str	r3, [r6, #0]
 801c5fe:	4630      	mov	r0, r6
 801c600:	f000 fbd2 	bl	801cda8 <__malloc_unlock>
 801c604:	e7e3      	b.n	801c5ce <_malloc_r+0x1e>
 801c606:	6823      	ldr	r3, [r4, #0]
 801c608:	1b5b      	subs	r3, r3, r5
 801c60a:	d417      	bmi.n	801c63c <_malloc_r+0x8c>
 801c60c:	2b0b      	cmp	r3, #11
 801c60e:	d903      	bls.n	801c618 <_malloc_r+0x68>
 801c610:	6023      	str	r3, [r4, #0]
 801c612:	441c      	add	r4, r3
 801c614:	6025      	str	r5, [r4, #0]
 801c616:	e004      	b.n	801c622 <_malloc_r+0x72>
 801c618:	6863      	ldr	r3, [r4, #4]
 801c61a:	42a2      	cmp	r2, r4
 801c61c:	bf0c      	ite	eq
 801c61e:	600b      	streq	r3, [r1, #0]
 801c620:	6053      	strne	r3, [r2, #4]
 801c622:	4630      	mov	r0, r6
 801c624:	f000 fbc0 	bl	801cda8 <__malloc_unlock>
 801c628:	f104 000b 	add.w	r0, r4, #11
 801c62c:	1d23      	adds	r3, r4, #4
 801c62e:	f020 0007 	bic.w	r0, r0, #7
 801c632:	1ac2      	subs	r2, r0, r3
 801c634:	d0cc      	beq.n	801c5d0 <_malloc_r+0x20>
 801c636:	1a1b      	subs	r3, r3, r0
 801c638:	50a3      	str	r3, [r4, r2]
 801c63a:	e7c9      	b.n	801c5d0 <_malloc_r+0x20>
 801c63c:	4622      	mov	r2, r4
 801c63e:	6864      	ldr	r4, [r4, #4]
 801c640:	e7cc      	b.n	801c5dc <_malloc_r+0x2c>
 801c642:	1cc4      	adds	r4, r0, #3
 801c644:	f024 0403 	bic.w	r4, r4, #3
 801c648:	42a0      	cmp	r0, r4
 801c64a:	d0e3      	beq.n	801c614 <_malloc_r+0x64>
 801c64c:	1a21      	subs	r1, r4, r0
 801c64e:	4630      	mov	r0, r6
 801c650:	f000 f916 	bl	801c880 <_sbrk_r>
 801c654:	3001      	adds	r0, #1
 801c656:	d1dd      	bne.n	801c614 <_malloc_r+0x64>
 801c658:	e7cf      	b.n	801c5fa <_malloc_r+0x4a>
 801c65a:	bf00      	nop
 801c65c:	200086b0 	.word	0x200086b0
 801c660:	200086b4 	.word	0x200086b4

0801c664 <iprintf>:
 801c664:	b40f      	push	{r0, r1, r2, r3}
 801c666:	4b0a      	ldr	r3, [pc, #40]	; (801c690 <iprintf+0x2c>)
 801c668:	b513      	push	{r0, r1, r4, lr}
 801c66a:	681c      	ldr	r4, [r3, #0]
 801c66c:	b124      	cbz	r4, 801c678 <iprintf+0x14>
 801c66e:	69a3      	ldr	r3, [r4, #24]
 801c670:	b913      	cbnz	r3, 801c678 <iprintf+0x14>
 801c672:	4620      	mov	r0, r4
 801c674:	f7ff fe46 	bl	801c304 <__sinit>
 801c678:	ab05      	add	r3, sp, #20
 801c67a:	9a04      	ldr	r2, [sp, #16]
 801c67c:	68a1      	ldr	r1, [r4, #8]
 801c67e:	9301      	str	r3, [sp, #4]
 801c680:	4620      	mov	r0, r4
 801c682:	f000 fd1d 	bl	801d0c0 <_vfiprintf_r>
 801c686:	b002      	add	sp, #8
 801c688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c68c:	b004      	add	sp, #16
 801c68e:	4770      	bx	lr
 801c690:	20000064 	.word	0x20000064

0801c694 <putchar>:
 801c694:	4b09      	ldr	r3, [pc, #36]	; (801c6bc <putchar+0x28>)
 801c696:	b513      	push	{r0, r1, r4, lr}
 801c698:	681c      	ldr	r4, [r3, #0]
 801c69a:	4601      	mov	r1, r0
 801c69c:	b134      	cbz	r4, 801c6ac <putchar+0x18>
 801c69e:	69a3      	ldr	r3, [r4, #24]
 801c6a0:	b923      	cbnz	r3, 801c6ac <putchar+0x18>
 801c6a2:	9001      	str	r0, [sp, #4]
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	f7ff fe2d 	bl	801c304 <__sinit>
 801c6aa:	9901      	ldr	r1, [sp, #4]
 801c6ac:	68a2      	ldr	r2, [r4, #8]
 801c6ae:	4620      	mov	r0, r4
 801c6b0:	b002      	add	sp, #8
 801c6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c6b6:	f000 bfc7 	b.w	801d648 <_putc_r>
 801c6ba:	bf00      	nop
 801c6bc:	20000064 	.word	0x20000064

0801c6c0 <_puts_r>:
 801c6c0:	b570      	push	{r4, r5, r6, lr}
 801c6c2:	460e      	mov	r6, r1
 801c6c4:	4605      	mov	r5, r0
 801c6c6:	b118      	cbz	r0, 801c6d0 <_puts_r+0x10>
 801c6c8:	6983      	ldr	r3, [r0, #24]
 801c6ca:	b90b      	cbnz	r3, 801c6d0 <_puts_r+0x10>
 801c6cc:	f7ff fe1a 	bl	801c304 <__sinit>
 801c6d0:	69ab      	ldr	r3, [r5, #24]
 801c6d2:	68ac      	ldr	r4, [r5, #8]
 801c6d4:	b913      	cbnz	r3, 801c6dc <_puts_r+0x1c>
 801c6d6:	4628      	mov	r0, r5
 801c6d8:	f7ff fe14 	bl	801c304 <__sinit>
 801c6dc:	4b2c      	ldr	r3, [pc, #176]	; (801c790 <_puts_r+0xd0>)
 801c6de:	429c      	cmp	r4, r3
 801c6e0:	d120      	bne.n	801c724 <_puts_r+0x64>
 801c6e2:	686c      	ldr	r4, [r5, #4]
 801c6e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c6e6:	07db      	lsls	r3, r3, #31
 801c6e8:	d405      	bmi.n	801c6f6 <_puts_r+0x36>
 801c6ea:	89a3      	ldrh	r3, [r4, #12]
 801c6ec:	0598      	lsls	r0, r3, #22
 801c6ee:	d402      	bmi.n	801c6f6 <_puts_r+0x36>
 801c6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c6f2:	f7ff feca 	bl	801c48a <__retarget_lock_acquire_recursive>
 801c6f6:	89a3      	ldrh	r3, [r4, #12]
 801c6f8:	0719      	lsls	r1, r3, #28
 801c6fa:	d51d      	bpl.n	801c738 <_puts_r+0x78>
 801c6fc:	6923      	ldr	r3, [r4, #16]
 801c6fe:	b1db      	cbz	r3, 801c738 <_puts_r+0x78>
 801c700:	3e01      	subs	r6, #1
 801c702:	68a3      	ldr	r3, [r4, #8]
 801c704:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c708:	3b01      	subs	r3, #1
 801c70a:	60a3      	str	r3, [r4, #8]
 801c70c:	bb39      	cbnz	r1, 801c75e <_puts_r+0x9e>
 801c70e:	2b00      	cmp	r3, #0
 801c710:	da38      	bge.n	801c784 <_puts_r+0xc4>
 801c712:	4622      	mov	r2, r4
 801c714:	210a      	movs	r1, #10
 801c716:	4628      	mov	r0, r5
 801c718:	f000 f926 	bl	801c968 <__swbuf_r>
 801c71c:	3001      	adds	r0, #1
 801c71e:	d011      	beq.n	801c744 <_puts_r+0x84>
 801c720:	250a      	movs	r5, #10
 801c722:	e011      	b.n	801c748 <_puts_r+0x88>
 801c724:	4b1b      	ldr	r3, [pc, #108]	; (801c794 <_puts_r+0xd4>)
 801c726:	429c      	cmp	r4, r3
 801c728:	d101      	bne.n	801c72e <_puts_r+0x6e>
 801c72a:	68ac      	ldr	r4, [r5, #8]
 801c72c:	e7da      	b.n	801c6e4 <_puts_r+0x24>
 801c72e:	4b1a      	ldr	r3, [pc, #104]	; (801c798 <_puts_r+0xd8>)
 801c730:	429c      	cmp	r4, r3
 801c732:	bf08      	it	eq
 801c734:	68ec      	ldreq	r4, [r5, #12]
 801c736:	e7d5      	b.n	801c6e4 <_puts_r+0x24>
 801c738:	4621      	mov	r1, r4
 801c73a:	4628      	mov	r0, r5
 801c73c:	f000 f978 	bl	801ca30 <__swsetup_r>
 801c740:	2800      	cmp	r0, #0
 801c742:	d0dd      	beq.n	801c700 <_puts_r+0x40>
 801c744:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c74a:	07da      	lsls	r2, r3, #31
 801c74c:	d405      	bmi.n	801c75a <_puts_r+0x9a>
 801c74e:	89a3      	ldrh	r3, [r4, #12]
 801c750:	059b      	lsls	r3, r3, #22
 801c752:	d402      	bmi.n	801c75a <_puts_r+0x9a>
 801c754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c756:	f7ff fe99 	bl	801c48c <__retarget_lock_release_recursive>
 801c75a:	4628      	mov	r0, r5
 801c75c:	bd70      	pop	{r4, r5, r6, pc}
 801c75e:	2b00      	cmp	r3, #0
 801c760:	da04      	bge.n	801c76c <_puts_r+0xac>
 801c762:	69a2      	ldr	r2, [r4, #24]
 801c764:	429a      	cmp	r2, r3
 801c766:	dc06      	bgt.n	801c776 <_puts_r+0xb6>
 801c768:	290a      	cmp	r1, #10
 801c76a:	d004      	beq.n	801c776 <_puts_r+0xb6>
 801c76c:	6823      	ldr	r3, [r4, #0]
 801c76e:	1c5a      	adds	r2, r3, #1
 801c770:	6022      	str	r2, [r4, #0]
 801c772:	7019      	strb	r1, [r3, #0]
 801c774:	e7c5      	b.n	801c702 <_puts_r+0x42>
 801c776:	4622      	mov	r2, r4
 801c778:	4628      	mov	r0, r5
 801c77a:	f000 f8f5 	bl	801c968 <__swbuf_r>
 801c77e:	3001      	adds	r0, #1
 801c780:	d1bf      	bne.n	801c702 <_puts_r+0x42>
 801c782:	e7df      	b.n	801c744 <_puts_r+0x84>
 801c784:	6823      	ldr	r3, [r4, #0]
 801c786:	250a      	movs	r5, #10
 801c788:	1c5a      	adds	r2, r3, #1
 801c78a:	6022      	str	r2, [r4, #0]
 801c78c:	701d      	strb	r5, [r3, #0]
 801c78e:	e7db      	b.n	801c748 <_puts_r+0x88>
 801c790:	08020440 	.word	0x08020440
 801c794:	08020460 	.word	0x08020460
 801c798:	08020420 	.word	0x08020420

0801c79c <puts>:
 801c79c:	4b02      	ldr	r3, [pc, #8]	; (801c7a8 <puts+0xc>)
 801c79e:	4601      	mov	r1, r0
 801c7a0:	6818      	ldr	r0, [r3, #0]
 801c7a2:	f7ff bf8d 	b.w	801c6c0 <_puts_r>
 801c7a6:	bf00      	nop
 801c7a8:	20000064 	.word	0x20000064

0801c7ac <cleanup_glue>:
 801c7ac:	b538      	push	{r3, r4, r5, lr}
 801c7ae:	460c      	mov	r4, r1
 801c7b0:	6809      	ldr	r1, [r1, #0]
 801c7b2:	4605      	mov	r5, r0
 801c7b4:	b109      	cbz	r1, 801c7ba <cleanup_glue+0xe>
 801c7b6:	f7ff fff9 	bl	801c7ac <cleanup_glue>
 801c7ba:	4621      	mov	r1, r4
 801c7bc:	4628      	mov	r0, r5
 801c7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c7c2:	f7ff bea5 	b.w	801c510 <_free_r>
	...

0801c7c8 <_reclaim_reent>:
 801c7c8:	4b2c      	ldr	r3, [pc, #176]	; (801c87c <_reclaim_reent+0xb4>)
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	4283      	cmp	r3, r0
 801c7ce:	b570      	push	{r4, r5, r6, lr}
 801c7d0:	4604      	mov	r4, r0
 801c7d2:	d051      	beq.n	801c878 <_reclaim_reent+0xb0>
 801c7d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c7d6:	b143      	cbz	r3, 801c7ea <_reclaim_reent+0x22>
 801c7d8:	68db      	ldr	r3, [r3, #12]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d14a      	bne.n	801c874 <_reclaim_reent+0xac>
 801c7de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c7e0:	6819      	ldr	r1, [r3, #0]
 801c7e2:	b111      	cbz	r1, 801c7ea <_reclaim_reent+0x22>
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	f7ff fe93 	bl	801c510 <_free_r>
 801c7ea:	6961      	ldr	r1, [r4, #20]
 801c7ec:	b111      	cbz	r1, 801c7f4 <_reclaim_reent+0x2c>
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	f7ff fe8e 	bl	801c510 <_free_r>
 801c7f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c7f6:	b111      	cbz	r1, 801c7fe <_reclaim_reent+0x36>
 801c7f8:	4620      	mov	r0, r4
 801c7fa:	f7ff fe89 	bl	801c510 <_free_r>
 801c7fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c800:	b111      	cbz	r1, 801c808 <_reclaim_reent+0x40>
 801c802:	4620      	mov	r0, r4
 801c804:	f7ff fe84 	bl	801c510 <_free_r>
 801c808:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801c80a:	b111      	cbz	r1, 801c812 <_reclaim_reent+0x4a>
 801c80c:	4620      	mov	r0, r4
 801c80e:	f7ff fe7f 	bl	801c510 <_free_r>
 801c812:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c814:	b111      	cbz	r1, 801c81c <_reclaim_reent+0x54>
 801c816:	4620      	mov	r0, r4
 801c818:	f7ff fe7a 	bl	801c510 <_free_r>
 801c81c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801c81e:	b111      	cbz	r1, 801c826 <_reclaim_reent+0x5e>
 801c820:	4620      	mov	r0, r4
 801c822:	f7ff fe75 	bl	801c510 <_free_r>
 801c826:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801c828:	b111      	cbz	r1, 801c830 <_reclaim_reent+0x68>
 801c82a:	4620      	mov	r0, r4
 801c82c:	f7ff fe70 	bl	801c510 <_free_r>
 801c830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c832:	b111      	cbz	r1, 801c83a <_reclaim_reent+0x72>
 801c834:	4620      	mov	r0, r4
 801c836:	f7ff fe6b 	bl	801c510 <_free_r>
 801c83a:	69a3      	ldr	r3, [r4, #24]
 801c83c:	b1e3      	cbz	r3, 801c878 <_reclaim_reent+0xb0>
 801c83e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c840:	4620      	mov	r0, r4
 801c842:	4798      	blx	r3
 801c844:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c846:	b1b9      	cbz	r1, 801c878 <_reclaim_reent+0xb0>
 801c848:	4620      	mov	r0, r4
 801c84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c84e:	f7ff bfad 	b.w	801c7ac <cleanup_glue>
 801c852:	5949      	ldr	r1, [r1, r5]
 801c854:	b941      	cbnz	r1, 801c868 <_reclaim_reent+0xa0>
 801c856:	3504      	adds	r5, #4
 801c858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c85a:	2d80      	cmp	r5, #128	; 0x80
 801c85c:	68d9      	ldr	r1, [r3, #12]
 801c85e:	d1f8      	bne.n	801c852 <_reclaim_reent+0x8a>
 801c860:	4620      	mov	r0, r4
 801c862:	f7ff fe55 	bl	801c510 <_free_r>
 801c866:	e7ba      	b.n	801c7de <_reclaim_reent+0x16>
 801c868:	680e      	ldr	r6, [r1, #0]
 801c86a:	4620      	mov	r0, r4
 801c86c:	f7ff fe50 	bl	801c510 <_free_r>
 801c870:	4631      	mov	r1, r6
 801c872:	e7ef      	b.n	801c854 <_reclaim_reent+0x8c>
 801c874:	2500      	movs	r5, #0
 801c876:	e7ef      	b.n	801c858 <_reclaim_reent+0x90>
 801c878:	bd70      	pop	{r4, r5, r6, pc}
 801c87a:	bf00      	nop
 801c87c:	20000064 	.word	0x20000064

0801c880 <_sbrk_r>:
 801c880:	b538      	push	{r3, r4, r5, lr}
 801c882:	4d06      	ldr	r5, [pc, #24]	; (801c89c <_sbrk_r+0x1c>)
 801c884:	2300      	movs	r3, #0
 801c886:	4604      	mov	r4, r0
 801c888:	4608      	mov	r0, r1
 801c88a:	602b      	str	r3, [r5, #0]
 801c88c:	f7e7 f95c 	bl	8003b48 <_sbrk>
 801c890:	1c43      	adds	r3, r0, #1
 801c892:	d102      	bne.n	801c89a <_sbrk_r+0x1a>
 801c894:	682b      	ldr	r3, [r5, #0]
 801c896:	b103      	cbz	r3, 801c89a <_sbrk_r+0x1a>
 801c898:	6023      	str	r3, [r4, #0]
 801c89a:	bd38      	pop	{r3, r4, r5, pc}
 801c89c:	2000c764 	.word	0x2000c764

0801c8a0 <siprintf>:
 801c8a0:	b40e      	push	{r1, r2, r3}
 801c8a2:	b500      	push	{lr}
 801c8a4:	b09c      	sub	sp, #112	; 0x70
 801c8a6:	ab1d      	add	r3, sp, #116	; 0x74
 801c8a8:	9002      	str	r0, [sp, #8]
 801c8aa:	9006      	str	r0, [sp, #24]
 801c8ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c8b0:	4809      	ldr	r0, [pc, #36]	; (801c8d8 <siprintf+0x38>)
 801c8b2:	9107      	str	r1, [sp, #28]
 801c8b4:	9104      	str	r1, [sp, #16]
 801c8b6:	4909      	ldr	r1, [pc, #36]	; (801c8dc <siprintf+0x3c>)
 801c8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801c8bc:	9105      	str	r1, [sp, #20]
 801c8be:	6800      	ldr	r0, [r0, #0]
 801c8c0:	9301      	str	r3, [sp, #4]
 801c8c2:	a902      	add	r1, sp, #8
 801c8c4:	f000 fad2 	bl	801ce6c <_svfiprintf_r>
 801c8c8:	9b02      	ldr	r3, [sp, #8]
 801c8ca:	2200      	movs	r2, #0
 801c8cc:	701a      	strb	r2, [r3, #0]
 801c8ce:	b01c      	add	sp, #112	; 0x70
 801c8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801c8d4:	b003      	add	sp, #12
 801c8d6:	4770      	bx	lr
 801c8d8:	20000064 	.word	0x20000064
 801c8dc:	ffff0208 	.word	0xffff0208

0801c8e0 <__sread>:
 801c8e0:	b510      	push	{r4, lr}
 801c8e2:	460c      	mov	r4, r1
 801c8e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8e8:	f000 fef6 	bl	801d6d8 <_read_r>
 801c8ec:	2800      	cmp	r0, #0
 801c8ee:	bfab      	itete	ge
 801c8f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c8f2:	89a3      	ldrhlt	r3, [r4, #12]
 801c8f4:	181b      	addge	r3, r3, r0
 801c8f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c8fa:	bfac      	ite	ge
 801c8fc:	6563      	strge	r3, [r4, #84]	; 0x54
 801c8fe:	81a3      	strhlt	r3, [r4, #12]
 801c900:	bd10      	pop	{r4, pc}

0801c902 <__swrite>:
 801c902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c906:	461f      	mov	r7, r3
 801c908:	898b      	ldrh	r3, [r1, #12]
 801c90a:	05db      	lsls	r3, r3, #23
 801c90c:	4605      	mov	r5, r0
 801c90e:	460c      	mov	r4, r1
 801c910:	4616      	mov	r6, r2
 801c912:	d505      	bpl.n	801c920 <__swrite+0x1e>
 801c914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c918:	2302      	movs	r3, #2
 801c91a:	2200      	movs	r2, #0
 801c91c:	f000 f9c8 	bl	801ccb0 <_lseek_r>
 801c920:	89a3      	ldrh	r3, [r4, #12]
 801c922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c92a:	81a3      	strh	r3, [r4, #12]
 801c92c:	4632      	mov	r2, r6
 801c92e:	463b      	mov	r3, r7
 801c930:	4628      	mov	r0, r5
 801c932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c936:	f000 b869 	b.w	801ca0c <_write_r>

0801c93a <__sseek>:
 801c93a:	b510      	push	{r4, lr}
 801c93c:	460c      	mov	r4, r1
 801c93e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c942:	f000 f9b5 	bl	801ccb0 <_lseek_r>
 801c946:	1c43      	adds	r3, r0, #1
 801c948:	89a3      	ldrh	r3, [r4, #12]
 801c94a:	bf15      	itete	ne
 801c94c:	6560      	strne	r0, [r4, #84]	; 0x54
 801c94e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c956:	81a3      	strheq	r3, [r4, #12]
 801c958:	bf18      	it	ne
 801c95a:	81a3      	strhne	r3, [r4, #12]
 801c95c:	bd10      	pop	{r4, pc}

0801c95e <__sclose>:
 801c95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c962:	f000 b8d3 	b.w	801cb0c <_close_r>
	...

0801c968 <__swbuf_r>:
 801c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c96a:	460e      	mov	r6, r1
 801c96c:	4614      	mov	r4, r2
 801c96e:	4605      	mov	r5, r0
 801c970:	b118      	cbz	r0, 801c97a <__swbuf_r+0x12>
 801c972:	6983      	ldr	r3, [r0, #24]
 801c974:	b90b      	cbnz	r3, 801c97a <__swbuf_r+0x12>
 801c976:	f7ff fcc5 	bl	801c304 <__sinit>
 801c97a:	4b21      	ldr	r3, [pc, #132]	; (801ca00 <__swbuf_r+0x98>)
 801c97c:	429c      	cmp	r4, r3
 801c97e:	d12b      	bne.n	801c9d8 <__swbuf_r+0x70>
 801c980:	686c      	ldr	r4, [r5, #4]
 801c982:	69a3      	ldr	r3, [r4, #24]
 801c984:	60a3      	str	r3, [r4, #8]
 801c986:	89a3      	ldrh	r3, [r4, #12]
 801c988:	071a      	lsls	r2, r3, #28
 801c98a:	d52f      	bpl.n	801c9ec <__swbuf_r+0x84>
 801c98c:	6923      	ldr	r3, [r4, #16]
 801c98e:	b36b      	cbz	r3, 801c9ec <__swbuf_r+0x84>
 801c990:	6923      	ldr	r3, [r4, #16]
 801c992:	6820      	ldr	r0, [r4, #0]
 801c994:	1ac0      	subs	r0, r0, r3
 801c996:	6963      	ldr	r3, [r4, #20]
 801c998:	b2f6      	uxtb	r6, r6
 801c99a:	4283      	cmp	r3, r0
 801c99c:	4637      	mov	r7, r6
 801c99e:	dc04      	bgt.n	801c9aa <__swbuf_r+0x42>
 801c9a0:	4621      	mov	r1, r4
 801c9a2:	4628      	mov	r0, r5
 801c9a4:	f000 f948 	bl	801cc38 <_fflush_r>
 801c9a8:	bb30      	cbnz	r0, 801c9f8 <__swbuf_r+0x90>
 801c9aa:	68a3      	ldr	r3, [r4, #8]
 801c9ac:	3b01      	subs	r3, #1
 801c9ae:	60a3      	str	r3, [r4, #8]
 801c9b0:	6823      	ldr	r3, [r4, #0]
 801c9b2:	1c5a      	adds	r2, r3, #1
 801c9b4:	6022      	str	r2, [r4, #0]
 801c9b6:	701e      	strb	r6, [r3, #0]
 801c9b8:	6963      	ldr	r3, [r4, #20]
 801c9ba:	3001      	adds	r0, #1
 801c9bc:	4283      	cmp	r3, r0
 801c9be:	d004      	beq.n	801c9ca <__swbuf_r+0x62>
 801c9c0:	89a3      	ldrh	r3, [r4, #12]
 801c9c2:	07db      	lsls	r3, r3, #31
 801c9c4:	d506      	bpl.n	801c9d4 <__swbuf_r+0x6c>
 801c9c6:	2e0a      	cmp	r6, #10
 801c9c8:	d104      	bne.n	801c9d4 <__swbuf_r+0x6c>
 801c9ca:	4621      	mov	r1, r4
 801c9cc:	4628      	mov	r0, r5
 801c9ce:	f000 f933 	bl	801cc38 <_fflush_r>
 801c9d2:	b988      	cbnz	r0, 801c9f8 <__swbuf_r+0x90>
 801c9d4:	4638      	mov	r0, r7
 801c9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c9d8:	4b0a      	ldr	r3, [pc, #40]	; (801ca04 <__swbuf_r+0x9c>)
 801c9da:	429c      	cmp	r4, r3
 801c9dc:	d101      	bne.n	801c9e2 <__swbuf_r+0x7a>
 801c9de:	68ac      	ldr	r4, [r5, #8]
 801c9e0:	e7cf      	b.n	801c982 <__swbuf_r+0x1a>
 801c9e2:	4b09      	ldr	r3, [pc, #36]	; (801ca08 <__swbuf_r+0xa0>)
 801c9e4:	429c      	cmp	r4, r3
 801c9e6:	bf08      	it	eq
 801c9e8:	68ec      	ldreq	r4, [r5, #12]
 801c9ea:	e7ca      	b.n	801c982 <__swbuf_r+0x1a>
 801c9ec:	4621      	mov	r1, r4
 801c9ee:	4628      	mov	r0, r5
 801c9f0:	f000 f81e 	bl	801ca30 <__swsetup_r>
 801c9f4:	2800      	cmp	r0, #0
 801c9f6:	d0cb      	beq.n	801c990 <__swbuf_r+0x28>
 801c9f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c9fc:	e7ea      	b.n	801c9d4 <__swbuf_r+0x6c>
 801c9fe:	bf00      	nop
 801ca00:	08020440 	.word	0x08020440
 801ca04:	08020460 	.word	0x08020460
 801ca08:	08020420 	.word	0x08020420

0801ca0c <_write_r>:
 801ca0c:	b538      	push	{r3, r4, r5, lr}
 801ca0e:	4d07      	ldr	r5, [pc, #28]	; (801ca2c <_write_r+0x20>)
 801ca10:	4604      	mov	r4, r0
 801ca12:	4608      	mov	r0, r1
 801ca14:	4611      	mov	r1, r2
 801ca16:	2200      	movs	r2, #0
 801ca18:	602a      	str	r2, [r5, #0]
 801ca1a:	461a      	mov	r2, r3
 801ca1c:	f7e7 f843 	bl	8003aa6 <_write>
 801ca20:	1c43      	adds	r3, r0, #1
 801ca22:	d102      	bne.n	801ca2a <_write_r+0x1e>
 801ca24:	682b      	ldr	r3, [r5, #0]
 801ca26:	b103      	cbz	r3, 801ca2a <_write_r+0x1e>
 801ca28:	6023      	str	r3, [r4, #0]
 801ca2a:	bd38      	pop	{r3, r4, r5, pc}
 801ca2c:	2000c764 	.word	0x2000c764

0801ca30 <__swsetup_r>:
 801ca30:	4b32      	ldr	r3, [pc, #200]	; (801cafc <__swsetup_r+0xcc>)
 801ca32:	b570      	push	{r4, r5, r6, lr}
 801ca34:	681d      	ldr	r5, [r3, #0]
 801ca36:	4606      	mov	r6, r0
 801ca38:	460c      	mov	r4, r1
 801ca3a:	b125      	cbz	r5, 801ca46 <__swsetup_r+0x16>
 801ca3c:	69ab      	ldr	r3, [r5, #24]
 801ca3e:	b913      	cbnz	r3, 801ca46 <__swsetup_r+0x16>
 801ca40:	4628      	mov	r0, r5
 801ca42:	f7ff fc5f 	bl	801c304 <__sinit>
 801ca46:	4b2e      	ldr	r3, [pc, #184]	; (801cb00 <__swsetup_r+0xd0>)
 801ca48:	429c      	cmp	r4, r3
 801ca4a:	d10f      	bne.n	801ca6c <__swsetup_r+0x3c>
 801ca4c:	686c      	ldr	r4, [r5, #4]
 801ca4e:	89a3      	ldrh	r3, [r4, #12]
 801ca50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ca54:	0719      	lsls	r1, r3, #28
 801ca56:	d42c      	bmi.n	801cab2 <__swsetup_r+0x82>
 801ca58:	06dd      	lsls	r5, r3, #27
 801ca5a:	d411      	bmi.n	801ca80 <__swsetup_r+0x50>
 801ca5c:	2309      	movs	r3, #9
 801ca5e:	6033      	str	r3, [r6, #0]
 801ca60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ca64:	81a3      	strh	r3, [r4, #12]
 801ca66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ca6a:	e03e      	b.n	801caea <__swsetup_r+0xba>
 801ca6c:	4b25      	ldr	r3, [pc, #148]	; (801cb04 <__swsetup_r+0xd4>)
 801ca6e:	429c      	cmp	r4, r3
 801ca70:	d101      	bne.n	801ca76 <__swsetup_r+0x46>
 801ca72:	68ac      	ldr	r4, [r5, #8]
 801ca74:	e7eb      	b.n	801ca4e <__swsetup_r+0x1e>
 801ca76:	4b24      	ldr	r3, [pc, #144]	; (801cb08 <__swsetup_r+0xd8>)
 801ca78:	429c      	cmp	r4, r3
 801ca7a:	bf08      	it	eq
 801ca7c:	68ec      	ldreq	r4, [r5, #12]
 801ca7e:	e7e6      	b.n	801ca4e <__swsetup_r+0x1e>
 801ca80:	0758      	lsls	r0, r3, #29
 801ca82:	d512      	bpl.n	801caaa <__swsetup_r+0x7a>
 801ca84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ca86:	b141      	cbz	r1, 801ca9a <__swsetup_r+0x6a>
 801ca88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ca8c:	4299      	cmp	r1, r3
 801ca8e:	d002      	beq.n	801ca96 <__swsetup_r+0x66>
 801ca90:	4630      	mov	r0, r6
 801ca92:	f7ff fd3d 	bl	801c510 <_free_r>
 801ca96:	2300      	movs	r3, #0
 801ca98:	6363      	str	r3, [r4, #52]	; 0x34
 801ca9a:	89a3      	ldrh	r3, [r4, #12]
 801ca9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801caa0:	81a3      	strh	r3, [r4, #12]
 801caa2:	2300      	movs	r3, #0
 801caa4:	6063      	str	r3, [r4, #4]
 801caa6:	6923      	ldr	r3, [r4, #16]
 801caa8:	6023      	str	r3, [r4, #0]
 801caaa:	89a3      	ldrh	r3, [r4, #12]
 801caac:	f043 0308 	orr.w	r3, r3, #8
 801cab0:	81a3      	strh	r3, [r4, #12]
 801cab2:	6923      	ldr	r3, [r4, #16]
 801cab4:	b94b      	cbnz	r3, 801caca <__swsetup_r+0x9a>
 801cab6:	89a3      	ldrh	r3, [r4, #12]
 801cab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cac0:	d003      	beq.n	801caca <__swsetup_r+0x9a>
 801cac2:	4621      	mov	r1, r4
 801cac4:	4630      	mov	r0, r6
 801cac6:	f000 f929 	bl	801cd1c <__smakebuf_r>
 801caca:	89a0      	ldrh	r0, [r4, #12]
 801cacc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cad0:	f010 0301 	ands.w	r3, r0, #1
 801cad4:	d00a      	beq.n	801caec <__swsetup_r+0xbc>
 801cad6:	2300      	movs	r3, #0
 801cad8:	60a3      	str	r3, [r4, #8]
 801cada:	6963      	ldr	r3, [r4, #20]
 801cadc:	425b      	negs	r3, r3
 801cade:	61a3      	str	r3, [r4, #24]
 801cae0:	6923      	ldr	r3, [r4, #16]
 801cae2:	b943      	cbnz	r3, 801caf6 <__swsetup_r+0xc6>
 801cae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cae8:	d1ba      	bne.n	801ca60 <__swsetup_r+0x30>
 801caea:	bd70      	pop	{r4, r5, r6, pc}
 801caec:	0781      	lsls	r1, r0, #30
 801caee:	bf58      	it	pl
 801caf0:	6963      	ldrpl	r3, [r4, #20]
 801caf2:	60a3      	str	r3, [r4, #8]
 801caf4:	e7f4      	b.n	801cae0 <__swsetup_r+0xb0>
 801caf6:	2000      	movs	r0, #0
 801caf8:	e7f7      	b.n	801caea <__swsetup_r+0xba>
 801cafa:	bf00      	nop
 801cafc:	20000064 	.word	0x20000064
 801cb00:	08020440 	.word	0x08020440
 801cb04:	08020460 	.word	0x08020460
 801cb08:	08020420 	.word	0x08020420

0801cb0c <_close_r>:
 801cb0c:	b538      	push	{r3, r4, r5, lr}
 801cb0e:	4d06      	ldr	r5, [pc, #24]	; (801cb28 <_close_r+0x1c>)
 801cb10:	2300      	movs	r3, #0
 801cb12:	4604      	mov	r4, r0
 801cb14:	4608      	mov	r0, r1
 801cb16:	602b      	str	r3, [r5, #0]
 801cb18:	f7e6 ffe1 	bl	8003ade <_close>
 801cb1c:	1c43      	adds	r3, r0, #1
 801cb1e:	d102      	bne.n	801cb26 <_close_r+0x1a>
 801cb20:	682b      	ldr	r3, [r5, #0]
 801cb22:	b103      	cbz	r3, 801cb26 <_close_r+0x1a>
 801cb24:	6023      	str	r3, [r4, #0]
 801cb26:	bd38      	pop	{r3, r4, r5, pc}
 801cb28:	2000c764 	.word	0x2000c764

0801cb2c <__sflush_r>:
 801cb2c:	898a      	ldrh	r2, [r1, #12]
 801cb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb32:	4605      	mov	r5, r0
 801cb34:	0710      	lsls	r0, r2, #28
 801cb36:	460c      	mov	r4, r1
 801cb38:	d458      	bmi.n	801cbec <__sflush_r+0xc0>
 801cb3a:	684b      	ldr	r3, [r1, #4]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	dc05      	bgt.n	801cb4c <__sflush_r+0x20>
 801cb40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	dc02      	bgt.n	801cb4c <__sflush_r+0x20>
 801cb46:	2000      	movs	r0, #0
 801cb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cb4e:	2e00      	cmp	r6, #0
 801cb50:	d0f9      	beq.n	801cb46 <__sflush_r+0x1a>
 801cb52:	2300      	movs	r3, #0
 801cb54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cb58:	682f      	ldr	r7, [r5, #0]
 801cb5a:	602b      	str	r3, [r5, #0]
 801cb5c:	d032      	beq.n	801cbc4 <__sflush_r+0x98>
 801cb5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cb60:	89a3      	ldrh	r3, [r4, #12]
 801cb62:	075a      	lsls	r2, r3, #29
 801cb64:	d505      	bpl.n	801cb72 <__sflush_r+0x46>
 801cb66:	6863      	ldr	r3, [r4, #4]
 801cb68:	1ac0      	subs	r0, r0, r3
 801cb6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cb6c:	b10b      	cbz	r3, 801cb72 <__sflush_r+0x46>
 801cb6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cb70:	1ac0      	subs	r0, r0, r3
 801cb72:	2300      	movs	r3, #0
 801cb74:	4602      	mov	r2, r0
 801cb76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cb78:	6a21      	ldr	r1, [r4, #32]
 801cb7a:	4628      	mov	r0, r5
 801cb7c:	47b0      	blx	r6
 801cb7e:	1c43      	adds	r3, r0, #1
 801cb80:	89a3      	ldrh	r3, [r4, #12]
 801cb82:	d106      	bne.n	801cb92 <__sflush_r+0x66>
 801cb84:	6829      	ldr	r1, [r5, #0]
 801cb86:	291d      	cmp	r1, #29
 801cb88:	d82c      	bhi.n	801cbe4 <__sflush_r+0xb8>
 801cb8a:	4a2a      	ldr	r2, [pc, #168]	; (801cc34 <__sflush_r+0x108>)
 801cb8c:	40ca      	lsrs	r2, r1
 801cb8e:	07d6      	lsls	r6, r2, #31
 801cb90:	d528      	bpl.n	801cbe4 <__sflush_r+0xb8>
 801cb92:	2200      	movs	r2, #0
 801cb94:	6062      	str	r2, [r4, #4]
 801cb96:	04d9      	lsls	r1, r3, #19
 801cb98:	6922      	ldr	r2, [r4, #16]
 801cb9a:	6022      	str	r2, [r4, #0]
 801cb9c:	d504      	bpl.n	801cba8 <__sflush_r+0x7c>
 801cb9e:	1c42      	adds	r2, r0, #1
 801cba0:	d101      	bne.n	801cba6 <__sflush_r+0x7a>
 801cba2:	682b      	ldr	r3, [r5, #0]
 801cba4:	b903      	cbnz	r3, 801cba8 <__sflush_r+0x7c>
 801cba6:	6560      	str	r0, [r4, #84]	; 0x54
 801cba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cbaa:	602f      	str	r7, [r5, #0]
 801cbac:	2900      	cmp	r1, #0
 801cbae:	d0ca      	beq.n	801cb46 <__sflush_r+0x1a>
 801cbb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cbb4:	4299      	cmp	r1, r3
 801cbb6:	d002      	beq.n	801cbbe <__sflush_r+0x92>
 801cbb8:	4628      	mov	r0, r5
 801cbba:	f7ff fca9 	bl	801c510 <_free_r>
 801cbbe:	2000      	movs	r0, #0
 801cbc0:	6360      	str	r0, [r4, #52]	; 0x34
 801cbc2:	e7c1      	b.n	801cb48 <__sflush_r+0x1c>
 801cbc4:	6a21      	ldr	r1, [r4, #32]
 801cbc6:	2301      	movs	r3, #1
 801cbc8:	4628      	mov	r0, r5
 801cbca:	47b0      	blx	r6
 801cbcc:	1c41      	adds	r1, r0, #1
 801cbce:	d1c7      	bne.n	801cb60 <__sflush_r+0x34>
 801cbd0:	682b      	ldr	r3, [r5, #0]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d0c4      	beq.n	801cb60 <__sflush_r+0x34>
 801cbd6:	2b1d      	cmp	r3, #29
 801cbd8:	d001      	beq.n	801cbde <__sflush_r+0xb2>
 801cbda:	2b16      	cmp	r3, #22
 801cbdc:	d101      	bne.n	801cbe2 <__sflush_r+0xb6>
 801cbde:	602f      	str	r7, [r5, #0]
 801cbe0:	e7b1      	b.n	801cb46 <__sflush_r+0x1a>
 801cbe2:	89a3      	ldrh	r3, [r4, #12]
 801cbe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cbe8:	81a3      	strh	r3, [r4, #12]
 801cbea:	e7ad      	b.n	801cb48 <__sflush_r+0x1c>
 801cbec:	690f      	ldr	r7, [r1, #16]
 801cbee:	2f00      	cmp	r7, #0
 801cbf0:	d0a9      	beq.n	801cb46 <__sflush_r+0x1a>
 801cbf2:	0793      	lsls	r3, r2, #30
 801cbf4:	680e      	ldr	r6, [r1, #0]
 801cbf6:	bf08      	it	eq
 801cbf8:	694b      	ldreq	r3, [r1, #20]
 801cbfa:	600f      	str	r7, [r1, #0]
 801cbfc:	bf18      	it	ne
 801cbfe:	2300      	movne	r3, #0
 801cc00:	eba6 0807 	sub.w	r8, r6, r7
 801cc04:	608b      	str	r3, [r1, #8]
 801cc06:	f1b8 0f00 	cmp.w	r8, #0
 801cc0a:	dd9c      	ble.n	801cb46 <__sflush_r+0x1a>
 801cc0c:	6a21      	ldr	r1, [r4, #32]
 801cc0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cc10:	4643      	mov	r3, r8
 801cc12:	463a      	mov	r2, r7
 801cc14:	4628      	mov	r0, r5
 801cc16:	47b0      	blx	r6
 801cc18:	2800      	cmp	r0, #0
 801cc1a:	dc06      	bgt.n	801cc2a <__sflush_r+0xfe>
 801cc1c:	89a3      	ldrh	r3, [r4, #12]
 801cc1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc22:	81a3      	strh	r3, [r4, #12]
 801cc24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cc28:	e78e      	b.n	801cb48 <__sflush_r+0x1c>
 801cc2a:	4407      	add	r7, r0
 801cc2c:	eba8 0800 	sub.w	r8, r8, r0
 801cc30:	e7e9      	b.n	801cc06 <__sflush_r+0xda>
 801cc32:	bf00      	nop
 801cc34:	20400001 	.word	0x20400001

0801cc38 <_fflush_r>:
 801cc38:	b538      	push	{r3, r4, r5, lr}
 801cc3a:	690b      	ldr	r3, [r1, #16]
 801cc3c:	4605      	mov	r5, r0
 801cc3e:	460c      	mov	r4, r1
 801cc40:	b913      	cbnz	r3, 801cc48 <_fflush_r+0x10>
 801cc42:	2500      	movs	r5, #0
 801cc44:	4628      	mov	r0, r5
 801cc46:	bd38      	pop	{r3, r4, r5, pc}
 801cc48:	b118      	cbz	r0, 801cc52 <_fflush_r+0x1a>
 801cc4a:	6983      	ldr	r3, [r0, #24]
 801cc4c:	b90b      	cbnz	r3, 801cc52 <_fflush_r+0x1a>
 801cc4e:	f7ff fb59 	bl	801c304 <__sinit>
 801cc52:	4b14      	ldr	r3, [pc, #80]	; (801cca4 <_fflush_r+0x6c>)
 801cc54:	429c      	cmp	r4, r3
 801cc56:	d11b      	bne.n	801cc90 <_fflush_r+0x58>
 801cc58:	686c      	ldr	r4, [r5, #4]
 801cc5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d0ef      	beq.n	801cc42 <_fflush_r+0xa>
 801cc62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cc64:	07d0      	lsls	r0, r2, #31
 801cc66:	d404      	bmi.n	801cc72 <_fflush_r+0x3a>
 801cc68:	0599      	lsls	r1, r3, #22
 801cc6a:	d402      	bmi.n	801cc72 <_fflush_r+0x3a>
 801cc6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc6e:	f7ff fc0c 	bl	801c48a <__retarget_lock_acquire_recursive>
 801cc72:	4628      	mov	r0, r5
 801cc74:	4621      	mov	r1, r4
 801cc76:	f7ff ff59 	bl	801cb2c <__sflush_r>
 801cc7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cc7c:	07da      	lsls	r2, r3, #31
 801cc7e:	4605      	mov	r5, r0
 801cc80:	d4e0      	bmi.n	801cc44 <_fflush_r+0xc>
 801cc82:	89a3      	ldrh	r3, [r4, #12]
 801cc84:	059b      	lsls	r3, r3, #22
 801cc86:	d4dd      	bmi.n	801cc44 <_fflush_r+0xc>
 801cc88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc8a:	f7ff fbff 	bl	801c48c <__retarget_lock_release_recursive>
 801cc8e:	e7d9      	b.n	801cc44 <_fflush_r+0xc>
 801cc90:	4b05      	ldr	r3, [pc, #20]	; (801cca8 <_fflush_r+0x70>)
 801cc92:	429c      	cmp	r4, r3
 801cc94:	d101      	bne.n	801cc9a <_fflush_r+0x62>
 801cc96:	68ac      	ldr	r4, [r5, #8]
 801cc98:	e7df      	b.n	801cc5a <_fflush_r+0x22>
 801cc9a:	4b04      	ldr	r3, [pc, #16]	; (801ccac <_fflush_r+0x74>)
 801cc9c:	429c      	cmp	r4, r3
 801cc9e:	bf08      	it	eq
 801cca0:	68ec      	ldreq	r4, [r5, #12]
 801cca2:	e7da      	b.n	801cc5a <_fflush_r+0x22>
 801cca4:	08020440 	.word	0x08020440
 801cca8:	08020460 	.word	0x08020460
 801ccac:	08020420 	.word	0x08020420

0801ccb0 <_lseek_r>:
 801ccb0:	b538      	push	{r3, r4, r5, lr}
 801ccb2:	4d07      	ldr	r5, [pc, #28]	; (801ccd0 <_lseek_r+0x20>)
 801ccb4:	4604      	mov	r4, r0
 801ccb6:	4608      	mov	r0, r1
 801ccb8:	4611      	mov	r1, r2
 801ccba:	2200      	movs	r2, #0
 801ccbc:	602a      	str	r2, [r5, #0]
 801ccbe:	461a      	mov	r2, r3
 801ccc0:	f7e6 ff34 	bl	8003b2c <_lseek>
 801ccc4:	1c43      	adds	r3, r0, #1
 801ccc6:	d102      	bne.n	801ccce <_lseek_r+0x1e>
 801ccc8:	682b      	ldr	r3, [r5, #0]
 801ccca:	b103      	cbz	r3, 801ccce <_lseek_r+0x1e>
 801cccc:	6023      	str	r3, [r4, #0]
 801ccce:	bd38      	pop	{r3, r4, r5, pc}
 801ccd0:	2000c764 	.word	0x2000c764

0801ccd4 <__swhatbuf_r>:
 801ccd4:	b570      	push	{r4, r5, r6, lr}
 801ccd6:	460e      	mov	r6, r1
 801ccd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccdc:	2900      	cmp	r1, #0
 801ccde:	b096      	sub	sp, #88	; 0x58
 801cce0:	4614      	mov	r4, r2
 801cce2:	461d      	mov	r5, r3
 801cce4:	da07      	bge.n	801ccf6 <__swhatbuf_r+0x22>
 801cce6:	2300      	movs	r3, #0
 801cce8:	602b      	str	r3, [r5, #0]
 801ccea:	89b3      	ldrh	r3, [r6, #12]
 801ccec:	061a      	lsls	r2, r3, #24
 801ccee:	d410      	bmi.n	801cd12 <__swhatbuf_r+0x3e>
 801ccf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ccf4:	e00e      	b.n	801cd14 <__swhatbuf_r+0x40>
 801ccf6:	466a      	mov	r2, sp
 801ccf8:	f000 fd00 	bl	801d6fc <_fstat_r>
 801ccfc:	2800      	cmp	r0, #0
 801ccfe:	dbf2      	blt.n	801cce6 <__swhatbuf_r+0x12>
 801cd00:	9a01      	ldr	r2, [sp, #4]
 801cd02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cd06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cd0a:	425a      	negs	r2, r3
 801cd0c:	415a      	adcs	r2, r3
 801cd0e:	602a      	str	r2, [r5, #0]
 801cd10:	e7ee      	b.n	801ccf0 <__swhatbuf_r+0x1c>
 801cd12:	2340      	movs	r3, #64	; 0x40
 801cd14:	2000      	movs	r0, #0
 801cd16:	6023      	str	r3, [r4, #0]
 801cd18:	b016      	add	sp, #88	; 0x58
 801cd1a:	bd70      	pop	{r4, r5, r6, pc}

0801cd1c <__smakebuf_r>:
 801cd1c:	898b      	ldrh	r3, [r1, #12]
 801cd1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cd20:	079d      	lsls	r5, r3, #30
 801cd22:	4606      	mov	r6, r0
 801cd24:	460c      	mov	r4, r1
 801cd26:	d507      	bpl.n	801cd38 <__smakebuf_r+0x1c>
 801cd28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cd2c:	6023      	str	r3, [r4, #0]
 801cd2e:	6123      	str	r3, [r4, #16]
 801cd30:	2301      	movs	r3, #1
 801cd32:	6163      	str	r3, [r4, #20]
 801cd34:	b002      	add	sp, #8
 801cd36:	bd70      	pop	{r4, r5, r6, pc}
 801cd38:	ab01      	add	r3, sp, #4
 801cd3a:	466a      	mov	r2, sp
 801cd3c:	f7ff ffca 	bl	801ccd4 <__swhatbuf_r>
 801cd40:	9900      	ldr	r1, [sp, #0]
 801cd42:	4605      	mov	r5, r0
 801cd44:	4630      	mov	r0, r6
 801cd46:	f7ff fc33 	bl	801c5b0 <_malloc_r>
 801cd4a:	b948      	cbnz	r0, 801cd60 <__smakebuf_r+0x44>
 801cd4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd50:	059a      	lsls	r2, r3, #22
 801cd52:	d4ef      	bmi.n	801cd34 <__smakebuf_r+0x18>
 801cd54:	f023 0303 	bic.w	r3, r3, #3
 801cd58:	f043 0302 	orr.w	r3, r3, #2
 801cd5c:	81a3      	strh	r3, [r4, #12]
 801cd5e:	e7e3      	b.n	801cd28 <__smakebuf_r+0xc>
 801cd60:	4b0d      	ldr	r3, [pc, #52]	; (801cd98 <__smakebuf_r+0x7c>)
 801cd62:	62b3      	str	r3, [r6, #40]	; 0x28
 801cd64:	89a3      	ldrh	r3, [r4, #12]
 801cd66:	6020      	str	r0, [r4, #0]
 801cd68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cd6c:	81a3      	strh	r3, [r4, #12]
 801cd6e:	9b00      	ldr	r3, [sp, #0]
 801cd70:	6163      	str	r3, [r4, #20]
 801cd72:	9b01      	ldr	r3, [sp, #4]
 801cd74:	6120      	str	r0, [r4, #16]
 801cd76:	b15b      	cbz	r3, 801cd90 <__smakebuf_r+0x74>
 801cd78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd7c:	4630      	mov	r0, r6
 801cd7e:	f000 fccf 	bl	801d720 <_isatty_r>
 801cd82:	b128      	cbz	r0, 801cd90 <__smakebuf_r+0x74>
 801cd84:	89a3      	ldrh	r3, [r4, #12]
 801cd86:	f023 0303 	bic.w	r3, r3, #3
 801cd8a:	f043 0301 	orr.w	r3, r3, #1
 801cd8e:	81a3      	strh	r3, [r4, #12]
 801cd90:	89a0      	ldrh	r0, [r4, #12]
 801cd92:	4305      	orrs	r5, r0
 801cd94:	81a5      	strh	r5, [r4, #12]
 801cd96:	e7cd      	b.n	801cd34 <__smakebuf_r+0x18>
 801cd98:	0801c29d 	.word	0x0801c29d

0801cd9c <__malloc_lock>:
 801cd9c:	4801      	ldr	r0, [pc, #4]	; (801cda4 <__malloc_lock+0x8>)
 801cd9e:	f7ff bb74 	b.w	801c48a <__retarget_lock_acquire_recursive>
 801cda2:	bf00      	nop
 801cda4:	2000ce58 	.word	0x2000ce58

0801cda8 <__malloc_unlock>:
 801cda8:	4801      	ldr	r0, [pc, #4]	; (801cdb0 <__malloc_unlock+0x8>)
 801cdaa:	f7ff bb6f 	b.w	801c48c <__retarget_lock_release_recursive>
 801cdae:	bf00      	nop
 801cdb0:	2000ce58 	.word	0x2000ce58

0801cdb4 <__ssputs_r>:
 801cdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cdb8:	688e      	ldr	r6, [r1, #8]
 801cdba:	429e      	cmp	r6, r3
 801cdbc:	4682      	mov	sl, r0
 801cdbe:	460c      	mov	r4, r1
 801cdc0:	4690      	mov	r8, r2
 801cdc2:	461f      	mov	r7, r3
 801cdc4:	d838      	bhi.n	801ce38 <__ssputs_r+0x84>
 801cdc6:	898a      	ldrh	r2, [r1, #12]
 801cdc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cdcc:	d032      	beq.n	801ce34 <__ssputs_r+0x80>
 801cdce:	6825      	ldr	r5, [r4, #0]
 801cdd0:	6909      	ldr	r1, [r1, #16]
 801cdd2:	eba5 0901 	sub.w	r9, r5, r1
 801cdd6:	6965      	ldr	r5, [r4, #20]
 801cdd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cddc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cde0:	3301      	adds	r3, #1
 801cde2:	444b      	add	r3, r9
 801cde4:	106d      	asrs	r5, r5, #1
 801cde6:	429d      	cmp	r5, r3
 801cde8:	bf38      	it	cc
 801cdea:	461d      	movcc	r5, r3
 801cdec:	0553      	lsls	r3, r2, #21
 801cdee:	d531      	bpl.n	801ce54 <__ssputs_r+0xa0>
 801cdf0:	4629      	mov	r1, r5
 801cdf2:	f7ff fbdd 	bl	801c5b0 <_malloc_r>
 801cdf6:	4606      	mov	r6, r0
 801cdf8:	b950      	cbnz	r0, 801ce10 <__ssputs_r+0x5c>
 801cdfa:	230c      	movs	r3, #12
 801cdfc:	f8ca 3000 	str.w	r3, [sl]
 801ce00:	89a3      	ldrh	r3, [r4, #12]
 801ce02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce06:	81a3      	strh	r3, [r4, #12]
 801ce08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce10:	6921      	ldr	r1, [r4, #16]
 801ce12:	464a      	mov	r2, r9
 801ce14:	f7ff fb4c 	bl	801c4b0 <memcpy>
 801ce18:	89a3      	ldrh	r3, [r4, #12]
 801ce1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ce1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce22:	81a3      	strh	r3, [r4, #12]
 801ce24:	6126      	str	r6, [r4, #16]
 801ce26:	6165      	str	r5, [r4, #20]
 801ce28:	444e      	add	r6, r9
 801ce2a:	eba5 0509 	sub.w	r5, r5, r9
 801ce2e:	6026      	str	r6, [r4, #0]
 801ce30:	60a5      	str	r5, [r4, #8]
 801ce32:	463e      	mov	r6, r7
 801ce34:	42be      	cmp	r6, r7
 801ce36:	d900      	bls.n	801ce3a <__ssputs_r+0x86>
 801ce38:	463e      	mov	r6, r7
 801ce3a:	4632      	mov	r2, r6
 801ce3c:	6820      	ldr	r0, [r4, #0]
 801ce3e:	4641      	mov	r1, r8
 801ce40:	f7ff fb44 	bl	801c4cc <memmove>
 801ce44:	68a3      	ldr	r3, [r4, #8]
 801ce46:	6822      	ldr	r2, [r4, #0]
 801ce48:	1b9b      	subs	r3, r3, r6
 801ce4a:	4432      	add	r2, r6
 801ce4c:	60a3      	str	r3, [r4, #8]
 801ce4e:	6022      	str	r2, [r4, #0]
 801ce50:	2000      	movs	r0, #0
 801ce52:	e7db      	b.n	801ce0c <__ssputs_r+0x58>
 801ce54:	462a      	mov	r2, r5
 801ce56:	f000 fc73 	bl	801d740 <_realloc_r>
 801ce5a:	4606      	mov	r6, r0
 801ce5c:	2800      	cmp	r0, #0
 801ce5e:	d1e1      	bne.n	801ce24 <__ssputs_r+0x70>
 801ce60:	6921      	ldr	r1, [r4, #16]
 801ce62:	4650      	mov	r0, sl
 801ce64:	f7ff fb54 	bl	801c510 <_free_r>
 801ce68:	e7c7      	b.n	801cdfa <__ssputs_r+0x46>
	...

0801ce6c <_svfiprintf_r>:
 801ce6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce70:	4698      	mov	r8, r3
 801ce72:	898b      	ldrh	r3, [r1, #12]
 801ce74:	061b      	lsls	r3, r3, #24
 801ce76:	b09d      	sub	sp, #116	; 0x74
 801ce78:	4607      	mov	r7, r0
 801ce7a:	460d      	mov	r5, r1
 801ce7c:	4614      	mov	r4, r2
 801ce7e:	d50e      	bpl.n	801ce9e <_svfiprintf_r+0x32>
 801ce80:	690b      	ldr	r3, [r1, #16]
 801ce82:	b963      	cbnz	r3, 801ce9e <_svfiprintf_r+0x32>
 801ce84:	2140      	movs	r1, #64	; 0x40
 801ce86:	f7ff fb93 	bl	801c5b0 <_malloc_r>
 801ce8a:	6028      	str	r0, [r5, #0]
 801ce8c:	6128      	str	r0, [r5, #16]
 801ce8e:	b920      	cbnz	r0, 801ce9a <_svfiprintf_r+0x2e>
 801ce90:	230c      	movs	r3, #12
 801ce92:	603b      	str	r3, [r7, #0]
 801ce94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce98:	e0d1      	b.n	801d03e <_svfiprintf_r+0x1d2>
 801ce9a:	2340      	movs	r3, #64	; 0x40
 801ce9c:	616b      	str	r3, [r5, #20]
 801ce9e:	2300      	movs	r3, #0
 801cea0:	9309      	str	r3, [sp, #36]	; 0x24
 801cea2:	2320      	movs	r3, #32
 801cea4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cea8:	f8cd 800c 	str.w	r8, [sp, #12]
 801ceac:	2330      	movs	r3, #48	; 0x30
 801ceae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d058 <_svfiprintf_r+0x1ec>
 801ceb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ceb6:	f04f 0901 	mov.w	r9, #1
 801ceba:	4623      	mov	r3, r4
 801cebc:	469a      	mov	sl, r3
 801cebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cec2:	b10a      	cbz	r2, 801cec8 <_svfiprintf_r+0x5c>
 801cec4:	2a25      	cmp	r2, #37	; 0x25
 801cec6:	d1f9      	bne.n	801cebc <_svfiprintf_r+0x50>
 801cec8:	ebba 0b04 	subs.w	fp, sl, r4
 801cecc:	d00b      	beq.n	801cee6 <_svfiprintf_r+0x7a>
 801cece:	465b      	mov	r3, fp
 801ced0:	4622      	mov	r2, r4
 801ced2:	4629      	mov	r1, r5
 801ced4:	4638      	mov	r0, r7
 801ced6:	f7ff ff6d 	bl	801cdb4 <__ssputs_r>
 801ceda:	3001      	adds	r0, #1
 801cedc:	f000 80aa 	beq.w	801d034 <_svfiprintf_r+0x1c8>
 801cee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cee2:	445a      	add	r2, fp
 801cee4:	9209      	str	r2, [sp, #36]	; 0x24
 801cee6:	f89a 3000 	ldrb.w	r3, [sl]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	f000 80a2 	beq.w	801d034 <_svfiprintf_r+0x1c8>
 801cef0:	2300      	movs	r3, #0
 801cef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cefa:	f10a 0a01 	add.w	sl, sl, #1
 801cefe:	9304      	str	r3, [sp, #16]
 801cf00:	9307      	str	r3, [sp, #28]
 801cf02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cf06:	931a      	str	r3, [sp, #104]	; 0x68
 801cf08:	4654      	mov	r4, sl
 801cf0a:	2205      	movs	r2, #5
 801cf0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf10:	4851      	ldr	r0, [pc, #324]	; (801d058 <_svfiprintf_r+0x1ec>)
 801cf12:	f7e3 f985 	bl	8000220 <memchr>
 801cf16:	9a04      	ldr	r2, [sp, #16]
 801cf18:	b9d8      	cbnz	r0, 801cf52 <_svfiprintf_r+0xe6>
 801cf1a:	06d0      	lsls	r0, r2, #27
 801cf1c:	bf44      	itt	mi
 801cf1e:	2320      	movmi	r3, #32
 801cf20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cf24:	0711      	lsls	r1, r2, #28
 801cf26:	bf44      	itt	mi
 801cf28:	232b      	movmi	r3, #43	; 0x2b
 801cf2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cf2e:	f89a 3000 	ldrb.w	r3, [sl]
 801cf32:	2b2a      	cmp	r3, #42	; 0x2a
 801cf34:	d015      	beq.n	801cf62 <_svfiprintf_r+0xf6>
 801cf36:	9a07      	ldr	r2, [sp, #28]
 801cf38:	4654      	mov	r4, sl
 801cf3a:	2000      	movs	r0, #0
 801cf3c:	f04f 0c0a 	mov.w	ip, #10
 801cf40:	4621      	mov	r1, r4
 801cf42:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf46:	3b30      	subs	r3, #48	; 0x30
 801cf48:	2b09      	cmp	r3, #9
 801cf4a:	d94e      	bls.n	801cfea <_svfiprintf_r+0x17e>
 801cf4c:	b1b0      	cbz	r0, 801cf7c <_svfiprintf_r+0x110>
 801cf4e:	9207      	str	r2, [sp, #28]
 801cf50:	e014      	b.n	801cf7c <_svfiprintf_r+0x110>
 801cf52:	eba0 0308 	sub.w	r3, r0, r8
 801cf56:	fa09 f303 	lsl.w	r3, r9, r3
 801cf5a:	4313      	orrs	r3, r2
 801cf5c:	9304      	str	r3, [sp, #16]
 801cf5e:	46a2      	mov	sl, r4
 801cf60:	e7d2      	b.n	801cf08 <_svfiprintf_r+0x9c>
 801cf62:	9b03      	ldr	r3, [sp, #12]
 801cf64:	1d19      	adds	r1, r3, #4
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	9103      	str	r1, [sp, #12]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	bfbb      	ittet	lt
 801cf6e:	425b      	neglt	r3, r3
 801cf70:	f042 0202 	orrlt.w	r2, r2, #2
 801cf74:	9307      	strge	r3, [sp, #28]
 801cf76:	9307      	strlt	r3, [sp, #28]
 801cf78:	bfb8      	it	lt
 801cf7a:	9204      	strlt	r2, [sp, #16]
 801cf7c:	7823      	ldrb	r3, [r4, #0]
 801cf7e:	2b2e      	cmp	r3, #46	; 0x2e
 801cf80:	d10c      	bne.n	801cf9c <_svfiprintf_r+0x130>
 801cf82:	7863      	ldrb	r3, [r4, #1]
 801cf84:	2b2a      	cmp	r3, #42	; 0x2a
 801cf86:	d135      	bne.n	801cff4 <_svfiprintf_r+0x188>
 801cf88:	9b03      	ldr	r3, [sp, #12]
 801cf8a:	1d1a      	adds	r2, r3, #4
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	9203      	str	r2, [sp, #12]
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	bfb8      	it	lt
 801cf94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cf98:	3402      	adds	r4, #2
 801cf9a:	9305      	str	r3, [sp, #20]
 801cf9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d068 <_svfiprintf_r+0x1fc>
 801cfa0:	7821      	ldrb	r1, [r4, #0]
 801cfa2:	2203      	movs	r2, #3
 801cfa4:	4650      	mov	r0, sl
 801cfa6:	f7e3 f93b 	bl	8000220 <memchr>
 801cfaa:	b140      	cbz	r0, 801cfbe <_svfiprintf_r+0x152>
 801cfac:	2340      	movs	r3, #64	; 0x40
 801cfae:	eba0 000a 	sub.w	r0, r0, sl
 801cfb2:	fa03 f000 	lsl.w	r0, r3, r0
 801cfb6:	9b04      	ldr	r3, [sp, #16]
 801cfb8:	4303      	orrs	r3, r0
 801cfba:	3401      	adds	r4, #1
 801cfbc:	9304      	str	r3, [sp, #16]
 801cfbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfc2:	4826      	ldr	r0, [pc, #152]	; (801d05c <_svfiprintf_r+0x1f0>)
 801cfc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cfc8:	2206      	movs	r2, #6
 801cfca:	f7e3 f929 	bl	8000220 <memchr>
 801cfce:	2800      	cmp	r0, #0
 801cfd0:	d038      	beq.n	801d044 <_svfiprintf_r+0x1d8>
 801cfd2:	4b23      	ldr	r3, [pc, #140]	; (801d060 <_svfiprintf_r+0x1f4>)
 801cfd4:	bb1b      	cbnz	r3, 801d01e <_svfiprintf_r+0x1b2>
 801cfd6:	9b03      	ldr	r3, [sp, #12]
 801cfd8:	3307      	adds	r3, #7
 801cfda:	f023 0307 	bic.w	r3, r3, #7
 801cfde:	3308      	adds	r3, #8
 801cfe0:	9303      	str	r3, [sp, #12]
 801cfe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfe4:	4433      	add	r3, r6
 801cfe6:	9309      	str	r3, [sp, #36]	; 0x24
 801cfe8:	e767      	b.n	801ceba <_svfiprintf_r+0x4e>
 801cfea:	fb0c 3202 	mla	r2, ip, r2, r3
 801cfee:	460c      	mov	r4, r1
 801cff0:	2001      	movs	r0, #1
 801cff2:	e7a5      	b.n	801cf40 <_svfiprintf_r+0xd4>
 801cff4:	2300      	movs	r3, #0
 801cff6:	3401      	adds	r4, #1
 801cff8:	9305      	str	r3, [sp, #20]
 801cffa:	4619      	mov	r1, r3
 801cffc:	f04f 0c0a 	mov.w	ip, #10
 801d000:	4620      	mov	r0, r4
 801d002:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d006:	3a30      	subs	r2, #48	; 0x30
 801d008:	2a09      	cmp	r2, #9
 801d00a:	d903      	bls.n	801d014 <_svfiprintf_r+0x1a8>
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d0c5      	beq.n	801cf9c <_svfiprintf_r+0x130>
 801d010:	9105      	str	r1, [sp, #20]
 801d012:	e7c3      	b.n	801cf9c <_svfiprintf_r+0x130>
 801d014:	fb0c 2101 	mla	r1, ip, r1, r2
 801d018:	4604      	mov	r4, r0
 801d01a:	2301      	movs	r3, #1
 801d01c:	e7f0      	b.n	801d000 <_svfiprintf_r+0x194>
 801d01e:	ab03      	add	r3, sp, #12
 801d020:	9300      	str	r3, [sp, #0]
 801d022:	462a      	mov	r2, r5
 801d024:	4b0f      	ldr	r3, [pc, #60]	; (801d064 <_svfiprintf_r+0x1f8>)
 801d026:	a904      	add	r1, sp, #16
 801d028:	4638      	mov	r0, r7
 801d02a:	f3af 8000 	nop.w
 801d02e:	1c42      	adds	r2, r0, #1
 801d030:	4606      	mov	r6, r0
 801d032:	d1d6      	bne.n	801cfe2 <_svfiprintf_r+0x176>
 801d034:	89ab      	ldrh	r3, [r5, #12]
 801d036:	065b      	lsls	r3, r3, #25
 801d038:	f53f af2c 	bmi.w	801ce94 <_svfiprintf_r+0x28>
 801d03c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d03e:	b01d      	add	sp, #116	; 0x74
 801d040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d044:	ab03      	add	r3, sp, #12
 801d046:	9300      	str	r3, [sp, #0]
 801d048:	462a      	mov	r2, r5
 801d04a:	4b06      	ldr	r3, [pc, #24]	; (801d064 <_svfiprintf_r+0x1f8>)
 801d04c:	a904      	add	r1, sp, #16
 801d04e:	4638      	mov	r0, r7
 801d050:	f000 f9d4 	bl	801d3fc <_printf_i>
 801d054:	e7eb      	b.n	801d02e <_svfiprintf_r+0x1c2>
 801d056:	bf00      	nop
 801d058:	08020484 	.word	0x08020484
 801d05c:	0802048e 	.word	0x0802048e
 801d060:	00000000 	.word	0x00000000
 801d064:	0801cdb5 	.word	0x0801cdb5
 801d068:	0802048a 	.word	0x0802048a

0801d06c <__sfputc_r>:
 801d06c:	6893      	ldr	r3, [r2, #8]
 801d06e:	3b01      	subs	r3, #1
 801d070:	2b00      	cmp	r3, #0
 801d072:	b410      	push	{r4}
 801d074:	6093      	str	r3, [r2, #8]
 801d076:	da08      	bge.n	801d08a <__sfputc_r+0x1e>
 801d078:	6994      	ldr	r4, [r2, #24]
 801d07a:	42a3      	cmp	r3, r4
 801d07c:	db01      	blt.n	801d082 <__sfputc_r+0x16>
 801d07e:	290a      	cmp	r1, #10
 801d080:	d103      	bne.n	801d08a <__sfputc_r+0x1e>
 801d082:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d086:	f7ff bc6f 	b.w	801c968 <__swbuf_r>
 801d08a:	6813      	ldr	r3, [r2, #0]
 801d08c:	1c58      	adds	r0, r3, #1
 801d08e:	6010      	str	r0, [r2, #0]
 801d090:	7019      	strb	r1, [r3, #0]
 801d092:	4608      	mov	r0, r1
 801d094:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d098:	4770      	bx	lr

0801d09a <__sfputs_r>:
 801d09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d09c:	4606      	mov	r6, r0
 801d09e:	460f      	mov	r7, r1
 801d0a0:	4614      	mov	r4, r2
 801d0a2:	18d5      	adds	r5, r2, r3
 801d0a4:	42ac      	cmp	r4, r5
 801d0a6:	d101      	bne.n	801d0ac <__sfputs_r+0x12>
 801d0a8:	2000      	movs	r0, #0
 801d0aa:	e007      	b.n	801d0bc <__sfputs_r+0x22>
 801d0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d0b0:	463a      	mov	r2, r7
 801d0b2:	4630      	mov	r0, r6
 801d0b4:	f7ff ffda 	bl	801d06c <__sfputc_r>
 801d0b8:	1c43      	adds	r3, r0, #1
 801d0ba:	d1f3      	bne.n	801d0a4 <__sfputs_r+0xa>
 801d0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d0c0 <_vfiprintf_r>:
 801d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0c4:	460d      	mov	r5, r1
 801d0c6:	b09d      	sub	sp, #116	; 0x74
 801d0c8:	4614      	mov	r4, r2
 801d0ca:	4698      	mov	r8, r3
 801d0cc:	4606      	mov	r6, r0
 801d0ce:	b118      	cbz	r0, 801d0d8 <_vfiprintf_r+0x18>
 801d0d0:	6983      	ldr	r3, [r0, #24]
 801d0d2:	b90b      	cbnz	r3, 801d0d8 <_vfiprintf_r+0x18>
 801d0d4:	f7ff f916 	bl	801c304 <__sinit>
 801d0d8:	4b89      	ldr	r3, [pc, #548]	; (801d300 <_vfiprintf_r+0x240>)
 801d0da:	429d      	cmp	r5, r3
 801d0dc:	d11b      	bne.n	801d116 <_vfiprintf_r+0x56>
 801d0de:	6875      	ldr	r5, [r6, #4]
 801d0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d0e2:	07d9      	lsls	r1, r3, #31
 801d0e4:	d405      	bmi.n	801d0f2 <_vfiprintf_r+0x32>
 801d0e6:	89ab      	ldrh	r3, [r5, #12]
 801d0e8:	059a      	lsls	r2, r3, #22
 801d0ea:	d402      	bmi.n	801d0f2 <_vfiprintf_r+0x32>
 801d0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0ee:	f7ff f9cc 	bl	801c48a <__retarget_lock_acquire_recursive>
 801d0f2:	89ab      	ldrh	r3, [r5, #12]
 801d0f4:	071b      	lsls	r3, r3, #28
 801d0f6:	d501      	bpl.n	801d0fc <_vfiprintf_r+0x3c>
 801d0f8:	692b      	ldr	r3, [r5, #16]
 801d0fa:	b9eb      	cbnz	r3, 801d138 <_vfiprintf_r+0x78>
 801d0fc:	4629      	mov	r1, r5
 801d0fe:	4630      	mov	r0, r6
 801d100:	f7ff fc96 	bl	801ca30 <__swsetup_r>
 801d104:	b1c0      	cbz	r0, 801d138 <_vfiprintf_r+0x78>
 801d106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d108:	07dc      	lsls	r4, r3, #31
 801d10a:	d50e      	bpl.n	801d12a <_vfiprintf_r+0x6a>
 801d10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d110:	b01d      	add	sp, #116	; 0x74
 801d112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d116:	4b7b      	ldr	r3, [pc, #492]	; (801d304 <_vfiprintf_r+0x244>)
 801d118:	429d      	cmp	r5, r3
 801d11a:	d101      	bne.n	801d120 <_vfiprintf_r+0x60>
 801d11c:	68b5      	ldr	r5, [r6, #8]
 801d11e:	e7df      	b.n	801d0e0 <_vfiprintf_r+0x20>
 801d120:	4b79      	ldr	r3, [pc, #484]	; (801d308 <_vfiprintf_r+0x248>)
 801d122:	429d      	cmp	r5, r3
 801d124:	bf08      	it	eq
 801d126:	68f5      	ldreq	r5, [r6, #12]
 801d128:	e7da      	b.n	801d0e0 <_vfiprintf_r+0x20>
 801d12a:	89ab      	ldrh	r3, [r5, #12]
 801d12c:	0598      	lsls	r0, r3, #22
 801d12e:	d4ed      	bmi.n	801d10c <_vfiprintf_r+0x4c>
 801d130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d132:	f7ff f9ab 	bl	801c48c <__retarget_lock_release_recursive>
 801d136:	e7e9      	b.n	801d10c <_vfiprintf_r+0x4c>
 801d138:	2300      	movs	r3, #0
 801d13a:	9309      	str	r3, [sp, #36]	; 0x24
 801d13c:	2320      	movs	r3, #32
 801d13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d142:	f8cd 800c 	str.w	r8, [sp, #12]
 801d146:	2330      	movs	r3, #48	; 0x30
 801d148:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d30c <_vfiprintf_r+0x24c>
 801d14c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d150:	f04f 0901 	mov.w	r9, #1
 801d154:	4623      	mov	r3, r4
 801d156:	469a      	mov	sl, r3
 801d158:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d15c:	b10a      	cbz	r2, 801d162 <_vfiprintf_r+0xa2>
 801d15e:	2a25      	cmp	r2, #37	; 0x25
 801d160:	d1f9      	bne.n	801d156 <_vfiprintf_r+0x96>
 801d162:	ebba 0b04 	subs.w	fp, sl, r4
 801d166:	d00b      	beq.n	801d180 <_vfiprintf_r+0xc0>
 801d168:	465b      	mov	r3, fp
 801d16a:	4622      	mov	r2, r4
 801d16c:	4629      	mov	r1, r5
 801d16e:	4630      	mov	r0, r6
 801d170:	f7ff ff93 	bl	801d09a <__sfputs_r>
 801d174:	3001      	adds	r0, #1
 801d176:	f000 80aa 	beq.w	801d2ce <_vfiprintf_r+0x20e>
 801d17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d17c:	445a      	add	r2, fp
 801d17e:	9209      	str	r2, [sp, #36]	; 0x24
 801d180:	f89a 3000 	ldrb.w	r3, [sl]
 801d184:	2b00      	cmp	r3, #0
 801d186:	f000 80a2 	beq.w	801d2ce <_vfiprintf_r+0x20e>
 801d18a:	2300      	movs	r3, #0
 801d18c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d194:	f10a 0a01 	add.w	sl, sl, #1
 801d198:	9304      	str	r3, [sp, #16]
 801d19a:	9307      	str	r3, [sp, #28]
 801d19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d1a0:	931a      	str	r3, [sp, #104]	; 0x68
 801d1a2:	4654      	mov	r4, sl
 801d1a4:	2205      	movs	r2, #5
 801d1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d1aa:	4858      	ldr	r0, [pc, #352]	; (801d30c <_vfiprintf_r+0x24c>)
 801d1ac:	f7e3 f838 	bl	8000220 <memchr>
 801d1b0:	9a04      	ldr	r2, [sp, #16]
 801d1b2:	b9d8      	cbnz	r0, 801d1ec <_vfiprintf_r+0x12c>
 801d1b4:	06d1      	lsls	r1, r2, #27
 801d1b6:	bf44      	itt	mi
 801d1b8:	2320      	movmi	r3, #32
 801d1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d1be:	0713      	lsls	r3, r2, #28
 801d1c0:	bf44      	itt	mi
 801d1c2:	232b      	movmi	r3, #43	; 0x2b
 801d1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d1c8:	f89a 3000 	ldrb.w	r3, [sl]
 801d1cc:	2b2a      	cmp	r3, #42	; 0x2a
 801d1ce:	d015      	beq.n	801d1fc <_vfiprintf_r+0x13c>
 801d1d0:	9a07      	ldr	r2, [sp, #28]
 801d1d2:	4654      	mov	r4, sl
 801d1d4:	2000      	movs	r0, #0
 801d1d6:	f04f 0c0a 	mov.w	ip, #10
 801d1da:	4621      	mov	r1, r4
 801d1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d1e0:	3b30      	subs	r3, #48	; 0x30
 801d1e2:	2b09      	cmp	r3, #9
 801d1e4:	d94e      	bls.n	801d284 <_vfiprintf_r+0x1c4>
 801d1e6:	b1b0      	cbz	r0, 801d216 <_vfiprintf_r+0x156>
 801d1e8:	9207      	str	r2, [sp, #28]
 801d1ea:	e014      	b.n	801d216 <_vfiprintf_r+0x156>
 801d1ec:	eba0 0308 	sub.w	r3, r0, r8
 801d1f0:	fa09 f303 	lsl.w	r3, r9, r3
 801d1f4:	4313      	orrs	r3, r2
 801d1f6:	9304      	str	r3, [sp, #16]
 801d1f8:	46a2      	mov	sl, r4
 801d1fa:	e7d2      	b.n	801d1a2 <_vfiprintf_r+0xe2>
 801d1fc:	9b03      	ldr	r3, [sp, #12]
 801d1fe:	1d19      	adds	r1, r3, #4
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	9103      	str	r1, [sp, #12]
 801d204:	2b00      	cmp	r3, #0
 801d206:	bfbb      	ittet	lt
 801d208:	425b      	neglt	r3, r3
 801d20a:	f042 0202 	orrlt.w	r2, r2, #2
 801d20e:	9307      	strge	r3, [sp, #28]
 801d210:	9307      	strlt	r3, [sp, #28]
 801d212:	bfb8      	it	lt
 801d214:	9204      	strlt	r2, [sp, #16]
 801d216:	7823      	ldrb	r3, [r4, #0]
 801d218:	2b2e      	cmp	r3, #46	; 0x2e
 801d21a:	d10c      	bne.n	801d236 <_vfiprintf_r+0x176>
 801d21c:	7863      	ldrb	r3, [r4, #1]
 801d21e:	2b2a      	cmp	r3, #42	; 0x2a
 801d220:	d135      	bne.n	801d28e <_vfiprintf_r+0x1ce>
 801d222:	9b03      	ldr	r3, [sp, #12]
 801d224:	1d1a      	adds	r2, r3, #4
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	9203      	str	r2, [sp, #12]
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	bfb8      	it	lt
 801d22e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d232:	3402      	adds	r4, #2
 801d234:	9305      	str	r3, [sp, #20]
 801d236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d31c <_vfiprintf_r+0x25c>
 801d23a:	7821      	ldrb	r1, [r4, #0]
 801d23c:	2203      	movs	r2, #3
 801d23e:	4650      	mov	r0, sl
 801d240:	f7e2 ffee 	bl	8000220 <memchr>
 801d244:	b140      	cbz	r0, 801d258 <_vfiprintf_r+0x198>
 801d246:	2340      	movs	r3, #64	; 0x40
 801d248:	eba0 000a 	sub.w	r0, r0, sl
 801d24c:	fa03 f000 	lsl.w	r0, r3, r0
 801d250:	9b04      	ldr	r3, [sp, #16]
 801d252:	4303      	orrs	r3, r0
 801d254:	3401      	adds	r4, #1
 801d256:	9304      	str	r3, [sp, #16]
 801d258:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d25c:	482c      	ldr	r0, [pc, #176]	; (801d310 <_vfiprintf_r+0x250>)
 801d25e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d262:	2206      	movs	r2, #6
 801d264:	f7e2 ffdc 	bl	8000220 <memchr>
 801d268:	2800      	cmp	r0, #0
 801d26a:	d03f      	beq.n	801d2ec <_vfiprintf_r+0x22c>
 801d26c:	4b29      	ldr	r3, [pc, #164]	; (801d314 <_vfiprintf_r+0x254>)
 801d26e:	bb1b      	cbnz	r3, 801d2b8 <_vfiprintf_r+0x1f8>
 801d270:	9b03      	ldr	r3, [sp, #12]
 801d272:	3307      	adds	r3, #7
 801d274:	f023 0307 	bic.w	r3, r3, #7
 801d278:	3308      	adds	r3, #8
 801d27a:	9303      	str	r3, [sp, #12]
 801d27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d27e:	443b      	add	r3, r7
 801d280:	9309      	str	r3, [sp, #36]	; 0x24
 801d282:	e767      	b.n	801d154 <_vfiprintf_r+0x94>
 801d284:	fb0c 3202 	mla	r2, ip, r2, r3
 801d288:	460c      	mov	r4, r1
 801d28a:	2001      	movs	r0, #1
 801d28c:	e7a5      	b.n	801d1da <_vfiprintf_r+0x11a>
 801d28e:	2300      	movs	r3, #0
 801d290:	3401      	adds	r4, #1
 801d292:	9305      	str	r3, [sp, #20]
 801d294:	4619      	mov	r1, r3
 801d296:	f04f 0c0a 	mov.w	ip, #10
 801d29a:	4620      	mov	r0, r4
 801d29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d2a0:	3a30      	subs	r2, #48	; 0x30
 801d2a2:	2a09      	cmp	r2, #9
 801d2a4:	d903      	bls.n	801d2ae <_vfiprintf_r+0x1ee>
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d0c5      	beq.n	801d236 <_vfiprintf_r+0x176>
 801d2aa:	9105      	str	r1, [sp, #20]
 801d2ac:	e7c3      	b.n	801d236 <_vfiprintf_r+0x176>
 801d2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 801d2b2:	4604      	mov	r4, r0
 801d2b4:	2301      	movs	r3, #1
 801d2b6:	e7f0      	b.n	801d29a <_vfiprintf_r+0x1da>
 801d2b8:	ab03      	add	r3, sp, #12
 801d2ba:	9300      	str	r3, [sp, #0]
 801d2bc:	462a      	mov	r2, r5
 801d2be:	4b16      	ldr	r3, [pc, #88]	; (801d318 <_vfiprintf_r+0x258>)
 801d2c0:	a904      	add	r1, sp, #16
 801d2c2:	4630      	mov	r0, r6
 801d2c4:	f3af 8000 	nop.w
 801d2c8:	4607      	mov	r7, r0
 801d2ca:	1c78      	adds	r0, r7, #1
 801d2cc:	d1d6      	bne.n	801d27c <_vfiprintf_r+0x1bc>
 801d2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d2d0:	07d9      	lsls	r1, r3, #31
 801d2d2:	d405      	bmi.n	801d2e0 <_vfiprintf_r+0x220>
 801d2d4:	89ab      	ldrh	r3, [r5, #12]
 801d2d6:	059a      	lsls	r2, r3, #22
 801d2d8:	d402      	bmi.n	801d2e0 <_vfiprintf_r+0x220>
 801d2da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d2dc:	f7ff f8d6 	bl	801c48c <__retarget_lock_release_recursive>
 801d2e0:	89ab      	ldrh	r3, [r5, #12]
 801d2e2:	065b      	lsls	r3, r3, #25
 801d2e4:	f53f af12 	bmi.w	801d10c <_vfiprintf_r+0x4c>
 801d2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d2ea:	e711      	b.n	801d110 <_vfiprintf_r+0x50>
 801d2ec:	ab03      	add	r3, sp, #12
 801d2ee:	9300      	str	r3, [sp, #0]
 801d2f0:	462a      	mov	r2, r5
 801d2f2:	4b09      	ldr	r3, [pc, #36]	; (801d318 <_vfiprintf_r+0x258>)
 801d2f4:	a904      	add	r1, sp, #16
 801d2f6:	4630      	mov	r0, r6
 801d2f8:	f000 f880 	bl	801d3fc <_printf_i>
 801d2fc:	e7e4      	b.n	801d2c8 <_vfiprintf_r+0x208>
 801d2fe:	bf00      	nop
 801d300:	08020440 	.word	0x08020440
 801d304:	08020460 	.word	0x08020460
 801d308:	08020420 	.word	0x08020420
 801d30c:	08020484 	.word	0x08020484
 801d310:	0802048e 	.word	0x0802048e
 801d314:	00000000 	.word	0x00000000
 801d318:	0801d09b 	.word	0x0801d09b
 801d31c:	0802048a 	.word	0x0802048a

0801d320 <_printf_common>:
 801d320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d324:	4616      	mov	r6, r2
 801d326:	4699      	mov	r9, r3
 801d328:	688a      	ldr	r2, [r1, #8]
 801d32a:	690b      	ldr	r3, [r1, #16]
 801d32c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d330:	4293      	cmp	r3, r2
 801d332:	bfb8      	it	lt
 801d334:	4613      	movlt	r3, r2
 801d336:	6033      	str	r3, [r6, #0]
 801d338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d33c:	4607      	mov	r7, r0
 801d33e:	460c      	mov	r4, r1
 801d340:	b10a      	cbz	r2, 801d346 <_printf_common+0x26>
 801d342:	3301      	adds	r3, #1
 801d344:	6033      	str	r3, [r6, #0]
 801d346:	6823      	ldr	r3, [r4, #0]
 801d348:	0699      	lsls	r1, r3, #26
 801d34a:	bf42      	ittt	mi
 801d34c:	6833      	ldrmi	r3, [r6, #0]
 801d34e:	3302      	addmi	r3, #2
 801d350:	6033      	strmi	r3, [r6, #0]
 801d352:	6825      	ldr	r5, [r4, #0]
 801d354:	f015 0506 	ands.w	r5, r5, #6
 801d358:	d106      	bne.n	801d368 <_printf_common+0x48>
 801d35a:	f104 0a19 	add.w	sl, r4, #25
 801d35e:	68e3      	ldr	r3, [r4, #12]
 801d360:	6832      	ldr	r2, [r6, #0]
 801d362:	1a9b      	subs	r3, r3, r2
 801d364:	42ab      	cmp	r3, r5
 801d366:	dc26      	bgt.n	801d3b6 <_printf_common+0x96>
 801d368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d36c:	1e13      	subs	r3, r2, #0
 801d36e:	6822      	ldr	r2, [r4, #0]
 801d370:	bf18      	it	ne
 801d372:	2301      	movne	r3, #1
 801d374:	0692      	lsls	r2, r2, #26
 801d376:	d42b      	bmi.n	801d3d0 <_printf_common+0xb0>
 801d378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d37c:	4649      	mov	r1, r9
 801d37e:	4638      	mov	r0, r7
 801d380:	47c0      	blx	r8
 801d382:	3001      	adds	r0, #1
 801d384:	d01e      	beq.n	801d3c4 <_printf_common+0xa4>
 801d386:	6823      	ldr	r3, [r4, #0]
 801d388:	68e5      	ldr	r5, [r4, #12]
 801d38a:	6832      	ldr	r2, [r6, #0]
 801d38c:	f003 0306 	and.w	r3, r3, #6
 801d390:	2b04      	cmp	r3, #4
 801d392:	bf08      	it	eq
 801d394:	1aad      	subeq	r5, r5, r2
 801d396:	68a3      	ldr	r3, [r4, #8]
 801d398:	6922      	ldr	r2, [r4, #16]
 801d39a:	bf0c      	ite	eq
 801d39c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d3a0:	2500      	movne	r5, #0
 801d3a2:	4293      	cmp	r3, r2
 801d3a4:	bfc4      	itt	gt
 801d3a6:	1a9b      	subgt	r3, r3, r2
 801d3a8:	18ed      	addgt	r5, r5, r3
 801d3aa:	2600      	movs	r6, #0
 801d3ac:	341a      	adds	r4, #26
 801d3ae:	42b5      	cmp	r5, r6
 801d3b0:	d11a      	bne.n	801d3e8 <_printf_common+0xc8>
 801d3b2:	2000      	movs	r0, #0
 801d3b4:	e008      	b.n	801d3c8 <_printf_common+0xa8>
 801d3b6:	2301      	movs	r3, #1
 801d3b8:	4652      	mov	r2, sl
 801d3ba:	4649      	mov	r1, r9
 801d3bc:	4638      	mov	r0, r7
 801d3be:	47c0      	blx	r8
 801d3c0:	3001      	adds	r0, #1
 801d3c2:	d103      	bne.n	801d3cc <_printf_common+0xac>
 801d3c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3cc:	3501      	adds	r5, #1
 801d3ce:	e7c6      	b.n	801d35e <_printf_common+0x3e>
 801d3d0:	18e1      	adds	r1, r4, r3
 801d3d2:	1c5a      	adds	r2, r3, #1
 801d3d4:	2030      	movs	r0, #48	; 0x30
 801d3d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d3da:	4422      	add	r2, r4
 801d3dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d3e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d3e4:	3302      	adds	r3, #2
 801d3e6:	e7c7      	b.n	801d378 <_printf_common+0x58>
 801d3e8:	2301      	movs	r3, #1
 801d3ea:	4622      	mov	r2, r4
 801d3ec:	4649      	mov	r1, r9
 801d3ee:	4638      	mov	r0, r7
 801d3f0:	47c0      	blx	r8
 801d3f2:	3001      	adds	r0, #1
 801d3f4:	d0e6      	beq.n	801d3c4 <_printf_common+0xa4>
 801d3f6:	3601      	adds	r6, #1
 801d3f8:	e7d9      	b.n	801d3ae <_printf_common+0x8e>
	...

0801d3fc <_printf_i>:
 801d3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d400:	460c      	mov	r4, r1
 801d402:	4691      	mov	r9, r2
 801d404:	7e27      	ldrb	r7, [r4, #24]
 801d406:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d408:	2f78      	cmp	r7, #120	; 0x78
 801d40a:	4680      	mov	r8, r0
 801d40c:	469a      	mov	sl, r3
 801d40e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d412:	d807      	bhi.n	801d424 <_printf_i+0x28>
 801d414:	2f62      	cmp	r7, #98	; 0x62
 801d416:	d80a      	bhi.n	801d42e <_printf_i+0x32>
 801d418:	2f00      	cmp	r7, #0
 801d41a:	f000 80d8 	beq.w	801d5ce <_printf_i+0x1d2>
 801d41e:	2f58      	cmp	r7, #88	; 0x58
 801d420:	f000 80a3 	beq.w	801d56a <_printf_i+0x16e>
 801d424:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d42c:	e03a      	b.n	801d4a4 <_printf_i+0xa8>
 801d42e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d432:	2b15      	cmp	r3, #21
 801d434:	d8f6      	bhi.n	801d424 <_printf_i+0x28>
 801d436:	a001      	add	r0, pc, #4	; (adr r0, 801d43c <_printf_i+0x40>)
 801d438:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d43c:	0801d495 	.word	0x0801d495
 801d440:	0801d4a9 	.word	0x0801d4a9
 801d444:	0801d425 	.word	0x0801d425
 801d448:	0801d425 	.word	0x0801d425
 801d44c:	0801d425 	.word	0x0801d425
 801d450:	0801d425 	.word	0x0801d425
 801d454:	0801d4a9 	.word	0x0801d4a9
 801d458:	0801d425 	.word	0x0801d425
 801d45c:	0801d425 	.word	0x0801d425
 801d460:	0801d425 	.word	0x0801d425
 801d464:	0801d425 	.word	0x0801d425
 801d468:	0801d5b5 	.word	0x0801d5b5
 801d46c:	0801d4d9 	.word	0x0801d4d9
 801d470:	0801d597 	.word	0x0801d597
 801d474:	0801d425 	.word	0x0801d425
 801d478:	0801d425 	.word	0x0801d425
 801d47c:	0801d5d7 	.word	0x0801d5d7
 801d480:	0801d425 	.word	0x0801d425
 801d484:	0801d4d9 	.word	0x0801d4d9
 801d488:	0801d425 	.word	0x0801d425
 801d48c:	0801d425 	.word	0x0801d425
 801d490:	0801d59f 	.word	0x0801d59f
 801d494:	680b      	ldr	r3, [r1, #0]
 801d496:	1d1a      	adds	r2, r3, #4
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	600a      	str	r2, [r1, #0]
 801d49c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d4a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d4a4:	2301      	movs	r3, #1
 801d4a6:	e0a3      	b.n	801d5f0 <_printf_i+0x1f4>
 801d4a8:	6825      	ldr	r5, [r4, #0]
 801d4aa:	6808      	ldr	r0, [r1, #0]
 801d4ac:	062e      	lsls	r6, r5, #24
 801d4ae:	f100 0304 	add.w	r3, r0, #4
 801d4b2:	d50a      	bpl.n	801d4ca <_printf_i+0xce>
 801d4b4:	6805      	ldr	r5, [r0, #0]
 801d4b6:	600b      	str	r3, [r1, #0]
 801d4b8:	2d00      	cmp	r5, #0
 801d4ba:	da03      	bge.n	801d4c4 <_printf_i+0xc8>
 801d4bc:	232d      	movs	r3, #45	; 0x2d
 801d4be:	426d      	negs	r5, r5
 801d4c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d4c4:	485e      	ldr	r0, [pc, #376]	; (801d640 <_printf_i+0x244>)
 801d4c6:	230a      	movs	r3, #10
 801d4c8:	e019      	b.n	801d4fe <_printf_i+0x102>
 801d4ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d4ce:	6805      	ldr	r5, [r0, #0]
 801d4d0:	600b      	str	r3, [r1, #0]
 801d4d2:	bf18      	it	ne
 801d4d4:	b22d      	sxthne	r5, r5
 801d4d6:	e7ef      	b.n	801d4b8 <_printf_i+0xbc>
 801d4d8:	680b      	ldr	r3, [r1, #0]
 801d4da:	6825      	ldr	r5, [r4, #0]
 801d4dc:	1d18      	adds	r0, r3, #4
 801d4de:	6008      	str	r0, [r1, #0]
 801d4e0:	0628      	lsls	r0, r5, #24
 801d4e2:	d501      	bpl.n	801d4e8 <_printf_i+0xec>
 801d4e4:	681d      	ldr	r5, [r3, #0]
 801d4e6:	e002      	b.n	801d4ee <_printf_i+0xf2>
 801d4e8:	0669      	lsls	r1, r5, #25
 801d4ea:	d5fb      	bpl.n	801d4e4 <_printf_i+0xe8>
 801d4ec:	881d      	ldrh	r5, [r3, #0]
 801d4ee:	4854      	ldr	r0, [pc, #336]	; (801d640 <_printf_i+0x244>)
 801d4f0:	2f6f      	cmp	r7, #111	; 0x6f
 801d4f2:	bf0c      	ite	eq
 801d4f4:	2308      	moveq	r3, #8
 801d4f6:	230a      	movne	r3, #10
 801d4f8:	2100      	movs	r1, #0
 801d4fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d4fe:	6866      	ldr	r6, [r4, #4]
 801d500:	60a6      	str	r6, [r4, #8]
 801d502:	2e00      	cmp	r6, #0
 801d504:	bfa2      	ittt	ge
 801d506:	6821      	ldrge	r1, [r4, #0]
 801d508:	f021 0104 	bicge.w	r1, r1, #4
 801d50c:	6021      	strge	r1, [r4, #0]
 801d50e:	b90d      	cbnz	r5, 801d514 <_printf_i+0x118>
 801d510:	2e00      	cmp	r6, #0
 801d512:	d04d      	beq.n	801d5b0 <_printf_i+0x1b4>
 801d514:	4616      	mov	r6, r2
 801d516:	fbb5 f1f3 	udiv	r1, r5, r3
 801d51a:	fb03 5711 	mls	r7, r3, r1, r5
 801d51e:	5dc7      	ldrb	r7, [r0, r7]
 801d520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d524:	462f      	mov	r7, r5
 801d526:	42bb      	cmp	r3, r7
 801d528:	460d      	mov	r5, r1
 801d52a:	d9f4      	bls.n	801d516 <_printf_i+0x11a>
 801d52c:	2b08      	cmp	r3, #8
 801d52e:	d10b      	bne.n	801d548 <_printf_i+0x14c>
 801d530:	6823      	ldr	r3, [r4, #0]
 801d532:	07df      	lsls	r7, r3, #31
 801d534:	d508      	bpl.n	801d548 <_printf_i+0x14c>
 801d536:	6923      	ldr	r3, [r4, #16]
 801d538:	6861      	ldr	r1, [r4, #4]
 801d53a:	4299      	cmp	r1, r3
 801d53c:	bfde      	ittt	le
 801d53e:	2330      	movle	r3, #48	; 0x30
 801d540:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d544:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801d548:	1b92      	subs	r2, r2, r6
 801d54a:	6122      	str	r2, [r4, #16]
 801d54c:	f8cd a000 	str.w	sl, [sp]
 801d550:	464b      	mov	r3, r9
 801d552:	aa03      	add	r2, sp, #12
 801d554:	4621      	mov	r1, r4
 801d556:	4640      	mov	r0, r8
 801d558:	f7ff fee2 	bl	801d320 <_printf_common>
 801d55c:	3001      	adds	r0, #1
 801d55e:	d14c      	bne.n	801d5fa <_printf_i+0x1fe>
 801d560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d564:	b004      	add	sp, #16
 801d566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d56a:	4835      	ldr	r0, [pc, #212]	; (801d640 <_printf_i+0x244>)
 801d56c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d570:	6823      	ldr	r3, [r4, #0]
 801d572:	680e      	ldr	r6, [r1, #0]
 801d574:	061f      	lsls	r7, r3, #24
 801d576:	f856 5b04 	ldr.w	r5, [r6], #4
 801d57a:	600e      	str	r6, [r1, #0]
 801d57c:	d514      	bpl.n	801d5a8 <_printf_i+0x1ac>
 801d57e:	07d9      	lsls	r1, r3, #31
 801d580:	bf44      	itt	mi
 801d582:	f043 0320 	orrmi.w	r3, r3, #32
 801d586:	6023      	strmi	r3, [r4, #0]
 801d588:	b91d      	cbnz	r5, 801d592 <_printf_i+0x196>
 801d58a:	6823      	ldr	r3, [r4, #0]
 801d58c:	f023 0320 	bic.w	r3, r3, #32
 801d590:	6023      	str	r3, [r4, #0]
 801d592:	2310      	movs	r3, #16
 801d594:	e7b0      	b.n	801d4f8 <_printf_i+0xfc>
 801d596:	6823      	ldr	r3, [r4, #0]
 801d598:	f043 0320 	orr.w	r3, r3, #32
 801d59c:	6023      	str	r3, [r4, #0]
 801d59e:	2378      	movs	r3, #120	; 0x78
 801d5a0:	4828      	ldr	r0, [pc, #160]	; (801d644 <_printf_i+0x248>)
 801d5a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d5a6:	e7e3      	b.n	801d570 <_printf_i+0x174>
 801d5a8:	065e      	lsls	r6, r3, #25
 801d5aa:	bf48      	it	mi
 801d5ac:	b2ad      	uxthmi	r5, r5
 801d5ae:	e7e6      	b.n	801d57e <_printf_i+0x182>
 801d5b0:	4616      	mov	r6, r2
 801d5b2:	e7bb      	b.n	801d52c <_printf_i+0x130>
 801d5b4:	680b      	ldr	r3, [r1, #0]
 801d5b6:	6826      	ldr	r6, [r4, #0]
 801d5b8:	6960      	ldr	r0, [r4, #20]
 801d5ba:	1d1d      	adds	r5, r3, #4
 801d5bc:	600d      	str	r5, [r1, #0]
 801d5be:	0635      	lsls	r5, r6, #24
 801d5c0:	681b      	ldr	r3, [r3, #0]
 801d5c2:	d501      	bpl.n	801d5c8 <_printf_i+0x1cc>
 801d5c4:	6018      	str	r0, [r3, #0]
 801d5c6:	e002      	b.n	801d5ce <_printf_i+0x1d2>
 801d5c8:	0671      	lsls	r1, r6, #25
 801d5ca:	d5fb      	bpl.n	801d5c4 <_printf_i+0x1c8>
 801d5cc:	8018      	strh	r0, [r3, #0]
 801d5ce:	2300      	movs	r3, #0
 801d5d0:	6123      	str	r3, [r4, #16]
 801d5d2:	4616      	mov	r6, r2
 801d5d4:	e7ba      	b.n	801d54c <_printf_i+0x150>
 801d5d6:	680b      	ldr	r3, [r1, #0]
 801d5d8:	1d1a      	adds	r2, r3, #4
 801d5da:	600a      	str	r2, [r1, #0]
 801d5dc:	681e      	ldr	r6, [r3, #0]
 801d5de:	6862      	ldr	r2, [r4, #4]
 801d5e0:	2100      	movs	r1, #0
 801d5e2:	4630      	mov	r0, r6
 801d5e4:	f7e2 fe1c 	bl	8000220 <memchr>
 801d5e8:	b108      	cbz	r0, 801d5ee <_printf_i+0x1f2>
 801d5ea:	1b80      	subs	r0, r0, r6
 801d5ec:	6060      	str	r0, [r4, #4]
 801d5ee:	6863      	ldr	r3, [r4, #4]
 801d5f0:	6123      	str	r3, [r4, #16]
 801d5f2:	2300      	movs	r3, #0
 801d5f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d5f8:	e7a8      	b.n	801d54c <_printf_i+0x150>
 801d5fa:	6923      	ldr	r3, [r4, #16]
 801d5fc:	4632      	mov	r2, r6
 801d5fe:	4649      	mov	r1, r9
 801d600:	4640      	mov	r0, r8
 801d602:	47d0      	blx	sl
 801d604:	3001      	adds	r0, #1
 801d606:	d0ab      	beq.n	801d560 <_printf_i+0x164>
 801d608:	6823      	ldr	r3, [r4, #0]
 801d60a:	079b      	lsls	r3, r3, #30
 801d60c:	d413      	bmi.n	801d636 <_printf_i+0x23a>
 801d60e:	68e0      	ldr	r0, [r4, #12]
 801d610:	9b03      	ldr	r3, [sp, #12]
 801d612:	4298      	cmp	r0, r3
 801d614:	bfb8      	it	lt
 801d616:	4618      	movlt	r0, r3
 801d618:	e7a4      	b.n	801d564 <_printf_i+0x168>
 801d61a:	2301      	movs	r3, #1
 801d61c:	4632      	mov	r2, r6
 801d61e:	4649      	mov	r1, r9
 801d620:	4640      	mov	r0, r8
 801d622:	47d0      	blx	sl
 801d624:	3001      	adds	r0, #1
 801d626:	d09b      	beq.n	801d560 <_printf_i+0x164>
 801d628:	3501      	adds	r5, #1
 801d62a:	68e3      	ldr	r3, [r4, #12]
 801d62c:	9903      	ldr	r1, [sp, #12]
 801d62e:	1a5b      	subs	r3, r3, r1
 801d630:	42ab      	cmp	r3, r5
 801d632:	dcf2      	bgt.n	801d61a <_printf_i+0x21e>
 801d634:	e7eb      	b.n	801d60e <_printf_i+0x212>
 801d636:	2500      	movs	r5, #0
 801d638:	f104 0619 	add.w	r6, r4, #25
 801d63c:	e7f5      	b.n	801d62a <_printf_i+0x22e>
 801d63e:	bf00      	nop
 801d640:	08020495 	.word	0x08020495
 801d644:	080204a6 	.word	0x080204a6

0801d648 <_putc_r>:
 801d648:	b570      	push	{r4, r5, r6, lr}
 801d64a:	460d      	mov	r5, r1
 801d64c:	4614      	mov	r4, r2
 801d64e:	4606      	mov	r6, r0
 801d650:	b118      	cbz	r0, 801d65a <_putc_r+0x12>
 801d652:	6983      	ldr	r3, [r0, #24]
 801d654:	b90b      	cbnz	r3, 801d65a <_putc_r+0x12>
 801d656:	f7fe fe55 	bl	801c304 <__sinit>
 801d65a:	4b1c      	ldr	r3, [pc, #112]	; (801d6cc <_putc_r+0x84>)
 801d65c:	429c      	cmp	r4, r3
 801d65e:	d124      	bne.n	801d6aa <_putc_r+0x62>
 801d660:	6874      	ldr	r4, [r6, #4]
 801d662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d664:	07d8      	lsls	r0, r3, #31
 801d666:	d405      	bmi.n	801d674 <_putc_r+0x2c>
 801d668:	89a3      	ldrh	r3, [r4, #12]
 801d66a:	0599      	lsls	r1, r3, #22
 801d66c:	d402      	bmi.n	801d674 <_putc_r+0x2c>
 801d66e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d670:	f7fe ff0b 	bl	801c48a <__retarget_lock_acquire_recursive>
 801d674:	68a3      	ldr	r3, [r4, #8]
 801d676:	3b01      	subs	r3, #1
 801d678:	2b00      	cmp	r3, #0
 801d67a:	60a3      	str	r3, [r4, #8]
 801d67c:	da05      	bge.n	801d68a <_putc_r+0x42>
 801d67e:	69a2      	ldr	r2, [r4, #24]
 801d680:	4293      	cmp	r3, r2
 801d682:	db1c      	blt.n	801d6be <_putc_r+0x76>
 801d684:	b2eb      	uxtb	r3, r5
 801d686:	2b0a      	cmp	r3, #10
 801d688:	d019      	beq.n	801d6be <_putc_r+0x76>
 801d68a:	6823      	ldr	r3, [r4, #0]
 801d68c:	1c5a      	adds	r2, r3, #1
 801d68e:	6022      	str	r2, [r4, #0]
 801d690:	701d      	strb	r5, [r3, #0]
 801d692:	b2ed      	uxtb	r5, r5
 801d694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d696:	07da      	lsls	r2, r3, #31
 801d698:	d405      	bmi.n	801d6a6 <_putc_r+0x5e>
 801d69a:	89a3      	ldrh	r3, [r4, #12]
 801d69c:	059b      	lsls	r3, r3, #22
 801d69e:	d402      	bmi.n	801d6a6 <_putc_r+0x5e>
 801d6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d6a2:	f7fe fef3 	bl	801c48c <__retarget_lock_release_recursive>
 801d6a6:	4628      	mov	r0, r5
 801d6a8:	bd70      	pop	{r4, r5, r6, pc}
 801d6aa:	4b09      	ldr	r3, [pc, #36]	; (801d6d0 <_putc_r+0x88>)
 801d6ac:	429c      	cmp	r4, r3
 801d6ae:	d101      	bne.n	801d6b4 <_putc_r+0x6c>
 801d6b0:	68b4      	ldr	r4, [r6, #8]
 801d6b2:	e7d6      	b.n	801d662 <_putc_r+0x1a>
 801d6b4:	4b07      	ldr	r3, [pc, #28]	; (801d6d4 <_putc_r+0x8c>)
 801d6b6:	429c      	cmp	r4, r3
 801d6b8:	bf08      	it	eq
 801d6ba:	68f4      	ldreq	r4, [r6, #12]
 801d6bc:	e7d1      	b.n	801d662 <_putc_r+0x1a>
 801d6be:	4629      	mov	r1, r5
 801d6c0:	4622      	mov	r2, r4
 801d6c2:	4630      	mov	r0, r6
 801d6c4:	f7ff f950 	bl	801c968 <__swbuf_r>
 801d6c8:	4605      	mov	r5, r0
 801d6ca:	e7e3      	b.n	801d694 <_putc_r+0x4c>
 801d6cc:	08020440 	.word	0x08020440
 801d6d0:	08020460 	.word	0x08020460
 801d6d4:	08020420 	.word	0x08020420

0801d6d8 <_read_r>:
 801d6d8:	b538      	push	{r3, r4, r5, lr}
 801d6da:	4d07      	ldr	r5, [pc, #28]	; (801d6f8 <_read_r+0x20>)
 801d6dc:	4604      	mov	r4, r0
 801d6de:	4608      	mov	r0, r1
 801d6e0:	4611      	mov	r1, r2
 801d6e2:	2200      	movs	r2, #0
 801d6e4:	602a      	str	r2, [r5, #0]
 801d6e6:	461a      	mov	r2, r3
 801d6e8:	f7e6 f9c0 	bl	8003a6c <_read>
 801d6ec:	1c43      	adds	r3, r0, #1
 801d6ee:	d102      	bne.n	801d6f6 <_read_r+0x1e>
 801d6f0:	682b      	ldr	r3, [r5, #0]
 801d6f2:	b103      	cbz	r3, 801d6f6 <_read_r+0x1e>
 801d6f4:	6023      	str	r3, [r4, #0]
 801d6f6:	bd38      	pop	{r3, r4, r5, pc}
 801d6f8:	2000c764 	.word	0x2000c764

0801d6fc <_fstat_r>:
 801d6fc:	b538      	push	{r3, r4, r5, lr}
 801d6fe:	4d07      	ldr	r5, [pc, #28]	; (801d71c <_fstat_r+0x20>)
 801d700:	2300      	movs	r3, #0
 801d702:	4604      	mov	r4, r0
 801d704:	4608      	mov	r0, r1
 801d706:	4611      	mov	r1, r2
 801d708:	602b      	str	r3, [r5, #0]
 801d70a:	f7e6 f9f4 	bl	8003af6 <_fstat>
 801d70e:	1c43      	adds	r3, r0, #1
 801d710:	d102      	bne.n	801d718 <_fstat_r+0x1c>
 801d712:	682b      	ldr	r3, [r5, #0]
 801d714:	b103      	cbz	r3, 801d718 <_fstat_r+0x1c>
 801d716:	6023      	str	r3, [r4, #0]
 801d718:	bd38      	pop	{r3, r4, r5, pc}
 801d71a:	bf00      	nop
 801d71c:	2000c764 	.word	0x2000c764

0801d720 <_isatty_r>:
 801d720:	b538      	push	{r3, r4, r5, lr}
 801d722:	4d06      	ldr	r5, [pc, #24]	; (801d73c <_isatty_r+0x1c>)
 801d724:	2300      	movs	r3, #0
 801d726:	4604      	mov	r4, r0
 801d728:	4608      	mov	r0, r1
 801d72a:	602b      	str	r3, [r5, #0]
 801d72c:	f7e6 f9f3 	bl	8003b16 <_isatty>
 801d730:	1c43      	adds	r3, r0, #1
 801d732:	d102      	bne.n	801d73a <_isatty_r+0x1a>
 801d734:	682b      	ldr	r3, [r5, #0]
 801d736:	b103      	cbz	r3, 801d73a <_isatty_r+0x1a>
 801d738:	6023      	str	r3, [r4, #0]
 801d73a:	bd38      	pop	{r3, r4, r5, pc}
 801d73c:	2000c764 	.word	0x2000c764

0801d740 <_realloc_r>:
 801d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d742:	4607      	mov	r7, r0
 801d744:	4614      	mov	r4, r2
 801d746:	460e      	mov	r6, r1
 801d748:	b921      	cbnz	r1, 801d754 <_realloc_r+0x14>
 801d74a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d74e:	4611      	mov	r1, r2
 801d750:	f7fe bf2e 	b.w	801c5b0 <_malloc_r>
 801d754:	b922      	cbnz	r2, 801d760 <_realloc_r+0x20>
 801d756:	f7fe fedb 	bl	801c510 <_free_r>
 801d75a:	4625      	mov	r5, r4
 801d75c:	4628      	mov	r0, r5
 801d75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d760:	f000 f814 	bl	801d78c <_malloc_usable_size_r>
 801d764:	42a0      	cmp	r0, r4
 801d766:	d20f      	bcs.n	801d788 <_realloc_r+0x48>
 801d768:	4621      	mov	r1, r4
 801d76a:	4638      	mov	r0, r7
 801d76c:	f7fe ff20 	bl	801c5b0 <_malloc_r>
 801d770:	4605      	mov	r5, r0
 801d772:	2800      	cmp	r0, #0
 801d774:	d0f2      	beq.n	801d75c <_realloc_r+0x1c>
 801d776:	4631      	mov	r1, r6
 801d778:	4622      	mov	r2, r4
 801d77a:	f7fe fe99 	bl	801c4b0 <memcpy>
 801d77e:	4631      	mov	r1, r6
 801d780:	4638      	mov	r0, r7
 801d782:	f7fe fec5 	bl	801c510 <_free_r>
 801d786:	e7e9      	b.n	801d75c <_realloc_r+0x1c>
 801d788:	4635      	mov	r5, r6
 801d78a:	e7e7      	b.n	801d75c <_realloc_r+0x1c>

0801d78c <_malloc_usable_size_r>:
 801d78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d790:	1f18      	subs	r0, r3, #4
 801d792:	2b00      	cmp	r3, #0
 801d794:	bfbc      	itt	lt
 801d796:	580b      	ldrlt	r3, [r1, r0]
 801d798:	18c0      	addlt	r0, r0, r3
 801d79a:	4770      	bx	lr

0801d79c <_init>:
 801d79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d79e:	bf00      	nop
 801d7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7a2:	bc08      	pop	{r3}
 801d7a4:	469e      	mov	lr, r3
 801d7a6:	4770      	bx	lr

0801d7a8 <_fini>:
 801d7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7aa:	bf00      	nop
 801d7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7ae:	bc08      	pop	{r3}
 801d7b0:	469e      	mov	lr, r3
 801d7b2:	4770      	bx	lr
